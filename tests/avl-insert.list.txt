.data:00000000 ;
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ; |   This file has been	generated by The Interactive Disassembler (IDA)	   |
.data:00000000 ; |	  Copyright (c)	2009 by	Hex-Rays, <support@hex-rays.com>	   |
.data:00000000 ; |			License	info: 48-313D-7374-F1			   |
.data:00000000 ; |   Aditya Thakur, University of Wisconsin/Computer Sciences Department   |
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ;
.data:00000000 ; Input MD5   : 60FFC06DB226D754F14FF38A2CC7592F
.data:00000000
.data:00000000 ; File Name   : C:\aditya\work\waldo\tests\avl-insert.obj
.data:00000000 ; Format	     : COFF (X386MAGIC)
.data:00000000 ; includelib "LIBCMT"
.data:00000000 ; includelib "OLDNAMES""
.data:00000000
.data:00000000		       .686p
.data:00000000		       .mmx
.data:00000000		       .model flat
.data:00000000 .intel_syntax noprefix
.data:00000000
.data:00000000 ; ===========================================================================
.data:00000000
.data:00000000 ; Segment type: Pure data
.data:00000000 ; Segment permissions: Read/Write
.data:00000000 _data	       segment dword public 'DATA' use32
.data:00000000		       assume cs:_data
.data:00000000 ; char $SG3568[]
.data:00000000 $SG3568	       db 'Out of space!!!',0  ; DATA XREF: _Insert+1Do
.data:00000010 ; char $SG3569[]
.data:00000010 $SG3569	       db '%s',0Ah,0           ; DATA XREF: _Insert+22o
.data:00000010 _data	       ends
.data:00000010
.text:00000014 ; ===========================================================================
.text:00000014
.text:00000014 ; Segment type: Pure code
.text:00000014 ; Segment permissions: Read/Execute
.text:00000014 _text	       segment para public 'CODE' use32
.text:00000014		       assume cs:_text
.text:00000014		       ;org 14h
.text:00000014		       assume es:nothing, ss:nothing, ds:_data,	fs:nothing, gs:nothing
.text:00000014
.text:00000014 ; =============== S U B R O U T I N E =======================================
.text:00000014
.text:00000014 ; Attributes: bp-based frame
.text:00000014
.text:00000014		       public _Insert
.text:00000014 _Insert	       proc near	       ; CODE XREF: _Insert+81p
.text:00000014					       ; _Insert+FAp
.text:00000014
.text:00000014 arg_0	       = dword ptr  8
.text:00000014 arg_4	       = dword ptr  0Ch
.text:00000014
.text:00000014		       push    ebp
.text:00000015		       mov     ebp, esp
.text:00000017		       push    esi
.text:00000018		       cmp     [ebp+arg_4], 0
.text:0000001C		       jnz     short loc_80
.text:0000001E		       push    10h	       ; size_t
.text:00000020		       call    _malloc
.text:00000025		       add     esp, 4
.text:00000028		       mov     [ebp+arg_4], eax
.text:0000002B		       cmp     [ebp+arg_4], 0
.text:0000002F		       jnz     short loc_55
.text:00000031		       push    offset $SG3568  ; "Out of space!!!"
.text:00000036		       push    offset $SG3569  ; "%s\n"
.text:0000003B		       call    ___iob_func
.text:00000040		       add     eax, 40h	; '@'
.text:00000043		       push    eax	       ; FILE *
.text:00000044		       call    _fprintf
.text:00000049		       add     esp, 0Ch
.text:0000004C		       push    1	       ; int
.text:0000004E		       call    _exit
.text:00000053 ; ---------------------------------------------------------------------------
.text:00000053		       jmp     short loc_7B
.text:00000055 ; ---------------------------------------------------------------------------
.text:00000055
.text:00000055 loc_55:				       ; CODE XREF: _Insert+1Bj
.text:00000055		       mov     eax, [ebp+arg_4]
.text:00000058		       mov     ecx, [ebp+arg_0]
.text:0000005B		       mov     [eax], ecx
.text:0000005D		       mov     edx, [ebp+arg_4]
.text:00000060		       mov     dword ptr [edx+0Ch], 0
.text:00000067		       mov     eax, [ebp+arg_4]
.text:0000006A		       mov     dword ptr [eax+8], 0
.text:00000071		       mov     ecx, [ebp+arg_4]
.text:00000074		       mov     dword ptr [ecx+4], 0
.text:0000007B
.text:0000007B loc_7B:				       ; CODE XREF: _Insert+3Fj
.text:0000007B		       jmp     loc_170
.text:00000080 ; ---------------------------------------------------------------------------
.text:00000080
.text:00000080 loc_80:				       ; CODE XREF: _Insert+8j
.text:00000080		       mov     edx, [ebp+arg_4]
.text:00000083		       mov     eax, [ebp+arg_0]
.text:00000086		       cmp     eax, [edx]
.text:00000088		       jge     short loc_F9
.text:0000008A		       mov     ecx, [ebp+arg_4]
.text:0000008D		       mov     edx, [ecx+4]
.text:00000090		       push    edx
.text:00000091		       mov     eax, [ebp+arg_0]
.text:00000094		       push    eax
.text:00000095		       call    _Insert
.text:0000009A		       add     esp, 8
.text:0000009D		       mov     ecx, [ebp+arg_4]
.text:000000A0		       mov     [ecx+4],	eax
.text:000000A3		       mov     edx, [ebp+arg_4]
.text:000000A6		       mov     eax, [edx+4]
.text:000000A9		       push    eax
.text:000000AA		       call    _Height
.text:000000AF		       add     esp, 4
.text:000000B2		       mov     esi, eax
.text:000000B4		       mov     ecx, [ebp+arg_4]
.text:000000B7		       mov     edx, [ecx+8]
.text:000000BA		       push    edx
.text:000000BB		       call    _Height
.text:000000C0		       add     esp, 4
.text:000000C3		       sub     esi, eax
.text:000000C5		       cmp     esi, 2
.text:000000C8		       jnz     short loc_F7
.text:000000CA		       mov     eax, [ebp+arg_4]
.text:000000CD		       mov     ecx, [eax+4]
.text:000000D0		       mov     edx, [ebp+arg_0]
.text:000000D3		       cmp     edx, [ecx]
.text:000000D5		       jge     short loc_E8
.text:000000D7		       mov     eax, [ebp+arg_4]
.text:000000DA		       push    eax
.text:000000DB		       call    _SingleRotateWithLeft
.text:000000E0		       add     esp, 4
.text:000000E3		       mov     [ebp+arg_4], eax
.text:000000E6		       jmp     short loc_F7
.text:000000E8 ; ---------------------------------------------------------------------------
.text:000000E8
.text:000000E8 loc_E8:				       ; CODE XREF: _Insert+C1j
.text:000000E8		       mov     ecx, [ebp+arg_4]
.text:000000EB		       push    ecx
.text:000000EC		       call    _DoubleRotateWithLeft
.text:000000F1		       add     esp, 4
.text:000000F4		       mov     [ebp+arg_4], eax
.text:000000F7
.text:000000F7 loc_F7:				       ; CODE XREF: _Insert+B4j
.text:000000F7					       ; _Insert+D2j
.text:000000F7		       jmp     short loc_170
.text:000000F9 ; ---------------------------------------------------------------------------
.text:000000F9
.text:000000F9 loc_F9:				       ; CODE XREF: _Insert+74j
.text:000000F9		       mov     edx, [ebp+arg_4]
.text:000000FC		       mov     eax, [ebp+arg_0]
.text:000000FF		       cmp     eax, [edx]
.text:00000101		       jle     short loc_170
.text:00000103		       mov     ecx, [ebp+arg_4]
.text:00000106		       mov     edx, [ecx+8]
.text:00000109		       push    edx
.text:0000010A		       mov     eax, [ebp+arg_0]
.text:0000010D		       push    eax
.text:0000010E		       call    _Insert
.text:00000113		       add     esp, 8
.text:00000116		       mov     ecx, [ebp+arg_4]
.text:00000119		       mov     [ecx+8],	eax
.text:0000011C		       mov     edx, [ebp+arg_4]
.text:0000011F		       mov     eax, [edx+8]
.text:00000122		       push    eax
.text:00000123		       call    _Height
.text:00000128		       add     esp, 4
.text:0000012B		       mov     esi, eax
.text:0000012D		       mov     ecx, [ebp+arg_4]
.text:00000130		       mov     edx, [ecx+4]
.text:00000133		       push    edx
.text:00000134		       call    _Height
.text:00000139		       add     esp, 4
.text:0000013C		       sub     esi, eax
.text:0000013E		       cmp     esi, 2
.text:00000141		       jnz     short loc_170
.text:00000143		       mov     eax, [ebp+arg_4]
.text:00000146		       mov     ecx, [eax+8]
.text:00000149		       mov     edx, [ebp+arg_0]
.text:0000014C		       cmp     edx, [ecx]
.text:0000014E		       jle     short loc_161
.text:00000150		       mov     eax, [ebp+arg_4]
.text:00000153		       push    eax
.text:00000154		       call    _SingleRotateWithRight
.text:00000159		       add     esp, 4
.text:0000015C		       mov     [ebp+arg_4], eax
.text:0000015F		       jmp     short loc_170
.text:00000161 ; ---------------------------------------------------------------------------
.text:00000161
.text:00000161 loc_161:				       ; CODE XREF: _Insert+13Aj
.text:00000161		       mov     ecx, [ebp+arg_4]
.text:00000164		       push    ecx
.text:00000165		       call    _DoubleRotateWithRight
.text:0000016A		       add     esp, 4
.text:0000016D		       mov     [ebp+arg_4], eax
.text:00000170
.text:00000170 loc_170:				       ; CODE XREF: _Insert:loc_7Bj
.text:00000170					       ; _Insert:loc_F7j ...
.text:00000170		       mov     edx, [ebp+arg_4]
.text:00000173		       mov     eax, [edx+8]
.text:00000176		       push    eax
.text:00000177		       call    _Height
.text:0000017C		       add     esp, 4
.text:0000017F		       push    eax
.text:00000180		       mov     ecx, [ebp+arg_4]
.text:00000183		       mov     edx, [ecx+4]
.text:00000186		       push    edx
.text:00000187		       call    _Height
.text:0000018C		       add     esp, 4
.text:0000018F		       push    eax
.text:00000190		       call    _Max
.text:00000195		       add     esp, 8
.text:00000198		       add     eax, 1
.text:0000019B		       mov     ecx, [ebp+arg_4]
.text:0000019E		       mov     [ecx+0Ch], eax
.text:000001A1		       mov     eax, [ebp+arg_4]
.text:000001A4		       pop     esi
.text:000001A5		       pop     ebp
.text:000001A6		       retn
.text:000001A6 _Insert	       endp
.text:000001A6
.text:000001A6 ; ---------------------------------------------------------------------------
.text:000001A7		       db 0Dh dup(0CCh)
.text:000001B4
.text:000001B4 ; =============== S U B R O U T I N E =======================================
.text:000001B4
.text:000001B4 ; Attributes: bp-based frame
.text:000001B4
.text:000001B4 _Height	       proc near	       ; CODE XREF: _Insert+96p
.text:000001B4					       ; _Insert+A7p ...
.text:000001B4
.text:000001B4 arg_0	       = dword ptr  8
.text:000001B4
.text:000001B4		       push    ebp
.text:000001B5		       mov     ebp, esp
.text:000001B7		       cmp     [ebp+arg_0], 0
.text:000001BB		       jnz     short loc_1C4
.text:000001BD		       or      eax, 0FFFFFFFFh
.text:000001C0		       jmp     short loc_1CA
.text:000001C2 ; ---------------------------------------------------------------------------
.text:000001C2		       jmp     short loc_1CA
.text:000001C4 ; ---------------------------------------------------------------------------
.text:000001C4
.text:000001C4 loc_1C4:				       ; CODE XREF: _Height+7j
.text:000001C4		       mov     eax, [ebp+arg_0]
.text:000001C7		       mov     eax, [eax+0Ch]
.text:000001CA
.text:000001CA loc_1CA:				       ; CODE XREF: _Height+Cj
.text:000001CA					       ; _Height+Ej
.text:000001CA		       pop     ebp
.text:000001CB		       retn
.text:000001CB _Height	       endp
.text:000001CB
.text:000001CB ; ---------------------------------------------------------------------------
.text:000001CC		       db 8 dup(0CCh)
.text:000001D4
.text:000001D4 ; =============== S U B R O U T I N E =======================================
.text:000001D4
.text:000001D4 ; Attributes: bp-based frame
.text:000001D4
.text:000001D4 _Max	       proc near	       ; CODE XREF: _Insert+17Cp
.text:000001D4					       ; _SingleRotateWithLeft+42p ...
.text:000001D4
.text:000001D4 var_4	       = dword ptr -4
.text:000001D4 arg_0	       = dword ptr  8
.text:000001D4 arg_4	       = dword ptr  0Ch
.text:000001D4
.text:000001D4		       push    ebp
.text:000001D5		       mov     ebp, esp
.text:000001D7		       push    ecx
.text:000001D8		       mov     eax, [ebp+arg_0]
.text:000001DB		       cmp     eax, [ebp+arg_4]
.text:000001DE		       jle     short loc_1E8
.text:000001E0		       mov     ecx, [ebp+arg_0]
.text:000001E3		       mov     [ebp+var_4], ecx
.text:000001E6		       jmp     short loc_1EE
.text:000001E8 ; ---------------------------------------------------------------------------
.text:000001E8
.text:000001E8 loc_1E8:				       ; CODE XREF: _Max+Aj
.text:000001E8		       mov     edx, [ebp+arg_4]
.text:000001EB		       mov     [ebp+var_4], edx
.text:000001EE
.text:000001EE loc_1EE:				       ; CODE XREF: _Max+12j
.text:000001EE		       mov     eax, [ebp+var_4]
.text:000001F1		       mov     esp, ebp
.text:000001F3		       pop     ebp
.text:000001F4		       retn
.text:000001F4 _Max	       endp
.text:000001F4
.text:000001F4 ; ---------------------------------------------------------------------------
.text:000001F5		       db 0Fh dup(0CCh)
.text:00000204
.text:00000204 ; =============== S U B R O U T I N E =======================================
.text:00000204
.text:00000204 ; Attributes: bp-based frame
.text:00000204
.text:00000204 _SingleRotateWithLeft proc near	       ; CODE XREF: _Insert+C7p
.text:00000204					       ; _DoubleRotateWithLeft+1Cp ...
.text:00000204
.text:00000204 var_4	       = dword ptr -4
.text:00000204 arg_0	       = dword ptr  8
.text:00000204
.text:00000204		       push    ebp
.text:00000205		       mov     ebp, esp
.text:00000207		       push    ecx
.text:00000208		       mov     eax, [ebp+arg_0]
.text:0000020B		       mov     ecx, [eax+4]
.text:0000020E		       mov     [ebp+var_4], ecx
.text:00000211		       mov     edx, [ebp+arg_0]
.text:00000214		       mov     eax, [ebp+var_4]
.text:00000217		       mov     ecx, [eax+8]
.text:0000021A		       mov     [edx+4],	ecx
.text:0000021D		       mov     edx, [ebp+var_4]
.text:00000220		       mov     eax, [ebp+arg_0]
.text:00000223		       mov     [edx+8],	eax
.text:00000226		       mov     ecx, [ebp+arg_0]
.text:00000229		       mov     edx, [ecx+8]
.text:0000022C		       push    edx
.text:0000022D		       call    _Height
.text:00000232		       add     esp, 4
.text:00000235		       push    eax
.text:00000236		       mov     eax, [ebp+arg_0]
.text:00000239		       mov     ecx, [eax+4]
.text:0000023C		       push    ecx
.text:0000023D		       call    _Height
.text:00000242		       add     esp, 4
.text:00000245		       push    eax
.text:00000246		       call    _Max
.text:0000024B		       add     esp, 8
.text:0000024E		       add     eax, 1
.text:00000251		       mov     edx, [ebp+arg_0]
.text:00000254		       mov     [edx+0Ch], eax
.text:00000257		       mov     eax, [ebp+arg_0]
.text:0000025A		       mov     ecx, [eax+0Ch]
.text:0000025D		       push    ecx
.text:0000025E		       mov     edx, [ebp+var_4]
.text:00000261		       mov     eax, [edx+4]
.text:00000264		       push    eax
.text:00000265		       call    _Height
.text:0000026A		       add     esp, 4
.text:0000026D		       push    eax
.text:0000026E		       call    _Max
.text:00000273		       add     esp, 8
.text:00000276		       add     eax, 1
.text:00000279		       mov     ecx, [ebp+var_4]
.text:0000027C		       mov     [ecx+0Ch], eax
.text:0000027F		       mov     eax, [ebp+var_4]
.text:00000282		       mov     esp, ebp
.text:00000284		       pop     ebp
.text:00000285		       retn
.text:00000285 _SingleRotateWithLeft endp
.text:00000285
.text:00000285 ; ---------------------------------------------------------------------------
.text:00000286		       db 0Eh dup(0CCh)
.text:00000294
.text:00000294 ; =============== S U B R O U T I N E =======================================
.text:00000294
.text:00000294 ; Attributes: bp-based frame
.text:00000294
.text:00000294 _SingleRotateWithRight proc near	       ; CODE XREF: _Insert+140p
.text:00000294					       ; _DoubleRotateWithLeft+Ap ...
.text:00000294
.text:00000294 var_4	       = dword ptr -4
.text:00000294 arg_0	       = dword ptr  8
.text:00000294
.text:00000294		       push    ebp
.text:00000295		       mov     ebp, esp
.text:00000297		       push    ecx
.text:00000298		       mov     eax, [ebp+arg_0]
.text:0000029B		       mov     ecx, [eax+8]
.text:0000029E		       mov     [ebp+var_4], ecx
.text:000002A1		       mov     edx, [ebp+arg_0]
.text:000002A4		       mov     eax, [ebp+var_4]
.text:000002A7		       mov     ecx, [eax+4]
.text:000002AA		       mov     [edx+8],	ecx
.text:000002AD		       mov     edx, [ebp+var_4]
.text:000002B0		       mov     eax, [ebp+arg_0]
.text:000002B3		       mov     [edx+4],	eax
.text:000002B6		       mov     ecx, [ebp+arg_0]
.text:000002B9		       mov     edx, [ecx+8]
.text:000002BC		       push    edx
.text:000002BD		       call    _Height
.text:000002C2		       add     esp, 4
.text:000002C5		       push    eax
.text:000002C6		       mov     eax, [ebp+arg_0]
.text:000002C9		       mov     ecx, [eax+4]
.text:000002CC		       push    ecx
.text:000002CD		       call    _Height
.text:000002D2		       add     esp, 4
.text:000002D5		       push    eax
.text:000002D6		       call    _Max
.text:000002DB		       add     esp, 8
.text:000002DE		       add     eax, 1
.text:000002E1		       mov     edx, [ebp+arg_0]
.text:000002E4		       mov     [edx+0Ch], eax
.text:000002E7		       mov     eax, [ebp+arg_0]
.text:000002EA		       mov     ecx, [eax+0Ch]
.text:000002ED		       push    ecx
.text:000002EE		       mov     edx, [ebp+var_4]
.text:000002F1		       mov     eax, [edx+8]
.text:000002F4		       push    eax
.text:000002F5		       call    _Height
.text:000002FA		       add     esp, 4
.text:000002FD		       push    eax
.text:000002FE		       call    _Max
.text:00000303		       add     esp, 8
.text:00000306		       add     eax, 1
.text:00000309		       mov     ecx, [ebp+var_4]
.text:0000030C		       mov     [ecx+0Ch], eax
.text:0000030F		       mov     eax, [ebp+var_4]
.text:00000312		       mov     esp, ebp
.text:00000314		       pop     ebp
.text:00000315		       retn
.text:00000315 _SingleRotateWithRight endp
.text:00000315
.text:00000315 ; ---------------------------------------------------------------------------
.text:00000316		       db 0Eh dup(0CCh)
.text:00000324
.text:00000324 ; =============== S U B R O U T I N E =======================================
.text:00000324
.text:00000324 ; Attributes: bp-based frame
.text:00000324
.text:00000324 _DoubleRotateWithLeft proc near	       ; CODE XREF: _Insert+D8p
.text:00000324
.text:00000324 arg_0	       = dword ptr  8
.text:00000324
.text:00000324		       push    ebp
.text:00000325		       mov     ebp, esp
.text:00000327		       mov     eax, [ebp+arg_0]
.text:0000032A		       mov     ecx, [eax+4]
.text:0000032D		       push    ecx
.text:0000032E		       call    _SingleRotateWithRight
.text:00000333		       add     esp, 4
.text:00000336		       mov     edx, [ebp+arg_0]
.text:00000339		       mov     [edx+4],	eax
.text:0000033C		       mov     eax, [ebp+arg_0]
.text:0000033F		       push    eax
.text:00000340		       call    _SingleRotateWithLeft
.text:00000345		       add     esp, 4
.text:00000348		       pop     ebp
.text:00000349		       retn
.text:00000349 _DoubleRotateWithLeft endp
.text:00000349
.text:00000349 ; ---------------------------------------------------------------------------
.text:0000034A		       db 0Ah dup(0CCh)
.text:00000354
.text:00000354 ; =============== S U B R O U T I N E =======================================
.text:00000354
.text:00000354 ; Attributes: bp-based frame
.text:00000354
.text:00000354 _DoubleRotateWithRight proc near	       ; CODE XREF: _Insert+151p
.text:00000354
.text:00000354 arg_0	       = dword ptr  8
.text:00000354
.text:00000354		       push    ebp
.text:00000355		       mov     ebp, esp
.text:00000357		       mov     eax, [ebp+arg_0]
.text:0000035A		       mov     ecx, [eax+8]
.text:0000035D		       push    ecx
.text:0000035E		       call    _SingleRotateWithLeft
.text:00000363		       add     esp, 4
.text:00000366		       mov     edx, [ebp+arg_0]
.text:00000369		       mov     [edx+8],	eax
.text:0000036C		       mov     eax, [ebp+arg_0]
.text:0000036F		       push    eax
.text:00000370		       call    _SingleRotateWithRight
.text:00000375		       add     esp, 4
.text:00000378		       pop     ebp
.text:00000379		       retn
.text:00000379 _DoubleRotateWithRight endp
.text:00000379
.text:00000379 _text	       ends
.text:00000379
UNDEF:00000380 ; ===========================================================================
UNDEF:00000380
UNDEF:00000380 ; Segment type: Externs
UNDEF:00000380 ; UNDEF
UNDEF:00000380 ; void __cdecl exit(int)
UNDEF:00000380		       extrn _exit:near	       ; CODE XREF: _Insert+3Ap
UNDEF:00000384 ; int fprintf(FILE *, const char	*, ...)
UNDEF:00000384		       extrn _fprintf:near     ; CODE XREF: _Insert+30p
UNDEF:00000388		       extrn ___iob_func:near  ; CODE XREF: _Insert+27p
UNDEF:0000038C ; void *__cdecl malloc(size_t)
UNDEF:0000038C		       extrn _malloc:near      ; CODE XREF: _Insert+Cp
UNDEF:0000038C
UNDEF:0000038C
UNDEF:0000038C		       end
