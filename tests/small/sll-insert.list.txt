.data:00000000 ;
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ; |   This file has been	generated by The Interactive Disassembler (IDA)	   |
.data:00000000 ; |	  Copyright (c)	2009 by	Hex-Rays, <support@hex-rays.com>	   |
.data:00000000 ; |			License	info: 48-313D-7374-F1			   |
.data:00000000 ; |   Aditya Thakur, University of Wisconsin/Computer Sciences Department   |
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ;
.data:00000000 ; Input MD5   : D84DF9E9D7B25ACC2C9E03F4E8A88902
.data:00000000
.data:00000000 ; File Name   : C:\aditya\work\waldo\tests\small\sll-insert.obj
.data:00000000 ; Format	     : COFF (X386MAGIC)
.data:00000000 ; includelib "LIBCMT"
.data:00000000 ; includelib "OLDNAMES""
.data:00000000
.data:00000000		       .686p
.data:00000000		       .mmx
.data:00000000		       .model flat
.data:00000000 .intel_syntax noprefix
.data:00000000
.data:00000000 ; ===========================================================================
.data:00000000
.data:00000000 ; Segment type: Pure data
.data:00000000 ; Segment permissions: Read/Write
.data:00000000 _data	       segment dword public 'DATA' use32
.data:00000000		       assume cs:_data
.data:00000000 $SG3558	       db 'Out of space!!!',0  ; DATA XREF: _Insert+17o
.data:00000010 ; char $SG3559[]
.data:00000010 $SG3559	       db '%s',0Ah,0           ; DATA XREF: _Insert+1Co
.data:00000010 _data	       ends
.data:00000010
.text:00000014 ; ===========================================================================
.text:00000014
.text:00000014 ; Segment type: Pure code
.text:00000014 ; Segment permissions: Read/Execute
.text:00000014 _text	       segment para public 'CODE' use32
.text:00000014		       assume cs:_text
.text:00000014		       ;org 14h
.text:00000014		       assume es:nothing, ss:nothing, ds:_data,	fs:nothing, gs:nothing
.text:00000014
.text:00000014 ; =============== S U B R O U T I N E =======================================
.text:00000014
.text:00000014 ; Attributes: bp-based frame
.text:00000014
.text:00000014		       public _Insert
.text:00000014 _Insert	       proc near
.text:00000014
.text:00000014 var_4	       = dword ptr -4
.text:00000014 arg_0	       = dword ptr  8
.text:00000014 arg_8	       = dword ptr  10h
.text:00000014
.text:00000014		       push    ebp
.text:00000015		       mov     ebp, esp
.text:00000017		       push    ecx
.text:00000018		       push    8	       ; size_t
.text:0000001A		       call    _malloc
.text:0000001F		       add     esp, 4
.text:00000022		       mov     [ebp+var_4], eax
.text:00000025		       cmp     [ebp+var_4], 0
.text:00000029		       jnz     short loc_4D
.text:0000002B		       push    offset $SG3558  ; "Out of space!!!"
.text:00000030		       push    offset $SG3559  ; "%s\n"
.text:00000035		       call    ___iob_func
.text:0000003A		       add     eax, 40h	; '@'
.text:0000003D		       push    eax	       ; FILE *
.text:0000003E		       call    _fprintf
.text:00000043		       add     esp, 0Ch
.text:00000046		       push    1	       ; int
.text:00000048		       call    _exit
.text:0000004D ; ---------------------------------------------------------------------------
.text:0000004D
.text:0000004D loc_4D:				       ; CODE XREF: _Insert+15j
.text:0000004D		       mov     eax, [ebp+var_4]
.text:00000050		       mov     ecx, [ebp+arg_0]
.text:00000053		       mov     [eax], ecx
.text:00000055		       mov     edx, [ebp+var_4]
.text:00000058		       mov     eax, [ebp+arg_8]
.text:0000005B		       mov     ecx, [eax+4]
.text:0000005E		       mov     [edx+4],	ecx
.text:00000061		       mov     edx, [ebp+arg_8]
.text:00000064		       mov     eax, [ebp+var_4]
.text:00000067		       mov     [edx+4],	eax
.text:0000006A		       mov     esp, ebp
.text:0000006C		       pop     ebp
.text:0000006D		       retn
.text:0000006D _Insert	       endp
.text:0000006D
.text:0000006D _text	       ends
.text:0000006D
UNDEF:00000070 ; ===========================================================================
UNDEF:00000070
UNDEF:00000070 ; Segment type: Externs
UNDEF:00000070 ; UNDEF
UNDEF:00000070 ; void __cdecl exit(int)
UNDEF:00000070		       extrn _exit:near	       ; CODE XREF: _Insert+34p
UNDEF:00000074 ; int fprintf(FILE *, const char	*, ...)
UNDEF:00000074		       extrn _fprintf:near     ; CODE XREF: _Insert+2Ap
UNDEF:00000078		       extrn ___iob_func:near  ; CODE XREF: _Insert+21p
UNDEF:0000007C ; void *__cdecl malloc(size_t)
UNDEF:0000007C		       extrn _malloc:near      ; CODE XREF: _Insert+6p
UNDEF:0000007C
UNDEF:0000007C
UNDEF:0000007C		       end
