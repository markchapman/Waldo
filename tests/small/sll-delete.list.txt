.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been	generated by The Interactive Disassembler (IDA)	   |
.text:00000000 ; |	  Copyright (c)	2009 by	Hex-Rays, <support@hex-rays.com>	   |
.text:00000000 ; |			License	info: 48-313D-7374-F1			   |
.text:00000000 ; |   Aditya Thakur, University of Wisconsin/Computer Sciences Department   |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : F8A6BF6347E5C733074D052AAC750176
.text:00000000
.text:00000000 ; File Name   : C:\aditya\work\waldo\tests\small\sll-delete.obj
.text:00000000 ; Format	     : COFF (X386MAGIC)
.text:00000000 ; includelib "LIBCMT"
.text:00000000 ; includelib "OLDNAMES""
.text:00000000
.text:00000000		       .686p
.text:00000000		       .mmx
.text:00000000		       .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text	       segment para public 'CODE' use32
.text:00000000		       assume cs:_text
.text:00000000		       assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000		       public _IsLast
.text:00000000 _IsLast	       proc near
.text:00000000
.text:00000000 arg_0	       = dword ptr  8
.text:00000000
.text:00000000		       push    ebp
.text:00000001		       mov     ebp, esp
.text:00000003		       mov     eax, [ebp+arg_0]
.text:00000006		       xor     ecx, ecx
.text:00000008		       cmp     dword ptr [eax+4], 0
.text:0000000C		       setz    cl
.text:0000000F		       mov     eax, ecx
.text:00000011		       pop     ebp
.text:00000012		       retn
.text:00000012 _IsLast	       endp
.text:00000012
.text:00000012 ; ---------------------------------------------------------------------------
.text:00000013		       align 10h
.text:00000020
.text:00000020 ; =============== S U B R O U T I N E =======================================
.text:00000020
.text:00000020 ; Attributes: bp-based frame
.text:00000020
.text:00000020		       public _Delete
.text:00000020 _Delete	       proc near
.text:00000020
.text:00000020 var_8	       = dword ptr -8
.text:00000020 Memory	       = dword ptr -4
.text:00000020 arg_0	       = dword ptr  8
.text:00000020 arg_4	       = dword ptr  0Ch
.text:00000020
.text:00000020		       push    ebp
.text:00000021		       mov     ebp, esp
.text:00000023		       sub     esp, 8
.text:00000026		       mov     eax, [ebp+arg_4]
.text:00000029		       mov     [ebp+var_8], eax
.text:0000002C
.text:0000002C loc_2C:				       ; CODE XREF: _Delete+2Bj
.text:0000002C		       mov     ecx, [ebp+var_8]
.text:0000002F		       cmp     dword ptr [ecx+4], 0
.text:00000033		       jz      short loc_4D
.text:00000035		       mov     edx, [ebp+var_8]
.text:00000038		       mov     eax, [edx+4]
.text:0000003B		       mov     ecx, [eax]
.text:0000003D		       cmp     ecx, [ebp+arg_0]
.text:00000040		       jz      short loc_4D
.text:00000042		       mov     edx, [ebp+var_8]
.text:00000045		       mov     eax, [edx+4]
.text:00000048		       mov     [ebp+var_8], eax
.text:0000004B		       jmp     short loc_2C
.text:0000004D ; ---------------------------------------------------------------------------
.text:0000004D
.text:0000004D loc_4D:				       ; CODE XREF: _Delete+13j
.text:0000004D					       ; _Delete+20j
.text:0000004D		       mov     ecx, [ebp+var_8]
.text:00000050		       cmp     dword ptr [ecx+4], 0
.text:00000054		       jz      short loc_77
.text:00000056		       mov     edx, [ebp+var_8]
.text:00000059		       mov     eax, [edx+4]
.text:0000005C		       mov     [ebp+Memory], eax
.text:0000005F		       mov     ecx, [ebp+var_8]
.text:00000062		       mov     edx, [ebp+Memory]
.text:00000065		       mov     eax, [edx+4]
.text:00000068		       mov     [ecx+4],	eax
.text:0000006B		       mov     ecx, [ebp+Memory]
.text:0000006E		       push    ecx	       ; Memory
.text:0000006F		       call    _free
.text:00000074		       add     esp, 4
.text:00000077
.text:00000077 loc_77:				       ; CODE XREF: _Delete+34j
.text:00000077		       mov     esp, ebp
.text:00000079		       pop     ebp
.text:0000007A		       retn
.text:0000007A _Delete	       endp
.text:0000007A
.text:0000007A _text	       ends
.text:0000007A
UNDEF:00000080 ; ===========================================================================
UNDEF:00000080
UNDEF:00000080 ; Segment type: Externs
UNDEF:00000080 ; UNDEF
UNDEF:00000080 ; void __cdecl free(void	*Memory)
UNDEF:00000080		       extrn _free:near	       ; CODE XREF: _Delete+4Fp
UNDEF:00000080
UNDEF:00000080
UNDEF:00000080		       end
