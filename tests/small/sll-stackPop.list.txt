.data:00000000 ;
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ; |   This file has been	generated by The Interactive Disassembler (IDA)	   |
.data:00000000 ; |	  Copyright (c)	2009 by	Hex-Rays, <support@hex-rays.com>	   |
.data:00000000 ; |			License	info: 48-313D-7374-F1			   |
.data:00000000 ; |   Aditya Thakur, University of Wisconsin/Computer Sciences Department   |
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ;
.data:00000000 ; Input MD5   : 2A7B3D0231E47110C6B0BD0061B038D8
.data:00000000
.data:00000000 ; File Name   : C:\aditya\work\waldo\tests\small\sll-stackPop.obj
.data:00000000 ; Format	     : COFF (X386MAGIC)
.data:00000000 ; includelib "LIBCMT"
.data:00000000 ; includelib "OLDNAMES""
.data:00000000
.data:00000000		       .686p
.data:00000000		       .mmx
.data:00000000		       .model flat
.data:00000000 .intel_syntax noprefix
.data:00000000
.data:00000000 ; ===========================================================================
.data:00000000
.data:00000000 ; Segment type: Pure data
.data:00000000 ; Segment permissions: Read/Write
.data:00000000 _data	       segment dword public 'DATA' use32
.data:00000000		       assume cs:_data
.data:00000000 ; char $SG3526[]
.data:00000000 $SG3526	       db 'Empty stack',0      ; DATA XREF: _Pop+Do
.data:0000000C ; char $SG3527[]
.data:0000000C $SG3527	       db '%s',0Ah,0           ; DATA XREF: _Pop+12o
.data:0000000C _data	       ends
.data:0000000C
.text:00000010 ; ===========================================================================
.text:00000010
.text:00000010 ; Segment type: Pure code
.text:00000010 ; Segment permissions: Read/Execute
.text:00000010 _text	       segment para public 'CODE' use32
.text:00000010		       assume cs:_text
.text:00000010		       ;org 10h
.text:00000010		       assume es:nothing, ss:nothing, ds:_data,	fs:nothing, gs:nothing
.text:00000010
.text:00000010 ; =============== S U B R O U T I N E =======================================
.text:00000010
.text:00000010 ; Attributes: bp-based frame
.text:00000010
.text:00000010		       public _Pop
.text:00000010 _Pop	       proc near
.text:00000010
.text:00000010 var_4	       = dword ptr -4
.text:00000010 arg_0	       = dword ptr  8
.text:00000010
.text:00000010		       push    ebp
.text:00000011		       mov     ebp, esp
.text:00000013		       push    ecx
.text:00000014		       mov     eax, [ebp+arg_0]
.text:00000017		       cmp     dword ptr [eax+4], 0
.text:0000001B		       jnz     short loc_41
.text:0000001D		       push    offset $SG3526  ; "Empty	stack"
.text:00000022		       push    offset $SG3527  ; "%s\n"
.text:00000027		       call    ___iob_func
.text:0000002C		       add     eax, 40h	; '@'
.text:0000002F		       push    eax	       ; FILE *
.text:00000030		       call    _fprintf
.text:00000035		       add     esp, 0Ch
.text:00000038		       push    1	       ; int
.text:0000003A		       call    _exit
.text:0000003F ; ---------------------------------------------------------------------------
.text:0000003F		       jmp     short loc_65
.text:00000041 ; ---------------------------------------------------------------------------
.text:00000041
.text:00000041 loc_41:				       ; CODE XREF: _Pop+Bj
.text:00000041		       mov     ecx, [ebp+arg_0]
.text:00000044		       mov     edx, [ecx+4]
.text:00000047		       mov     [ebp+var_4], edx
.text:0000004A		       mov     eax, [ebp+arg_0]
.text:0000004D		       mov     ecx, [eax+4]
.text:00000050		       mov     edx, [ebp+arg_0]
.text:00000053		       mov     eax, [ecx+4]
.text:00000056		       mov     [edx+4],	eax
.text:00000059		       mov     ecx, [ebp+var_4]
.text:0000005C		       push    ecx	       ; void *
.text:0000005D		       call    _free
.text:00000062		       add     esp, 4
.text:00000065
.text:00000065 loc_65:				       ; CODE XREF: _Pop+2Fj
.text:00000065		       mov     esp, ebp
.text:00000067		       pop     ebp
.text:00000068		       retn
.text:00000068 _Pop	       endp
.text:00000068
.text:00000068 _text	       ends
.text:00000068
UNDEF:00000070 ; ===========================================================================
UNDEF:00000070
UNDEF:00000070 ; Segment type: Externs
UNDEF:00000070 ; UNDEF
UNDEF:00000070 ; void __cdecl free(void	*)
UNDEF:00000070		       extrn _free:near	       ; CODE XREF: _Pop+4Dp
UNDEF:00000074 ; void __cdecl exit(int)
UNDEF:00000074		       extrn _exit:near	       ; CODE XREF: _Pop+2Ap
UNDEF:00000078 ; int fprintf(FILE *, const char	*, ...)
UNDEF:00000078		       extrn _fprintf:near     ; CODE XREF: _Pop+20p
UNDEF:0000007C		       extrn ___iob_func:near  ; CODE XREF: _Pop+17p
UNDEF:0000007C
UNDEF:0000007C
UNDEF:0000007C		       end
