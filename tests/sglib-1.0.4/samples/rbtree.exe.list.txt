;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	   Copyright (c) 2009 by Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-313D-7374-F1			    |
; |   Aditya Thakur, University	of Wisconsin/Computer Sciences Department   |
; +-------------------------------------------------------------------------+
;
.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |   This file has been	generated by The Interactive Disassembler (IDA)	   |
.text:00401000 ; |	  Copyright (c)	2009 by	Hex-Rays, <support@hex-rays.com>	   |
.text:00401000 ; |			License	info: 48-313D-7374-F1			   |
.text:00401000 ; |   Aditya Thakur, University of Wisconsin/Computer Sciences Department   |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input MD5   : ECC7B082E726346AD684EBDBBAB4D0C9
.text:00401000
.text:00401000 ; File Name   : C:\aditya\work\waldo\tests\sglib-1.0.4\samples\rbtree.exe
.text:00401000 ; Format	     : Portable	executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size		       : 00002438 (   9272.)
.text:00401000 ; Section size in file	       : 00002600 (   9728.)
.text:00401000 ; Offset	to raw data for	section: 00000400
.text:00401000 ; Flags 60500060: Text Data Executable Readable
.text:00401000 ; Alignment     : 16 bytes
.text:00401000
.text:00401000		       .686p
.text:00401000		       .mmx
.text:00401000		       .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text	       segment para public 'CODE' use32
.text:00401000		       assume cs:_text
.text:00401000		       ;org 401000h
.text:00401000		       assume es:nothing, ss:nothing, ds:_data,	fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: bp-based frame
.text:00401000
.text:00401000		       public start
.text:00401000 start	       proc near
.text:00401000
.text:00401000 var_28	       = dword ptr -28h
.text:00401000 var_24	       = dword ptr -24h
.text:00401000 var_20	       = dword ptr -20h
.text:00401000 var_2	       = word ptr -2
.text:00401000
.text:00401000		       push    ebp
.text:00401001		       mov     ebp, esp
.text:00401003		       sub     esp, 28h
.text:00401006		       and     esp, 0FFFFFFF0h
.text:00401009		       fnstcw  [ebp+var_2]
.text:0040100C		       movzx   eax, [ebp+var_2]
.text:00401010		       and     ax, 0F0C0h
.text:00401014		       mov     [ebp+var_2], ax
.text:00401018		       movzx   eax, [ebp+var_2]
.text:0040101C		       or      ax, 33Fh
.text:00401020		       mov     [ebp+var_2], ax
.text:00401024		       fldcw   [ebp+var_2]
.text:00401027		       mov     [esp+28h+var_28], offset	loc_402D0E
.text:0040102E		       call    sub_402E70
.text:00401033		       mov     [esp+28h+var_20], 0
.text:0040103B		       mov     [esp+28h+var_24], 0
.text:00401043		       mov     [esp+28h+var_28], 0
.text:0040104A		       call    sub_402EA0
.text:0040104F		       mov     [esp+28h+var_20], 0
.text:00401057		       mov     [esp+28h+var_24], 0
.text:0040105F		       mov     [esp+28h+var_28], 0
.text:00401066		       call    sub_402EB0
.text:0040106B		       mov     [esp+28h+var_20], 0
.text:00401073		       mov     [esp+28h+var_24], 0
.text:0040107B		       mov     [esp+28h+var_28], 0
.text:00401082		       call    sub_402EC0
.text:00401087		       mov     [esp+28h+var_20], 0
.text:0040108F		       mov     [esp+28h+var_24], 0
.text:00401097		       mov     [esp+28h+var_28], 0
.text:0040109E		       call    sub_402ED0
.text:004010A3		       leave
.text:004010A4		       retn
.text:004010A4 start	       endp
.text:004010A4
.text:004010A4 ; ---------------------------------------------------------------------------
.text:004010A5		       align 10h
.text:004010B0
.text:004010B0 loc_4010B0:			       ; CODE XREF: .text:00403404j
.text:004010B0		       push    ebp
.text:004010B1		       mov     ebp, esp
.text:004010B3		       sub     esp, 8
.text:004010B6		       mov     dword ptr [esp],	offset aCyggcc_s1_dll ;	"cyggcc_s-1.dll"
.text:004010BD		       call    GetModuleHandleA
.text:004010C2		       sub     esp, 4
.text:004010C5		       test    eax, eax
.text:004010C7		       jz      short loc_401130
.text:004010C9		       mov     dword ptr [esp+4], offset a__register_fra ; "__register_frame_info"
.text:004010D1		       mov     [esp], eax
.text:004010D4		       call    GetProcAddress
.text:004010D9		       sub     esp, 8
.text:004010DC		       test    eax, eax
.text:004010DE		       jz      short loc_401130
.text:004010E0
.text:004010E0 loc_4010E0:			       ; CODE XREF: .text:00401139j
.text:004010E0		       mov     dword ptr [esp+4], offset dword_406000
.text:004010E8		       mov     dword ptr [esp],	offset dword_405000
.text:004010EF		       call    eax
.text:004010F1
.text:004010F1 loc_4010F1:			       ; CODE XREF: .text:00401137j
.text:004010F1		       mov     eax, dword_404560
.text:004010F6		       test    eax, eax
.text:004010F8		       jz      short locret_40112D
.text:004010FA		       mov     dword ptr [esp],	offset aCyggcj9_dll ; "cyggcj-9.dll"
.text:00401101		       call    GetModuleHandleA
.text:00401106		       sub     esp, 4
.text:00401109		       test    eax, eax
.text:0040110B		       jz      short loc_401140
.text:0040110D		       mov     dword ptr [esp+4], offset a_jv_registercl ; "_Jv_RegisterClasses"
.text:00401115		       mov     [esp], eax
.text:00401118		       call    GetProcAddress
.text:0040111D		       sub     esp, 8
.text:00401120		       test    eax, eax
.text:00401122		       jz      short loc_401140
.text:00401124
.text:00401124 loc_401124:			       ; CODE XREF: .text:00401147j
.text:00401124		       mov     dword ptr [esp],	offset dword_404560
.text:0040112B		       call    eax
.text:0040112D
.text:0040112D locret_40112D:			       ; CODE XREF: .text:004010F8j
.text:0040112D		       leave
.text:0040112E		       retn
.text:0040112E ; ---------------------------------------------------------------------------
.text:0040112F		       align 10h
.text:00401130
.text:00401130 loc_401130:			       ; CODE XREF: .text:004010C7j
.text:00401130					       ; .text:004010DEj
.text:00401130		       mov     eax, off_404000
.text:00401135		       test    eax, eax
.text:00401137		       jz      short loc_4010F1
.text:00401139		       jmp     short loc_4010E0
.text:00401139 ; ---------------------------------------------------------------------------
.text:0040113B		       align 10h
.text:00401140
.text:00401140 loc_401140:			       ; CODE XREF: .text:0040110Bj
.text:00401140					       ; .text:00401122j
.text:00401140		       mov     eax, dword_404008
.text:00401145		       test    eax, eax
.text:00401147		       jnz     short loc_401124
.text:00401149		       leave
.text:0040114A		       retn
.text:0040114A ; ---------------------------------------------------------------------------
.text:0040114B		       align 10h
.text:00401150
.text:00401150 loc_401150:			       ; CODE XREF: .text:00403414j
.text:00401150		       push    ebp
.text:00401151		       mov     ebp, esp
.text:00401153		       sub     esp, 8
.text:00401156		       mov     dword ptr [esp],	offset aCyggcc_s1_dll ;	"cyggcc_s-1.dll"
.text:0040115D		       call    GetModuleHandleA
.text:00401162		       sub     esp, 4
.text:00401165		       test    eax, eax
.text:00401167		       jz      short loc_401190
.text:00401169		       mov     dword ptr [esp+4], offset a__deregister_f ; "__deregister_frame_info"
.text:00401171		       mov     [esp], eax
.text:00401174		       call    GetProcAddress
.text:00401179		       sub     esp, 8
.text:0040117C		       test    eax, eax
.text:0040117E		       jz      short loc_401190
.text:00401180
.text:00401180 loc_401180:			       ; CODE XREF: .text:00401197j
.text:00401180		       mov     dword ptr [esp],	offset dword_405000
.text:00401187		       call    eax
.text:00401189		       leave
.text:0040118A		       retn
.text:0040118A ; ---------------------------------------------------------------------------
.text:0040118B		       align 10h
.text:00401190
.text:00401190 loc_401190:			       ; CODE XREF: .text:00401167j
.text:00401190					       ; .text:0040117Ej
.text:00401190		       mov     eax, off_404004
.text:00401195		       test    eax, eax
.text:00401197		       jnz     short loc_401180
.text:00401199		       leave
.text:0040119A		       retn
.text:0040119A ; ---------------------------------------------------------------------------
.text:0040119B		       align 10h
.text:004011A0
.text:004011A0 ; =============== S U B R O U T I N E =======================================
.text:004011A0
.text:004011A0 ; Attributes: bp-based frame
.text:004011A0
.text:004011A0 sub_4011A0      proc near	       ; CODE XREF: sub_401FE8+72p
.text:004011A0
.text:004011A0 var_28	       = dword ptr -28h
.text:004011A0 var_24	       = dword ptr -24h
.text:004011A0 var_20	       = dword ptr -20h
.text:004011A0 var_1C	       = dword ptr -1Ch
.text:004011A0 var_18	       = dword ptr -18h
.text:004011A0 var_14	       = dword ptr -14h
.text:004011A0 var_10	       = dword ptr -10h
.text:004011A0 var_C	       = dword ptr -0Ch
.text:004011A0 var_8	       = dword ptr -8
.text:004011A0 var_4	       = dword ptr -4
.text:004011A0 arg_0	       = dword ptr  8
.text:004011A0
.text:004011A0		       push    ebp
.text:004011A1		       mov     ebp, esp
.text:004011A3		       sub     esp, 30h
.text:004011A6		       mov     eax, [ebp+arg_0]
.text:004011A9		       mov     eax, [eax]
.text:004011AB		       mov     [ebp+var_28], eax
.text:004011AE		       mov     eax, [ebp+var_28]
.text:004011B1		       mov     eax, [eax+8]
.text:004011B4		       mov     [ebp+var_24], eax
.text:004011B7		       mov     eax, [ebp+var_28]
.text:004011BA		       mov     eax, [eax+0Ch]
.text:004011BD		       test    eax, eax
.text:004011BF		       jz      short loc_401236
.text:004011C1		       mov     eax, [ebp+var_28]
.text:004011C4		       mov     eax, [eax+0Ch]
.text:004011C7		       movzx   eax, byte ptr [eax+4]
.text:004011CB		       cmp     al, 1
.text:004011CD		       jnz     short loc_401236
.text:004011CF		       mov     eax, [ebp+var_24]
.text:004011D2		       movzx   eax, byte ptr [eax+4]
.text:004011D6		       cmp     al, 1
.text:004011D8		       jnz     locret_401340
.text:004011DE		       mov     eax, [ebp+var_24]
.text:004011E1		       mov     eax, [eax+8]
.text:004011E4		       test    eax, eax
.text:004011E6		       jz      short loc_4011F6
.text:004011E8		       mov     eax, [ebp+var_24]
.text:004011EB		       mov     eax, [eax+8]
.text:004011EE		       movzx   eax, byte ptr [eax+4]
.text:004011F2		       cmp     al, 1
.text:004011F4		       jz      short loc_401216
.text:004011F6
.text:004011F6 loc_4011F6:			       ; CODE XREF: sub_4011A0+46j
.text:004011F6		       mov     eax, [ebp+var_24]
.text:004011F9		       mov     eax, [eax+0Ch]
.text:004011FC		       test    eax, eax
.text:004011FE		       jz      locret_401340
.text:00401204		       mov     eax, [ebp+var_24]
.text:00401207		       mov     eax, [eax+0Ch]
.text:0040120A		       movzx   eax, byte ptr [eax+4]
.text:0040120E		       cmp     al, 1
.text:00401210		       jnz     locret_401340
.text:00401216
.text:00401216 loc_401216:			       ; CODE XREF: sub_4011A0+54j
.text:00401216		       mov     eax, [ebp+var_28]
.text:00401219		       mov     eax, [eax+8]
.text:0040121C		       mov     byte ptr	[eax+4], 0
.text:00401220		       mov     eax, [ebp+var_28]
.text:00401223		       mov     eax, [eax+0Ch]
.text:00401226		       mov     byte ptr	[eax+4], 0
.text:0040122A		       mov     eax, [ebp+var_28]
.text:0040122D		       mov     byte ptr	[eax+4], 1
.text:00401231		       jmp     locret_401340
.text:00401236 ; ---------------------------------------------------------------------------
.text:00401236
.text:00401236 loc_401236:			       ; CODE XREF: sub_4011A0+1Fj
.text:00401236					       ; sub_4011A0+2Dj
.text:00401236		       mov     eax, [ebp+var_24]
.text:00401239		       movzx   eax, byte ptr [eax+4]
.text:0040123D		       cmp     al, 1
.text:0040123F		       jnz     locret_401340
.text:00401245		       mov     eax, [ebp+var_24]
.text:00401248		       mov     eax, [eax+8]
.text:0040124B		       test    eax, eax
.text:0040124D		       jz      short loc_4012B1
.text:0040124F		       mov     eax, [ebp+var_24]
.text:00401252		       mov     eax, [eax+8]
.text:00401255		       movzx   eax, byte ptr [eax+4]
.text:00401259		       cmp     al, 1
.text:0040125B		       jnz     short loc_4012B1
.text:0040125D		       mov     eax, [ebp+var_28]
.text:00401260		       mov     [ebp+var_20], eax
.text:00401263		       mov     eax, [ebp+var_24]
.text:00401266		       mov     [ebp+var_1C], eax
.text:00401269		       mov     eax, [ebp+var_24]
.text:0040126C		       mov     eax, [eax+8]
.text:0040126F		       mov     [ebp+var_18], eax
.text:00401272		       mov     eax, [ebp+var_1C]
.text:00401275		       mov     eax, [eax+0Ch]
.text:00401278		       mov     [ebp+var_C], eax
.text:0040127B		       mov     edx, [ebp+var_20]
.text:0040127E		       mov     eax, [ebp+var_C]
.text:00401281		       mov     [edx+8],	eax
.text:00401284		       mov     edx, [ebp+var_1C]
.text:00401287		       mov     eax, [ebp+var_18]
.text:0040128A		       mov     [edx+8],	eax
.text:0040128D		       mov     edx, [ebp+var_1C]
.text:00401290		       mov     eax, [ebp+var_20]
.text:00401293		       mov     [edx+0Ch], eax
.text:00401296		       mov     eax, [ebp+var_20]
.text:00401299		       mov     byte ptr	[eax+4], 1
.text:0040129D		       mov     eax, [ebp+var_1C]
.text:004012A0		       mov     byte ptr	[eax+4], 0
.text:004012A4		       mov     edx, [ebp+arg_0]
.text:004012A7		       mov     eax, [ebp+var_1C]
.text:004012AA		       mov     [edx], eax
.text:004012AC		       jmp     locret_401340
.text:004012B1 ; ---------------------------------------------------------------------------
.text:004012B1
.text:004012B1 loc_4012B1:			       ; CODE XREF: sub_4011A0+ADj
.text:004012B1					       ; sub_4011A0+BBj
.text:004012B1		       mov     eax, [ebp+var_24]
.text:004012B4		       mov     eax, [eax+0Ch]
.text:004012B7		       test    eax, eax
.text:004012B9		       jz      locret_401340
.text:004012BF		       mov     eax, [ebp+var_24]
.text:004012C2		       mov     eax, [eax+0Ch]
.text:004012C5		       movzx   eax, byte ptr [eax+4]
.text:004012C9		       cmp     al, 1
.text:004012CB		       jnz     short locret_401340
.text:004012CD		       mov     eax, [ebp+var_28]
.text:004012D0		       mov     [ebp+var_20], eax
.text:004012D3		       mov     eax, [ebp+var_24]
.text:004012D6		       mov     [ebp+var_1C], eax
.text:004012D9		       mov     eax, [ebp+var_20]
.text:004012DC		       mov     eax, [eax+0Ch]
.text:004012DF		       mov     [ebp+var_14], eax
.text:004012E2		       mov     eax, [ebp+var_1C]
.text:004012E5		       mov     eax, [eax+8]
.text:004012E8		       mov     [ebp+var_10], eax
.text:004012EB		       mov     eax, [ebp+var_1C]
.text:004012EE		       mov     eax, [eax+0Ch]
.text:004012F1		       mov     [ebp+var_18], eax
.text:004012F4		       mov     eax, [ebp+var_18]
.text:004012F7		       mov     eax, [eax+8]
.text:004012FA		       mov     [ebp+var_8], eax
.text:004012FD		       mov     eax, [ebp+var_18]
.text:00401300		       mov     eax, [eax+0Ch]
.text:00401303		       mov     [ebp+var_4], eax
.text:00401306		       mov     edx, [ebp+var_1C]
.text:00401309		       mov     eax, [ebp+var_8]
.text:0040130C		       mov     [edx+0Ch], eax
.text:0040130F		       mov     edx, [ebp+var_20]
.text:00401312		       mov     eax, [ebp+var_4]
.text:00401315		       mov     [edx+8],	eax
.text:00401318		       mov     edx, [ebp+var_18]
.text:0040131B		       mov     eax, [ebp+var_1C]
.text:0040131E		       mov     [edx+8],	eax
.text:00401321		       mov     edx, [ebp+var_18]
.text:00401324		       mov     eax, [ebp+var_20]
.text:00401327		       mov     [edx+0Ch], eax
.text:0040132A		       mov     eax, [ebp+var_18]
.text:0040132D		       mov     byte ptr	[eax+4], 0
.text:00401331		       mov     eax, [ebp+var_20]
.text:00401334		       mov     byte ptr	[eax+4], 1
.text:00401338		       mov     edx, [ebp+arg_0]
.text:0040133B		       mov     eax, [ebp+var_18]
.text:0040133E		       mov     [edx], eax
.text:00401340
.text:00401340 locret_401340:			       ; CODE XREF: sub_4011A0+38j
.text:00401340					       ; sub_4011A0+5Ej ...
.text:00401340		       leave
.text:00401341		       retn
.text:00401341 sub_4011A0      endp
.text:00401341
.text:00401342
.text:00401342 ; =============== S U B R O U T I N E =======================================
.text:00401342
.text:00401342 ; Attributes: bp-based frame
.text:00401342
.text:00401342 sub_401342      proc near	       ; CODE XREF: sub_401FE8+9Fp
.text:00401342
.text:00401342 var_28	       = dword ptr -28h
.text:00401342 var_24	       = dword ptr -24h
.text:00401342 var_20	       = dword ptr -20h
.text:00401342 var_1C	       = dword ptr -1Ch
.text:00401342 var_18	       = dword ptr -18h
.text:00401342 var_14	       = dword ptr -14h
.text:00401342 var_10	       = dword ptr -10h
.text:00401342 var_C	       = dword ptr -0Ch
.text:00401342 var_8	       = dword ptr -8
.text:00401342 var_4	       = dword ptr -4
.text:00401342 arg_0	       = dword ptr  8
.text:00401342
.text:00401342		       push    ebp
.text:00401343		       mov     ebp, esp
.text:00401345		       sub     esp, 30h
.text:00401348		       mov     eax, [ebp+arg_0]
.text:0040134B		       mov     eax, [eax]
.text:0040134D		       mov     [ebp+var_28], eax
.text:00401350		       mov     eax, [ebp+var_28]
.text:00401353		       mov     eax, [eax+0Ch]
.text:00401356		       mov     [ebp+var_24], eax
.text:00401359		       mov     eax, [ebp+var_28]
.text:0040135C		       mov     eax, [eax+8]
.text:0040135F		       test    eax, eax
.text:00401361		       jz      short loc_4013D8
.text:00401363		       mov     eax, [ebp+var_28]
.text:00401366		       mov     eax, [eax+8]
.text:00401369		       movzx   eax, byte ptr [eax+4]
.text:0040136D		       cmp     al, 1
.text:0040136F		       jnz     short loc_4013D8
.text:00401371		       mov     eax, [ebp+var_24]
.text:00401374		       movzx   eax, byte ptr [eax+4]
.text:00401378		       cmp     al, 1
.text:0040137A		       jnz     locret_4014E2
.text:00401380		       mov     eax, [ebp+var_24]
.text:00401383		       mov     eax, [eax+0Ch]
.text:00401386		       test    eax, eax
.text:00401388		       jz      short loc_401398
.text:0040138A		       mov     eax, [ebp+var_24]
.text:0040138D		       mov     eax, [eax+0Ch]
.text:00401390		       movzx   eax, byte ptr [eax+4]
.text:00401394		       cmp     al, 1
.text:00401396		       jz      short loc_4013B8
.text:00401398
.text:00401398 loc_401398:			       ; CODE XREF: sub_401342+46j
.text:00401398		       mov     eax, [ebp+var_24]
.text:0040139B		       mov     eax, [eax+8]
.text:0040139E		       test    eax, eax
.text:004013A0		       jz      locret_4014E2
.text:004013A6		       mov     eax, [ebp+var_24]
.text:004013A9		       mov     eax, [eax+8]
.text:004013AC		       movzx   eax, byte ptr [eax+4]
.text:004013B0		       cmp     al, 1
.text:004013B2		       jnz     locret_4014E2
.text:004013B8
.text:004013B8 loc_4013B8:			       ; CODE XREF: sub_401342+54j
.text:004013B8		       mov     eax, [ebp+var_28]
.text:004013BB		       mov     eax, [eax+0Ch]
.text:004013BE		       mov     byte ptr	[eax+4], 0
.text:004013C2		       mov     eax, [ebp+var_28]
.text:004013C5		       mov     eax, [eax+8]
.text:004013C8		       mov     byte ptr	[eax+4], 0
.text:004013CC		       mov     eax, [ebp+var_28]
.text:004013CF		       mov     byte ptr	[eax+4], 1
.text:004013D3		       jmp     locret_4014E2
.text:004013D8 ; ---------------------------------------------------------------------------
.text:004013D8
.text:004013D8 loc_4013D8:			       ; CODE XREF: sub_401342+1Fj
.text:004013D8					       ; sub_401342+2Dj
.text:004013D8		       mov     eax, [ebp+var_24]
.text:004013DB		       movzx   eax, byte ptr [eax+4]
.text:004013DF		       cmp     al, 1
.text:004013E1		       jnz     locret_4014E2
.text:004013E7		       mov     eax, [ebp+var_24]
.text:004013EA		       mov     eax, [eax+0Ch]
.text:004013ED		       test    eax, eax
.text:004013EF		       jz      short loc_401453
.text:004013F1		       mov     eax, [ebp+var_24]
.text:004013F4		       mov     eax, [eax+0Ch]
.text:004013F7		       movzx   eax, byte ptr [eax+4]
.text:004013FB		       cmp     al, 1
.text:004013FD		       jnz     short loc_401453
.text:004013FF		       mov     eax, [ebp+var_28]
.text:00401402		       mov     [ebp+var_20], eax
.text:00401405		       mov     eax, [ebp+var_24]
.text:00401408		       mov     [ebp+var_1C], eax
.text:0040140B		       mov     eax, [ebp+var_24]
.text:0040140E		       mov     eax, [eax+0Ch]
.text:00401411		       mov     [ebp+var_18], eax
.text:00401414		       mov     eax, [ebp+var_1C]
.text:00401417		       mov     eax, [eax+8]
.text:0040141A		       mov     [ebp+var_C], eax
.text:0040141D		       mov     edx, [ebp+var_20]
.text:00401420		       mov     eax, [ebp+var_C]
.text:00401423		       mov     [edx+0Ch], eax
.text:00401426		       mov     edx, [ebp+var_1C]
.text:00401429		       mov     eax, [ebp+var_18]
.text:0040142C		       mov     [edx+0Ch], eax
.text:0040142F		       mov     edx, [ebp+var_1C]
.text:00401432		       mov     eax, [ebp+var_20]
.text:00401435		       mov     [edx+8],	eax
.text:00401438		       mov     eax, [ebp+var_20]
.text:0040143B		       mov     byte ptr	[eax+4], 1
.text:0040143F		       mov     eax, [ebp+var_1C]
.text:00401442		       mov     byte ptr	[eax+4], 0
.text:00401446		       mov     edx, [ebp+arg_0]
.text:00401449		       mov     eax, [ebp+var_1C]
.text:0040144C		       mov     [edx], eax
.text:0040144E		       jmp     locret_4014E2
.text:00401453 ; ---------------------------------------------------------------------------
.text:00401453
.text:00401453 loc_401453:			       ; CODE XREF: sub_401342+ADj
.text:00401453					       ; sub_401342+BBj
.text:00401453		       mov     eax, [ebp+var_24]
.text:00401456		       mov     eax, [eax+8]
.text:00401459		       test    eax, eax
.text:0040145B		       jz      locret_4014E2
.text:00401461		       mov     eax, [ebp+var_24]
.text:00401464		       mov     eax, [eax+8]
.text:00401467		       movzx   eax, byte ptr [eax+4]
.text:0040146B		       cmp     al, 1
.text:0040146D		       jnz     short locret_4014E2
.text:0040146F		       mov     eax, [ebp+var_28]
.text:00401472		       mov     [ebp+var_20], eax
.text:00401475		       mov     eax, [ebp+var_24]
.text:00401478		       mov     [ebp+var_1C], eax
.text:0040147B		       mov     eax, [ebp+var_20]
.text:0040147E		       mov     eax, [eax+8]
.text:00401481		       mov     [ebp+var_14], eax
.text:00401484		       mov     eax, [ebp+var_1C]
.text:00401487		       mov     eax, [eax+0Ch]
.text:0040148A		       mov     [ebp+var_10], eax
.text:0040148D		       mov     eax, [ebp+var_1C]
.text:00401490		       mov     eax, [eax+8]
.text:00401493		       mov     [ebp+var_18], eax
.text:00401496		       mov     eax, [ebp+var_18]
.text:00401499		       mov     eax, [eax+0Ch]
.text:0040149C		       mov     [ebp+var_8], eax
.text:0040149F		       mov     eax, [ebp+var_18]
.text:004014A2		       mov     eax, [eax+8]
.text:004014A5		       mov     [ebp+var_4], eax
.text:004014A8		       mov     edx, [ebp+var_1C]
.text:004014AB		       mov     eax, [ebp+var_8]
.text:004014AE		       mov     [edx+8],	eax
.text:004014B1		       mov     edx, [ebp+var_20]
.text:004014B4		       mov     eax, [ebp+var_4]
.text:004014B7		       mov     [edx+0Ch], eax
.text:004014BA		       mov     edx, [ebp+var_18]
.text:004014BD		       mov     eax, [ebp+var_1C]
.text:004014C0		       mov     [edx+0Ch], eax
.text:004014C3		       mov     edx, [ebp+var_18]
.text:004014C6		       mov     eax, [ebp+var_20]
.text:004014C9		       mov     [edx+8],	eax
.text:004014CC		       mov     eax, [ebp+var_18]
.text:004014CF		       mov     byte ptr	[eax+4], 0
.text:004014D3		       mov     eax, [ebp+var_20]
.text:004014D6		       mov     byte ptr	[eax+4], 1
.text:004014DA		       mov     edx, [ebp+arg_0]
.text:004014DD		       mov     eax, [ebp+var_18]
.text:004014E0		       mov     [edx], eax
.text:004014E2
.text:004014E2 locret_4014E2:			       ; CODE XREF: sub_401342+38j
.text:004014E2					       ; sub_401342+5Ej ...
.text:004014E2		       leave
.text:004014E3		       retn
.text:004014E3 sub_401342      endp
.text:004014E3
.text:004014E4
.text:004014E4 ; =============== S U B R O U T I N E =======================================
.text:004014E4
.text:004014E4 ; Attributes: bp-based frame
.text:004014E4
.text:004014E4 sub_4014E4      proc near	       ; CODE XREF: sub_40216E+8Ep
.text:004014E4					       ; sub_40216E+1CCp
.text:004014E4
.text:004014E4 var_58	       = dword ptr -58h
.text:004014E4 var_54	       = dword ptr -54h
.text:004014E4 var_50	       = dword ptr -50h
.text:004014E4 var_4C	       = dword ptr -4Ch
.text:004014E4 var_34	       = dword ptr -34h
.text:004014E4 var_30	       = dword ptr -30h
.text:004014E4 var_2C	       = dword ptr -2Ch
.text:004014E4 var_28	       = dword ptr -28h
.text:004014E4 var_24	       = dword ptr -24h
.text:004014E4 var_20	       = dword ptr -20h
.text:004014E4 var_1C	       = dword ptr -1Ch
.text:004014E4 var_18	       = dword ptr -18h
.text:004014E4 var_14	       = dword ptr -14h
.text:004014E4 var_10	       = dword ptr -10h
.text:004014E4 var_C	       = dword ptr -0Ch
.text:004014E4 var_8	       = dword ptr -8
.text:004014E4 var_4	       = dword ptr -4
.text:004014E4 arg_0	       = dword ptr  8
.text:004014E4
.text:004014E4		       push    ebp
.text:004014E5		       mov     ebp, esp
.text:004014E7		       sub     esp, 58h
.text:004014EA		       mov     eax, [ebp+arg_0]
.text:004014ED		       mov     eax, [eax]
.text:004014EF		       mov     [ebp+var_2C], eax
.text:004014F2		       mov     eax, [ebp+var_2C]
.text:004014F5		       mov     [ebp+var_30], eax
.text:004014F8		       cmp     [ebp+var_30], 0
.text:004014FC		       jnz     short loc_401522
.text:004014FE		       mov     [esp+58h+var_4C], offset	aTNull ; "t!=NULL"
.text:00401506		       mov     [esp+58h+var_50], offset	aSglib___rbtree	; "sglib___rbtree_fix_left_deletion_discre"...
.text:0040150E		       mov     [esp+58h+var_54], 19h
.text:00401516		       mov     [esp+58h+var_58], offset	aRbtree_c ; "rbtree.c"
.text:0040151D		       call    __assert_func
.text:00401522
.text:00401522 loc_401522:			       ; CODE XREF: sub_4014E4+18j
.text:00401522		       mov     eax, [ebp+var_2C]
.text:00401525		       mov     eax, [eax+8]
.text:00401528		       mov     [ebp+var_1C], eax
.text:0040152B		       mov     eax, [ebp+var_30]
.text:0040152E		       mov     eax, [eax+0Ch]
.text:00401531		       mov     [ebp+var_28], eax
.text:00401534		       cmp     [ebp+var_28], 0
.text:00401538		       jnz     short loc_40157C
.text:0040153A		       mov     eax, [ebp+var_30]
.text:0040153D		       movzx   eax, byte ptr [eax+4]
.text:00401541		       cmp     al, 1
.text:00401543		       jz      short loc_401569
.text:00401545		       mov     [esp+58h+var_4C], offset	aSglib___get_va	; "SGLIB___GET_VALUE(t->color_field)==1"
.text:0040154D		       mov     [esp+58h+var_50], offset	aSglib___rbtree	; "sglib___rbtree_fix_left_deletion_discre"...
.text:00401555		       mov     [esp+58h+var_54], 19h
.text:0040155D		       mov     [esp+58h+var_58], offset	aRbtree_c ; "rbtree.c"
.text:00401564		       call    __assert_func
.text:00401569
.text:00401569 loc_401569:			       ; CODE XREF: sub_4014E4+5Fj
.text:00401569		       mov     eax, [ebp+var_30]
.text:0040156C		       mov     byte ptr	[eax+4], 0
.text:00401570		       mov     [ebp+var_34], 0
.text:00401577		       jmp     loc_401A61
.text:0040157C ; ---------------------------------------------------------------------------
.text:0040157C
.text:0040157C loc_40157C:			       ; CODE XREF: sub_4014E4+54j
.text:0040157C		       mov     eax, [ebp+var_28]
.text:0040157F		       mov     eax, [eax+0Ch]
.text:00401582		       mov     [ebp+var_18], eax
.text:00401585		       mov     eax, [ebp+var_28]
.text:00401588		       mov     eax, [eax+8]
.text:0040158B		       mov     [ebp+var_14], eax
.text:0040158E		       mov     eax, [ebp+var_28]
.text:00401591		       movzx   eax, byte ptr [eax+4]
.text:00401595		       cmp     al, 1
.text:00401597		       jnz     loc_401805
.text:0040159D		       cmp     [ebp+var_14], 0
.text:004015A1		       jnz     short loc_4015D0
.text:004015A3		       mov     edx, [ebp+arg_0]
.text:004015A6		       mov     eax, [ebp+var_28]
.text:004015A9		       mov     [edx], eax
.text:004015AB		       mov     eax, [ebp+var_28]
.text:004015AE		       mov     byte ptr	[eax+4], 0
.text:004015B2		       mov     edx, [ebp+var_28]
.text:004015B5		       mov     eax, [ebp+var_2C]
.text:004015B8		       mov     [edx+8],	eax
.text:004015BB		       mov     edx, [ebp+var_2C]
.text:004015BE		       mov     eax, [ebp+var_14]
.text:004015C1		       mov     [edx+0Ch], eax
.text:004015C4		       mov     [ebp+var_34], 0
.text:004015CB		       jmp     loc_401A61
.text:004015D0 ; ---------------------------------------------------------------------------
.text:004015D0
.text:004015D0 loc_4015D0:			       ; CODE XREF: sub_4014E4+BDj
.text:004015D0		       mov     eax, [ebp+var_14]
.text:004015D3		       mov     [ebp+var_24], eax
.text:004015D6		       cmp     [ebp+var_24], 0
.text:004015DA		       jz      short loc_4015E7
.text:004015DC		       mov     eax, [ebp+var_24]
.text:004015DF		       movzx   eax, byte ptr [eax+4]
.text:004015E3		       test    al, al
.text:004015E5		       jz      short loc_40160B
.text:004015E7
.text:004015E7 loc_4015E7:			       ; CODE XREF: sub_4014E4+F6j
.text:004015E7		       mov     [esp+58h+var_4C], offset	aCNullSglib___g	; "c!=NULL && SGLIB___GET_VALUE(c->color_f"...
.text:004015EF		       mov     [esp+58h+var_50], offset	aSglib___rbtree	; "sglib___rbtree_fix_left_deletion_discre"...
.text:004015F7		       mov     [esp+58h+var_54], 19h
.text:004015FF		       mov     [esp+58h+var_58], offset	aRbtree_c ; "rbtree.c"
.text:00401606		       call    __assert_func
.text:0040160B
.text:0040160B loc_40160B:			       ; CODE XREF: sub_4014E4+101j
.text:0040160B		       mov     eax, [ebp+var_24]
.text:0040160E		       mov     eax, [eax+0Ch]
.text:00401611		       mov     [ebp+var_10], eax
.text:00401614		       mov     eax, [ebp+var_24]
.text:00401617		       mov     eax, [eax+8]
.text:0040161A		       mov     [ebp+var_C], eax
.text:0040161D		       cmp     [ebp+var_10], 0
.text:00401621		       jz      short loc_40162E
.text:00401623		       mov     eax, [ebp+var_10]
.text:00401626		       movzx   eax, byte ptr [eax+4]
.text:0040162A		       test    al, al
.text:0040162C		       jnz     short loc_401673
.text:0040162E
.text:0040162E loc_40162E:			       ; CODE XREF: sub_4014E4+13Dj
.text:0040162E		       cmp     [ebp+var_C], 0
.text:00401632		       jz      short loc_40163F
.text:00401634		       mov     eax, [ebp+var_C]
.text:00401637		       movzx   eax, byte ptr [eax+4]
.text:0040163B		       test    al, al
.text:0040163D		       jnz     short loc_401673
.text:0040163F
.text:0040163F loc_40163F:			       ; CODE XREF: sub_4014E4+14Ej
.text:0040163F		       mov     edx, [ebp+arg_0]
.text:00401642		       mov     eax, [ebp+var_28]
.text:00401645		       mov     [edx], eax
.text:00401647		       mov     edx, [ebp+var_28]
.text:0040164A		       mov     eax, [ebp+var_2C]
.text:0040164D		       mov     [edx+8],	eax
.text:00401650		       mov     eax, [ebp+var_28]
.text:00401653		       mov     byte ptr	[eax+4], 0
.text:00401657		       mov     edx, [ebp+var_2C]
.text:0040165A		       mov     eax, [ebp+var_24]
.text:0040165D		       mov     [edx+0Ch], eax
.text:00401660		       mov     eax, [ebp+var_24]
.text:00401663		       mov     byte ptr	[eax+4], 1
.text:00401667		       mov     [ebp+var_34], 0
.text:0040166E		       jmp     loc_401A61
.text:00401673 ; ---------------------------------------------------------------------------
.text:00401673
.text:00401673 loc_401673:			       ; CODE XREF: sub_4014E4+148j
.text:00401673					       ; sub_4014E4+159j
.text:00401673		       cmp     [ebp+var_10], 0
.text:00401677		       jz      loc_40173C
.text:0040167D		       mov     eax, [ebp+var_10]
.text:00401680		       movzx   eax, byte ptr [eax+4]
.text:00401684		       cmp     al, 1
.text:00401686		       jnz     loc_40173C
.text:0040168C		       cmp     [ebp+var_C], 0
.text:00401690		       jz      short loc_4016F4
.text:00401692		       mov     eax, [ebp+var_C]
.text:00401695		       movzx   eax, byte ptr [eax+4]
.text:00401699		       cmp     al, 1
.text:0040169B		       jnz     short loc_4016F4
.text:0040169D		       mov     eax, [ebp+var_C]
.text:004016A0		       mov     [ebp+var_20], eax
.text:004016A3		       mov     eax, [ebp+var_20]
.text:004016A6		       mov     eax, [eax+0Ch]
.text:004016A9		       mov     [ebp+var_8], eax
.text:004016AC		       mov     eax, [ebp+var_20]
.text:004016AF		       mov     eax, [eax+8]
.text:004016B2		       mov     [ebp+var_4], eax
.text:004016B5		       mov     edx, [ebp+arg_0]
.text:004016B8		       mov     eax, [ebp+var_20]
.text:004016BB		       mov     [edx], eax
.text:004016BD		       mov     eax, [ebp+var_20]
.text:004016C0		       mov     byte ptr	[eax+4], 0
.text:004016C4		       mov     edx, [ebp+var_20]
.text:004016C7		       mov     eax, [ebp+var_28]
.text:004016CA		       mov     [edx+0Ch], eax
.text:004016CD		       mov     edx, [ebp+var_24]
.text:004016D0		       mov     eax, [ebp+var_8]
.text:004016D3		       mov     [edx+8],	eax
.text:004016D6		       mov     edx, [ebp+var_20]
.text:004016D9		       mov     eax, [ebp+var_2C]
.text:004016DC		       mov     [edx+8],	eax
.text:004016DF		       mov     edx, [ebp+var_2C]
.text:004016E2		       mov     eax, [ebp+var_4]
.text:004016E5		       mov     [edx+0Ch], eax
.text:004016E8		       mov     [ebp+var_34], 0
.text:004016EF		       jmp     loc_401A61
.text:004016F4 ; ---------------------------------------------------------------------------
.text:004016F4
.text:004016F4 loc_4016F4:			       ; CODE XREF: sub_4014E4+1ACj
.text:004016F4					       ; sub_4014E4+1B7j
.text:004016F4		       mov     edx, [ebp+arg_0]
.text:004016F7		       mov     eax, [ebp+var_24]
.text:004016FA		       mov     [edx], eax
.text:004016FC		       mov     edx, [ebp+var_24]
.text:004016FF		       mov     eax, [ebp+var_28]
.text:00401702		       mov     [edx+0Ch], eax
.text:00401705		       mov     edx, [ebp+var_24]
.text:00401708		       mov     eax, [ebp+var_2C]
.text:0040170B		       mov     [edx+8],	eax
.text:0040170E		       mov     edx, [ebp+var_28]
.text:00401711		       mov     eax, [ebp+var_18]
.text:00401714		       mov     [edx+0Ch], eax
.text:00401717		       mov     edx, [ebp+var_28]
.text:0040171A		       mov     eax, [ebp+var_10]
.text:0040171D		       mov     [edx+8],	eax
.text:00401720		       mov     edx, [ebp+var_2C]
.text:00401723		       mov     eax, [ebp+var_C]
.text:00401726		       mov     [edx+0Ch], eax
.text:00401729		       mov     eax, [ebp+var_10]
.text:0040172C		       mov     byte ptr	[eax+4], 0
.text:00401730		       mov     [ebp+var_34], 0
.text:00401737		       jmp     loc_401A61
.text:0040173C ; ---------------------------------------------------------------------------
.text:0040173C
.text:0040173C loc_40173C:			       ; CODE XREF: sub_4014E4+193j
.text:0040173C					       ; sub_4014E4+1A2j
.text:0040173C		       cmp     [ebp+var_C], 0
.text:00401740		       jz      loc_4017E1
.text:00401746		       mov     eax, [ebp+var_C]
.text:00401749		       movzx   eax, byte ptr [eax+4]
.text:0040174D		       cmp     al, 1
.text:0040174F		       jnz     loc_4017E1
.text:00401755		       cmp     [ebp+var_10], 0
.text:00401759		       jz      short loc_40178A
.text:0040175B		       mov     eax, [ebp+var_10]
.text:0040175E		       movzx   eax, byte ptr [eax+4]
.text:00401762		       test    al, al
.text:00401764		       jz      short loc_40178A
.text:00401766		       mov     [esp+58h+var_4C], offset	aClNullSglib___	; "cl==NULL || SGLIB___GET_VALUE(cl->color"...
.text:0040176E		       mov     [esp+58h+var_50], offset	aSglib___rbtree	; "sglib___rbtree_fix_left_deletion_discre"...
.text:00401776		       mov     [esp+58h+var_54], 19h
.text:0040177E		       mov     [esp+58h+var_58], offset	aRbtree_c ; "rbtree.c"
.text:00401785		       call    __assert_func
.text:0040178A
.text:0040178A loc_40178A:			       ; CODE XREF: sub_4014E4+275j
.text:0040178A					       ; sub_4014E4+280j
.text:0040178A		       mov     eax, [ebp+var_C]
.text:0040178D		       mov     [ebp+var_20], eax
.text:00401790		       mov     eax, [ebp+var_20]
.text:00401793		       mov     eax, [eax+0Ch]
.text:00401796		       mov     [ebp+var_8], eax
.text:00401799		       mov     eax, [ebp+var_20]
.text:0040179C		       mov     eax, [eax+8]
.text:0040179F		       mov     [ebp+var_4], eax
.text:004017A2		       mov     edx, [ebp+arg_0]
.text:004017A5		       mov     eax, [ebp+var_20]
.text:004017A8		       mov     [edx], eax
.text:004017AA		       mov     eax, [ebp+var_20]
.text:004017AD		       mov     byte ptr	[eax+4], 0
.text:004017B1		       mov     edx, [ebp+var_20]
.text:004017B4		       mov     eax, [ebp+var_28]
.text:004017B7		       mov     [edx+0Ch], eax
.text:004017BA		       mov     edx, [ebp+var_24]
.text:004017BD		       mov     eax, [ebp+var_8]
.text:004017C0		       mov     [edx+8],	eax
.text:004017C3		       mov     edx, [ebp+var_20]
.text:004017C6		       mov     eax, [ebp+var_2C]
.text:004017C9		       mov     [edx+8],	eax
.text:004017CC		       mov     edx, [ebp+var_2C]
.text:004017CF		       mov     eax, [ebp+var_4]
.text:004017D2		       mov     [edx+0Ch], eax
.text:004017D5		       mov     [ebp+var_34], 0
.text:004017DC		       jmp     loc_401A61
.text:004017E1 ; ---------------------------------------------------------------------------
.text:004017E1
.text:004017E1 loc_4017E1:			       ; CODE XREF: sub_4014E4+25Cj
.text:004017E1					       ; sub_4014E4+26Bj
.text:004017E1		       mov     [esp+58h+var_4C], offset	a0 ; "0"
.text:004017E9		       mov     [esp+58h+var_50], offset	aSglib___rbtree	; "sglib___rbtree_fix_left_deletion_discre"...
.text:004017F1		       mov     [esp+58h+var_54], 19h
.text:004017F9		       mov     [esp+58h+var_58], offset	aRbtree_c ; "rbtree.c"
.text:00401800		       call    __assert_func
.text:00401805
.text:00401805 loc_401805:			       ; CODE XREF: sub_4014E4+B3j
.text:00401805		       cmp     [ebp+var_18], 0
.text:00401809		       jz      short loc_401816
.text:0040180B		       mov     eax, [ebp+var_18]
.text:0040180E		       movzx   eax, byte ptr [eax+4]
.text:00401812		       test    al, al
.text:00401814		       jnz     short loc_40184C
.text:00401816
.text:00401816 loc_401816:			       ; CODE XREF: sub_4014E4+325j
.text:00401816		       cmp     [ebp+var_14], 0
.text:0040181A		       jz      short loc_401827
.text:0040181C		       mov     eax, [ebp+var_14]
.text:0040181F		       movzx   eax, byte ptr [eax+4]
.text:00401823		       test    al, al
.text:00401825		       jnz     short loc_40184C
.text:00401827
.text:00401827 loc_401827:			       ; CODE XREF: sub_4014E4+336j
.text:00401827		       mov     eax, [ebp+var_2C]
.text:0040182A		       movzx   eax, byte ptr [eax+4]
.text:0040182E		       test    al, al
.text:00401830		       setz    al
.text:00401833		       movzx   eax, al
.text:00401836		       mov     [ebp+var_34], eax
.text:00401839		       mov     eax, [ebp+var_2C]
.text:0040183C		       mov     byte ptr	[eax+4], 0
.text:00401840		       mov     eax, [ebp+var_28]
.text:00401843		       mov     byte ptr	[eax+4], 1
.text:00401847		       jmp     loc_401A61
.text:0040184C ; ---------------------------------------------------------------------------
.text:0040184C
.text:0040184C loc_40184C:			       ; CODE XREF: sub_4014E4+330j
.text:0040184C					       ; sub_4014E4+341j
.text:0040184C		       cmp     [ebp+var_18], 0
.text:00401850		       jz      loc_4019CD
.text:00401856		       mov     eax, [ebp+var_18]
.text:00401859		       movzx   eax, byte ptr [eax+4]
.text:0040185D		       cmp     al, 1
.text:0040185F		       jnz     loc_4019CD
.text:00401865		       cmp     [ebp+var_14], 0
.text:00401869		       jz      short loc_401876
.text:0040186B		       mov     eax, [ebp+var_14]
.text:0040186E		       movzx   eax, byte ptr [eax+4]
.text:00401872		       test    al, al
.text:00401874		       jnz     short loc_4018B7
.text:00401876
.text:00401876 loc_401876:			       ; CODE XREF: sub_4014E4+385j
.text:00401876		       mov     edx, [ebp+arg_0]
.text:00401879		       mov     eax, [ebp+var_28]
.text:0040187C		       mov     [edx], eax
.text:0040187E		       mov     eax, [ebp+var_2C]
.text:00401881		       movzx   edx, byte ptr [eax+4]
.text:00401885		       mov     eax, [ebp+var_28]
.text:00401888		       mov     [eax+4],	dl
.text:0040188B		       mov     eax, [ebp+var_2C]
.text:0040188E		       mov     byte ptr	[eax+4], 0
.text:00401892		       mov     edx, [ebp+var_28]
.text:00401895		       mov     eax, [ebp+var_2C]
.text:00401898		       mov     [edx+8],	eax
.text:0040189B		       mov     edx, [ebp+var_2C]
.text:0040189E		       mov     eax, [ebp+var_14]
.text:004018A1		       mov     [edx+0Ch], eax
.text:004018A4		       mov     eax, [ebp+var_18]
.text:004018A7		       mov     byte ptr	[eax+4], 0
.text:004018AB		       mov     [ebp+var_34], 0
.text:004018B2		       jmp     loc_401A61
.text:004018B7 ; ---------------------------------------------------------------------------
.text:004018B7
.text:004018B7 loc_4018B7:			       ; CODE XREF: sub_4014E4+390j
.text:004018B7		       cmp     [ebp+var_18], 0
.text:004018BB		       jnz     short loc_4018E1
.text:004018BD		       mov     [esp+58h+var_4C], offset	aBlNull	; "bl!=NULL"
.text:004018C5		       mov     [esp+58h+var_50], offset	aSglib___rbtree	; "sglib___rbtree_fix_left_deletion_discre"...
.text:004018CD		       mov     [esp+58h+var_54], 19h
.text:004018D5		       mov     [esp+58h+var_58], offset	aRbtree_c ; "rbtree.c"
.text:004018DC		       call    __assert_func
.text:004018E1
.text:004018E1 loc_4018E1:			       ; CODE XREF: sub_4014E4+3D7j
.text:004018E1		       cmp     [ebp+var_14], 0
.text:004018E5		       jnz     short loc_40190B
.text:004018E7		       mov     [esp+58h+var_4C], offset	aBrNull	; "br!=NULL"
.text:004018EF		       mov     [esp+58h+var_50], offset	aSglib___rbtree	; "sglib___rbtree_fix_left_deletion_discre"...
.text:004018F7		       mov     [esp+58h+var_54], 19h
.text:004018FF		       mov     [esp+58h+var_58], offset	aRbtree_c ; "rbtree.c"
.text:00401906		       call    __assert_func
.text:0040190B
.text:0040190B loc_40190B:			       ; CODE XREF: sub_4014E4+401j
.text:0040190B		       mov     eax, [ebp+var_18]
.text:0040190E		       movzx   eax, byte ptr [eax+4]
.text:00401912		       cmp     al, 1
.text:00401914		       jz      short loc_40193A
.text:00401916		       mov     [esp+58h+var_4C], offset	aSglib___get__0	; "SGLIB___GET_VALUE(bl->color_field)==1"
.text:0040191E		       mov     [esp+58h+var_50], offset	aSglib___rbtree	; "sglib___rbtree_fix_left_deletion_discre"...
.text:00401926		       mov     [esp+58h+var_54], 19h
.text:0040192E		       mov     [esp+58h+var_58], offset	aRbtree_c ; "rbtree.c"
.text:00401935		       call    __assert_func
.text:0040193A
.text:0040193A loc_40193A:			       ; CODE XREF: sub_4014E4+430j
.text:0040193A		       mov     eax, [ebp+var_14]
.text:0040193D		       movzx   eax, byte ptr [eax+4]
.text:00401941		       cmp     al, 1
.text:00401943		       jz      short loc_401969
.text:00401945		       mov     [esp+58h+var_4C], offset	aSglib___get__1	; "SGLIB___GET_VALUE(br->color_field)==1"
.text:0040194D		       mov     [esp+58h+var_50], offset	aSglib___rbtree	; "sglib___rbtree_fix_left_deletion_discre"...
.text:00401955		       mov     [esp+58h+var_54], 19h
.text:0040195D		       mov     [esp+58h+var_58], offset	aRbtree_c ; "rbtree.c"
.text:00401964		       call    __assert_func
.text:00401969
.text:00401969 loc_401969:			       ; CODE XREF: sub_4014E4+45Fj
.text:00401969		       mov     eax, [ebp+var_14]
.text:0040196C		       mov     [ebp+var_24], eax
.text:0040196F		       mov     eax, [ebp+var_24]
.text:00401972		       mov     eax, [eax+0Ch]
.text:00401975		       mov     [ebp+var_10], eax
.text:00401978		       mov     eax, [ebp+var_24]
.text:0040197B		       mov     eax, [eax+8]
.text:0040197E		       mov     [ebp+var_C], eax
.text:00401981		       mov     edx, [ebp+arg_0]
.text:00401984		       mov     eax, [ebp+var_24]
.text:00401987		       mov     [edx], eax
.text:00401989		       mov     eax, [ebp+var_2C]
.text:0040198C		       movzx   edx, byte ptr [eax+4]
.text:00401990		       mov     eax, [ebp+var_24]
.text:00401993		       mov     [eax+4],	dl
.text:00401996		       mov     eax, [ebp+var_2C]
.text:00401999		       mov     byte ptr	[eax+4], 0
.text:0040199D		       mov     edx, [ebp+var_24]
.text:004019A0		       mov     eax, [ebp+var_28]
.text:004019A3		       mov     [edx+0Ch], eax
.text:004019A6		       mov     edx, [ebp+var_24]
.text:004019A9		       mov     eax, [ebp+var_2C]
.text:004019AC		       mov     [edx+8],	eax
.text:004019AF		       mov     edx, [ebp+var_28]
.text:004019B2		       mov     eax, [ebp+var_10]
.text:004019B5		       mov     [edx+8],	eax
.text:004019B8		       mov     edx, [ebp+var_2C]
.text:004019BB		       mov     eax, [ebp+var_C]
.text:004019BE		       mov     [edx+0Ch], eax
.text:004019C1		       mov     [ebp+var_34], 0
.text:004019C8		       jmp     loc_401A61
.text:004019CD ; ---------------------------------------------------------------------------
.text:004019CD
.text:004019CD loc_4019CD:			       ; CODE XREF: sub_4014E4+36Cj
.text:004019CD					       ; sub_4014E4+37Bj
.text:004019CD		       cmp     [ebp+var_14], 0
.text:004019D1		       jz      short loc_4019DE
.text:004019D3		       mov     eax, [ebp+var_14]
.text:004019D6		       movzx   eax, byte ptr [eax+4]
.text:004019DA		       cmp     al, 1
.text:004019DC		       jz      short loc_401A02
.text:004019DE
.text:004019DE loc_4019DE:			       ; CODE XREF: sub_4014E4+4EDj
.text:004019DE		       mov     [esp+58h+var_4C], offset	aBrNullSglib___	; "br!=NULL && SGLIB___GET_VALUE(br->color"...
.text:004019E6		       mov     [esp+58h+var_50], offset	aSglib___rbtree	; "sglib___rbtree_fix_left_deletion_discre"...
.text:004019EE		       mov     [esp+58h+var_54], 19h
.text:004019F6		       mov     [esp+58h+var_58], offset	aRbtree_c ; "rbtree.c"
.text:004019FD		       call    __assert_func
.text:00401A02
.text:00401A02 loc_401A02:			       ; CODE XREF: sub_4014E4+4F8j
.text:00401A02		       mov     eax, [ebp+var_14]
.text:00401A05		       mov     [ebp+var_24], eax
.text:00401A08		       mov     eax, [ebp+var_24]
.text:00401A0B		       mov     eax, [eax+0Ch]
.text:00401A0E		       mov     [ebp+var_10], eax
.text:00401A11		       mov     eax, [ebp+var_24]
.text:00401A14		       mov     eax, [eax+8]
.text:00401A17		       mov     [ebp+var_C], eax
.text:00401A1A		       mov     edx, [ebp+arg_0]
.text:00401A1D		       mov     eax, [ebp+var_24]
.text:00401A20		       mov     [edx], eax
.text:00401A22		       mov     eax, [ebp+var_2C]
.text:00401A25		       movzx   edx, byte ptr [eax+4]
.text:00401A29		       mov     eax, [ebp+var_24]
.text:00401A2C		       mov     [eax+4],	dl
.text:00401A2F		       mov     eax, [ebp+var_2C]
.text:00401A32		       mov     byte ptr	[eax+4], 0
.text:00401A36		       mov     edx, [ebp+var_24]
.text:00401A39		       mov     eax, [ebp+var_28]
.text:00401A3C		       mov     [edx+0Ch], eax
.text:00401A3F		       mov     edx, [ebp+var_24]
.text:00401A42		       mov     eax, [ebp+var_2C]
.text:00401A45		       mov     [edx+8],	eax
.text:00401A48		       mov     edx, [ebp+var_28]
.text:00401A4B		       mov     eax, [ebp+var_10]
.text:00401A4E		       mov     [edx+8],	eax
.text:00401A51		       mov     edx, [ebp+var_2C]
.text:00401A54		       mov     eax, [ebp+var_C]
.text:00401A57		       mov     [edx+0Ch], eax
.text:00401A5A		       mov     [ebp+var_34], 0
.text:00401A61
.text:00401A61 loc_401A61:			       ; CODE XREF: sub_4014E4+93j
.text:00401A61					       ; sub_4014E4+E7j ...
.text:00401A61		       mov     eax, [ebp+var_34]
.text:00401A64		       leave
.text:00401A65		       retn
.text:00401A65 sub_4014E4      endp
.text:00401A65
.text:00401A66
.text:00401A66 ; =============== S U B R O U T I N E =======================================
.text:00401A66
.text:00401A66 ; Attributes: bp-based frame
.text:00401A66
.text:00401A66 sub_401A66      proc near	       ; CODE XREF: sub_40208E+D3p
.text:00401A66					       ; sub_40216E+D7p
.text:00401A66
.text:00401A66 var_58	       = dword ptr -58h
.text:00401A66 var_54	       = dword ptr -54h
.text:00401A66 var_50	       = dword ptr -50h
.text:00401A66 var_4C	       = dword ptr -4Ch
.text:00401A66 var_34	       = dword ptr -34h
.text:00401A66 var_30	       = dword ptr -30h
.text:00401A66 var_2C	       = dword ptr -2Ch
.text:00401A66 var_28	       = dword ptr -28h
.text:00401A66 var_24	       = dword ptr -24h
.text:00401A66 var_20	       = dword ptr -20h
.text:00401A66 var_1C	       = dword ptr -1Ch
.text:00401A66 var_18	       = dword ptr -18h
.text:00401A66 var_14	       = dword ptr -14h
.text:00401A66 var_10	       = dword ptr -10h
.text:00401A66 var_C	       = dword ptr -0Ch
.text:00401A66 var_8	       = dword ptr -8
.text:00401A66 var_4	       = dword ptr -4
.text:00401A66 arg_0	       = dword ptr  8
.text:00401A66
.text:00401A66		       push    ebp
.text:00401A67		       mov     ebp, esp
.text:00401A69		       sub     esp, 58h
.text:00401A6C		       mov     eax, [ebp+arg_0]
.text:00401A6F		       mov     eax, [eax]
.text:00401A71		       mov     [ebp+var_2C], eax
.text:00401A74		       mov     eax, [ebp+var_2C]
.text:00401A77		       mov     [ebp+var_30], eax
.text:00401A7A		       cmp     [ebp+var_30], 0
.text:00401A7E		       jnz     short loc_401AA4
.text:00401A80		       mov     [esp+58h+var_4C], offset	aTNull ; "t!=NULL"
.text:00401A88		       mov     [esp+58h+var_50], offset	aSglib___rbtr_0	; "sglib___rbtree_fix_right_deletion_discr"...
.text:00401A90		       mov     [esp+58h+var_54], 19h
.text:00401A98		       mov     [esp+58h+var_58], offset	aRbtree_c ; "rbtree.c"
.text:00401A9F		       call    __assert_func
.text:00401AA4
.text:00401AA4 loc_401AA4:			       ; CODE XREF: sub_401A66+18j
.text:00401AA4		       mov     eax, [ebp+var_2C]
.text:00401AA7		       mov     eax, [eax+0Ch]
.text:00401AAA		       mov     [ebp+var_1C], eax
.text:00401AAD		       mov     eax, [ebp+var_30]
.text:00401AB0		       mov     eax, [eax+8]
.text:00401AB3		       mov     [ebp+var_28], eax
.text:00401AB6		       cmp     [ebp+var_28], 0
.text:00401ABA		       jnz     short loc_401AFE
.text:00401ABC		       mov     eax, [ebp+var_30]
.text:00401ABF		       movzx   eax, byte ptr [eax+4]
.text:00401AC3		       cmp     al, 1
.text:00401AC5		       jz      short loc_401AEB
.text:00401AC7		       mov     [esp+58h+var_4C], offset	aSglib___get_va	; "SGLIB___GET_VALUE(t->color_field)==1"
.text:00401ACF		       mov     [esp+58h+var_50], offset	aSglib___rbtr_0	; "sglib___rbtree_fix_right_deletion_discr"...
.text:00401AD7		       mov     [esp+58h+var_54], 19h
.text:00401ADF		       mov     [esp+58h+var_58], offset	aRbtree_c ; "rbtree.c"
.text:00401AE6		       call    __assert_func
.text:00401AEB
.text:00401AEB loc_401AEB:			       ; CODE XREF: sub_401A66+5Fj
.text:00401AEB		       mov     eax, [ebp+var_30]
.text:00401AEE		       mov     byte ptr	[eax+4], 0
.text:00401AF2		       mov     [ebp+var_34], 0
.text:00401AF9		       jmp     loc_401FE3
.text:00401AFE ; ---------------------------------------------------------------------------
.text:00401AFE
.text:00401AFE loc_401AFE:			       ; CODE XREF: sub_401A66+54j
.text:00401AFE		       mov     eax, [ebp+var_28]
.text:00401B01		       mov     eax, [eax+8]
.text:00401B04		       mov     [ebp+var_18], eax
.text:00401B07		       mov     eax, [ebp+var_28]
.text:00401B0A		       mov     eax, [eax+0Ch]
.text:00401B0D		       mov     [ebp+var_14], eax
.text:00401B10		       mov     eax, [ebp+var_28]
.text:00401B13		       movzx   eax, byte ptr [eax+4]
.text:00401B17		       cmp     al, 1
.text:00401B19		       jnz     loc_401D87
.text:00401B1F		       cmp     [ebp+var_14], 0
.text:00401B23		       jnz     short loc_401B52
.text:00401B25		       mov     edx, [ebp+arg_0]
.text:00401B28		       mov     eax, [ebp+var_28]
.text:00401B2B		       mov     [edx], eax
.text:00401B2D		       mov     eax, [ebp+var_28]
.text:00401B30		       mov     byte ptr	[eax+4], 0
.text:00401B34		       mov     edx, [ebp+var_28]
.text:00401B37		       mov     eax, [ebp+var_2C]
.text:00401B3A		       mov     [edx+0Ch], eax
.text:00401B3D		       mov     edx, [ebp+var_2C]
.text:00401B40		       mov     eax, [ebp+var_14]
.text:00401B43		       mov     [edx+8],	eax
.text:00401B46		       mov     [ebp+var_34], 0
.text:00401B4D		       jmp     loc_401FE3
.text:00401B52 ; ---------------------------------------------------------------------------
.text:00401B52
.text:00401B52 loc_401B52:			       ; CODE XREF: sub_401A66+BDj
.text:00401B52		       mov     eax, [ebp+var_14]
.text:00401B55		       mov     [ebp+var_24], eax
.text:00401B58		       cmp     [ebp+var_24], 0
.text:00401B5C		       jz      short loc_401B69
.text:00401B5E		       mov     eax, [ebp+var_24]
.text:00401B61		       movzx   eax, byte ptr [eax+4]
.text:00401B65		       test    al, al
.text:00401B67		       jz      short loc_401B8D
.text:00401B69
.text:00401B69 loc_401B69:			       ; CODE XREF: sub_401A66+F6j
.text:00401B69		       mov     [esp+58h+var_4C], offset	aCNullSglib___g	; "c!=NULL && SGLIB___GET_VALUE(c->color_f"...
.text:00401B71		       mov     [esp+58h+var_50], offset	aSglib___rbtr_0	; "sglib___rbtree_fix_right_deletion_discr"...
.text:00401B79		       mov     [esp+58h+var_54], 19h
.text:00401B81		       mov     [esp+58h+var_58], offset	aRbtree_c ; "rbtree.c"
.text:00401B88		       call    __assert_func
.text:00401B8D
.text:00401B8D loc_401B8D:			       ; CODE XREF: sub_401A66+101j
.text:00401B8D		       mov     eax, [ebp+var_24]
.text:00401B90		       mov     eax, [eax+8]
.text:00401B93		       mov     [ebp+var_10], eax
.text:00401B96		       mov     eax, [ebp+var_24]
.text:00401B99		       mov     eax, [eax+0Ch]
.text:00401B9C		       mov     [ebp+var_C], eax
.text:00401B9F		       cmp     [ebp+var_10], 0
.text:00401BA3		       jz      short loc_401BB0
.text:00401BA5		       mov     eax, [ebp+var_10]
.text:00401BA8		       movzx   eax, byte ptr [eax+4]
.text:00401BAC		       test    al, al
.text:00401BAE		       jnz     short loc_401BF5
.text:00401BB0
.text:00401BB0 loc_401BB0:			       ; CODE XREF: sub_401A66+13Dj
.text:00401BB0		       cmp     [ebp+var_C], 0
.text:00401BB4		       jz      short loc_401BC1
.text:00401BB6		       mov     eax, [ebp+var_C]
.text:00401BB9		       movzx   eax, byte ptr [eax+4]
.text:00401BBD		       test    al, al
.text:00401BBF		       jnz     short loc_401BF5
.text:00401BC1
.text:00401BC1 loc_401BC1:			       ; CODE XREF: sub_401A66+14Ej
.text:00401BC1		       mov     edx, [ebp+arg_0]
.text:00401BC4		       mov     eax, [ebp+var_28]
.text:00401BC7		       mov     [edx], eax
.text:00401BC9		       mov     edx, [ebp+var_28]
.text:00401BCC		       mov     eax, [ebp+var_2C]
.text:00401BCF		       mov     [edx+0Ch], eax
.text:00401BD2		       mov     eax, [ebp+var_28]
.text:00401BD5		       mov     byte ptr	[eax+4], 0
.text:00401BD9		       mov     edx, [ebp+var_2C]
.text:00401BDC		       mov     eax, [ebp+var_24]
.text:00401BDF		       mov     [edx+8],	eax
.text:00401BE2		       mov     eax, [ebp+var_24]
.text:00401BE5		       mov     byte ptr	[eax+4], 1
.text:00401BE9		       mov     [ebp+var_34], 0
.text:00401BF0		       jmp     loc_401FE3
.text:00401BF5 ; ---------------------------------------------------------------------------
.text:00401BF5
.text:00401BF5 loc_401BF5:			       ; CODE XREF: sub_401A66+148j
.text:00401BF5					       ; sub_401A66+159j
.text:00401BF5		       cmp     [ebp+var_10], 0
.text:00401BF9		       jz      loc_401CBE
.text:00401BFF		       mov     eax, [ebp+var_10]
.text:00401C02		       movzx   eax, byte ptr [eax+4]
.text:00401C06		       cmp     al, 1
.text:00401C08		       jnz     loc_401CBE
.text:00401C0E		       cmp     [ebp+var_C], 0
.text:00401C12		       jz      short loc_401C76
.text:00401C14		       mov     eax, [ebp+var_C]
.text:00401C17		       movzx   eax, byte ptr [eax+4]
.text:00401C1B		       cmp     al, 1
.text:00401C1D		       jnz     short loc_401C76
.text:00401C1F		       mov     eax, [ebp+var_C]
.text:00401C22		       mov     [ebp+var_20], eax
.text:00401C25		       mov     eax, [ebp+var_20]
.text:00401C28		       mov     eax, [eax+8]
.text:00401C2B		       mov     [ebp+var_8], eax
.text:00401C2E		       mov     eax, [ebp+var_20]
.text:00401C31		       mov     eax, [eax+0Ch]
.text:00401C34		       mov     [ebp+var_4], eax
.text:00401C37		       mov     edx, [ebp+arg_0]
.text:00401C3A		       mov     eax, [ebp+var_20]
.text:00401C3D		       mov     [edx], eax
.text:00401C3F		       mov     eax, [ebp+var_20]
.text:00401C42		       mov     byte ptr	[eax+4], 0
.text:00401C46		       mov     edx, [ebp+var_20]
.text:00401C49		       mov     eax, [ebp+var_28]
.text:00401C4C		       mov     [edx+8],	eax
.text:00401C4F		       mov     edx, [ebp+var_24]
.text:00401C52		       mov     eax, [ebp+var_8]
.text:00401C55		       mov     [edx+0Ch], eax
.text:00401C58		       mov     edx, [ebp+var_20]
.text:00401C5B		       mov     eax, [ebp+var_2C]
.text:00401C5E		       mov     [edx+0Ch], eax
.text:00401C61		       mov     edx, [ebp+var_2C]
.text:00401C64		       mov     eax, [ebp+var_4]
.text:00401C67		       mov     [edx+8],	eax
.text:00401C6A		       mov     [ebp+var_34], 0
.text:00401C71		       jmp     loc_401FE3
.text:00401C76 ; ---------------------------------------------------------------------------
.text:00401C76
.text:00401C76 loc_401C76:			       ; CODE XREF: sub_401A66+1ACj
.text:00401C76					       ; sub_401A66+1B7j
.text:00401C76		       mov     edx, [ebp+arg_0]
.text:00401C79		       mov     eax, [ebp+var_24]
.text:00401C7C		       mov     [edx], eax
.text:00401C7E		       mov     edx, [ebp+var_24]
.text:00401C81		       mov     eax, [ebp+var_28]
.text:00401C84		       mov     [edx+8],	eax
.text:00401C87		       mov     edx, [ebp+var_24]
.text:00401C8A		       mov     eax, [ebp+var_2C]
.text:00401C8D		       mov     [edx+0Ch], eax
.text:00401C90		       mov     edx, [ebp+var_28]
.text:00401C93		       mov     eax, [ebp+var_18]
.text:00401C96		       mov     [edx+8],	eax
.text:00401C99		       mov     edx, [ebp+var_28]
.text:00401C9C		       mov     eax, [ebp+var_10]
.text:00401C9F		       mov     [edx+0Ch], eax
.text:00401CA2		       mov     edx, [ebp+var_2C]
.text:00401CA5		       mov     eax, [ebp+var_C]
.text:00401CA8		       mov     [edx+8],	eax
.text:00401CAB		       mov     eax, [ebp+var_10]
.text:00401CAE		       mov     byte ptr	[eax+4], 0
.text:00401CB2		       mov     [ebp+var_34], 0
.text:00401CB9		       jmp     loc_401FE3
.text:00401CBE ; ---------------------------------------------------------------------------
.text:00401CBE
.text:00401CBE loc_401CBE:			       ; CODE XREF: sub_401A66+193j
.text:00401CBE					       ; sub_401A66+1A2j
.text:00401CBE		       cmp     [ebp+var_C], 0
.text:00401CC2		       jz      loc_401D63
.text:00401CC8		       mov     eax, [ebp+var_C]
.text:00401CCB		       movzx   eax, byte ptr [eax+4]
.text:00401CCF		       cmp     al, 1
.text:00401CD1		       jnz     loc_401D63
.text:00401CD7		       cmp     [ebp+var_10], 0
.text:00401CDB		       jz      short loc_401D0C
.text:00401CDD		       mov     eax, [ebp+var_10]
.text:00401CE0		       movzx   eax, byte ptr [eax+4]
.text:00401CE4		       test    al, al
.text:00401CE6		       jz      short loc_401D0C
.text:00401CE8		       mov     [esp+58h+var_4C], offset	aClNullSglib___	; "cl==NULL || SGLIB___GET_VALUE(cl->color"...
.text:00401CF0		       mov     [esp+58h+var_50], offset	aSglib___rbtr_0	; "sglib___rbtree_fix_right_deletion_discr"...
.text:00401CF8		       mov     [esp+58h+var_54], 19h
.text:00401D00		       mov     [esp+58h+var_58], offset	aRbtree_c ; "rbtree.c"
.text:00401D07		       call    __assert_func
.text:00401D0C
.text:00401D0C loc_401D0C:			       ; CODE XREF: sub_401A66+275j
.text:00401D0C					       ; sub_401A66+280j
.text:00401D0C		       mov     eax, [ebp+var_C]
.text:00401D0F		       mov     [ebp+var_20], eax
.text:00401D12		       mov     eax, [ebp+var_20]
.text:00401D15		       mov     eax, [eax+8]
.text:00401D18		       mov     [ebp+var_8], eax
.text:00401D1B		       mov     eax, [ebp+var_20]
.text:00401D1E		       mov     eax, [eax+0Ch]
.text:00401D21		       mov     [ebp+var_4], eax
.text:00401D24		       mov     edx, [ebp+arg_0]
.text:00401D27		       mov     eax, [ebp+var_20]
.text:00401D2A		       mov     [edx], eax
.text:00401D2C		       mov     eax, [ebp+var_20]
.text:00401D2F		       mov     byte ptr	[eax+4], 0
.text:00401D33		       mov     edx, [ebp+var_20]
.text:00401D36		       mov     eax, [ebp+var_28]
.text:00401D39		       mov     [edx+8],	eax
.text:00401D3C		       mov     edx, [ebp+var_24]
.text:00401D3F		       mov     eax, [ebp+var_8]
.text:00401D42		       mov     [edx+0Ch], eax
.text:00401D45		       mov     edx, [ebp+var_20]
.text:00401D48		       mov     eax, [ebp+var_2C]
.text:00401D4B		       mov     [edx+0Ch], eax
.text:00401D4E		       mov     edx, [ebp+var_2C]
.text:00401D51		       mov     eax, [ebp+var_4]
.text:00401D54		       mov     [edx+8],	eax
.text:00401D57		       mov     [ebp+var_34], 0
.text:00401D5E		       jmp     loc_401FE3
.text:00401D63 ; ---------------------------------------------------------------------------
.text:00401D63
.text:00401D63 loc_401D63:			       ; CODE XREF: sub_401A66+25Cj
.text:00401D63					       ; sub_401A66+26Bj
.text:00401D63		       mov     [esp+58h+var_4C], offset	a0 ; "0"
.text:00401D6B		       mov     [esp+58h+var_50], offset	aSglib___rbtr_0	; "sglib___rbtree_fix_right_deletion_discr"...
.text:00401D73		       mov     [esp+58h+var_54], 19h
.text:00401D7B		       mov     [esp+58h+var_58], offset	aRbtree_c ; "rbtree.c"
.text:00401D82		       call    __assert_func
.text:00401D87
.text:00401D87 loc_401D87:			       ; CODE XREF: sub_401A66+B3j
.text:00401D87		       cmp     [ebp+var_18], 0
.text:00401D8B		       jz      short loc_401D98
.text:00401D8D		       mov     eax, [ebp+var_18]
.text:00401D90		       movzx   eax, byte ptr [eax+4]
.text:00401D94		       test    al, al
.text:00401D96		       jnz     short loc_401DCE
.text:00401D98
.text:00401D98 loc_401D98:			       ; CODE XREF: sub_401A66+325j
.text:00401D98		       cmp     [ebp+var_14], 0
.text:00401D9C		       jz      short loc_401DA9
.text:00401D9E		       mov     eax, [ebp+var_14]
.text:00401DA1		       movzx   eax, byte ptr [eax+4]
.text:00401DA5		       test    al, al
.text:00401DA7		       jnz     short loc_401DCE
.text:00401DA9
.text:00401DA9 loc_401DA9:			       ; CODE XREF: sub_401A66+336j
.text:00401DA9		       mov     eax, [ebp+var_2C]
.text:00401DAC		       movzx   eax, byte ptr [eax+4]
.text:00401DB0		       test    al, al
.text:00401DB2		       setz    al
.text:00401DB5		       movzx   eax, al
.text:00401DB8		       mov     [ebp+var_34], eax
.text:00401DBB		       mov     eax, [ebp+var_2C]
.text:00401DBE		       mov     byte ptr	[eax+4], 0
.text:00401DC2		       mov     eax, [ebp+var_28]
.text:00401DC5		       mov     byte ptr	[eax+4], 1
.text:00401DC9		       jmp     loc_401FE3
.text:00401DCE ; ---------------------------------------------------------------------------
.text:00401DCE
.text:00401DCE loc_401DCE:			       ; CODE XREF: sub_401A66+330j
.text:00401DCE					       ; sub_401A66+341j
.text:00401DCE		       cmp     [ebp+var_18], 0
.text:00401DD2		       jz      loc_401F4F
.text:00401DD8		       mov     eax, [ebp+var_18]
.text:00401DDB		       movzx   eax, byte ptr [eax+4]
.text:00401DDF		       cmp     al, 1
.text:00401DE1		       jnz     loc_401F4F
.text:00401DE7		       cmp     [ebp+var_14], 0
.text:00401DEB		       jz      short loc_401DF8
.text:00401DED		       mov     eax, [ebp+var_14]
.text:00401DF0		       movzx   eax, byte ptr [eax+4]
.text:00401DF4		       test    al, al
.text:00401DF6		       jnz     short loc_401E39
.text:00401DF8
.text:00401DF8 loc_401DF8:			       ; CODE XREF: sub_401A66+385j
.text:00401DF8		       mov     edx, [ebp+arg_0]
.text:00401DFB		       mov     eax, [ebp+var_28]
.text:00401DFE		       mov     [edx], eax
.text:00401E00		       mov     eax, [ebp+var_2C]
.text:00401E03		       movzx   edx, byte ptr [eax+4]
.text:00401E07		       mov     eax, [ebp+var_28]
.text:00401E0A		       mov     [eax+4],	dl
.text:00401E0D		       mov     eax, [ebp+var_2C]
.text:00401E10		       mov     byte ptr	[eax+4], 0
.text:00401E14		       mov     edx, [ebp+var_28]
.text:00401E17		       mov     eax, [ebp+var_2C]
.text:00401E1A		       mov     [edx+0Ch], eax
.text:00401E1D		       mov     edx, [ebp+var_2C]
.text:00401E20		       mov     eax, [ebp+var_14]
.text:00401E23		       mov     [edx+8],	eax
.text:00401E26		       mov     eax, [ebp+var_18]
.text:00401E29		       mov     byte ptr	[eax+4], 0
.text:00401E2D		       mov     [ebp+var_34], 0
.text:00401E34		       jmp     loc_401FE3
.text:00401E39 ; ---------------------------------------------------------------------------
.text:00401E39
.text:00401E39 loc_401E39:			       ; CODE XREF: sub_401A66+390j
.text:00401E39		       cmp     [ebp+var_18], 0
.text:00401E3D		       jnz     short loc_401E63
.text:00401E3F		       mov     [esp+58h+var_4C], offset	aBlNull	; "bl!=NULL"
.text:00401E47		       mov     [esp+58h+var_50], offset	aSglib___rbtr_0	; "sglib___rbtree_fix_right_deletion_discr"...
.text:00401E4F		       mov     [esp+58h+var_54], 19h
.text:00401E57		       mov     [esp+58h+var_58], offset	aRbtree_c ; "rbtree.c"
.text:00401E5E		       call    __assert_func
.text:00401E63
.text:00401E63 loc_401E63:			       ; CODE XREF: sub_401A66+3D7j
.text:00401E63		       cmp     [ebp+var_14], 0
.text:00401E67		       jnz     short loc_401E8D
.text:00401E69		       mov     [esp+58h+var_4C], offset	aBrNull	; "br!=NULL"
.text:00401E71		       mov     [esp+58h+var_50], offset	aSglib___rbtr_0	; "sglib___rbtree_fix_right_deletion_discr"...
.text:00401E79		       mov     [esp+58h+var_54], 19h
.text:00401E81		       mov     [esp+58h+var_58], offset	aRbtree_c ; "rbtree.c"
.text:00401E88		       call    __assert_func
.text:00401E8D
.text:00401E8D loc_401E8D:			       ; CODE XREF: sub_401A66+401j
.text:00401E8D		       mov     eax, [ebp+var_18]
.text:00401E90		       movzx   eax, byte ptr [eax+4]
.text:00401E94		       cmp     al, 1
.text:00401E96		       jz      short loc_401EBC
.text:00401E98		       mov     [esp+58h+var_4C], offset	aSglib___get__0	; "SGLIB___GET_VALUE(bl->color_field)==1"
.text:00401EA0		       mov     [esp+58h+var_50], offset	aSglib___rbtr_0	; "sglib___rbtree_fix_right_deletion_discr"...
.text:00401EA8		       mov     [esp+58h+var_54], 19h
.text:00401EB0		       mov     [esp+58h+var_58], offset	aRbtree_c ; "rbtree.c"
.text:00401EB7		       call    __assert_func
.text:00401EBC
.text:00401EBC loc_401EBC:			       ; CODE XREF: sub_401A66+430j
.text:00401EBC		       mov     eax, [ebp+var_14]
.text:00401EBF		       movzx   eax, byte ptr [eax+4]
.text:00401EC3		       cmp     al, 1
.text:00401EC5		       jz      short loc_401EEB
.text:00401EC7		       mov     [esp+58h+var_4C], offset	aSglib___get__1	; "SGLIB___GET_VALUE(br->color_field)==1"
.text:00401ECF		       mov     [esp+58h+var_50], offset	aSglib___rbtr_0	; "sglib___rbtree_fix_right_deletion_discr"...
.text:00401ED7		       mov     [esp+58h+var_54], 19h
.text:00401EDF		       mov     [esp+58h+var_58], offset	aRbtree_c ; "rbtree.c"
.text:00401EE6		       call    __assert_func
.text:00401EEB
.text:00401EEB loc_401EEB:			       ; CODE XREF: sub_401A66+45Fj
.text:00401EEB		       mov     eax, [ebp+var_14]
.text:00401EEE		       mov     [ebp+var_24], eax
.text:00401EF1		       mov     eax, [ebp+var_24]
.text:00401EF4		       mov     eax, [eax+8]
.text:00401EF7		       mov     [ebp+var_10], eax
.text:00401EFA		       mov     eax, [ebp+var_24]
.text:00401EFD		       mov     eax, [eax+0Ch]
.text:00401F00		       mov     [ebp+var_C], eax
.text:00401F03		       mov     edx, [ebp+arg_0]
.text:00401F06		       mov     eax, [ebp+var_24]
.text:00401F09		       mov     [edx], eax
.text:00401F0B		       mov     eax, [ebp+var_2C]
.text:00401F0E		       movzx   edx, byte ptr [eax+4]
.text:00401F12		       mov     eax, [ebp+var_24]
.text:00401F15		       mov     [eax+4],	dl
.text:00401F18		       mov     eax, [ebp+var_2C]
.text:00401F1B		       mov     byte ptr	[eax+4], 0
.text:00401F1F		       mov     edx, [ebp+var_24]
.text:00401F22		       mov     eax, [ebp+var_28]
.text:00401F25		       mov     [edx+8],	eax
.text:00401F28		       mov     edx, [ebp+var_24]
.text:00401F2B		       mov     eax, [ebp+var_2C]
.text:00401F2E		       mov     [edx+0Ch], eax
.text:00401F31		       mov     edx, [ebp+var_28]
.text:00401F34		       mov     eax, [ebp+var_10]
.text:00401F37		       mov     [edx+0Ch], eax
.text:00401F3A		       mov     edx, [ebp+var_2C]
.text:00401F3D		       mov     eax, [ebp+var_C]
.text:00401F40		       mov     [edx+8],	eax
.text:00401F43		       mov     [ebp+var_34], 0
.text:00401F4A		       jmp     loc_401FE3
.text:00401F4F ; ---------------------------------------------------------------------------
.text:00401F4F
.text:00401F4F loc_401F4F:			       ; CODE XREF: sub_401A66+36Cj
.text:00401F4F					       ; sub_401A66+37Bj
.text:00401F4F		       cmp     [ebp+var_14], 0
.text:00401F53		       jz      short loc_401F60
.text:00401F55		       mov     eax, [ebp+var_14]
.text:00401F58		       movzx   eax, byte ptr [eax+4]
.text:00401F5C		       cmp     al, 1
.text:00401F5E		       jz      short loc_401F84
.text:00401F60
.text:00401F60 loc_401F60:			       ; CODE XREF: sub_401A66+4EDj
.text:00401F60		       mov     [esp+58h+var_4C], offset	aBrNullSglib___	; "br!=NULL && SGLIB___GET_VALUE(br->color"...
.text:00401F68		       mov     [esp+58h+var_50], offset	aSglib___rbtr_0	; "sglib___rbtree_fix_right_deletion_discr"...
.text:00401F70		       mov     [esp+58h+var_54], 19h
.text:00401F78		       mov     [esp+58h+var_58], offset	aRbtree_c ; "rbtree.c"
.text:00401F7F		       call    __assert_func
.text:00401F84
.text:00401F84 loc_401F84:			       ; CODE XREF: sub_401A66+4F8j
.text:00401F84		       mov     eax, [ebp+var_14]
.text:00401F87		       mov     [ebp+var_24], eax
.text:00401F8A		       mov     eax, [ebp+var_24]
.text:00401F8D		       mov     eax, [eax+8]
.text:00401F90		       mov     [ebp+var_10], eax
.text:00401F93		       mov     eax, [ebp+var_24]
.text:00401F96		       mov     eax, [eax+0Ch]
.text:00401F99		       mov     [ebp+var_C], eax
.text:00401F9C		       mov     edx, [ebp+arg_0]
.text:00401F9F		       mov     eax, [ebp+var_24]
.text:00401FA2		       mov     [edx], eax
.text:00401FA4		       mov     eax, [ebp+var_2C]
.text:00401FA7		       movzx   edx, byte ptr [eax+4]
.text:00401FAB		       mov     eax, [ebp+var_24]
.text:00401FAE		       mov     [eax+4],	dl
.text:00401FB1		       mov     eax, [ebp+var_2C]
.text:00401FB4		       mov     byte ptr	[eax+4], 0
.text:00401FB8		       mov     edx, [ebp+var_24]
.text:00401FBB		       mov     eax, [ebp+var_28]
.text:00401FBE		       mov     [edx+8],	eax
.text:00401FC1		       mov     edx, [ebp+var_24]
.text:00401FC4		       mov     eax, [ebp+var_2C]
.text:00401FC7		       mov     [edx+0Ch], eax
.text:00401FCA		       mov     edx, [ebp+var_28]
.text:00401FCD		       mov     eax, [ebp+var_10]
.text:00401FD0		       mov     [edx+0Ch], eax
.text:00401FD3		       mov     edx, [ebp+var_2C]
.text:00401FD6		       mov     eax, [ebp+var_C]
.text:00401FD9		       mov     [edx+8],	eax
.text:00401FDC		       mov     [ebp+var_34], 0
.text:00401FE3
.text:00401FE3 loc_401FE3:			       ; CODE XREF: sub_401A66+93j
.text:00401FE3					       ; sub_401A66+E7j ...
.text:00401FE3		       mov     eax, [ebp+var_34]
.text:00401FE6		       leave
.text:00401FE7		       retn
.text:00401FE7 sub_401A66      endp
.text:00401FE7
.text:00401FE8
.text:00401FE8 ; =============== S U B R O U T I N E =======================================
.text:00401FE8
.text:00401FE8 ; Attributes: bp-based frame
.text:00401FE8
.text:00401FE8 sub_401FE8      proc near	       ; CODE XREF: sub_401FE8+5Cp
.text:00401FE8					       ; sub_401FE8+89p ...
.text:00401FE8
.text:00401FE8 var_18	       = dword ptr -18h
.text:00401FE8 var_14	       = dword ptr -14h
.text:00401FE8 var_8	       = dword ptr -8
.text:00401FE8 var_4	       = dword ptr -4
.text:00401FE8 arg_0	       = dword ptr  8
.text:00401FE8 arg_4	       = dword ptr  0Ch
.text:00401FE8
.text:00401FE8		       push    ebp
.text:00401FE9		       mov     ebp, esp
.text:00401FEB		       sub     esp, 18h
.text:00401FEE		       mov     eax, [ebp+arg_0]
.text:00401FF1		       mov     eax, [eax]
.text:00401FF3		       mov     [ebp+var_4], eax
.text:00401FF6		       cmp     [ebp+var_4], 0
.text:00401FFA		       jnz     short loc_40200D
.text:00401FFC		       mov     eax, [ebp+arg_4]
.text:00401FFF		       mov     byte ptr	[eax+4], 1
.text:00402003		       mov     edx, [ebp+arg_0]
.text:00402006		       mov     eax, [ebp+arg_4]
.text:00402009		       mov     [edx], eax
.text:0040200B		       jmp     short locret_40208C
.text:0040200D ; ---------------------------------------------------------------------------
.text:0040200D
.text:0040200D loc_40200D:			       ; CODE XREF: sub_401FE8+12j
.text:0040200D		       mov     eax, [ebp+arg_4]
.text:00402010		       mov     edx, [eax]
.text:00402012		       mov     eax, [ebp+var_4]
.text:00402015		       mov     eax, [eax]
.text:00402017		       mov     ecx, edx
.text:00402019		       sub     ecx, eax
.text:0040201B		       mov     eax, ecx
.text:0040201D		       mov     [ebp+var_8], eax
.text:00402020		       cmp     [ebp+var_8], 0
.text:00402024		       js      short loc_402034
.text:00402026		       cmp     [ebp+var_8], 0
.text:0040202A		       jnz     short loc_402061
.text:0040202C		       mov     eax, [ebp+arg_4]
.text:0040202F		       cmp     eax, [ebp+var_4]
.text:00402032		       jnb     short loc_402061
.text:00402034
.text:00402034 loc_402034:			       ; CODE XREF: sub_401FE8+3Cj
.text:00402034		       mov     eax, [ebp+var_4]
.text:00402037		       lea     edx, [eax+8]
.text:0040203A		       mov     eax, [ebp+arg_4]
.text:0040203D		       mov     [esp+18h+var_14], eax
.text:00402041		       mov     [esp+18h+var_18], edx
.text:00402044		       call    sub_401FE8
.text:00402049		       mov     eax, [ebp+var_4]
.text:0040204C		       movzx   eax, byte ptr [eax+4]
.text:00402050		       test    al, al
.text:00402052		       jnz     short locret_40208C
.text:00402054		       mov     eax, [ebp+arg_0]
.text:00402057		       mov     [esp+18h+var_18], eax
.text:0040205A		       call    sub_4011A0
.text:0040205F		       jmp     short locret_40208C
.text:00402061 ; ---------------------------------------------------------------------------
.text:00402061
.text:00402061 loc_402061:			       ; CODE XREF: sub_401FE8+42j
.text:00402061					       ; sub_401FE8+4Aj
.text:00402061		       mov     eax, [ebp+var_4]
.text:00402064		       lea     edx, [eax+0Ch]
.text:00402067		       mov     eax, [ebp+arg_4]
.text:0040206A		       mov     [esp+18h+var_14], eax
.text:0040206E		       mov     [esp+18h+var_18], edx
.text:00402071		       call    sub_401FE8
.text:00402076		       mov     eax, [ebp+var_4]
.text:00402079		       movzx   eax, byte ptr [eax+4]
.text:0040207D		       test    al, al
.text:0040207F		       jnz     short locret_40208C
.text:00402081		       mov     eax, [ebp+arg_0]
.text:00402084		       mov     [esp+18h+var_18], eax
.text:00402087		       call    sub_401342
.text:0040208C
.text:0040208C locret_40208C:			       ; CODE XREF: sub_401FE8+23j
.text:0040208C					       ; sub_401FE8+6Aj ...
.text:0040208C		       leave
.text:0040208D		       retn
.text:0040208D sub_401FE8      endp
.text:0040208D
.text:0040208E
.text:0040208E ; =============== S U B R O U T I N E =======================================
.text:0040208E
.text:0040208E ; Attributes: bp-based frame
.text:0040208E
.text:0040208E sub_40208E      proc near	       ; CODE XREF: sub_40208E+BFp
.text:0040208E					       ; sub_40216E+18Bp
.text:0040208E
.text:0040208E var_28	       = dword ptr -28h
.text:0040208E var_24	       = dword ptr -24h
.text:0040208E var_20	       = dword ptr -20h
.text:0040208E var_1C	       = dword ptr -1Ch
.text:0040208E var_C	       = dword ptr -0Ch
.text:0040208E var_8	       = dword ptr -8
.text:0040208E var_4	       = dword ptr -4
.text:0040208E arg_0	       = dword ptr  8
.text:0040208E arg_4	       = dword ptr  0Ch
.text:0040208E
.text:0040208E		       push    ebp
.text:0040208F		       mov     ebp, esp
.text:00402091		       sub     esp, 28h
.text:00402094		       mov     eax, [ebp+arg_0]
.text:00402097		       mov     eax, [eax]
.text:00402099		       mov     [ebp+var_C], eax
.text:0040209C		       mov     [ebp+var_8], 0
.text:004020A3		       cmp     [ebp+var_C], 0
.text:004020A7		       jnz     short loc_4020CD
.text:004020A9		       mov     [esp+28h+var_1C], offset	aTNull ; "t!=NULL"
.text:004020B1		       mov     [esp+28h+var_20], offset	aSglib___rbtr_1	; "sglib___rbtree_delete_rightmost_leaf"
.text:004020B9		       mov     [esp+28h+var_24], 19h
.text:004020C1		       mov     [esp+28h+var_28], offset	aRbtree_c ; "rbtree.c"
.text:004020C8		       call    __assert_func
.text:004020CD
.text:004020CD loc_4020CD:			       ; CODE XREF: sub_40208E+19j
.text:004020CD		       mov     eax, [ebp+var_C]
.text:004020D0		       mov     eax, [eax+0Ch]
.text:004020D3		       test    eax, eax
.text:004020D5		       jnz     short loc_40213D
.text:004020D7		       mov     edx, [ebp+arg_4]
.text:004020DA		       mov     eax, [ebp+var_C]
.text:004020DD		       mov     [edx], eax
.text:004020DF		       mov     eax, [ebp+var_C]
.text:004020E2		       mov     eax, [eax+8]
.text:004020E5		       test    eax, eax
.text:004020E7		       jz      short loc_402120
.text:004020E9		       mov     eax, [ebp+var_C]
.text:004020EC		       movzx   eax, byte ptr [eax+4]
.text:004020F0		       test    al, al
.text:004020F2		       jnz     short loc_402109
.text:004020F4		       mov     eax, [ebp+var_C]
.text:004020F7		       mov     eax, [eax+8]
.text:004020FA		       movzx   eax, byte ptr [eax+4]
.text:004020FE		       test    al, al
.text:00402100		       jnz     short loc_402109
.text:00402102		       mov     [ebp+var_8], 1
.text:00402109
.text:00402109 loc_402109:			       ; CODE XREF: sub_40208E+64j
.text:00402109					       ; sub_40208E+72j
.text:00402109		       mov     eax, [ebp+var_C]
.text:0040210C		       mov     eax, [eax+8]
.text:0040210F		       mov     byte ptr	[eax+4], 0
.text:00402113		       mov     eax, [ebp+var_C]
.text:00402116		       mov     edx, [eax+8]
.text:00402119		       mov     eax, [ebp+arg_0]
.text:0040211C		       mov     [eax], edx
.text:0040211E		       jmp     short loc_402169
.text:00402120 ; ---------------------------------------------------------------------------
.text:00402120
.text:00402120 loc_402120:			       ; CODE XREF: sub_40208E+59j
.text:00402120		       mov     eax, [ebp+arg_0]
.text:00402123		       mov     dword ptr [eax],	0
.text:00402129		       mov     eax, [ebp+var_C]
.text:0040212C		       movzx   eax, byte ptr [eax+4]
.text:00402130		       test    al, al
.text:00402132		       setz    al
.text:00402135		       movzx   eax, al
.text:00402138		       mov     [ebp+var_8], eax
.text:0040213B		       jmp     short loc_402169
.text:0040213D ; ---------------------------------------------------------------------------
.text:0040213D
.text:0040213D loc_40213D:			       ; CODE XREF: sub_40208E+47j
.text:0040213D		       mov     eax, [ebp+var_C]
.text:00402140		       lea     edx, [eax+0Ch]
.text:00402143		       mov     eax, [ebp+arg_4]
.text:00402146		       mov     [esp+28h+var_24], eax
.text:0040214A		       mov     [esp+28h+var_28], edx
.text:0040214D		       call    sub_40208E
.text:00402152		       mov     [ebp+var_4], eax
.text:00402155		       cmp     [ebp+var_4], 0
.text:00402159		       jz      short loc_402169
.text:0040215B		       mov     eax, [ebp+arg_0]
.text:0040215E		       mov     [esp+28h+var_28], eax
.text:00402161		       call    sub_401A66
.text:00402166		       mov     [ebp+var_8], eax
.text:00402169
.text:00402169 loc_402169:			       ; CODE XREF: sub_40208E+90j
.text:00402169					       ; sub_40208E+ADj ...
.text:00402169		       mov     eax, [ebp+var_8]
.text:0040216C		       leave
.text:0040216D		       retn
.text:0040216D sub_40208E      endp
.text:0040216D
.text:0040216E
.text:0040216E ; =============== S U B R O U T I N E =======================================
.text:0040216E
.text:0040216E ; Attributes: bp-based frame
.text:0040216E
.text:0040216E sub_40216E      proc near	       ; CODE XREF: sub_40216E+76p
.text:0040216E					       ; sub_40216E+BFp ...
.text:0040216E
.text:0040216E var_38	       = dword ptr -38h
.text:0040216E var_34	       = dword ptr -34h
.text:0040216E var_30	       = dword ptr -30h
.text:0040216E var_2C	       = dword ptr -2Ch
.text:0040216E var_14	       = dword ptr -14h
.text:0040216E var_10	       = dword ptr -10h
.text:0040216E var_C	       = dword ptr -0Ch
.text:0040216E var_8	       = dword ptr -8
.text:0040216E var_4	       = dword ptr -4
.text:0040216E arg_0	       = dword ptr  8
.text:0040216E arg_4	       = dword ptr  0Ch
.text:0040216E
.text:0040216E		       push    ebp
.text:0040216F		       mov     ebp, esp
.text:00402171		       sub     esp, 38h
.text:00402174		       mov     eax, [ebp+arg_0]
.text:00402177		       mov     eax, [eax]
.text:00402179		       mov     [ebp+var_10], eax
.text:0040217C		       mov     [ebp+var_8], 0
.text:00402183		       cmp     [ebp+var_10], 0
.text:00402187		       jnz     short loc_4021AD
.text:00402189		       mov     [esp+38h+var_2C], offset	a0TheElementToD	; "0 &&	\"The element to delete	not found i"...
.text:00402191		       mov     [esp+38h+var_30], offset	aSglib___rbtr_2	; "sglib___rbtree_delete_recursive"
.text:00402199		       mov     [esp+38h+var_34], 19h
.text:004021A1		       mov     [esp+38h+var_38], offset	aRbtree_c ; "rbtree.c"
.text:004021A8		       call    __assert_func
.text:004021AD
.text:004021AD loc_4021AD:			       ; CODE XREF: sub_40216E+19j
.text:004021AD		       mov     eax, [ebp+arg_4]
.text:004021B0		       mov     edx, [eax]
.text:004021B2		       mov     eax, [ebp+var_10]
.text:004021B5		       mov     eax, [eax]
.text:004021B7		       mov     ecx, edx
.text:004021B9		       sub     ecx, eax
.text:004021BB		       mov     eax, ecx
.text:004021BD		       mov     [ebp+var_C], eax
.text:004021C0		       cmp     [ebp+var_C], 0
.text:004021C4		       js      short loc_4021D4
.text:004021C6		       cmp     [ebp+var_C], 0
.text:004021CA		       jnz     short loc_402209
.text:004021CC		       mov     eax, [ebp+arg_4]
.text:004021CF		       cmp     eax, [ebp+var_10]
.text:004021D2		       jnb     short loc_402209
.text:004021D4
.text:004021D4 loc_4021D4:			       ; CODE XREF: sub_40216E+56j
.text:004021D4		       mov     eax, [ebp+var_10]
.text:004021D7		       lea     edx, [eax+8]
.text:004021DA		       mov     eax, [ebp+arg_4]
.text:004021DD		       mov     [esp+38h+var_34], eax
.text:004021E1		       mov     [esp+38h+var_38], edx
.text:004021E4		       call    sub_40216E
.text:004021E9		       mov     [ebp+var_4], eax
.text:004021EC		       cmp     [ebp+var_4], 0
.text:004021F0		       jz      loc_402342
.text:004021F6		       mov     eax, [ebp+arg_0]
.text:004021F9		       mov     [esp+38h+var_38], eax
.text:004021FC		       call    sub_4014E4
.text:00402201		       mov     [ebp+var_8], eax
.text:00402204		       jmp     loc_402342
.text:00402209 ; ---------------------------------------------------------------------------
.text:00402209
.text:00402209 loc_402209:			       ; CODE XREF: sub_40216E+5Cj
.text:00402209					       ; sub_40216E+64j
.text:00402209		       cmp     [ebp+var_C], 0
.text:0040220D		       jg      short loc_40221D
.text:0040220F		       cmp     [ebp+var_C], 0
.text:00402213		       jnz     short loc_402252
.text:00402215		       mov     eax, [ebp+arg_4]
.text:00402218		       cmp     eax, [ebp+var_10]
.text:0040221B		       jbe     short loc_402252
.text:0040221D
.text:0040221D loc_40221D:			       ; CODE XREF: sub_40216E+9Fj
.text:0040221D		       mov     eax, [ebp+var_10]
.text:00402220		       lea     edx, [eax+0Ch]
.text:00402223		       mov     eax, [ebp+arg_4]
.text:00402226		       mov     [esp+38h+var_34], eax
.text:0040222A		       mov     [esp+38h+var_38], edx
.text:0040222D		       call    sub_40216E
.text:00402232		       mov     [ebp+var_4], eax
.text:00402235		       cmp     [ebp+var_4], 0
.text:00402239		       jz      loc_402342
.text:0040223F		       mov     eax, [ebp+arg_0]
.text:00402242		       mov     [esp+38h+var_38], eax
.text:00402245		       call    sub_401A66
.text:0040224A		       mov     [ebp+var_8], eax
.text:0040224D		       jmp     loc_402342
.text:00402252 ; ---------------------------------------------------------------------------
.text:00402252
.text:00402252 loc_402252:			       ; CODE XREF: sub_40216E+A5j
.text:00402252					       ; sub_40216E+ADj
.text:00402252		       mov     eax, [ebp+arg_4]
.text:00402255		       cmp     eax, [ebp+var_10]
.text:00402258		       jz      short loc_40227E
.text:0040225A		       mov     [esp+38h+var_2C], offset	aElemTDeletingA	; "elem==t && \"Deleting an element which i"...
.text:00402262		       mov     [esp+38h+var_30], offset	aSglib___rbtr_2	; "sglib___rbtree_delete_recursive"
.text:0040226A		       mov     [esp+38h+var_34], 19h
.text:00402272		       mov     [esp+38h+var_38], offset	aRbtree_c ; "rbtree.c"
.text:00402279		       call    __assert_func
.text:0040227E
.text:0040227E loc_40227E:			       ; CODE XREF: sub_40216E+EAj
.text:0040227E		       mov     eax, [ebp+var_10]
.text:00402281		       mov     eax, [eax+8]
.text:00402284		       test    eax, eax
.text:00402286		       jnz     short loc_4022E9
.text:00402288		       mov     eax, [ebp+var_10]
.text:0040228B		       mov     eax, [eax+0Ch]
.text:0040228E		       test    eax, eax
.text:00402290		       jnz     short loc_4022B2
.text:00402292		       mov     eax, [ebp+arg_0]
.text:00402295		       mov     dword ptr [eax],	0
.text:0040229B		       mov     eax, [ebp+var_10]
.text:0040229E		       movzx   eax, byte ptr [eax+4]
.text:004022A2		       test    al, al
.text:004022A4		       setz    al
.text:004022A7		       movzx   eax, al
.text:004022AA		       mov     [ebp+var_8], eax
.text:004022AD		       jmp     loc_402342
.text:004022B2 ; ---------------------------------------------------------------------------
.text:004022B2
.text:004022B2 loc_4022B2:			       ; CODE XREF: sub_40216E+122j
.text:004022B2		       mov     eax, [ebp+var_10]
.text:004022B5		       movzx   eax, byte ptr [eax+4]
.text:004022B9		       test    al, al
.text:004022BB		       jnz     short loc_4022D2
.text:004022BD		       mov     eax, [ebp+var_10]
.text:004022C0		       mov     eax, [eax+0Ch]
.text:004022C3		       movzx   eax, byte ptr [eax+4]
.text:004022C7		       test    al, al
.text:004022C9		       jnz     short loc_4022D2
.text:004022CB		       mov     [ebp+var_8], 1
.text:004022D2
.text:004022D2 loc_4022D2:			       ; CODE XREF: sub_40216E+14Dj
.text:004022D2					       ; sub_40216E+15Bj
.text:004022D2		       mov     eax, [ebp+var_10]
.text:004022D5		       mov     eax, [eax+0Ch]
.text:004022D8		       mov     byte ptr	[eax+4], 0
.text:004022DC		       mov     eax, [ebp+var_10]
.text:004022DF		       mov     edx, [eax+0Ch]
.text:004022E2		       mov     eax, [ebp+arg_0]
.text:004022E5		       mov     [eax], edx
.text:004022E7		       jmp     short loc_402342
.text:004022E9 ; ---------------------------------------------------------------------------
.text:004022E9
.text:004022E9 loc_4022E9:			       ; CODE XREF: sub_40216E+118j
.text:004022E9		       mov     eax, [ebp+var_10]
.text:004022EC		       lea     edx, [eax+8]
.text:004022EF		       lea     eax, [ebp+var_14]
.text:004022F2		       mov     [esp+38h+var_34], eax
.text:004022F6		       mov     [esp+38h+var_38], edx
.text:004022F9		       call    sub_40208E
.text:004022FE		       mov     [ebp+var_4], eax
.text:00402301		       mov     edx, [ebp+var_14]
.text:00402304		       mov     eax, [ebp+var_10]
.text:00402307		       mov     eax, [eax+8]
.text:0040230A		       mov     [edx+8],	eax
.text:0040230D		       mov     edx, [ebp+var_14]
.text:00402310		       mov     eax, [ebp+var_10]
.text:00402313		       mov     eax, [eax+0Ch]
.text:00402316		       mov     [edx+0Ch], eax
.text:00402319		       mov     edx, [ebp+var_14]
.text:0040231C		       mov     eax, [ebp+var_10]
.text:0040231F		       movzx   eax, byte ptr [eax+4]
.text:00402323		       mov     [edx+4],	al
.text:00402326		       mov     edx, [ebp+var_14]
.text:00402329		       mov     eax, [ebp+arg_0]
.text:0040232C		       mov     [eax], edx
.text:0040232E		       cmp     [ebp+var_4], 0
.text:00402332		       jz      short loc_402342
.text:00402334		       mov     eax, [ebp+arg_0]
.text:00402337		       mov     [esp+38h+var_38], eax
.text:0040233A		       call    sub_4014E4
.text:0040233F		       mov     [ebp+var_8], eax
.text:00402342
.text:00402342 loc_402342:			       ; CODE XREF: sub_40216E+82j
.text:00402342					       ; sub_40216E+96j ...
.text:00402342		       mov     eax, [ebp+var_8]
.text:00402345		       leave
.text:00402346		       retn
.text:00402346 sub_40216E      endp
.text:00402346
.text:00402347
.text:00402347 ; =============== S U B R O U T I N E =======================================
.text:00402347
.text:00402347 ; Attributes: bp-based frame
.text:00402347
.text:00402347 sub_402347      proc near	       ; CODE XREF: .text:0040252Fp
.text:00402347					       ; .text:00402DA5p
.text:00402347
.text:00402347 var_8	       = dword ptr -8
.text:00402347 var_4	       = dword ptr -4
.text:00402347 arg_0	       = dword ptr  8
.text:00402347 arg_4	       = dword ptr  0Ch
.text:00402347
.text:00402347		       push    ebp
.text:00402348		       mov     ebp, esp
.text:0040234A		       sub     esp, 8
.text:0040234D		       mov     eax, [ebp+arg_4]
.text:00402350		       mov     dword ptr [eax+0Ch], 0
.text:00402357		       mov     eax, [ebp+arg_4]
.text:0040235A		       mov     edx, [eax+0Ch]
.text:0040235D		       mov     eax, [ebp+arg_4]
.text:00402360		       mov     [eax+8],	edx
.text:00402363		       mov     eax, [ebp+arg_4]
.text:00402366		       mov     [esp+8+var_4], eax
.text:0040236A		       mov     eax, [ebp+arg_0]
.text:0040236D		       mov     [esp+8+var_8], eax
.text:00402370		       call    sub_401FE8
.text:00402375		       mov     eax, [ebp+arg_0]
.text:00402378		       mov     eax, [eax]
.text:0040237A		       mov     byte ptr	[eax+4], 0
.text:0040237E		       leave
.text:0040237F		       retn
.text:0040237F sub_402347      endp
.text:0040237F
.text:00402380
.text:00402380 ; =============== S U B R O U T I N E =======================================
.text:00402380
.text:00402380 ; Attributes: bp-based frame
.text:00402380
.text:00402380 sub_402380      proc near	       ; CODE XREF: .text:004024DEp
.text:00402380
.text:00402380 var_8	       = dword ptr -8
.text:00402380 var_4	       = dword ptr -4
.text:00402380 arg_0	       = dword ptr  8
.text:00402380 arg_4	       = dword ptr  0Ch
.text:00402380
.text:00402380		       push    ebp
.text:00402381		       mov     ebp, esp
.text:00402383		       sub     esp, 8
.text:00402386		       mov     eax, [ebp+arg_4]
.text:00402389		       mov     [esp+8+var_4], eax
.text:0040238D		       mov     eax, [ebp+arg_0]
.text:00402390		       mov     [esp+8+var_8], eax
.text:00402393		       call    sub_40216E
.text:00402398		       mov     eax, [ebp+arg_0]
.text:0040239B		       mov     eax, [eax]
.text:0040239D		       test    eax, eax
.text:0040239F		       jz      short locret_4023AA
.text:004023A1		       mov     eax, [ebp+arg_0]
.text:004023A4		       mov     eax, [eax]
.text:004023A6		       mov     byte ptr	[eax+4], 0
.text:004023AA
.text:004023AA locret_4023AA:			       ; CODE XREF: sub_402380+1Fj
.text:004023AA		       leave
.text:004023AB		       retn
.text:004023AB sub_402380      endp
.text:004023AB
.text:004023AC
.text:004023AC ; =============== S U B R O U T I N E =======================================
.text:004023AC
.text:004023AC ; Attributes: bp-based frame
.text:004023AC
.text:004023AC sub_4023AC      proc near	       ; CODE XREF: .text:004024BAp
.text:004023AC					       ; .text:0040250Dp ...
.text:004023AC
.text:004023AC var_C	       = dword ptr -0Ch
.text:004023AC var_8	       = dword ptr -8
.text:004023AC var_4	       = dword ptr -4
.text:004023AC arg_0	       = dword ptr  8
.text:004023AC arg_4	       = dword ptr  0Ch
.text:004023AC
.text:004023AC		       push    ebp
.text:004023AD		       mov     ebp, esp
.text:004023AF		       sub     esp, 10h
.text:004023B2		       mov     eax, [ebp+arg_0]
.text:004023B5		       mov     [ebp+var_8], eax
.text:004023B8		       jmp     short loc_4023ED
.text:004023BA ; ---------------------------------------------------------------------------
.text:004023BA
.text:004023BA loc_4023BA:			       ; CODE XREF: sub_4023AC+45j
.text:004023BA		       mov     eax, [ebp+arg_4]
.text:004023BD		       mov     edx, [eax]
.text:004023BF		       mov     eax, [ebp+var_8]
.text:004023C2		       mov     eax, [eax]
.text:004023C4		       mov     ecx, edx
.text:004023C6		       sub     ecx, eax
.text:004023C8		       mov     eax, ecx
.text:004023CA		       mov     [ebp+var_4], eax
.text:004023CD		       cmp     [ebp+var_4], 0
.text:004023D1		       jns     short loc_4023DE
.text:004023D3		       mov     eax, [ebp+var_8]
.text:004023D6		       mov     eax, [eax+8]
.text:004023D9		       mov     [ebp+var_8], eax
.text:004023DC		       jmp     short loc_4023ED
.text:004023DE ; ---------------------------------------------------------------------------
.text:004023DE
.text:004023DE loc_4023DE:			       ; CODE XREF: sub_4023AC+25j
.text:004023DE		       cmp     [ebp+var_4], 0
.text:004023E2		       jle     short loc_4023F3
.text:004023E4		       mov     eax, [ebp+var_8]
.text:004023E7		       mov     eax, [eax+0Ch]
.text:004023EA		       mov     [ebp+var_8], eax
.text:004023ED
.text:004023ED loc_4023ED:			       ; CODE XREF: sub_4023AC+Cj
.text:004023ED					       ; sub_4023AC+30j
.text:004023ED		       cmp     [ebp+var_8], 0
.text:004023F1		       jnz     short loc_4023BA
.text:004023F3
.text:004023F3 loc_4023F3:			       ; CODE XREF: sub_4023AC+36j
.text:004023F3		       mov     eax, [ebp+var_8]
.text:004023F6		       mov     [ebp+var_C], eax
.text:004023F9		       mov     eax, [ebp+var_C]
.text:004023FC		       leave
.text:004023FD		       retn
.text:004023FD sub_4023AC      endp
.text:004023FD
.text:004023FE ; ---------------------------------------------------------------------------
.text:004023FE		       push    ebp
.text:004023FF		       mov     ebp, esp
.text:00402401		       sub     esp, 28h
.text:00402404		       jmp     loc_40248F
.text:00402409 ; ---------------------------------------------------------------------------
.text:00402409
.text:00402409 loc_402409:			       ; CODE XREF: .text:00402493j
.text:00402409		       mov     eax, [ebp+0Ch]
.text:0040240C		       mov     edx, [eax]
.text:0040240E		       mov     eax, [ebp+8]
.text:00402411		       mov     eax, [eax]
.text:00402413		       mov     ecx, edx
.text:00402415		       sub     ecx, eax
.text:00402417		       mov     eax, ecx
.text:00402419		       mov     [ebp-4],	eax
.text:0040241C		       cmp     dword ptr [ebp-4], 0
.text:00402420		       js      short loc_402430
.text:00402422		       cmp     dword ptr [ebp-4], 0
.text:00402426		       jnz     short loc_40243B
.text:00402428		       mov     eax, [ebp+0Ch]
.text:0040242B		       cmp     eax, [ebp+8]
.text:0040242E		       jnb     short loc_40243B
.text:00402430
.text:00402430 loc_402430:			       ; CODE XREF: .text:00402420j
.text:00402430		       mov     eax, [ebp+8]
.text:00402433		       mov     eax, [eax+8]
.text:00402436		       mov     [ebp+8],	eax
.text:00402439		       jmp     short loc_40248F
.text:0040243B ; ---------------------------------------------------------------------------
.text:0040243B
.text:0040243B loc_40243B:			       ; CODE XREF: .text:00402426j
.text:0040243B					       ; .text:0040242Ej
.text:0040243B		       cmp     dword ptr [ebp-4], 0
.text:0040243F		       jg      short loc_40244F
.text:00402441		       cmp     dword ptr [ebp-4], 0
.text:00402445		       jnz     short loc_40245A
.text:00402447		       mov     eax, [ebp+0Ch]
.text:0040244A		       cmp     eax, [ebp+8]
.text:0040244D		       jbe     short loc_40245A
.text:0040244F
.text:0040244F loc_40244F:			       ; CODE XREF: .text:0040243Fj
.text:0040244F		       mov     eax, [ebp+8]
.text:00402452		       mov     eax, [eax+0Ch]
.text:00402455		       mov     [ebp+8],	eax
.text:00402458		       jmp     short loc_40248F
.text:0040245A ; ---------------------------------------------------------------------------
.text:0040245A
.text:0040245A loc_40245A:			       ; CODE XREF: .text:00402445j
.text:0040245A					       ; .text:0040244Dj
.text:0040245A		       mov     eax, [ebp+8]
.text:0040245D		       cmp     eax, [ebp+0Ch]
.text:00402460		       jz      short loc_402486
.text:00402462		       mov     dword ptr [esp+0Ch], offset aTElem ; "t == elem"
.text:0040246A		       mov     dword ptr [esp+8], offset aSglib_rbtree_i ; "sglib_rbtree_is_member"
.text:00402472		       mov     dword ptr [esp+4], 19h
.text:0040247A		       mov     dword ptr [esp],	offset aRbtree_c ; "rbtree.c"
.text:00402481		       call    __assert_func
.text:00402486
.text:00402486 loc_402486:			       ; CODE XREF: .text:00402460j
.text:00402486		       mov     dword ptr [ebp-14h], 1
.text:0040248D		       jmp     short loc_4024A0
.text:0040248F ; ---------------------------------------------------------------------------
.text:0040248F
.text:0040248F loc_40248F:			       ; CODE XREF: .text:00402404j
.text:0040248F					       ; .text:00402439j ...
.text:0040248F		       cmp     dword ptr [ebp+8], 0
.text:00402493		       jnz     loc_402409
.text:00402499		       mov     dword ptr [ebp-14h], 0
.text:004024A0
.text:004024A0 loc_4024A0:			       ; CODE XREF: .text:0040248Dj
.text:004024A0		       mov     eax, [ebp-14h]
.text:004024A3		       leave
.text:004024A4		       retn
.text:004024A5 ; ---------------------------------------------------------------------------
.text:004024A5		       push    ebp
.text:004024A6		       mov     ebp, esp
.text:004024A8		       sub     esp, 18h
.text:004024AB		       mov     eax, [ebp+8]
.text:004024AE		       mov     edx, [eax]
.text:004024B0		       mov     eax, [ebp+0Ch]
.text:004024B3		       mov     [esp+4],	eax
.text:004024B7		       mov     [esp], edx
.text:004024BA		       call    sub_4023AC
.text:004024BF		       mov     edx, eax
.text:004024C1		       mov     eax, [ebp+10h]
.text:004024C4		       mov     [eax], edx
.text:004024C6		       mov     eax, [ebp+10h]
.text:004024C9		       mov     eax, [eax]
.text:004024CB		       test    eax, eax
.text:004024CD		       jz      short loc_4024EC
.text:004024CF		       mov     eax, [ebp+10h]
.text:004024D2		       mov     eax, [eax]
.text:004024D4		       mov     [esp+4],	eax
.text:004024D8		       mov     eax, [ebp+8]
.text:004024DB		       mov     [esp], eax
.text:004024DE		       call    sub_402380
.text:004024E3		       mov     dword ptr [ebp-4], 1
.text:004024EA		       jmp     short loc_4024F3
.text:004024EC ; ---------------------------------------------------------------------------
.text:004024EC
.text:004024EC loc_4024EC:			       ; CODE XREF: .text:004024CDj
.text:004024EC		       mov     dword ptr [ebp-4], 0
.text:004024F3
.text:004024F3 loc_4024F3:			       ; CODE XREF: .text:004024EAj
.text:004024F3		       mov     eax, [ebp-4]
.text:004024F6		       leave
.text:004024F7		       retn
.text:004024F8 ; ---------------------------------------------------------------------------
.text:004024F8		       push    ebp
.text:004024F9		       mov     ebp, esp
.text:004024FB		       sub     esp, 18h
.text:004024FE		       mov     eax, [ebp+8]
.text:00402501		       mov     edx, [eax]
.text:00402503		       mov     eax, [ebp+0Ch]
.text:00402506		       mov     [esp+4],	eax
.text:0040250A		       mov     [esp], edx
.text:0040250D		       call    sub_4023AC
.text:00402512		       mov     edx, eax
.text:00402514		       mov     eax, [ebp+10h]
.text:00402517		       mov     [eax], edx
.text:00402519		       mov     eax, [ebp+10h]
.text:0040251C		       mov     eax, [eax]
.text:0040251E		       test    eax, eax
.text:00402520		       jnz     short loc_40253D
.text:00402522		       mov     eax, [ebp+0Ch]
.text:00402525		       mov     [esp+4],	eax
.text:00402529		       mov     eax, [ebp+8]
.text:0040252C		       mov     [esp], eax
.text:0040252F		       call    sub_402347
.text:00402534		       mov     dword ptr [ebp-4], 1
.text:0040253B		       jmp     short loc_402544
.text:0040253D ; ---------------------------------------------------------------------------
.text:0040253D
.text:0040253D loc_40253D:			       ; CODE XREF: .text:00402520j
.text:0040253D		       mov     dword ptr [ebp-4], 0
.text:00402544
.text:00402544 loc_402544:			       ; CODE XREF: .text:0040253Bj
.text:00402544		       mov     eax, [ebp-4]
.text:00402547		       leave
.text:00402548		       retn
.text:00402549 ; ---------------------------------------------------------------------------
.text:00402549		       push    ebp
.text:0040254A		       mov     ebp, esp
.text:0040254C		       sub     esp, 4B8h
.text:00402552		       mov     dword ptr [ebp-14h], 0
.text:00402559		       mov     eax, [ebp+8]
.text:0040255C		       mov     [ebp-0Ch], eax
.text:0040255F		       mov     dword ptr [ebp-8], 0
.text:00402566		       jmp     loc_40263C
.text:0040256B ; ---------------------------------------------------------------------------
.text:0040256B
.text:0040256B loc_40256B:			       ; CODE XREF: .text:004025CEj
.text:0040256B		       mov     edx, [ebp-8]
.text:0040256E		       mov     eax, [ebp-0Ch]
.text:00402571		       mov     [ebp+edx*4-294h], eax
.text:00402578		       mov     edx, [ebp-8]
.text:0040257B		       mov     eax, [ebp-0Ch]
.text:0040257E		       mov     eax, [eax+0Ch]
.text:00402581		       mov     [ebp+edx*4-494h], eax
.text:00402588		       mov     eax, [ebp-8]
.text:0040258B		       mov     byte ptr	[ebp+eax-94h], 0
.text:00402593		       mov     eax, [ebp-0Ch]
.text:00402596		       mov     eax, [eax+8]
.text:00402599		       mov     [ebp-0Ch], eax
.text:0040259C		       add     dword ptr [ebp-8], 1
.text:004025A0		       cmp     dword ptr [ebp-8], 7Fh
.text:004025A4		       jle     short loc_4025CA
.text:004025A6		       mov     dword ptr [esp+0Ch], offset a0TheBinary_tre ; "0	&& \"the binary_tree is	too deep\""
.text:004025AE		       mov     dword ptr [esp+8], offset aSglib_rbtree_l ; "sglib_rbtree_len"
.text:004025B6		       mov     dword ptr [esp+4], 19h
.text:004025BE		       mov     dword ptr [esp],	offset aRbtree_c ; "rbtree.c"
.text:004025C5		       call    __assert_func
.text:004025CA
.text:004025CA loc_4025CA:			       ; CODE XREF: .text:004025A4j
.text:004025CA					       ; .text:00402640j
.text:004025CA		       cmp     dword ptr [ebp-0Ch], 0
.text:004025CE		       jnz     short loc_40256B
.text:004025D0
.text:004025D0 loc_4025D0:			       ; CODE XREF: .text:0040261Bj
.text:004025D0		       sub     dword ptr [ebp-8], 1
.text:004025D4		       mov     eax, [ebp-8]
.text:004025D7		       movzx   eax, byte ptr [ebp+eax-94h]
.text:004025DF		       test    al, al
.text:004025E1		       jnz     short loc_4025F4
.text:004025E3		       mov     eax, [ebp-8]
.text:004025E6		       mov     eax, [ebp+eax*4-294h]
.text:004025ED		       mov     [ebp-4],	eax
.text:004025F0		       add     dword ptr [ebp-14h], 1
.text:004025F4
.text:004025F4 loc_4025F4:			       ; CODE XREF: .text:004025E1j
.text:004025F4		       mov     eax, [ebp-8]
.text:004025F7		       movzx   edx, byte ptr [ebp+eax-94h]
.text:004025FF		       add     edx, 1
.text:00402602		       mov     [ebp+eax-94h], dl
.text:00402609		       cmp     dword ptr [ebp-8], 0
.text:0040260D		       jle     short loc_40261D
.text:0040260F		       mov     eax, [ebp-8]
.text:00402612		       mov     eax, [ebp+eax*4-494h]
.text:00402619		       test    eax, eax
.text:0040261B		       jz      short loc_4025D0
.text:0040261D
.text:0040261D loc_40261D:			       ; CODE XREF: .text:0040260Dj
.text:0040261D		       mov     eax, [ebp-8]
.text:00402620		       mov     eax, [ebp+eax*4-494h]
.text:00402627		       mov     [ebp-0Ch], eax
.text:0040262A		       mov     eax, [ebp-8]
.text:0040262D		       mov     dword ptr [ebp+eax*4-494h], 0
.text:00402638		       add     dword ptr [ebp-8], 1
.text:0040263C
.text:0040263C loc_40263C:			       ; CODE XREF: .text:00402566j
.text:0040263C		       cmp     dword ptr [ebp-0Ch], 0
.text:00402640		       jnz     short loc_4025CA
.text:00402642		       mov     eax, [ebp-14h]
.text:00402645		       leave
.text:00402646		       retn
.text:00402647
.text:00402647 ; =============== S U B R O U T I N E =======================================
.text:00402647
.text:00402647 ; Attributes: bp-based frame
.text:00402647
.text:00402647 sub_402647      proc near	       ; CODE XREF: sub_402859+152p
.text:00402647					       ; sub_402AB9+Cp
.text:00402647
.text:00402647 var_38	       = dword ptr -38h
.text:00402647 var_34	       = dword ptr -34h
.text:00402647 var_28	       = dword ptr -28h
.text:00402647 var_24	       = dword ptr -24h
.text:00402647 var_1C	       = dword ptr -1Ch
.text:00402647 var_18	       = dword ptr -18h
.text:00402647 var_14	       = dword ptr -14h
.text:00402647 var_10	       = dword ptr -10h
.text:00402647 var_C	       = dword ptr -0Ch
.text:00402647 var_8	       = dword ptr -8
.text:00402647 var_4	       = dword ptr -4
.text:00402647 arg_0	       = dword ptr  8
.text:00402647
.text:00402647		       push    ebp
.text:00402648		       mov     ebp, esp
.text:0040264A		       sub     esp, 38h
.text:0040264D		       mov     eax, [ebp+arg_0]
.text:00402650		       mov     eax, [eax+288h]
.text:00402656		       mov     [ebp+var_18], eax
.text:00402659		       mov     eax, [ebp+arg_0]
.text:0040265C		       mov     eax, [eax+28Ch]
.text:00402662		       mov     [ebp+var_14], eax
.text:00402665		       mov     eax, [ebp+arg_0]
.text:00402668		       mov     dword ptr [eax],	0
.text:0040266E		       jmp     loc_40283B
.text:00402673 ; ---------------------------------------------------------------------------
.text:00402673
.text:00402673 loc_402673:			       ; CODE XREF: sub_402647+20Aj
.text:00402673		       mov     eax, [ebp+arg_0]
.text:00402676		       movzx   eax, word ptr [eax+284h]
.text:0040267D		       cwde
.text:0040267E		       sub     eax, 1
.text:00402681		       mov     [ebp+var_28], eax
.text:00402684		       cmp     [ebp+var_28], 0
.text:00402688		       js      loc_4027E8
.text:0040268E		       mov     eax, [ebp+var_28]
.text:00402691		       mov     edx, [ebp+arg_0]
.text:00402694		       movzx   eax, byte ptr [edx+eax+4]
.text:00402699		       cmp     al, 1
.text:0040269B		       jle     short loc_4026B9
.text:0040269D		       mov     eax, [ebp+arg_0]
.text:004026A0		       movzx   eax, word ptr [eax+284h]
.text:004026A7		       lea     edx, [eax-1]
.text:004026AA		       mov     eax, [ebp+arg_0]
.text:004026AD		       mov     [eax+284h], dx
.text:004026B4		       jmp     loc_4027E8
.text:004026B9 ; ---------------------------------------------------------------------------
.text:004026B9
.text:004026B9 loc_4026B9:			       ; CODE XREF: sub_402647+54j
.text:004026B9		       mov     eax, [ebp+var_28]
.text:004026BC		       mov     edx, [ebp+arg_0]
.text:004026BF		       movzx   eax, byte ptr [edx+eax+4]
.text:004026C4		       test    al, al
.text:004026C6		       jnz     short loc_4026DD
.text:004026C8		       mov     eax, [ebp+var_28]
.text:004026CB		       mov     edx, [ebp+arg_0]
.text:004026CE		       add     eax, 20h
.text:004026D1		       mov     eax, [edx+eax*4+4]
.text:004026D5		       mov     eax, [eax+8]
.text:004026D8		       mov     [ebp+var_1C], eax
.text:004026DB		       jmp     short loc_4026F0
.text:004026DD ; ---------------------------------------------------------------------------
.text:004026DD
.text:004026DD loc_4026DD:			       ; CODE XREF: sub_402647+7Fj
.text:004026DD		       mov     eax, [ebp+var_28]
.text:004026E0		       mov     edx, [ebp+arg_0]
.text:004026E3		       add     eax, 20h
.text:004026E6		       mov     eax, [edx+eax*4+4]
.text:004026EA		       mov     eax, [eax+0Ch]
.text:004026ED		       mov     [ebp+var_1C], eax
.text:004026F0
.text:004026F0 loc_4026F0:			       ; CODE XREF: sub_402647+94j
.text:004026F0		       cmp     [ebp+var_18], 0
.text:004026F4		       jz      loc_402792
.text:004026FA		       cmp     [ebp+var_14], 0
.text:004026FE		       jnz     short loc_402749
.text:00402700		       mov     eax, [ebp+var_1C]
.text:00402703		       mov     [ebp+var_10], eax
.text:00402706		       jmp     short loc_40273B
.text:00402708 ; ---------------------------------------------------------------------------
.text:00402708
.text:00402708 loc_402708:			       ; CODE XREF: sub_402647+F8j
.text:00402708		       mov     eax, [ebp+var_18]
.text:0040270B		       mov     edx, [eax]
.text:0040270D		       mov     eax, [ebp+var_10]
.text:00402710		       mov     eax, [eax]
.text:00402712		       mov     ecx, edx
.text:00402714		       sub     ecx, eax
.text:00402716		       mov     eax, ecx
.text:00402718		       mov     [ebp+var_C], eax
.text:0040271B		       cmp     [ebp+var_C], 0
.text:0040271F		       jns     short loc_40272C
.text:00402721		       mov     eax, [ebp+var_10]
.text:00402724		       mov     eax, [eax+8]
.text:00402727		       mov     [ebp+var_10], eax
.text:0040272A		       jmp     short loc_40273B
.text:0040272C ; ---------------------------------------------------------------------------
.text:0040272C
.text:0040272C loc_40272C:			       ; CODE XREF: sub_402647+D8j
.text:0040272C		       cmp     [ebp+var_C], 0
.text:00402730		       jle     short loc_402741
.text:00402732		       mov     eax, [ebp+var_10]
.text:00402735		       mov     eax, [eax+0Ch]
.text:00402738		       mov     [ebp+var_10], eax
.text:0040273B
.text:0040273B loc_40273B:			       ; CODE XREF: sub_402647+BFj
.text:0040273B					       ; sub_402647+E3j
.text:0040273B		       cmp     [ebp+var_10], 0
.text:0040273F		       jnz     short loc_402708
.text:00402741
.text:00402741 loc_402741:			       ; CODE XREF: sub_402647+E9j
.text:00402741		       mov     eax, [ebp+var_10]
.text:00402744		       mov     [ebp+var_1C], eax
.text:00402747		       jmp     short loc_402792
.text:00402749 ; ---------------------------------------------------------------------------
.text:00402749
.text:00402749 loc_402749:			       ; CODE XREF: sub_402647+B7j
.text:00402749		       mov     eax, [ebp+var_1C]
.text:0040274C		       mov     [ebp+var_8], eax
.text:0040274F		       jmp     short loc_402786
.text:00402751 ; ---------------------------------------------------------------------------
.text:00402751
.text:00402751 loc_402751:			       ; CODE XREF: sub_402647+143j
.text:00402751		       mov     eax, [ebp+var_8]
.text:00402754		       mov     [esp+38h+var_34], eax
.text:00402758		       mov     eax, [ebp+var_18]
.text:0040275B		       mov     [esp+38h+var_38], eax
.text:0040275E		       mov     eax, [ebp+var_14]
.text:00402761		       call    eax
.text:00402763		       mov     [ebp+var_4], eax
.text:00402766		       cmp     [ebp+var_4], 0
.text:0040276A		       jns     short loc_402777
.text:0040276C		       mov     eax, [ebp+var_8]
.text:0040276F		       mov     eax, [eax+8]
.text:00402772		       mov     [ebp+var_8], eax
.text:00402775		       jmp     short loc_402786
.text:00402777 ; ---------------------------------------------------------------------------
.text:00402777
.text:00402777 loc_402777:			       ; CODE XREF: sub_402647+123j
.text:00402777		       cmp     [ebp+var_4], 0
.text:0040277B		       jle     short loc_40278C
.text:0040277D		       mov     eax, [ebp+var_8]
.text:00402780		       mov     eax, [eax+0Ch]
.text:00402783		       mov     [ebp+var_8], eax
.text:00402786
.text:00402786 loc_402786:			       ; CODE XREF: sub_402647+108j
.text:00402786					       ; sub_402647+12Ej
.text:00402786		       cmp     [ebp+var_8], 0
.text:0040278A		       jnz     short loc_402751
.text:0040278C
.text:0040278C loc_40278C:			       ; CODE XREF: sub_402647+134j
.text:0040278C		       mov     eax, [ebp+var_8]
.text:0040278F		       mov     [ebp+var_1C], eax
.text:00402792
.text:00402792 loc_402792:			       ; CODE XREF: sub_402647+ADj
.text:00402792					       ; sub_402647+100j
.text:00402792		       cmp     [ebp+var_1C], 0
.text:00402796		       jz      short loc_4027D3
.text:00402798		       mov     eax, [ebp+var_28]
.text:0040279B		       add     eax, 1
.text:0040279E		       mov     [ebp+var_24], eax
.text:004027A1		       mov     eax, [ebp+var_24]
.text:004027A4		       mov     ecx, [ebp+arg_0]
.text:004027A7		       lea     edx, [eax+20h]
.text:004027AA		       mov     eax, [ebp+var_1C]
.text:004027AD		       mov     [ecx+edx*4+4], eax
.text:004027B1		       mov     edx, [ebp+var_24]
.text:004027B4		       mov     eax, [ebp+arg_0]
.text:004027B7		       mov     byte ptr	[eax+edx+4], 0
.text:004027BC		       mov     eax, [ebp+arg_0]
.text:004027BF		       movzx   eax, word ptr [eax+284h]
.text:004027C6		       lea     edx, [eax+1]
.text:004027C9		       mov     eax, [ebp+arg_0]
.text:004027CC		       mov     [eax+284h], dx
.text:004027D3
.text:004027D3 loc_4027D3:			       ; CODE XREF: sub_402647+14Fj
.text:004027D3		       mov     ecx, [ebp+var_28]
.text:004027D6		       mov     eax, [ebp+arg_0]
.text:004027D9		       movzx   eax, byte ptr [eax+ecx+4]
.text:004027DE		       lea     edx, [eax+1]
.text:004027E1		       mov     eax, [ebp+arg_0]
.text:004027E4		       mov     [eax+ecx+4], dl
.text:004027E8
.text:004027E8 loc_4027E8:			       ; CODE XREF: sub_402647+41j
.text:004027E8					       ; sub_402647+6Dj
.text:004027E8		       mov     eax, [ebp+arg_0]
.text:004027EB		       movzx   eax, word ptr [eax+284h]
.text:004027F2		       test    ax, ax
.text:004027F5		       jle     short loc_40283B
.text:004027F7		       mov     eax, [ebp+arg_0]
.text:004027FA		       movzx   ecx, word ptr [eax+286h]
.text:00402801		       mov     eax, [ebp+arg_0]
.text:00402804		       movzx   eax, word ptr [eax+284h]
.text:0040280B		       cwde
.text:0040280C		       lea     edx, [eax-1]
.text:0040280F		       mov     eax, [ebp+arg_0]
.text:00402812		       movzx   eax, byte ptr [eax+edx+4]
.text:00402817		       cbw
.text:00402819		       cmp     cx, ax
.text:0040281C		       jnz     short loc_40283B
.text:0040281E		       mov     eax, [ebp+arg_0]
.text:00402821		       movzx   eax, word ptr [eax+284h]
.text:00402828		       cwde
.text:00402829		       sub     eax, 1
.text:0040282C		       mov     edx, [ebp+arg_0]
.text:0040282F		       add     eax, 20h
.text:00402832		       mov     edx, [edx+eax*4+4]
.text:00402836		       mov     eax, [ebp+arg_0]
.text:00402839		       mov     [eax], edx
.text:0040283B
.text:0040283B loc_40283B:			       ; CODE XREF: sub_402647+27j
.text:0040283B					       ; sub_402647+1AEj ...
.text:0040283B		       mov     eax, [ebp+arg_0]
.text:0040283E		       movzx   eax, word ptr [eax+284h]
.text:00402845		       test    ax, ax
.text:00402848		       jle     short locret_402857
.text:0040284A		       mov     eax, [ebp+arg_0]
.text:0040284D		       mov     eax, [eax]
.text:0040284F		       test    eax, eax
.text:00402851		       jz      loc_402673
.text:00402857
.text:00402857 locret_402857:			       ; CODE XREF: sub_402647+201j
.text:00402857		       leave
.text:00402858		       retn
.text:00402858 sub_402647      endp
.text:00402858
.text:00402859
.text:00402859 ; =============== S U B R O U T I N E =======================================
.text:00402859
.text:00402859 ; Attributes: bp-based frame
.text:00402859
.text:00402859 sub_402859      proc near	       ; CODE XREF: sub_4029B7+2Bp
.text:00402859					       ; .text:00402A14p ...
.text:00402859
.text:00402859 var_38	       = dword ptr -38h
.text:00402859 var_34	       = dword ptr -34h
.text:00402859 var_30	       = dword ptr -30h
.text:00402859 var_2C	       = dword ptr -2Ch
.text:00402859 var_14	       = dword ptr -14h
.text:00402859 var_10	       = dword ptr -10h
.text:00402859 var_C	       = dword ptr -0Ch
.text:00402859 var_8	       = dword ptr -8
.text:00402859 var_4	       = dword ptr -4
.text:00402859 arg_0	       = dword ptr  8
.text:00402859 arg_4	       = dword ptr  0Ch
.text:00402859 arg_8	       = dword ptr  10h
.text:00402859 arg_C	       = dword ptr  14h
.text:00402859 arg_10	       = dword ptr  18h
.text:00402859
.text:00402859		       push    ebp
.text:0040285A		       mov     ebp, esp
.text:0040285C		       sub     esp, 38h
.text:0040285F		       cmp     [ebp+arg_0], 0
.text:00402863		       jnz     short loc_402889
.text:00402865		       mov     [esp+38h+var_2C], offset	aItNull	; "it!=NULL"
.text:0040286D		       mov     [esp+38h+var_30], offset	aSglib__rbtree_	; "sglib__rbtree_it_init"
.text:00402875		       mov     [esp+38h+var_34], 19h
.text:0040287D		       mov     [esp+38h+var_38], offset	aRbtree_c ; "rbtree.c"
.text:00402884		       call    __assert_func
.text:00402889
.text:00402889 loc_402889:			       ; CODE XREF: sub_402859+Aj
.text:00402889		       mov     eax, [ebp+arg_8]
.text:0040288C		       mov     edx, eax
.text:0040288E		       mov     eax, [ebp+arg_0]
.text:00402891		       mov     [eax+286h], dx
.text:00402898		       mov     edx, [ebp+arg_0]
.text:0040289B		       mov     eax, [ebp+arg_10]
.text:0040289E		       mov     [edx+288h], eax
.text:004028A4		       mov     edx, [ebp+arg_0]
.text:004028A7		       mov     eax, [ebp+arg_C]
.text:004028AA		       mov     [edx+28Ch], eax
.text:004028B0		       cmp     [ebp+arg_10], 0
.text:004028B4		       jnz     short loc_4028C1
.text:004028B6		       mov     eax, [ebp+arg_4]
.text:004028B9		       mov     [ebp+var_14], eax
.text:004028BC		       jmp     loc_402959
.text:004028C1 ; ---------------------------------------------------------------------------
.text:004028C1
.text:004028C1 loc_4028C1:			       ; CODE XREF: sub_402859+5Bj
.text:004028C1		       cmp     [ebp+arg_C], 0
.text:004028C5		       jnz     short loc_402910
.text:004028C7		       mov     eax, [ebp+arg_4]
.text:004028CA		       mov     [ebp+var_10], eax
.text:004028CD		       jmp     short loc_402902
.text:004028CF ; ---------------------------------------------------------------------------
.text:004028CF
.text:004028CF loc_4028CF:			       ; CODE XREF: sub_402859+ADj
.text:004028CF		       mov     eax, [ebp+arg_10]
.text:004028D2		       mov     edx, [eax]
.text:004028D4		       mov     eax, [ebp+var_10]
.text:004028D7		       mov     eax, [eax]
.text:004028D9		       mov     ecx, edx
.text:004028DB		       sub     ecx, eax
.text:004028DD		       mov     eax, ecx
.text:004028DF		       mov     [ebp+var_C], eax
.text:004028E2		       cmp     [ebp+var_C], 0
.text:004028E6		       jns     short loc_4028F3
.text:004028E8		       mov     eax, [ebp+var_10]
.text:004028EB		       mov     eax, [eax+8]
.text:004028EE		       mov     [ebp+var_10], eax
.text:004028F1		       jmp     short loc_402902
.text:004028F3 ; ---------------------------------------------------------------------------
.text:004028F3
.text:004028F3 loc_4028F3:			       ; CODE XREF: sub_402859+8Dj
.text:004028F3		       cmp     [ebp+var_C], 0
.text:004028F7		       jle     short loc_402908
.text:004028F9		       mov     eax, [ebp+var_10]
.text:004028FC		       mov     eax, [eax+0Ch]
.text:004028FF		       mov     [ebp+var_10], eax
.text:00402902
.text:00402902 loc_402902:			       ; CODE XREF: sub_402859+74j
.text:00402902					       ; sub_402859+98j
.text:00402902		       cmp     [ebp+var_10], 0
.text:00402906		       jnz     short loc_4028CF
.text:00402908
.text:00402908 loc_402908:			       ; CODE XREF: sub_402859+9Ej
.text:00402908		       mov     eax, [ebp+var_10]
.text:0040290B		       mov     [ebp+var_14], eax
.text:0040290E		       jmp     short loc_402959
.text:00402910 ; ---------------------------------------------------------------------------
.text:00402910
.text:00402910 loc_402910:			       ; CODE XREF: sub_402859+6Cj
.text:00402910		       mov     eax, [ebp+arg_4]
.text:00402913		       mov     [ebp+var_8], eax
.text:00402916		       jmp     short loc_40294D
.text:00402918 ; ---------------------------------------------------------------------------
.text:00402918
.text:00402918 loc_402918:			       ; CODE XREF: sub_402859+F8j
.text:00402918		       mov     eax, [ebp+var_8]
.text:0040291B		       mov     [esp+38h+var_34], eax
.text:0040291F		       mov     eax, [ebp+arg_10]
.text:00402922		       mov     [esp+38h+var_38], eax
.text:00402925		       mov     eax, [ebp+arg_C]
.text:00402928		       call    eax
.text:0040292A		       mov     [ebp+var_4], eax
.text:0040292D		       cmp     [ebp+var_4], 0
.text:00402931		       jns     short loc_40293E
.text:00402933		       mov     eax, [ebp+var_8]
.text:00402936		       mov     eax, [eax+8]
.text:00402939		       mov     [ebp+var_8], eax
.text:0040293C		       jmp     short loc_40294D
.text:0040293E ; ---------------------------------------------------------------------------
.text:0040293E
.text:0040293E loc_40293E:			       ; CODE XREF: sub_402859+D8j
.text:0040293E		       cmp     [ebp+var_4], 0
.text:00402942		       jle     short loc_402953
.text:00402944		       mov     eax, [ebp+var_8]
.text:00402947		       mov     eax, [eax+0Ch]
.text:0040294A		       mov     [ebp+var_8], eax
.text:0040294D
.text:0040294D loc_40294D:			       ; CODE XREF: sub_402859+BDj
.text:0040294D					       ; sub_402859+E3j
.text:0040294D		       cmp     [ebp+var_8], 0
.text:00402951		       jnz     short loc_402918
.text:00402953
.text:00402953 loc_402953:			       ; CODE XREF: sub_402859+E9j
.text:00402953		       mov     eax, [ebp+var_8]
.text:00402956		       mov     [ebp+var_14], eax
.text:00402959
.text:00402959 loc_402959:			       ; CODE XREF: sub_402859+63j
.text:00402959					       ; sub_402859+B5j
.text:00402959		       cmp     [ebp+var_14], 0
.text:0040295D		       jnz     short loc_402976
.text:0040295F		       mov     eax, [ebp+arg_0]
.text:00402962		       mov     word ptr	[eax+284h], 0
.text:0040296B		       mov     eax, [ebp+arg_0]
.text:0040296E		       mov     dword ptr [eax],	0
.text:00402974		       jmp     short loc_4029B0
.text:00402976 ; ---------------------------------------------------------------------------
.text:00402976
.text:00402976 loc_402976:			       ; CODE XREF: sub_402859+104j
.text:00402976		       mov     eax, [ebp+arg_0]
.text:00402979		       mov     word ptr	[eax+284h], 1
.text:00402982		       mov     eax, [ebp+arg_0]
.text:00402985		       mov     byte ptr	[eax+4], 0
.text:00402989		       mov     edx, [ebp+arg_0]
.text:0040298C		       mov     eax, [ebp+var_14]
.text:0040298F		       mov     [edx+84h], eax
.text:00402995		       cmp     [ebp+arg_8], 0
.text:00402999		       jnz     short loc_4029A5
.text:0040299B		       mov     edx, [ebp+arg_0]
.text:0040299E		       mov     eax, [ebp+var_14]
.text:004029A1		       mov     [edx], eax
.text:004029A3		       jmp     short loc_4029B0
.text:004029A5 ; ---------------------------------------------------------------------------
.text:004029A5
.text:004029A5 loc_4029A5:			       ; CODE XREF: sub_402859+140j
.text:004029A5		       mov     eax, [ebp+arg_0]
.text:004029A8		       mov     [esp+38h+var_38], eax
.text:004029AB		       call    sub_402647
.text:004029B0
.text:004029B0 loc_4029B0:			       ; CODE XREF: sub_402859+11Bj
.text:004029B0					       ; sub_402859+14Aj
.text:004029B0		       mov     eax, [ebp+arg_0]
.text:004029B3		       mov     eax, [eax]
.text:004029B5		       leave
.text:004029B6		       retn
.text:004029B6 sub_402859      endp
.text:004029B6
.text:004029B7
.text:004029B7 ; =============== S U B R O U T I N E =======================================
.text:004029B7
.text:004029B7 ; Attributes: bp-based frame
.text:004029B7
.text:004029B7 sub_4029B7      proc near	       ; CODE XREF: .text:00402E1Dp
.text:004029B7
.text:004029B7 var_18	       = dword ptr -18h
.text:004029B7 var_14	       = dword ptr -14h
.text:004029B7 var_10	       = dword ptr -10h
.text:004029B7 var_C	       = dword ptr -0Ch
.text:004029B7 var_8	       = dword ptr -8
.text:004029B7 arg_0	       = dword ptr  8
.text:004029B7 arg_4	       = dword ptr  0Ch
.text:004029B7
.text:004029B7		       push    ebp
.text:004029B8		       mov     ebp, esp
.text:004029BA		       sub     esp, 18h
.text:004029BD		       mov     [esp+18h+var_8],	0
.text:004029C5		       mov     [esp+18h+var_C],	0
.text:004029CD		       mov     [esp+18h+var_10], 2
.text:004029D5		       mov     eax, [ebp+arg_4]
.text:004029D8		       mov     [esp+18h+var_14], eax
.text:004029DC		       mov     eax, [ebp+arg_0]
.text:004029DF		       mov     [esp+18h+var_18], eax
.text:004029E2		       call    sub_402859
.text:004029E7		       leave
.text:004029E8		       retn
.text:004029E8 sub_4029B7      endp
.text:004029E8
.text:004029E9 ; ---------------------------------------------------------------------------
.text:004029E9		       push    ebp
.text:004029EA		       mov     ebp, esp
.text:004029EC		       sub     esp, 18h
.text:004029EF		       mov     dword ptr [esp+10h], 0
.text:004029F7		       mov     dword ptr [esp+0Ch], 0
.text:004029FF		       mov     dword ptr [esp+8], 0
.text:00402A07		       mov     eax, [ebp+0Ch]
.text:00402A0A		       mov     [esp+4],	eax
.text:00402A0E		       mov     eax, [ebp+8]
.text:00402A11		       mov     [esp], eax
.text:00402A14		       call    sub_402859
.text:00402A19		       leave
.text:00402A1A		       retn
.text:00402A1B
.text:00402A1B ; =============== S U B R O U T I N E =======================================
.text:00402A1B
.text:00402A1B ; Attributes: bp-based frame
.text:00402A1B
.text:00402A1B sub_402A1B      proc near	       ; CODE XREF: .text:00402DCBp
.text:00402A1B
.text:00402A1B var_18	       = dword ptr -18h
.text:00402A1B var_14	       = dword ptr -14h
.text:00402A1B var_10	       = dword ptr -10h
.text:00402A1B var_C	       = dword ptr -0Ch
.text:00402A1B var_8	       = dword ptr -8
.text:00402A1B arg_0	       = dword ptr  8
.text:00402A1B arg_4	       = dword ptr  0Ch
.text:00402A1B
.text:00402A1B		       push    ebp
.text:00402A1C		       mov     ebp, esp
.text:00402A1E		       sub     esp, 18h
.text:00402A21		       mov     [esp+18h+var_8],	0
.text:00402A29		       mov     [esp+18h+var_C],	0
.text:00402A31		       mov     [esp+18h+var_10], 1
.text:00402A39		       mov     eax, [ebp+arg_4]
.text:00402A3C		       mov     [esp+18h+var_14], eax
.text:00402A40		       mov     eax, [ebp+arg_0]
.text:00402A43		       mov     [esp+18h+var_18], eax
.text:00402A46		       call    sub_402859
.text:00402A4B		       leave
.text:00402A4C		       retn
.text:00402A4C sub_402A1B      endp
.text:00402A4C
.text:00402A4D ; ---------------------------------------------------------------------------
.text:00402A4D		       push    ebp
.text:00402A4E		       mov     ebp, esp
.text:00402A50		       sub     esp, 18h
.text:00402A53		       mov     dword ptr [esp+10h], 0
.text:00402A5B		       mov     dword ptr [esp+0Ch], 0
.text:00402A63		       mov     dword ptr [esp+8], 2
.text:00402A6B		       mov     eax, [ebp+0Ch]
.text:00402A6E		       mov     [esp+4],	eax
.text:00402A72		       mov     eax, [ebp+8]
.text:00402A75		       mov     [esp], eax
.text:00402A78		       call    sub_402859
.text:00402A7D		       leave
.text:00402A7E		       retn
.text:00402A7F ; ---------------------------------------------------------------------------
.text:00402A7F		       push    ebp
.text:00402A80		       mov     ebp, esp
.text:00402A82		       sub     esp, 18h
.text:00402A85		       mov     eax, [ebp+14h]
.text:00402A88		       mov     [esp+10h], eax
.text:00402A8C		       mov     eax, [ebp+10h]
.text:00402A8F		       mov     [esp+0Ch], eax
.text:00402A93		       mov     dword ptr [esp+8], 1
.text:00402A9B		       mov     eax, [ebp+0Ch]
.text:00402A9E		       mov     [esp+4],	eax
.text:00402AA2		       mov     eax, [ebp+8]
.text:00402AA5		       mov     [esp], eax
.text:00402AA8		       call    sub_402859
.text:00402AAD		       leave
.text:00402AAE		       retn
.text:00402AAF ; ---------------------------------------------------------------------------
.text:00402AAF		       push    ebp
.text:00402AB0		       mov     ebp, esp
.text:00402AB2		       mov     eax, [ebp+8]
.text:00402AB5		       mov     eax, [eax]
.text:00402AB7		       pop     ebp
.text:00402AB8		       retn
.text:00402AB9
.text:00402AB9 ; =============== S U B R O U T I N E =======================================
.text:00402AB9
.text:00402AB9 ; Attributes: bp-based frame
.text:00402AB9
.text:00402AB9 sub_402AB9      proc near	       ; CODE XREF: .text:00402DF3p
.text:00402AB9					       ; .text:00402E3Bp
.text:00402AB9
.text:00402AB9 var_8	       = dword ptr -8
.text:00402AB9 arg_0	       = dword ptr  8
.text:00402AB9
.text:00402AB9		       push    ebp
.text:00402ABA		       mov     ebp, esp
.text:00402ABC		       sub     esp, 8
.text:00402ABF		       mov     eax, [ebp+arg_0]
.text:00402AC2		       mov     [esp+8+var_8], eax
.text:00402AC5		       call    sub_402647
.text:00402ACA		       mov     eax, [ebp+arg_0]
.text:00402ACD		       mov     eax, [eax]
.text:00402ACF		       leave
.text:00402AD0		       retn
.text:00402AD0 sub_402AB9      endp
.text:00402AD0
.text:00402AD1
.text:00402AD1 ; =============== S U B R O U T I N E =======================================
.text:00402AD1
.text:00402AD1 ; Attributes: bp-based frame
.text:00402AD1
.text:00402AD1 sub_402AD1      proc near	       ; CODE XREF: sub_402AD1+17Cp
.text:00402AD1					       ; sub_402AD1+198p ...
.text:00402AD1
.text:00402AD1 var_18	       = dword ptr -18h
.text:00402AD1 var_14	       = dword ptr -14h
.text:00402AD1 var_10	       = dword ptr -10h
.text:00402AD1 var_C	       = dword ptr -0Ch
.text:00402AD1 arg_0	       = dword ptr  8
.text:00402AD1 arg_4	       = dword ptr  0Ch
.text:00402AD1 arg_8	       = dword ptr  10h
.text:00402AD1
.text:00402AD1		       push    ebp
.text:00402AD2		       mov     ebp, esp
.text:00402AD4		       sub     esp, 18h
.text:00402AD7		       cmp     [ebp+arg_0], 0
.text:00402ADB		       jnz     short loc_402B25
.text:00402ADD		       mov     eax, [ebp+arg_4]
.text:00402AE0		       mov     eax, [eax]
.text:00402AE2		       test    eax, eax
.text:00402AE4		       jns     short loc_402AF3
.text:00402AE6		       mov     edx, [ebp+arg_4]
.text:00402AE9		       mov     eax, [ebp+arg_8]
.text:00402AEC		       mov     [edx], eax
.text:00402AEE		       jmp     locret_402CAE
.text:00402AF3 ; ---------------------------------------------------------------------------
.text:00402AF3
.text:00402AF3 loc_402AF3:			       ; CODE XREF: sub_402AD1+13j
.text:00402AF3		       mov     eax, [ebp+arg_4]
.text:00402AF6		       mov     eax, [eax]
.text:00402AF8		       cmp     eax, [ebp+arg_8]
.text:00402AFB		       jz      locret_402CAE
.text:00402B01		       mov     [esp+18h+var_C],	offset aPathdeepCdeep ;	"*pathdeep == cdeep"
.text:00402B09		       mov     [esp+18h+var_10], offset	aSglib___rbtr_3	; "sglib___rbtree_consistency_check_recurs"...
.text:00402B11		       mov     [esp+18h+var_14], 19h
.text:00402B19		       mov     [esp+18h+var_18], offset	aRbtree_c ; "rbtree.c"
.text:00402B20		       call    __assert_func
.text:00402B25
.text:00402B25 loc_402B25:			       ; CODE XREF: sub_402AD1+Aj
.text:00402B25		       mov     eax, [ebp+arg_0]
.text:00402B28		       mov     eax, [eax+8]
.text:00402B2B		       test    eax, eax
.text:00402B2D		       jz      short loc_402B6A
.text:00402B2F		       mov     eax, [ebp+arg_0]
.text:00402B32		       mov     eax, [eax+8]
.text:00402B35		       mov     edx, [eax]
.text:00402B37		       mov     eax, [ebp+arg_0]
.text:00402B3A		       mov     eax, [eax]
.text:00402B3C		       mov     ecx, edx
.text:00402B3E		       sub     ecx, eax
.text:00402B40		       mov     eax, ecx
.text:00402B42		       test    eax, eax
.text:00402B44		       jle     short loc_402B6A
.text:00402B46		       mov     [esp+18h+var_C],	offset aCmparatorTLeft ; "CMPARATOR(t->left, t)	<= 0"
.text:00402B4E		       mov     [esp+18h+var_10], offset	aSglib___rbtr_3	; "sglib___rbtree_consistency_check_recurs"...
.text:00402B56		       mov     [esp+18h+var_14], 19h
.text:00402B5E		       mov     [esp+18h+var_18], offset	aRbtree_c ; "rbtree.c"
.text:00402B65		       call    __assert_func
.text:00402B6A
.text:00402B6A loc_402B6A:			       ; CODE XREF: sub_402AD1+5Cj
.text:00402B6A					       ; sub_402AD1+73j
.text:00402B6A		       mov     eax, [ebp+arg_0]
.text:00402B6D		       mov     eax, [eax+0Ch]
.text:00402B70		       test    eax, eax
.text:00402B72		       jz      short loc_402BAF
.text:00402B74		       mov     eax, [ebp+arg_0]
.text:00402B77		       mov     edx, [eax]
.text:00402B79		       mov     eax, [ebp+arg_0]
.text:00402B7C		       mov     eax, [eax+0Ch]
.text:00402B7F		       mov     eax, [eax]
.text:00402B81		       mov     ecx, edx
.text:00402B83		       sub     ecx, eax
.text:00402B85		       mov     eax, ecx
.text:00402B87		       test    eax, eax
.text:00402B89		       jle     short loc_402BAF
.text:00402B8B		       mov     [esp+18h+var_C],	offset aCmparatorTTRig ; "CMPARATOR(t, t->right) <= 0"
.text:00402B93		       mov     [esp+18h+var_10], offset	aSglib___rbtr_3	; "sglib___rbtree_consistency_check_recurs"...
.text:00402B9B		       mov     [esp+18h+var_14], 19h
.text:00402BA3		       mov     [esp+18h+var_18], offset	aRbtree_c ; "rbtree.c"
.text:00402BAA		       call    __assert_func
.text:00402BAF
.text:00402BAF loc_402BAF:			       ; CODE XREF: sub_402AD1+A1j
.text:00402BAF					       ; sub_402AD1+B8j
.text:00402BAF		       mov     eax, [ebp+arg_0]
.text:00402BB2		       movzx   eax, byte ptr [eax+4]
.text:00402BB6		       cmp     al, 1
.text:00402BB8		       jnz     loc_402C70
.text:00402BBE		       mov     eax, [ebp+arg_0]
.text:00402BC1		       mov     eax, [eax+8]
.text:00402BC4		       test    eax, eax
.text:00402BC6		       jz      short loc_402BFA
.text:00402BC8		       mov     eax, [ebp+arg_0]
.text:00402BCB		       mov     eax, [eax+8]
.text:00402BCE		       movzx   eax, byte ptr [eax+4]
.text:00402BD2		       test    al, al
.text:00402BD4		       jz      short loc_402BFA
.text:00402BD6		       mov     [esp+18h+var_C],	offset aTLeftNullSglib ; "t->left == NULL || SGLIB___GET_VALUE(t-"...
.text:00402BDE		       mov     [esp+18h+var_10], offset	aSglib___rbtr_3	; "sglib___rbtree_consistency_check_recurs"...
.text:00402BE6		       mov     [esp+18h+var_14], 19h
.text:00402BEE		       mov     [esp+18h+var_18], offset	aRbtree_c ; "rbtree.c"
.text:00402BF5		       call    __assert_func
.text:00402BFA
.text:00402BFA loc_402BFA:			       ; CODE XREF: sub_402AD1+F5j
.text:00402BFA					       ; sub_402AD1+103j
.text:00402BFA		       mov     eax, [ebp+arg_0]
.text:00402BFD		       mov     eax, [eax+0Ch]
.text:00402C00		       test    eax, eax
.text:00402C02		       jz      short loc_402C36
.text:00402C04		       mov     eax, [ebp+arg_0]
.text:00402C07		       mov     eax, [eax+0Ch]
.text:00402C0A		       movzx   eax, byte ptr [eax+4]
.text:00402C0E		       test    al, al
.text:00402C10		       jz      short loc_402C36
.text:00402C12		       mov     [esp+18h+var_C],	offset aTRightNullSgli ; "t->right == NULL || SGLIB___GET_VALUE(t"...
.text:00402C1A		       mov     [esp+18h+var_10], offset	aSglib___rbtr_3	; "sglib___rbtree_consistency_check_recurs"...
.text:00402C22		       mov     [esp+18h+var_14], 19h
.text:00402C2A		       mov     [esp+18h+var_18], offset	aRbtree_c ; "rbtree.c"
.text:00402C31		       call    __assert_func
.text:00402C36
.text:00402C36 loc_402C36:			       ; CODE XREF: sub_402AD1+131j
.text:00402C36					       ; sub_402AD1+13Fj
.text:00402C36		       mov     eax, [ebp+arg_0]
.text:00402C39		       mov     edx, [eax+8]
.text:00402C3C		       mov     eax, [ebp+arg_8]
.text:00402C3F		       mov     [esp+18h+var_10], eax
.text:00402C43		       mov     eax, [ebp+arg_4]
.text:00402C46		       mov     [esp+18h+var_14], eax
.text:00402C4A		       mov     [esp+18h+var_18], edx
.text:00402C4D		       call    sub_402AD1
.text:00402C52		       mov     eax, [ebp+arg_0]
.text:00402C55		       mov     edx, [eax+0Ch]
.text:00402C58		       mov     eax, [ebp+arg_8]
.text:00402C5B		       mov     [esp+18h+var_10], eax
.text:00402C5F		       mov     eax, [ebp+arg_4]
.text:00402C62		       mov     [esp+18h+var_14], eax
.text:00402C66		       mov     [esp+18h+var_18], edx
.text:00402C69		       call    sub_402AD1
.text:00402C6E		       jmp     short locret_402CAE
.text:00402C70 ; ---------------------------------------------------------------------------
.text:00402C70
.text:00402C70 loc_402C70:			       ; CODE XREF: sub_402AD1+E7j
.text:00402C70		       mov     eax, [ebp+arg_8]
.text:00402C73		       lea     edx, [eax+1]
.text:00402C76		       mov     eax, [ebp+arg_0]
.text:00402C79		       mov     ecx, [eax+8]
.text:00402C7C		       mov     [esp+18h+var_10], edx
.text:00402C80		       mov     eax, [ebp+arg_4]
.text:00402C83		       mov     [esp+18h+var_14], eax
.text:00402C87		       mov     [esp+18h+var_18], ecx
.text:00402C8A		       call    sub_402AD1
.text:00402C8F		       mov     eax, [ebp+arg_8]
.text:00402C92		       lea     edx, [eax+1]
.text:00402C95		       mov     eax, [ebp+arg_0]
.text:00402C98		       mov     ecx, [eax+0Ch]
.text:00402C9B		       mov     [esp+18h+var_10], edx
.text:00402C9F		       mov     eax, [ebp+arg_4]
.text:00402CA2		       mov     [esp+18h+var_14], eax
.text:00402CA6		       mov     [esp+18h+var_18], ecx
.text:00402CA9		       call    sub_402AD1
.text:00402CAE
.text:00402CAE locret_402CAE:			       ; CODE XREF: sub_402AD1+1Dj
.text:00402CAE					       ; sub_402AD1+2Aj ...
.text:00402CAE		       leave
.text:00402CAF		       retn
.text:00402CAF sub_402AD1      endp
.text:00402CAF
.text:00402CB0 ; ---------------------------------------------------------------------------
.text:00402CB0		       push    ebp
.text:00402CB1		       mov     ebp, esp
.text:00402CB3		       sub     esp, 28h
.text:00402CB6		       cmp     dword ptr [ebp+8], 0
.text:00402CBA		       jz      short loc_402CEB
.text:00402CBC		       mov     eax, [ebp+8]
.text:00402CBF		       movzx   eax, byte ptr [eax+4]
.text:00402CC3		       test    al, al
.text:00402CC5		       jz      short loc_402CEB
.text:00402CC7		       mov     dword ptr [esp+0Ch], offset aTNullSglib___g ; "t==NULL || SGLIB___GET_VALUE(t->color_f"...
.text:00402CCF		       mov     dword ptr [esp+8], offset aSglib___rbtr_4 ; "sglib___rbtree_consistency_check"
.text:00402CD7		       mov     dword ptr [esp+4], 19h
.text:00402CDF		       mov     dword ptr [esp],	offset aRbtree_c ; "rbtree.c"
.text:00402CE6		       call    __assert_func
.text:00402CEB
.text:00402CEB loc_402CEB:			       ; CODE XREF: .text:00402CBAj
.text:00402CEB					       ; .text:00402CC5j
.text:00402CEB		       mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00402CF2		       mov     dword ptr [esp+8], 0
.text:00402CFA		       lea     eax, [ebp-4]
.text:00402CFD		       mov     [esp+4],	eax
.text:00402D01		       mov     eax, [ebp+8]
.text:00402D04		       mov     [esp], eax
.text:00402D07		       call    sub_402AD1
.text:00402D0C		       leave
.text:00402D0D		       retn
.text:00402D0E ; ---------------------------------------------------------------------------
.text:00402D0E
.text:00402D0E loc_402D0E:			       ; DATA XREF: start+27o
.text:00402D0E		       lea     ecx, [esp+4]
.text:00402D12		       and     esp, 0FFFFFFF0h
.text:00402D15		       push    dword ptr [ecx-4]
.text:00402D18		       push    ebp
.text:00402D19		       mov     ebp, esp
.text:00402D1B		       push    ecx
.text:00402D1C		       sub     esp, 2D4h
.text:00402D22		       mov     [ebp-2C8h], ecx
.text:00402D28		       call    __main
.text:00402D2D		       mov     dword ptr [ebp-28h], 0
.text:00402D34		       mov     dword ptr [ebp-10h], 1
.text:00402D3B		       jmp     short loc_402DAE
.text:00402D3D ; ---------------------------------------------------------------------------
.text:00402D3D
.text:00402D3D loc_402D3D:			       ; CODE XREF: .text:00402DB9j
.text:00402D3D		       mov     eax, [ebp-10h]
.text:00402D40		       shl     eax, 2
.text:00402D43		       mov     edx, [ebp-2C8h]
.text:00402D49		       add     eax, [edx+4]
.text:00402D4C		       mov     edx, [eax]
.text:00402D4E		       lea     eax, [ebp-14h]
.text:00402D51		       mov     [esp+8],	eax
.text:00402D55		       mov     dword ptr [esp+4], offset aD ; "%d"
.text:00402D5D		       mov     [esp], edx
.text:00402D60		       call    sscanf
.text:00402D65		       mov     eax, [ebp-14h]
.text:00402D68		       mov     [ebp-24h], eax
.text:00402D6B		       mov     edx, [ebp-28h]
.text:00402D6E		       lea     eax, [ebp-24h]
.text:00402D71		       mov     [esp+4],	eax
.text:00402D75		       mov     [esp], edx
.text:00402D78		       call    sub_4023AC
.text:00402D7D		       test    eax, eax
.text:00402D7F		       jnz     short loc_402DAA
.text:00402D81		       mov     dword ptr [esp],	10h
.text:00402D88		       call    malloc
.text:00402D8D		       mov     [ebp-0Ch], eax
.text:00402D90		       mov     edx, [ebp-14h]
.text:00402D93		       mov     eax, [ebp-0Ch]
.text:00402D96		       mov     [eax], edx
.text:00402D98		       mov     eax, [ebp-0Ch]
.text:00402D9B		       mov     [esp+4],	eax
.text:00402D9F		       lea     eax, [ebp-28h]
.text:00402DA2		       mov     [esp], eax
.text:00402DA5		       call    sub_402347
.text:00402DAA
.text:00402DAA loc_402DAA:			       ; CODE XREF: .text:00402D7Fj
.text:00402DAA		       add     dword ptr [ebp-10h], 1
.text:00402DAE
.text:00402DAE loc_402DAE:			       ; CODE XREF: .text:00402D3Bj
.text:00402DAE		       mov     eax, [ebp-10h]
.text:00402DB1		       mov     edx, [ebp-2C8h]
.text:00402DB7		       cmp     eax, [edx]
.text:00402DB9		       jl      short loc_402D3D
.text:00402DBB		       mov     eax, [ebp-28h]
.text:00402DBE		       mov     [esp+4],	eax
.text:00402DC2		       lea     eax, [ebp-2B8h]
.text:00402DC8		       mov     [esp], eax
.text:00402DCB		       call    sub_402A1B
.text:00402DD0		       mov     [ebp-8],	eax
.text:00402DD3		       jmp     short loc_402DFB
.text:00402DD5 ; ---------------------------------------------------------------------------
.text:00402DD5
.text:00402DD5 loc_402DD5:			       ; CODE XREF: .text:00402DFFj
.text:00402DD5		       mov     eax, [ebp-8]
.text:00402DD8		       mov     eax, [eax]
.text:00402DDA		       mov     [esp+4],	eax
.text:00402DDE		       mov     dword ptr [esp],	offset aD_0 ; "%d "
.text:00402DE5		       call    printf
.text:00402DEA		       lea     eax, [ebp-2B8h]
.text:00402DF0		       mov     [esp], eax
.text:00402DF3		       call    sub_402AB9
.text:00402DF8		       mov     [ebp-8],	eax
.text:00402DFB
.text:00402DFB loc_402DFB:			       ; CODE XREF: .text:00402DD3j
.text:00402DFB		       cmp     dword ptr [ebp-8], 0
.text:00402DFF		       jnz     short loc_402DD5
.text:00402E01		       mov     dword ptr [esp],	0Ah
.text:00402E08		       call    putchar
.text:00402E0D		       mov     eax, [ebp-28h]
.text:00402E10		       mov     [esp+4],	eax
.text:00402E14		       lea     eax, [ebp-2B8h]
.text:00402E1A		       mov     [esp], eax
.text:00402E1D		       call    sub_4029B7
.text:00402E22		       mov     [ebp-8],	eax
.text:00402E25		       jmp     short loc_402E43
.text:00402E27 ; ---------------------------------------------------------------------------
.text:00402E27
.text:00402E27 loc_402E27:			       ; CODE XREF: .text:00402E47j
.text:00402E27		       mov     eax, [ebp-8]
.text:00402E2A		       mov     [esp], eax
.text:00402E2D		       call    free
.text:00402E32		       lea     eax, [ebp-2B8h]
.text:00402E38		       mov     [esp], eax
.text:00402E3B		       call    sub_402AB9
.text:00402E40		       mov     [ebp-8],	eax
.text:00402E43
.text:00402E43 loc_402E43:			       ; CODE XREF: .text:00402E25j
.text:00402E43		       cmp     dword ptr [ebp-8], 0
.text:00402E47		       jnz     short loc_402E27
.text:00402E49		       mov     eax, 0
.text:00402E4E		       add     esp, 2D4h
.text:00402E54		       pop     ecx
.text:00402E55		       pop     ebp
.text:00402E56		       lea     esp, [ecx-4]
.text:00402E59		       retn
.text:00402E59 ; ---------------------------------------------------------------------------
.text:00402E5A		       align 4
.text:00402E5C ; [00000006 BYTES: COLLAPSED FUNCTION __deregister_frame_info. PRESS KEYPAD "+" TO EXPAND]
.text:00402E62		       align 4
.text:00402E64 ; [00000006 BYTES: COLLAPSED FUNCTION __register_frame_info. PRESS KEYPAD "+" TO	EXPAND]
.text:00402E6A		       align 10h
.text:00402E70
.text:00402E70 ; =============== S U B R O U T I N E =======================================
.text:00402E70
.text:00402E70 ; Attributes: bp-based frame
.text:00402E70
.text:00402E70 sub_402E70      proc near	       ; CODE XREF: start+2Ep
.text:00402E70
.text:00402E70 var_8	       = dword ptr -8
.text:00402E70 var_4	       = dword ptr -4
.text:00402E70 arg_0	       = dword ptr  8
.text:00402E70
.text:00402E70		       push    ebp
.text:00402E71		       mov     ebp, esp
.text:00402E73		       sub     esp, 8
.text:00402E76		       mov     eax, [ebp+arg_0]
.text:00402E79		       mov     [esp+8+var_4], 0
.text:00402E81		       mov     [esp+8+var_8], eax
.text:00402E84		       call    sub_402F20
.text:00402E89		       sub     esp, 8
.text:00402E8C		       call    ds:_dll_crt0@0  ; dll_crt0()
.text:00402E92		       nop
.text:00402E93		       nop
.text:00402E94		       nop
.text:00402E95		       nop
.text:00402E96		       nop
.text:00402E97		       nop
.text:00402E98		       nop
.text:00402E99		       nop
.text:00402E9A		       nop
.text:00402E9B		       nop
.text:00402E9C		       nop
.text:00402E9D		       nop
.text:00402E9E		       nop
.text:00402E9F		       nop
.text:00402E9F sub_402E70      endp ; sp-analysis failed
.text:00402E9F
.text:00402EA0
.text:00402EA0 ; =============== S U B R O U T I N E =======================================
.text:00402EA0
.text:00402EA0 ; Attributes: bp-based frame
.text:00402EA0
.text:00402EA0 sub_402EA0      proc near	       ; CODE XREF: start+4Ap
.text:00402EA0					       ; DATA XREF: sub_402F20+72o ...
.text:00402EA0		       push    ebp
.text:00402EA1		       mov     ebp, esp
.text:00402EA3		       pop     ebp
.text:00402EA4		       retn
.text:00402EA4 sub_402EA0      endp
.text:00402EA4
.text:00402EA4 ; ---------------------------------------------------------------------------
.text:00402EA5		       align 10h
.text:00402EB0
.text:00402EB0 ; =============== S U B R O U T I N E =======================================
.text:00402EB0
.text:00402EB0 ; Attributes: bp-based frame
.text:00402EB0
.text:00402EB0 sub_402EB0      proc near	       ; CODE XREF: start+66p
.text:00402EB0					       ; DATA XREF: sub_402F20+79o ...
.text:00402EB0		       push    ebp
.text:00402EB1		       mov     ebp, esp
.text:00402EB3		       pop     ebp
.text:00402EB4		       retn
.text:00402EB4 sub_402EB0      endp
.text:00402EB4
.text:00402EB4 ; ---------------------------------------------------------------------------
.text:00402EB5		       align 10h
.text:00402EC0
.text:00402EC0 ; =============== S U B R O U T I N E =======================================
.text:00402EC0
.text:00402EC0 ; Attributes: bp-based frame
.text:00402EC0
.text:00402EC0 sub_402EC0      proc near	       ; CODE XREF: start+82p
.text:00402EC0					       ; DATA XREF: sub_402F20+80o ...
.text:00402EC0		       push    ebp
.text:00402EC1		       mov     ebp, esp
.text:00402EC3		       pop     ebp
.text:00402EC4		       retn
.text:00402EC4 sub_402EC0      endp
.text:00402EC4
.text:00402EC4 ; ---------------------------------------------------------------------------
.text:00402EC5		       align 10h
.text:00402ED0
.text:00402ED0 ; =============== S U B R O U T I N E =======================================
.text:00402ED0
.text:00402ED0 ; Attributes: bp-based frame
.text:00402ED0
.text:00402ED0 sub_402ED0      proc near	       ; CODE XREF: start+9Ep
.text:00402ED0					       ; DATA XREF: sub_402F20+87o ...
.text:00402ED0		       push    ebp
.text:00402ED1		       mov     ebp, esp
.text:00402ED3		       pop     ebp
.text:00402ED4		       retn
.text:00402ED4 sub_402ED0      endp
.text:00402ED4
.text:00402ED4 ; ---------------------------------------------------------------------------
.text:00402ED5		       align 10h
.text:00402EE0 ; [00000006 BYTES: COLLAPSED FUNCTION __main. PRESS KEYPAD "+" TO EXPAND]
.text:00402EE6		       align 4
.text:00402EE8 ; [00000006 BYTES: COLLAPSED FUNCTION __assert_func. PRESS KEYPAD "+" TO	EXPAND]
.text:00402EEE		       align 10h
.text:00402EF0 ; [00000006 BYTES: COLLAPSED FUNCTION sscanf. PRESS KEYPAD "+" TO EXPAND]
.text:00402EF6		       align 4
.text:00402EF8 ; [00000006 BYTES: COLLAPSED FUNCTION malloc. PRESS KEYPAD "+" TO EXPAND]
.text:00402EFE		       align 10h
.text:00402F00 ; [00000006 BYTES: COLLAPSED FUNCTION printf. PRESS KEYPAD "+" TO EXPAND]
.text:00402F06		       align 4
.text:00402F08 ; [00000006 BYTES: COLLAPSED FUNCTION free. PRESS KEYPAD	"+" TO EXPAND]
.text:00402F0E		       align 10h
.text:00402F10 ; [00000006 BYTES: COLLAPSED FUNCTION putchar. PRESS KEYPAD "+" TO EXPAND]
.text:00402F16		       align 10h
.text:00402F20
.text:00402F20 ; =============== S U B R O U T I N E =======================================
.text:00402F20
.text:00402F20 ; Attributes: bp-based frame
.text:00402F20
.text:00402F20 sub_402F20      proc near	       ; CODE XREF: sub_402E70+14p
.text:00402F20					       ; sub_403380+18p
.text:00402F20
.text:00402F20 var_18	       = dword ptr -18h
.text:00402F20 arg_0	       = dword ptr  8
.text:00402F20 arg_4	       = dword ptr  0Ch
.text:00402F20
.text:00402F20		       push    ebp
.text:00402F21		       mov     ebp, esp
.text:00402F23		       push    esi
.text:00402F24		       push    ebx
.text:00402F25		       sub     esp, 10h
.text:00402F28		       mov     ebx, [ebp+arg_4]
.text:00402F2B		       mov     esi, [ebp+arg_0]
.text:00402F2E		       mov     [esp+18h+var_18], 8
.text:00402F35		       call    cygwin_internal
.text:00402F3A		       test    ebx, ebx
.text:00402F3C		       mov     ecx, eax
.text:00402F3E		       jz      loc_403100
.text:00402F44		       mov     eax, ds:_impure_ptr
.text:00402F49		       test    ecx, ecx
.text:00402F4B		       mov     dword ptr [ebx+4], 0A8h
.text:00402F52		       mov     dword ptr [ebx+8], 3EFh
.text:00402F59		       mov     dword ptr [ebx+0Ch], 7
.text:00402F60		       mov     [ebx+10h], eax
.text:00402F63		       mov     eax, [ebp+0]
.text:00402F66		       mov     dword ptr [ebx+80h], 0
.text:00402F70		       mov     dword ptr [ebx+84h], 0E6h
.text:00402F7A		       mov     dword ptr [ebx+2Ch], offset dword_403420
.text:00402F81		       mov     dword ptr [ebx+30h], offset dword_40342C
.text:00402F88		       mov     dword ptr [ebx+14h], offset dword_406020
.text:00402F8F		       mov     [ebx+28h], esi
.text:00402F92		       mov     dword ptr [ebx+48h], offset sub_402EA0
.text:00402F99		       mov     dword ptr [ebx+4Ch], offset sub_402EB0
.text:00402FA0		       mov     dword ptr [ebx+50h], offset sub_402EC0
.text:00402FA7		       mov     dword ptr [ebx+54h], offset sub_402ED0
.text:00402FAE		       mov     dword ptr [ebx+24h], offset dword_406024
.text:00402FB5		       mov     [ebx], eax
.text:00402FB7		       mov     dword ptr [ebx+18h], offset malloc
.text:00402FBE		       mov     dword ptr [ebx+1Ch], offset free
.text:00402FC5		       mov     dword ptr [ebx+20h], offset loc_403370
.text:00402FCC		       mov     dword ptr [ebx+44h], offset loc_403378
.text:00402FD3		       jz      loc_40309A
.text:00402FD9
.text:00402FD9 loc_402FD9:			       ; CODE XREF: sub_402F20+277j
.text:00402FD9		       mov     edx, [ecx+78h]
.text:00402FDC		       test    edx, edx
.text:00402FDE		       jz      loc_40309A
.text:00402FE4		       mov     eax, ds:dword_406028
.text:00402FE9		       test    eax, eax
.text:00402FEB		       jnz     loc_40309A
.text:00402FF1		       mov     eax, dword_404020
.text:00402FF6		       test    eax, eax
.text:00402FF8		       jz      loc_403210
.text:00402FFE
.text:00402FFE loc_402FFE:			       ; CODE XREF: sub_402F20+2F7j
.text:00402FFE		       mov     eax, dword_404024
.text:00403003		       test    eax, eax
.text:00403005		       jz      loc_403200
.text:0040300B
.text:0040300B loc_40300B:			       ; CODE XREF: sub_402F20+2E8j
.text:0040300B		       mov     eax, dword_404028
.text:00403010		       test    eax, eax
.text:00403012		       jz      loc_4031F0
.text:00403018
.text:00403018 loc_403018:			       ; CODE XREF: sub_402F20+2D8j
.text:00403018		       mov     eax, dword_40402C
.text:0040301D		       test    eax, eax
.text:0040301F		       jz      loc_4031E0
.text:00403025
.text:00403025 loc_403025:			       ; CODE XREF: sub_402F20+2C8j
.text:00403025		       mov     eax, dword_404030
.text:0040302A		       test    eax, eax
.text:0040302C		       jz      loc_4031D0
.text:00403032
.text:00403032 loc_403032:			       ; CODE XREF: sub_402F20+2B8j
.text:00403032		       mov     esi, dword_404034
.text:00403038		       test    esi, esi
.text:0040303A		       jz      loc_4031C0
.text:00403040
.text:00403040 loc_403040:			       ; CODE XREF: sub_402F20+2A8j
.text:00403040		       mov     ecx, dword_404038
.text:00403046		       test    ecx, ecx
.text:00403048		       jz      loc_4031B0
.text:0040304E
.text:0040304E loc_40304E:			       ; CODE XREF: sub_402F20+298j
.text:0040304E		       mov     eax, dword_40403C
.text:00403053		       test    eax, eax
.text:00403055		       jz      loc_4031A2
.text:0040305B
.text:0040305B loc_40305B:			       ; CODE XREF: sub_402F20+28Aj
.text:0040305B		       mov     eax, dword_404020
.text:00403060		       mov     [edx], eax
.text:00403062		       mov     eax, dword_404024
.text:00403067		       mov     [edx+4],	eax
.text:0040306A		       mov     eax, dword_404028
.text:0040306F		       mov     [edx+8],	eax
.text:00403072		       mov     eax, dword_40402C
.text:00403077		       mov     [edx+0Ch], eax
.text:0040307A		       mov     eax, dword_404030
.text:0040307F		       mov     [edx+10h], eax
.text:00403082		       mov     eax, dword_404034
.text:00403087		       mov     [edx+14h], eax
.text:0040308A		       mov     eax, dword_404038
.text:0040308F		       mov     [edx+18h], eax
.text:00403092		       mov     eax, dword_40403C
.text:00403097		       mov     [edx+1Ch], eax
.text:0040309A
.text:0040309A loc_40309A:			       ; CODE XREF: sub_402F20+B3j
.text:0040309A					       ; sub_402F20+BEj ...
.text:0040309A		       mov     [esp+18h+var_18], 0
.text:004030A1		       call    GetModuleHandleA
.text:004030A6		       mov     dword ptr [ebx+34h], offset off_404000
.text:004030AD		       mov     dword ptr [ebx+38h], offset dword_404564
.text:004030B4		       mov     dword ptr [ebx+3Ch], offset dword_406000
.text:004030BB		       mov     dword ptr [ebx+40h], offset dword_406130
.text:004030C2		       mov     dword ptr [ebx+94h], offset dword_405000
.text:004030CC		       mov     [ebx+7Ch], eax
.text:004030CF		       sub     esp, 4
.text:004030D2		       mov     dword ptr [ebx+98h], offset dword_405000
.text:004030DC		       mov     dword ptr [ebx+9Ch], 400000h
.text:004030E6		       call    sub_403360
.text:004030EB		       lea     esp, [ebp-8]
.text:004030EE		       mov     eax, 1
.text:004030F3		       pop     ebx
.text:004030F4		       pop     esi
.text:004030F5		       pop     ebp
.text:004030F6		       retn    8
.text:004030F6 ; ---------------------------------------------------------------------------
.text:004030F9		       align 10h
.text:00403100
.text:00403100 loc_403100:			       ; CODE XREF: sub_402F20+1Ej
.text:00403100		       mov     dword ptr [eax+4], 0A8h
.text:00403107		       mov     edx, ds:_impure_ptr
.text:0040310D		       test    ecx, ecx
.text:0040310F		       mov     dword ptr [eax+8], 3EFh
.text:00403116		       mov     ebx, ecx
.text:00403118		       mov     dword ptr [eax+0Ch], 7
.text:0040311F		       mov     dword ptr [eax+80h], 0
.text:00403129		       mov     dword ptr [eax+84h], 0E6h
.text:00403133		       mov     dword ptr [eax+2Ch], offset dword_403420
.text:0040313A		       mov     dword ptr [eax+30h], offset dword_40342C
.text:00403141		       mov     dword ptr [eax+14h], offset dword_406020
.text:00403148		       mov     eax, [eax+0A4h]
.text:0040314E		       mov     [ecx+28h], esi
.text:00403151		       mov     dword ptr [ecx+48h], offset sub_402EA0
.text:00403158		       mov     dword ptr [ecx+4Ch], offset sub_402EB0
.text:0040315F		       mov     [edx], eax
.text:00403161		       mov     eax, [ebp+0]
.text:00403164		       mov     dword ptr [ecx+50h], offset sub_402EC0
.text:0040316B		       mov     dword ptr [ecx+54h], offset sub_402ED0
.text:00403172		       mov     dword ptr [ecx+24h], offset dword_406024
.text:00403179		       mov     [ecx], eax
.text:0040317B		       mov     dword ptr [ecx+18h], offset malloc
.text:00403182		       mov     dword ptr [ecx+1Ch], offset free
.text:00403189		       mov     dword ptr [ecx+20h], offset loc_403370
.text:00403190		       mov     dword ptr [ecx+44h], offset loc_403378
.text:00403197		       jnz     loc_402FD9
.text:0040319D		       jmp     loc_40309A
.text:004031A2 ; ---------------------------------------------------------------------------
.text:004031A2
.text:004031A2 loc_4031A2:			       ; CODE XREF: sub_402F20+135j
.text:004031A2		       mov     eax, [edx+1Ch]
.text:004031A5		       mov     dword_40403C, eax
.text:004031AA		       jmp     loc_40305B
.text:004031AA ; ---------------------------------------------------------------------------
.text:004031AF		       align 10h
.text:004031B0
.text:004031B0 loc_4031B0:			       ; CODE XREF: sub_402F20+128j
.text:004031B0		       mov     eax, [edx+18h]
.text:004031B3		       mov     dword_404038, eax
.text:004031B8		       jmp     loc_40304E
.text:004031B8 ; ---------------------------------------------------------------------------
.text:004031BD		       align 10h
.text:004031C0
.text:004031C0 loc_4031C0:			       ; CODE XREF: sub_402F20+11Aj
.text:004031C0		       mov     eax, [edx+14h]
.text:004031C3		       mov     dword_404034, eax
.text:004031C8		       jmp     loc_403040
.text:004031C8 ; ---------------------------------------------------------------------------
.text:004031CD		       align 10h
.text:004031D0
.text:004031D0 loc_4031D0:			       ; CODE XREF: sub_402F20+10Cj
.text:004031D0		       mov     eax, [edx+10h]
.text:004031D3		       mov     dword_404030, eax
.text:004031D8		       jmp     loc_403032
.text:004031D8 ; ---------------------------------------------------------------------------
.text:004031DD		       align 10h
.text:004031E0
.text:004031E0 loc_4031E0:			       ; CODE XREF: sub_402F20+FFj
.text:004031E0		       mov     eax, [edx+0Ch]
.text:004031E3		       mov     dword_40402C, eax
.text:004031E8		       jmp     loc_403025
.text:004031E8 ; ---------------------------------------------------------------------------
.text:004031ED		       align 10h
.text:004031F0
.text:004031F0 loc_4031F0:			       ; CODE XREF: sub_402F20+F2j
.text:004031F0		       mov     eax, [edx+8]
.text:004031F3		       mov     dword_404028, eax
.text:004031F8		       jmp     loc_403018
.text:004031F8 ; ---------------------------------------------------------------------------
.text:004031FD		       align 10h
.text:00403200
.text:00403200 loc_403200:			       ; CODE XREF: sub_402F20+E5j
.text:00403200		       mov     eax, [edx+4]
.text:00403203		       mov     dword_404024, eax
.text:00403208		       jmp     loc_40300B
.text:00403208 ; ---------------------------------------------------------------------------
.text:0040320D		       align 10h
.text:00403210
.text:00403210 loc_403210:			       ; CODE XREF: sub_402F20+D8j
.text:00403210		       mov     eax, [edx]
.text:00403212		       mov     dword_404020, eax
.text:00403217		       jmp     loc_402FFE
.text:00403217 sub_402F20      endp
.text:00403217
.text:00403217 ; ---------------------------------------------------------------------------
.text:0040321C		       align 10h
.text:00403220
.text:00403220 ; =============== S U B R O U T I N E =======================================
.text:00403220
.text:00403220 ; Attributes: bp-based frame
.text:00403220
.text:00403220 sub_403220      proc near	       ; DATA XREF: .text:00403314o
.text:00403220
.text:00403220 var_18	       = dword ptr -18h
.text:00403220 var_14	       = dword ptr -14h
.text:00403220 var_10	       = dword ptr -10h
.text:00403220
.text:00403220		       push    ebp
.text:00403221		       mov     ebp, esp
.text:00403223		       sub     esp, 18h
.text:00403226		       mov     eax, ds:dword_406050
.text:0040322B		       mov     [esp+18h+var_10], eax
.text:0040322F		       mov     eax, ds:dword_406040
.text:00403234		       mov     [esp+18h+var_14], eax
.text:00403238		       mov     eax, ds:dword_406030
.text:0040323D		       mov     [esp+18h+var_18], eax
.text:00403240		       call    sub_4033D0
.text:00403245		       sub     esp, 0Ch
.text:00403248		       leave
.text:00403249		       retn
.text:00403249 sub_403220      endp
.text:00403249
.text:00403249 ; ---------------------------------------------------------------------------
.text:0040324A		       align 10h
.text:00403250
.text:00403250 loc_403250:			       ; CODE XREF: .text:00403344j
.text:00403250		       push    ebp
.text:00403251		       mov     ebp, esp
.text:00403253		       push    ebx
.text:00403254		       sub     esp, 14h
.text:00403257		       mov     eax, [ebp+0Ch]
.text:0040325A		       mov     ecx, [ebp+8]
.text:0040325D		       mov     edx, [ebp+10h]
.text:00403260		       cmp     eax, 1
.text:00403263		       jz      loc_4032F0
.text:00403269		       jb      short loc_403283
.text:0040326B		       cmp     eax, 2
.text:0040326E		       jz      short loc_4032D6
.text:00403270		       cmp     eax, 3
.text:00403273		       mov     ebx, 1
.text:00403278		       jz      short loc_4032C0
.text:0040327A
.text:0040327A loc_40327A:			       ; CODE XREF: .text:0040329Ej
.text:0040327A					       ; .text:004032B7j
.text:0040327A		       mov     eax, ebx
.text:0040327C		       mov     ebx, [ebp-4]
.text:0040327F		       leave
.text:00403280		       retn    0Ch
.text:00403283 ; ---------------------------------------------------------------------------
.text:00403283
.text:00403283 loc_403283:			       ; CODE XREF: .text:00403269j
.text:00403283		       mov     [esp+8],	edx
.text:00403287		       mov     dword ptr [esp+4], 0
.text:0040328F		       mov     [esp], ecx
.text:00403292		       call    sub_4033D0
.text:00403297		       sub     esp, 0Ch
.text:0040329A		       test    eax, eax
.text:0040329C		       mov     ebx, eax
.text:0040329E		       jz      short loc_40327A
.text:004032A0		       mov     eax, ds:dword_406060
.text:004032A5		       mov     [esp], eax
.text:004032A8		       call    cygwin_detach_dll
.text:004032AD		       mov     ds:dword_406060,	0FFFFFFFFh
.text:004032B7		       jmp     short loc_40327A
.text:004032B7 ; ---------------------------------------------------------------------------
.text:004032B9		       align 10h
.text:004032C0
.text:004032C0 loc_4032C0:			       ; CODE XREF: .text:00403278j
.text:004032C0		       mov     [ebp+10h], edx
.text:004032C3		       mov     ebx, [ebp-4]
.text:004032C6		       mov     dword ptr [ebp+0Ch], 3
.text:004032CD		       mov     [ebp+8],	ecx
.text:004032D0		       leave
.text:004032D1		       jmp     sub_4033D0
.text:004032D6 ; ---------------------------------------------------------------------------
.text:004032D6
.text:004032D6 loc_4032D6:			       ; CODE XREF: .text:0040326Ej
.text:004032D6		       mov     [ebp+10h], edx
.text:004032D9		       mov     ebx, [ebp-4]
.text:004032DC		       mov     dword ptr [ebp+0Ch], 2
.text:004032E3		       mov     [ebp+8],	ecx
.text:004032E6		       leave
.text:004032E7		       jmp     sub_4033D0
.text:004032E7 ; ---------------------------------------------------------------------------
.text:004032EC		       align 10h
.text:004032F0
.text:004032F0 loc_4032F0:			       ; CODE XREF: .text:00403263j
.text:004032F0		       xor     eax, eax
.text:004032F2		       test    edx, edx
.text:004032F4		       setz    al
.text:004032F7		       xor     ebx, ebx
.text:004032F9		       mov     ds:dword_406030,	ecx
.text:004032FF		       mov     ds:dword_406040,	1
.text:00403309		       mov     ds:dword_406050,	edx
.text:0040330F		       mov     ds:dword_406028,	eax
.text:00403314		       mov     dword ptr [esp+4], offset sub_403220
.text:0040331C		       mov     [esp], ecx
.text:0040331F		       call    sub_403380
.text:00403324		       cmp     eax, 0FFFFFFFFh
.text:00403327		       setnz   bl
.text:0040332A		       mov     ds:dword_406060,	eax
.text:0040332F		       mov     eax, ebx
.text:00403331		       mov     ebx, [ebp-4]
.text:00403334		       leave
.text:00403335		       retn    0Ch
.text:00403335 ; ---------------------------------------------------------------------------
.text:00403338		       align 10h
.text:00403340		       push    ebp
.text:00403341		       mov     ebp, esp
.text:00403343		       leave
.text:00403344		       jmp     loc_403250
.text:00403344 ; ---------------------------------------------------------------------------
.text:00403349		       align 10h
.text:00403350 ; [00000006 BYTES: COLLAPSED FUNCTION cygwin_internal. PRESS KEYPAD "+" TO EXPAND]
.text:00403356		       align 10h
.text:00403360
.text:00403360 ; =============== S U B R O U T I N E =======================================
.text:00403360
.text:00403360 ; Attributes: bp-based frame
.text:00403360
.text:00403360 sub_403360      proc near	       ; CODE XREF: sub_402F20+1C6p
.text:00403360		       push    ebp
.text:00403361		       mov     ebp, esp
.text:00403363		       pop     ebp
.text:00403364		       retn
.text:00403364 sub_403360      endp
.text:00403364
.text:00403364 ; ---------------------------------------------------------------------------
.text:00403365		       align 10h
.text:00403370
.text:00403370 loc_403370:			       ; DATA XREF: sub_402F20+A5o
.text:00403370					       ; sub_402F20+269o
.text:00403370		       jmp     ds:realloc
.text:00403370 ; ---------------------------------------------------------------------------
.text:00403376		       align 4
.text:00403378
.text:00403378 loc_403378:			       ; DATA XREF: sub_402F20+ACo
.text:00403378					       ; sub_402F20+270o
.text:00403378		       jmp     ds:calloc
.text:00403378 ; ---------------------------------------------------------------------------
.text:0040337E		       align 10h
.text:00403380
.text:00403380 ; =============== S U B R O U T I N E =======================================
.text:00403380
.text:00403380 ; Attributes: bp-based frame
.text:00403380
.text:00403380 sub_403380      proc near	       ; CODE XREF: .text:0040331Fp
.text:00403380
.text:00403380 var_18	       = dword ptr -18h
.text:00403380 var_14	       = dword ptr -14h
.text:00403380 var_4	       = dword ptr -4
.text:00403380 arg_0	       = dword ptr  8
.text:00403380 arg_4	       = dword ptr  0Ch
.text:00403380
.text:00403380 ; FUNCTION CHUNK	AT .text:004033E0 SIZE 00000006	BYTES
.text:00403380
.text:00403380		       push    ebp
.text:00403381		       mov     ebp, esp
.text:00403383		       push    ebx
.text:00403384		       sub     esp, 14h
.text:00403387		       mov     ebx, [ebp+arg_0]
.text:0040338A		       mov     [esp+18h+var_14], offset	dword_406070
.text:00403392		       mov     eax, [ebp+arg_4]
.text:00403395		       mov     [esp+18h+var_18], eax
.text:00403398		       call    sub_402F20
.text:0040339D		       mov     [ebp+arg_0], ebx
.text:004033A0		       mov     ebx, [ebp+var_4]
.text:004033A3		       mov     [ebp+arg_4], offset dword_406070
.text:004033AA		       sub     esp, 8
.text:004033AD		       leave
.text:004033AE		       jmp     loc_4033E0
.text:004033AE sub_403380      endp
.text:004033AE
.text:004033AE ; ---------------------------------------------------------------------------
.text:004033B3		       align 10h
.text:004033C0 ; [00000006 BYTES: COLLAPSED FUNCTION cygwin_detach_dll.	PRESS KEYPAD "+" TO EXPAND]
.text:004033C6		       align 10h
.text:004033D0
.text:004033D0 ; =============== S U B R O U T I N E =======================================
.text:004033D0
.text:004033D0 ; Attributes: bp-based frame
.text:004033D0
.text:004033D0 sub_4033D0      proc near	       ; CODE XREF: sub_403220+20p
.text:004033D0					       ; .text:00403292p ...
.text:004033D0		       push    ebp
.text:004033D1		       mov     eax, 1
.text:004033D6		       mov     ebp, esp
.text:004033D8		       pop     ebp
.text:004033D9		       retn    0Ch
.text:004033D9 sub_4033D0      endp
.text:004033D9
.text:004033D9 ; ---------------------------------------------------------------------------
.text:004033DC		       align 10h
.text:004033E0 ; START OF FUNCTION CHUNK FOR sub_403380
.text:004033E0
.text:004033E0 loc_4033E0:			       ; CODE XREF: sub_403380+2Ej
.text:004033E0		       jmp     ds:dll_dllcrt0
.text:004033E0 ; END OF	FUNCTION CHUNK FOR sub_403380
.text:004033E0 ; ---------------------------------------------------------------------------
.text:004033E6		       align 4
.text:004033E8 ; [00000006 BYTES: COLLAPSED FUNCTION GetModuleHandleA. PRESS KEYPAD "+"	TO EXPAND]
.text:004033EE		       align 10h
.text:004033F0 ; [00000006 BYTES: COLLAPSED FUNCTION GetProcAddress. PRESS KEYPAD "+" TO EXPAND]
.text:004033F6		       align 10h
.text:00403400		       push    ebp
.text:00403401		       mov     ebp, esp
.text:00403403		       pop     ebp
.text:00403404		       jmp     loc_4010B0
.text:00403404 ; ---------------------------------------------------------------------------
.text:00403409		       align 10h
.text:00403410		       push    ebp
.text:00403411		       mov     ebp, esp
.text:00403413		       pop     ebp
.text:00403414		       jmp     loc_401150
.text:00403414 ; ---------------------------------------------------------------------------
.text:00403419		       align 10h
.text:00403420 dword_403420    dd 0FFFFFFFFh, 403400h, 0 ; DATA	XREF: sub_402F20+5Ao
.text:00403420					       ; sub_402F20+213o
.text:0040342C dword_40342C    dd 0FFFFFFFFh, 403410h, 73h dup(0)
.text:0040342C					       ; DATA XREF: sub_402F20+61o
.text:0040342C					       ; sub_402F20+21Ao
.text:00403600		       dd 280h dup(?)
.text:00403600 _text	       ends
.text:00403600
.data:00404000 ; Section 2. (virtual address 00004000)
.data:00404000 ; Virtual size		       : 00000564 (   1380.)
.data:00404000 ; Section size in file	       : 00000600 (   1536.)
.data:00404000 ; Offset	to raw data for	section: 00002A00
.data:00404000 ; Flags C0600040: Data Readable Writable
.data:00404000 ; Alignment     : 32 bytes
.data:00404000 ; ===========================================================================
.data:00404000
.data:00404000 ; Segment type: Pure data
.data:00404000 ; Segment permissions: Read/Write
.data:00404000 ; Segment alignment '32byte' can not be represented in assembly
.data:00404000 _data	       segment para public 'DATA' use32
.data:00404000		       assume cs:_data
.data:00404000		       ;org 404000h
.data:00404000 off_404000      dd offset __register_frame_info
.data:00404000					       ; DATA XREF: .text:loc_401130r
.data:00404000					       ; sub_402F20+186o
.data:00404004 off_404004      dd offset __deregister_frame_info
.data:00404004					       ; DATA XREF: .text:loc_401190r
.data:00404008 dword_404008    dd 0		       ; DATA XREF: .text:loc_401140r
.data:0040400C		       align 20h
.data:00404020 dword_404020    dd 0		       ; DATA XREF: sub_402F20+D1r
.data:00404020					       ; sub_402F20:loc_40305Br ...
.data:00404024 dword_404024    dd 0		       ; DATA XREF: sub_402F20:loc_402FFEr
.data:00404024					       ; sub_402F20+142r ...
.data:00404028 dword_404028    dd 0		       ; DATA XREF: sub_402F20:loc_40300Br
.data:00404028					       ; sub_402F20+14Ar ...
.data:0040402C dword_40402C    dd 0		       ; DATA XREF: sub_402F20:loc_403018r
.data:0040402C					       ; sub_402F20+152r ...
.data:00404030 dword_404030    dd 0		       ; DATA XREF: sub_402F20:loc_403025r
.data:00404030					       ; sub_402F20+15Ar ...
.data:00404034 dword_404034    dd 0		       ; DATA XREF: sub_402F20:loc_403032r
.data:00404034					       ; sub_402F20+162r ...
.data:00404038 dword_404038    dd 0		       ; DATA XREF: sub_402F20:loc_403040r
.data:00404038					       ; sub_402F20+16Ar ...
.data:0040403C dword_40403C    dd 0		       ; DATA XREF: sub_402F20:loc_40304Er
.data:0040403C					       ; sub_402F20+172r ...
.data:00404040 aCyggcc_s1_dll  db 'cyggcc_s-1.dll',0   ; DATA XREF: .text:004010B6o
.data:00404040					       ; .text:00401156o
.data:0040404F a__register_fra db '__register_frame_info',0 ; DATA XREF: .text:004010C9o
.data:00404065 aCyggcj9_dll    db 'cyggcj-9.dll',0     ; DATA XREF: .text:004010FAo
.data:00404072 a_jv_registercl db '_Jv_RegisterClasses',0 ; DATA XREF: .text:0040110Do
.data:00404086 a__deregister_f db '__deregister_frame_info',0 ; DATA XREF: .text:00401169o
.data:0040409E		       align 10h
.data:004040A0 aSglib___rbtree db 'sglib___rbtree_fix_left_deletion_discrepancy',0
.data:004040A0					       ; DATA XREF: sub_4014E4+22o
.data:004040A0					       ; sub_4014E4+69o ...
.data:004040CD aTNull	       db 't!=NULL',0          ; DATA XREF: sub_4014E4+1Ao
.data:004040CD					       ; sub_401A66+1Ao ...
.data:004040D5 aRbtree_c       db 'rbtree.c',0         ; DATA XREF: sub_4014E4+32o
.data:004040D5					       ; sub_4014E4+79o ...
.data:004040DE		       align 10h
.data:004040E0 aSglib___get_va db 'SGLIB___GET_VALUE(t->color_field)==1',0
.data:004040E0					       ; DATA XREF: sub_4014E4+61o
.data:004040E0					       ; sub_401A66+61o
.data:00404105		       align 4
.data:00404108 aCNullSglib___g db 'c!=NULL && SGLIB___GET_VALUE(c->color_field)==0',0
.data:00404108					       ; DATA XREF: sub_4014E4:loc_4015E7o
.data:00404108					       ; sub_401A66:loc_401B69o
.data:00404138 aClNullSglib___ db 'cl==NULL || SGLIB___GET_VALUE(cl->color_field)==0',0
.data:00404138					       ; DATA XREF: sub_4014E4+282o
.data:00404138					       ; sub_401A66+282o
.data:0040416A a0	       db '0',0                ; DATA XREF: sub_4014E4:loc_4017E1o
.data:0040416A					       ; sub_401A66:loc_401D63o
.data:0040416C aBlNull	       db 'bl!=NULL',0         ; DATA XREF: sub_4014E4+3D9o
.data:0040416C					       ; sub_401A66+3D9o
.data:00404175 aBrNull	       db 'br!=NULL',0         ; DATA XREF: sub_4014E4+403o
.data:00404175					       ; sub_401A66+403o
.data:0040417E		       align 10h
.data:00404180 aSglib___get__0 db 'SGLIB___GET_VALUE(bl->color_field)==1',0
.data:00404180					       ; DATA XREF: sub_4014E4+432o
.data:00404180					       ; sub_401A66+432o
.data:004041A6		       align 4
.data:004041A8 aSglib___get__1 db 'SGLIB___GET_VALUE(br->color_field)==1',0
.data:004041A8					       ; DATA XREF: sub_4014E4+461o
.data:004041A8					       ; sub_401A66+461o
.data:004041CE		       align 10h
.data:004041D0 aBrNullSglib___ db 'br!=NULL && SGLIB___GET_VALUE(br->color_field)==1',0
.data:004041D0					       ; DATA XREF: sub_4014E4:loc_4019DEo
.data:004041D0					       ; sub_401A66:loc_401F60o
.data:00404202		       align 20h
.data:00404220 aSglib___rbtr_0 db 'sglib___rbtree_fix_right_deletion_discrepancy',0
.data:00404220					       ; DATA XREF: sub_401A66+22o
.data:00404220					       ; sub_401A66+69o ...
.data:0040424E		       align 20h
.data:00404260 aSglib___rbtr_1 db 'sglib___rbtree_delete_rightmost_leaf',0
.data:00404260					       ; DATA XREF: sub_40208E+23o
.data:00404285		       align 20h
.data:004042A0 aSglib___rbtr_2 db 'sglib___rbtree_delete_recursive',0
.data:004042A0					       ; DATA XREF: sub_40216E+23o
.data:004042A0					       ; sub_40216E+F4o
.data:004042C0 a0TheElementToD db '0 && "The element to delete not found in the tree,  use ',27h,'delet'
.data:004042C0					       ; DATA XREF: sub_40216E+1Bo
.data:004042C0		       db 'e_if_member',27h,'"!=NULL',0
.data:00404312		       align 4
.data:00404314 aElemTDeletingA db 'elem==t && "Deleting an element which is non member of the tree, '
.data:00404314					       ; DATA XREF: sub_40216E+ECo
.data:00404314		       db 'use ',27h,'delete_if_member',27h,'"!=NULL',0
.data:00404373 aSglib_rbtree_i db 'sglib_rbtree_is_member',0 ; DATA XREF: .text:0040246Ao
.data:0040438A aTElem	       db 't == elem',0        ; DATA XREF: .text:00402462o
.data:00404394 aSglib_rbtree_l db 'sglib_rbtree_len',0 ; DATA XREF: .text:004025AEo
.data:004043A5		       align 4
.data:004043A8 a0TheBinary_tre db '0 && "the binary_tree is too deep"',0
.data:004043A8					       ; DATA XREF: .text:004025A6o
.data:004043CB aSglib__rbtree_ db 'sglib__rbtree_it_init',0 ; DATA XREF: sub_402859+14o
.data:004043E1 aItNull	       db 'it!=NULL',0         ; DATA XREF: sub_402859+Co
.data:004043EA		       align 20h
.data:00404400 aSglib___rbtr_3 db 'sglib___rbtree_consistency_check_recursive',0
.data:00404400					       ; DATA XREF: sub_402AD1+38o
.data:00404400					       ; sub_402AD1+7Do ...
.data:0040442B aPathdeepCdeep  db '*pathdeep == cdeep',0 ; DATA XREF: sub_402AD1+30o
.data:0040443E aCmparatorTLeft db 'CMPARATOR(t->left, t) <= 0',0 ; DATA XREF: sub_402AD1+75o
.data:00404459 aCmparatorTTRig db 'CMPARATOR(t, t->right) <= 0',0
.data:00404459					       ; DATA XREF: sub_402AD1+BAo
.data:00404475		       align 4
.data:00404478 aTLeftNullSglib db 't->left == NULL || SGLIB___GET_VALUE(t->left->color_field)==0',0
.data:00404478					       ; DATA XREF: sub_402AD1+105o
.data:004044B6		       align 4
.data:004044B8 aTRightNullSgli db 't->right == NULL || SGLIB___GET_VALUE(t->right->color_field)==0',0
.data:004044B8					       ; DATA XREF: sub_402AD1+141o
.data:004044F8		       align 10h
.data:00404500 aSglib___rbtr_4 db 'sglib___rbtree_consistency_check',0
.data:00404500					       ; DATA XREF: .text:00402CCFo
.data:00404521		       align 4
.data:00404524 aTNullSglib___g db 't==NULL || SGLIB___GET_VALUE(t->color_field) == 0',0
.data:00404524					       ; DATA XREF: .text:00402CC7o
.data:00404556 aD	       db '%d',0               ; DATA XREF: .text:00402D55o
.data:00404559 aD_0	       db '%d ',0              ; DATA XREF: .text:00402DDEo
.data:0040455D		       align 10h
.data:00404560 dword_404560    dd 0		       ; DATA XREF: .text:loc_4010F1r
.data:00404560					       ; .text:loc_401124o
.data:00404564 dword_404564    dd 27h dup(0)	       ; DATA XREF: sub_402F20+18Do
.data:00404600		       align 1000h
.data:00404600 _data	       ends
.data:00404600
.eh_frame:00405000 ; Section 3.	(virtual address 00005000)
.eh_frame:00405000 ; Virtual size		   : 00000004 (	     4.)
.eh_frame:00405000 ; Section size in file	   : 00000200 (	   512.)
.eh_frame:00405000 ; Offset to raw data	for section: 00003000
.eh_frame:00405000 ; Flags C0300040: Data Readable Writable
.eh_frame:00405000 ; Alignment	   : 4 bytes
.eh_frame:00405000 ; ===========================================================================
.eh_frame:00405000
.eh_frame:00405000 ; Segment type: Pure	data
.eh_frame:00405000 ; Segment permissions: Read/Write
.eh_frame:00405000 _eh_frame	   segment dword public	'DATA' use32
.eh_frame:00405000		   assume cs:_eh_frame
.eh_frame:00405000		   ;org	405000h
.eh_frame:00405000 dword_405000	   dd 80h dup(0)	   ; DATA XREF:	.text:004010E8o
.eh_frame:00405000					   ; .text:loc_401180o	...
.eh_frame:00405200		   align 1000h
.eh_frame:00405200 _eh_frame	   ends
.eh_frame:00405200
.bss:00406000 ;	Section	4. (virtual address 00006000)
.bss:00406000 ;	Virtual	size		      :	00000130 (    304.)
.bss:00406000 ;	Section	size in	file	      :	00000000 (	0.)
.bss:00406000 ;	Offset to raw data for section:	00000000
.bss:00406000 ;	Flags C0400080:	Bss Readable Writable
.bss:00406000 ;	Alignment     :	8 bytes
.bss:00406000 ;	===========================================================================
.bss:00406000
.bss:00406000 ;	Segment	type: Uninitialized
.bss:00406000 ;	Segment	permissions: Read/Write
.bss:00406000 ;	Segment	alignment 'qword' can not be represented in assembly
.bss:00406000 _bss	      segment para public 'BSS' use32
.bss:00406000		      assume cs:_bss
.bss:00406000		      ;org 406000h
.bss:00406000		      assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00406000 dword_406000    dd 8 dup(?)	      ;	DATA XREF: .text:loc_4010E0o
.bss:00406000					      ;	sub_402F20+194o
.bss:00406020 dword_406020    dd ?		      ;	DATA XREF: sub_402F20+68o
.bss:00406020					      ;	sub_402F20+221o
.bss:00406024 dword_406024    dd ?		      ;	DATA XREF: sub_402F20+8Eo
.bss:00406024					      ;	sub_402F20+252o
.bss:00406028 dword_406028    dd ?		      ;	DATA XREF: sub_402F20+C4r
.bss:00406028					      ;	.text:0040330Fw
.bss:0040602C		      align 10h
.bss:00406030 dword_406030    dd ?		      ;	DATA XREF: sub_403220+18r
.bss:00406030					      ;	.text:004032F9w
.bss:00406034		      align 10h
.bss:00406040 dword_406040    dd ?		      ;	DATA XREF: sub_403220+Fr
.bss:00406040					      ;	.text:004032FFw
.bss:00406044		      align 10h
.bss:00406050 dword_406050    dd ?		      ;	DATA XREF: sub_403220+6r
.bss:00406050					      ;	.text:00403309w
.bss:00406054		      align 10h
.bss:00406060 dword_406060    dd ?		      ;	DATA XREF: .text:004032A0r
.bss:00406060					      ;	.text:004032ADw ...
.bss:00406064		      align 10h
.bss:00406070 dword_406070    dd 30h dup(?)	      ;	DATA XREF: sub_403380+Ao
.bss:00406070					      ;	sub_403380+23o
.bss:00406130 dword_406130    dd 3B4h dup(?)	      ;	DATA XREF: sub_402F20+19Bo
.bss:00406130 _bss	      ends
.bss:00406130
.idata:00407000	; Section 5. (virtual address 00007000)
.idata:00407000	; Virtual size			: 0000028C (	652.)
.idata:00407000	; Section size in file		: 00000400 (   1024.)
.idata:00407000	; Offset to raw	data for section: 00003200
.idata:00407000	; Flags	C0300040: Data Readable	Writable
.idata:00407000	; Alignment	: 4 bytes
.idata:00407000	; ===========================================================================
.idata:00407000
.idata:00407000	; Segment type:	Externs
.idata:00407000	; _idata
.idata:00407000
.idata:00407001
.idata:004070A4	;
.idata:004070A4	; Imports from cygwin1.dll
.idata:004070A4	;
.idata:004070A4			extrn __imp___assert_func:dword	; DATA XREF: __assert_funcr
.idata:004070A8			extrn __imp___main:dword ; DATA	XREF: __mainr
.idata:004070AC	; __stdcall dll_crt0()
.idata:004070AC			extrn _dll_crt0@0:dword	; CODE XREF: sub_402E70+1Cp
.idata:004070AC						; DATA XREF: sub_402E70+1Cr
.idata:004070B0			extrn _impure_ptr:dword	; DATA XREF: sub_402F20+24r
.idata:004070B0						; sub_402F20+1E7r
.idata:004070B4	; void *__cdecl	calloc(size_t NumOfElements, size_t SizeOfElements)
.idata:004070B4			extrn calloc:dword	; DATA XREF: .text:loc_403378r
.idata:004070B8			extrn __imp_cygwin_detach_dll:dword
.idata:004070B8						; DATA XREF: cygwin_detach_dllr
.idata:004070BC			extrn __imp_cygwin_internal:dword
.idata:004070BC						; DATA XREF: cygwin_internalr
.idata:004070C0			extrn dll_dllcrt0:dword	; DATA XREF: sub_403380:loc_4033E0r
.idata:004070C4	; void __cdecl free(void *Memory)
.idata:004070C4			extrn __imp_free:dword	; DATA XREF: freer
.idata:004070C8	; void *__cdecl	malloc(size_t Size)
.idata:004070C8			extrn __imp_malloc:dword ; DATA	XREF: mallocr
.idata:004070CC	; int printf(const char	*Format, ...)
.idata:004070CC			extrn __imp_printf:dword ; DATA	XREF: printfr
.idata:004070D0	; int __cdecl putchar(int Ch)
.idata:004070D0			extrn __imp_putchar:dword ; DATA XREF: putcharr
.idata:004070D4	; void *__cdecl	realloc(void *Memory, size_t NewSize)
.idata:004070D4			extrn realloc:dword	; DATA XREF: .text:loc_403370r
.idata:004070D8	; int sscanf(const char	*Src, const char *Format, ...)
.idata:004070D8			extrn __imp_sscanf:dword ; DATA	XREF: sscanfr
.idata:004070DC
.idata:004070E0	;
.idata:004070E0	; Imports from cyggcc_s-1.dll
.idata:004070E0	;
.idata:004070E0			extrn __imp___deregister_frame_info:dword
.idata:004070E0						; DATA XREF: __deregister_frame_infor
.idata:004070E4			extrn __imp___register_frame_info:dword
.idata:004070E4						; DATA XREF: __register_frame_infor
.idata:004070E8
.idata:004070EC	;
.idata:004070EC	; Imports from KERNEL32.dll
.idata:004070EC	;
.idata:004070EC	; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
.idata:004070EC			extrn __imp_GetModuleHandleA:dword
.idata:004070EC						; DATA XREF: GetModuleHandleAr
.idata:004070F0	; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
.idata:004070F0			extrn __imp_GetProcAddress:dword
.idata:004070F0						; DATA XREF: GetProcAddressr
.idata:004070F4
.idata:004070F4
.idata:004070F4
.idata:004070F4			end start
