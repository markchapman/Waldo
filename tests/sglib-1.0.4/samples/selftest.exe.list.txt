;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	   Copyright (c) 2009 by Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-313D-7374-F1			    |
; |   Aditya Thakur, University	of Wisconsin/Computer Sciences Department   |
; +-------------------------------------------------------------------------+
;
.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |   This file has been	generated by The Interactive Disassembler (IDA)	   |
.text:00401000 ; |	  Copyright (c)	2009 by	Hex-Rays, <support@hex-rays.com>	   |
.text:00401000 ; |			License	info: 48-313D-7374-F1			   |
.text:00401000 ; |   Aditya Thakur, University of Wisconsin/Computer Sciences Department   |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input MD5   : 44E57CC42CE4D7D8D92CA8BF09FF59C1
.text:00401000
.text:00401000 ; File Name   : C:\aditya\work\waldo\tests\sglib-1.0.4\samples\selftest.exe
.text:00401000 ; Format	     : Portable	executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size		       : 000077F8 (  30712.)
.text:00401000 ; Section size in file	       : 00007800 (  30720.)
.text:00401000 ; Offset	to raw data for	section: 00000400
.text:00401000 ; Flags 60500060: Text Data Executable Readable
.text:00401000 ; Alignment     : 16 bytes
.text:00401000
.text:00401000		       include uni.inc ; see unicode subdir of ida for info on unicode
.text:00401000
.text:00401000		       .686p
.text:00401000		       .mmx
.text:00401000		       .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text	       segment para public 'CODE' use32
.text:00401000		       assume cs:_text
.text:00401000		       ;org 401000h
.text:00401000		       assume es:nothing, ss:nothing, ds:_data,	fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: bp-based frame
.text:00401000
.text:00401000		       public start
.text:00401000 start	       proc near
.text:00401000
.text:00401000 var_28	       = dword ptr -28h
.text:00401000 var_24	       = dword ptr -24h
.text:00401000 var_20	       = dword ptr -20h
.text:00401000 var_2	       = word ptr -2
.text:00401000
.text:00401000		       push    ebp
.text:00401001		       mov     ebp, esp
.text:00401003		       sub     esp, 28h
.text:00401006		       and     esp, 0FFFFFFF0h
.text:00401009		       fnstcw  [ebp+var_2]
.text:0040100C		       movzx   eax, [ebp+var_2]
.text:00401010		       and     ax, 0F0C0h
.text:00401014		       mov     [ebp+var_2], ax
.text:00401018		       movzx   eax, [ebp+var_2]
.text:0040101C		       or      ax, 33Fh
.text:00401020		       mov     [ebp+var_2], ax
.text:00401024		       fldcw   [ebp+var_2]
.text:00401027		       mov     [esp+28h+var_28], offset	sub_408128
.text:0040102E		       call    sub_408200
.text:00401033		       mov     [esp+28h+var_20], 0
.text:0040103B		       mov     [esp+28h+var_24], 0
.text:00401043		       mov     [esp+28h+var_28], 0
.text:0040104A		       call    sub_408230
.text:0040104F		       mov     [esp+28h+var_20], 0
.text:00401057		       mov     [esp+28h+var_24], 0
.text:0040105F		       mov     [esp+28h+var_28], 0
.text:00401066		       call    sub_408240
.text:0040106B		       mov     [esp+28h+var_20], 0
.text:00401073		       mov     [esp+28h+var_24], 0
.text:0040107B		       mov     [esp+28h+var_28], 0
.text:00401082		       call    sub_408250
.text:00401087		       mov     [esp+28h+var_20], 0
.text:0040108F		       mov     [esp+28h+var_24], 0
.text:00401097		       mov     [esp+28h+var_28], 0
.text:0040109E		       call    sub_408260
.text:004010A3		       leave
.text:004010A4		       retn
.text:004010A4 start	       endp
.text:004010A4
.text:004010A4 ; ---------------------------------------------------------------------------
.text:004010A5		       align 10h
.text:004010B0
.text:004010B0 loc_4010B0:			       ; CODE XREF: .text:004087C4j
.text:004010B0		       push    ebp
.text:004010B1		       mov     ebp, esp
.text:004010B3		       sub     esp, 8
.text:004010B6		       mov     dword ptr [esp],	offset aCyggcc_s1_dll ;	"cyggcc_s-1.dll"
.text:004010BD		       call    GetModuleHandleA
.text:004010C2		       sub     esp, 4
.text:004010C5		       test    eax, eax
.text:004010C7		       jz      short loc_401130
.text:004010C9		       mov     dword ptr [esp+4], offset a__register_fra ; "__register_frame_info"
.text:004010D1		       mov     [esp], eax
.text:004010D4		       call    GetProcAddress
.text:004010D9		       sub     esp, 8
.text:004010DC		       test    eax, eax
.text:004010DE		       jz      short loc_401130
.text:004010E0
.text:004010E0 loc_4010E0:			       ; CODE XREF: .text:00401139j
.text:004010E0		       mov     dword ptr [esp+4], offset dword_40B000
.text:004010E8		       mov     dword ptr [esp],	offset dword_40A000
.text:004010EF		       call    eax
.text:004010F1
.text:004010F1 loc_4010F1:			       ; CODE XREF: .text:00401137j
.text:004010F1		       mov     eax, dword_409E00
.text:004010F6		       test    eax, eax
.text:004010F8		       jz      short locret_40112D
.text:004010FA		       mov     dword ptr [esp],	offset aCyggcj9_dll ; "cyggcj-9.dll"
.text:00401101		       call    GetModuleHandleA
.text:00401106		       sub     esp, 4
.text:00401109		       test    eax, eax
.text:0040110B		       jz      short loc_401140
.text:0040110D		       mov     dword ptr [esp+4], offset a_jv_registercl ; "_Jv_RegisterClasses"
.text:00401115		       mov     [esp], eax
.text:00401118		       call    GetProcAddress
.text:0040111D		       sub     esp, 8
.text:00401120		       test    eax, eax
.text:00401122		       jz      short loc_401140
.text:00401124
.text:00401124 loc_401124:			       ; CODE XREF: .text:00401147j
.text:00401124		       mov     dword ptr [esp],	offset dword_409E00
.text:0040112B		       call    eax
.text:0040112D
.text:0040112D locret_40112D:			       ; CODE XREF: .text:004010F8j
.text:0040112D		       leave
.text:0040112E		       retn
.text:0040112E ; ---------------------------------------------------------------------------
.text:0040112F		       align 10h
.text:00401130
.text:00401130 loc_401130:			       ; CODE XREF: .text:004010C7j
.text:00401130					       ; .text:004010DEj
.text:00401130		       mov     eax, off_409000
.text:00401135		       test    eax, eax
.text:00401137		       jz      short loc_4010F1
.text:00401139		       jmp     short loc_4010E0
.text:00401139 ; ---------------------------------------------------------------------------
.text:0040113B		       align 10h
.text:00401140
.text:00401140 loc_401140:			       ; CODE XREF: .text:0040110Bj
.text:00401140					       ; .text:00401122j
.text:00401140		       mov     eax, dword_409008
.text:00401145		       test    eax, eax
.text:00401147		       jnz     short loc_401124
.text:00401149		       leave
.text:0040114A		       retn
.text:0040114A ; ---------------------------------------------------------------------------
.text:0040114B		       align 10h
.text:00401150
.text:00401150 loc_401150:			       ; CODE XREF: .text:004087D4j
.text:00401150		       push    ebp
.text:00401151		       mov     ebp, esp
.text:00401153		       sub     esp, 8
.text:00401156		       mov     dword ptr [esp],	offset aCyggcc_s1_dll ;	"cyggcc_s-1.dll"
.text:0040115D		       call    GetModuleHandleA
.text:00401162		       sub     esp, 4
.text:00401165		       test    eax, eax
.text:00401167		       jz      short loc_401190
.text:00401169		       mov     dword ptr [esp+4], offset a__deregister_f ; "__deregister_frame_info"
.text:00401171		       mov     [esp], eax
.text:00401174		       call    GetProcAddress
.text:00401179		       sub     esp, 8
.text:0040117C		       test    eax, eax
.text:0040117E		       jz      short loc_401190
.text:00401180
.text:00401180 loc_401180:			       ; CODE XREF: .text:00401197j
.text:00401180		       mov     dword ptr [esp],	offset dword_40A000
.text:00401187		       call    eax
.text:00401189		       leave
.text:0040118A		       retn
.text:0040118A ; ---------------------------------------------------------------------------
.text:0040118B		       align 10h
.text:00401190
.text:00401190 loc_401190:			       ; CODE XREF: .text:00401167j
.text:00401190					       ; .text:0040117Ej
.text:00401190		       mov     eax, off_409004
.text:00401195		       test    eax, eax
.text:00401197		       jnz     short loc_401180
.text:00401199		       leave
.text:0040119A		       retn
.text:0040119A ; ---------------------------------------------------------------------------
.text:0040119B		       align 10h
.text:004011A0
.text:004011A0 ; =============== S U B R O U T I N E =======================================
.text:004011A0
.text:004011A0 ; Attributes: bp-based frame
.text:004011A0
.text:004011A0 sub_4011A0      proc near	       ; CODE XREF: sub_4011E5+24p
.text:004011A0					       ; sub_40121B+25p ...
.text:004011A0
.text:004011A0 arg_0	       = dword ptr  8
.text:004011A0 arg_4	       = dword ptr  0Ch
.text:004011A0
.text:004011A0		       push    ebp
.text:004011A1		       mov     ebp, esp
.text:004011A3		       mov     eax, [ebp+arg_0]
.text:004011A6		       mov     eax, [eax]
.text:004011A8		       mov     edx, [ebp+arg_4]
.text:004011AB		       sub     eax, [edx]
.text:004011AD		       pop     ebp
.text:004011AE		       retn
.text:004011AE sub_4011A0      endp
.text:004011AE
.text:004011AF
.text:004011AF ; =============== S U B R O U T I N E =======================================
.text:004011AF
.text:004011AF ; Attributes: bp-based frame
.text:004011AF
.text:004011AF sub_4011AF      proc near	       ; CODE XREF: sub_40283A+Dp
.text:004011AF					       ; sub_402877+Dp	...
.text:004011AF
.text:004011AF arg_0	       = dword ptr  8
.text:004011AF
.text:004011AF		       push    ebp
.text:004011B0		       mov     ebp, esp
.text:004011B2		       mov     eax, [ebp+arg_0]
.text:004011B5		       mov     eax, [eax]
.text:004011B7		       pop     ebp
.text:004011B8		       retn
.text:004011B8 sub_4011AF      endp
.text:004011B8
.text:004011B9
.text:004011B9 ; =============== S U B R O U T I N E =======================================
.text:004011B9
.text:004011B9 ; Attributes: bp-based frame
.text:004011B9
.text:004011B9 sub_4011B9      proc near	       ; CODE XREF: sub_4028FF+32p
.text:004011B9					       ; sub_40719F+46Dp ...
.text:004011B9
.text:004011B9 arg_0	       = dword ptr  8
.text:004011B9 arg_4	       = dword ptr  0Ch
.text:004011B9
.text:004011B9		       push    ebp
.text:004011BA		       mov     ebp, esp
.text:004011BC		       mov     ecx, [ebp+arg_0]
.text:004011BF		       mov     edx, [ebp+arg_4]
.text:004011C2		       test    ecx, ecx
.text:004011C4		       jz      short loc_4011CC
.text:004011C6		       mov     eax, ecx
.text:004011C8		       cmp     ecx, edx
.text:004011CA		       jnz     short loc_4011D0
.text:004011CC
.text:004011CC loc_4011CC:			       ; CODE XREF: sub_4011B9+Bj
.text:004011CC		       mov     eax, ecx
.text:004011CE		       jmp     short loc_4011DB
.text:004011D0 ; ---------------------------------------------------------------------------
.text:004011D0
.text:004011D0 loc_4011D0:			       ; CODE XREF: sub_4011B9+11j
.text:004011D0					       ; sub_4011B9+20j
.text:004011D0		       mov     eax, [eax+4]
.text:004011D3		       test    eax, eax
.text:004011D5		       jz      short loc_4011DB
.text:004011D7		       cmp     edx, eax
.text:004011D9		       jnz     short loc_4011D0
.text:004011DB
.text:004011DB loc_4011DB:			       ; CODE XREF: sub_4011B9+15j
.text:004011DB					       ; sub_4011B9+1Cj
.text:004011DB		       test    eax, eax
.text:004011DD		       setnz   al
.text:004011E0		       movzx   eax, al
.text:004011E3		       pop     ebp
.text:004011E4		       retn
.text:004011E4 sub_4011B9      endp
.text:004011E4
.text:004011E5
.text:004011E5 ; =============== S U B R O U T I N E =======================================
.text:004011E5
.text:004011E5 ; Attributes: bp-based frame
.text:004011E5
.text:004011E5 sub_4011E5      proc near	       ; CODE XREF: sub_40293C+32p
.text:004011E5					       ; sub_40719F+3CCp ...
.text:004011E5
.text:004011E5 var_10	       = dword ptr -10h
.text:004011E5 var_C	       = dword ptr -0Ch
.text:004011E5 arg_0	       = dword ptr  8
.text:004011E5 arg_4	       = dword ptr  0Ch
.text:004011E5
.text:004011E5		       push    ebp
.text:004011E6		       mov     ebp, esp
.text:004011E8		       push    esi
.text:004011E9		       push    ebx
.text:004011EA		       sub     esp, 8
.text:004011ED		       mov     eax, [ebp+arg_0]
.text:004011F0		       mov     esi, [ebp+arg_4]
.text:004011F3		       mov     ebx, eax
.text:004011F5		       test    eax, eax
.text:004011F7		       jnz     short loc_401202
.text:004011F9		       jmp     short loc_401212
.text:004011FB ; ---------------------------------------------------------------------------
.text:004011FB
.text:004011FB loc_4011FB:			       ; CODE XREF: sub_4011E5+2Bj
.text:004011FB		       mov     ebx, [ebx+4]
.text:004011FE		       test    ebx, ebx
.text:00401200		       jz      short loc_401212
.text:00401202
.text:00401202 loc_401202:			       ; CODE XREF: sub_4011E5+12j
.text:00401202		       mov     [esp+10h+var_C],	esi
.text:00401206		       mov     [esp+10h+var_10], ebx
.text:00401209		       call    sub_4011A0
.text:0040120E		       test    eax, eax
.text:00401210		       jnz     short loc_4011FB
.text:00401212
.text:00401212 loc_401212:			       ; CODE XREF: sub_4011E5+14j
.text:00401212					       ; sub_4011E5+1Bj
.text:00401212		       mov     eax, ebx
.text:00401214		       add     esp, 8
.text:00401217		       pop     ebx
.text:00401218		       pop     esi
.text:00401219		       pop     ebp
.text:0040121A		       retn
.text:0040121A sub_4011E5      endp
.text:0040121A
.text:0040121B
.text:0040121B ; =============== S U B R O U T I N E =======================================
.text:0040121B
.text:0040121B ; Attributes: bp-based frame
.text:0040121B
.text:0040121B sub_40121B      proc near	       ; CODE XREF: sub_402877+39p
.text:0040121B					       ; sub_40719F+5EFp
.text:0040121B
.text:0040121B var_14	       = dword ptr -14h
.text:0040121B var_10	       = dword ptr -10h
.text:0040121B arg_0	       = dword ptr  8
.text:0040121B arg_4	       = dword ptr  0Ch
.text:0040121B arg_8	       = dword ptr  10h
.text:0040121B
.text:0040121B		       push    ebp
.text:0040121C		       mov     ebp, esp
.text:0040121E		       push    edi
.text:0040121F		       push    esi
.text:00401220		       push    ebx
.text:00401221		       sub     esp, 8
.text:00401224		       mov     edi, [ebp+arg_0]
.text:00401227		       mov     esi, [ebp+arg_4]
.text:0040122A		       mov     ebx, [edi]
.text:0040122C		       test    ebx, ebx
.text:0040122E		       jnz     short loc_401239
.text:00401230		       jmp     short loc_40124B
.text:00401232 ; ---------------------------------------------------------------------------
.text:00401232
.text:00401232 loc_401232:			       ; CODE XREF: sub_40121B+2Cj
.text:00401232		       mov     ebx, [ebx+4]
.text:00401235		       test    ebx, ebx
.text:00401237		       jz      short loc_40124B
.text:00401239
.text:00401239 loc_401239:			       ; CODE XREF: sub_40121B+13j
.text:00401239		       mov     [esp+14h+var_10], esi
.text:0040123D		       mov     [esp+14h+var_14], ebx
.text:00401240		       call    sub_4011A0
.text:00401245		       test    eax, eax
.text:00401247		       jnz     short loc_401232
.text:00401249		       jmp     short loc_40126B
.text:0040124B ; ---------------------------------------------------------------------------
.text:0040124B
.text:0040124B loc_40124B:			       ; CODE XREF: sub_40121B+15j
.text:0040124B					       ; sub_40121B+1Cj
.text:0040124B		       mov     eax, [ebp+arg_8]
.text:0040124E		       mov     [eax], ebx
.text:00401250		       mov     eax, [edi]
.text:00401252		       mov     [esi+4],	eax
.text:00401255		       mov     [edi], esi
.text:00401257
.text:00401257 loc_401257:			       ; CODE XREF: sub_40121B+55j
.text:00401257		       mov     eax, [ebp+arg_8]
.text:0040125A		       cmp     dword ptr [eax],	0
.text:0040125D		       setz    al
.text:00401260		       movzx   eax, al
.text:00401263		       add     esp, 8
.text:00401266		       pop     ebx
.text:00401267		       pop     esi
.text:00401268		       pop     edi
.text:00401269		       pop     ebp
.text:0040126A		       retn
.text:0040126B ; ---------------------------------------------------------------------------
.text:0040126B
.text:0040126B loc_40126B:			       ; CODE XREF: sub_40121B+2Ej
.text:0040126B		       mov     eax, [ebp+arg_8]
.text:0040126E		       mov     [eax], ebx
.text:00401270		       jmp     short loc_401257
.text:00401270 sub_40121B      endp
.text:00401270
.text:00401272
.text:00401272 ; =============== S U B R O U T I N E =======================================
.text:00401272
.text:00401272 ; Attributes: bp-based frame
.text:00401272
.text:00401272 sub_401272      proc near	       ; CODE XREF: sub_40283A+32p
.text:00401272					       ; sub_4041AA+19Cp ...
.text:00401272
.text:00401272 arg_0	       = dword ptr  8
.text:00401272 arg_4	       = dword ptr  0Ch
.text:00401272
.text:00401272		       push    ebp
.text:00401273		       mov     ebp, esp
.text:00401275		       mov     ecx, [ebp+arg_0]
.text:00401278		       mov     edx, [ebp+arg_4]
.text:0040127B		       mov     eax, [ecx]
.text:0040127D		       mov     [edx+4],	eax
.text:00401280		       mov     [ecx], edx
.text:00401282		       pop     ebp
.text:00401283		       retn
.text:00401283 sub_401272      endp
.text:00401283
.text:00401284
.text:00401284 ; =============== S U B R O U T I N E =======================================
.text:00401284
.text:00401284 ; Attributes: bp-based frame
.text:00401284
.text:00401284 sub_401284      proc near	       ; CODE XREF: sub_40719F+C4p
.text:00401284
.text:00401284 arg_0	       = dword ptr  8
.text:00401284 arg_4	       = dword ptr  0Ch
.text:00401284
.text:00401284		       push    ebp
.text:00401285		       mov     ebp, esp
.text:00401287		       mov     edx, [ebp+arg_0]
.text:0040128A		       mov     ecx, [ebp+arg_4]
.text:0040128D		       mov     eax, [edx]
.text:0040128F		       test    eax, eax
.text:00401291		       jnz     short loc_401297
.text:00401293		       mov     [edx], ecx
.text:00401295		       jmp     short loc_4012A3
.text:00401297 ; ---------------------------------------------------------------------------
.text:00401297
.text:00401297 loc_401297:			       ; CODE XREF: sub_401284+Dj
.text:00401297					       ; sub_401284+1Aj
.text:00401297		       mov     edx, eax
.text:00401299		       mov     eax, [eax+4]
.text:0040129C		       test    eax, eax
.text:0040129E		       jnz     short loc_401297
.text:004012A0		       mov     [edx+4],	ecx
.text:004012A3
.text:004012A3 loc_4012A3:			       ; CODE XREF: sub_401284+11j
.text:004012A3		       pop     ebp
.text:004012A4		       retn
.text:004012A4 sub_401284      endp
.text:004012A4
.text:004012A5
.text:004012A5 ; =============== S U B R O U T I N E =======================================
.text:004012A5
.text:004012A5 ; Attributes: bp-based frame
.text:004012A5
.text:004012A5 sub_4012A5      proc near	       ; CODE XREF: sub_4028BB+39p
.text:004012A5					       ; sub_40719F+6C6p
.text:004012A5
.text:004012A5 var_14	       = dword ptr -14h
.text:004012A5 var_10	       = dword ptr -10h
.text:004012A5 arg_0	       = dword ptr  8
.text:004012A5 arg_4	       = dword ptr  0Ch
.text:004012A5 arg_8	       = dword ptr  10h
.text:004012A5
.text:004012A5		       push    ebp
.text:004012A6		       mov     ebp, esp
.text:004012A8		       push    edi
.text:004012A9		       push    esi
.text:004012AA		       push    ebx
.text:004012AB		       sub     esp, 8
.text:004012AE		       mov     eax, [ebp+arg_0]
.text:004012B1		       mov     edi, [ebp+arg_4]
.text:004012B4		       mov     ebx, [eax]
.text:004012B6		       mov     esi, eax
.text:004012B8		       test    ebx, ebx
.text:004012BA		       jnz     short loc_4012C8
.text:004012BC		       jmp     short loc_4012D8
.text:004012BE ; ---------------------------------------------------------------------------
.text:004012BE
.text:004012BE loc_4012BE:			       ; CODE XREF: sub_4012A5+31j
.text:004012BE		       lea     esi, [ebx+4]
.text:004012C1		       mov     ebx, [ebx+4]
.text:004012C4		       test    ebx, ebx
.text:004012C6		       jz      short loc_4012D8
.text:004012C8
.text:004012C8 loc_4012C8:			       ; CODE XREF: sub_4012A5+15j
.text:004012C8		       mov     [esp+14h+var_10], edi
.text:004012CC		       mov     [esp+14h+var_14], ebx
.text:004012CF		       call    sub_4011A0
.text:004012D4		       test    eax, eax
.text:004012D6		       jnz     short loc_4012BE
.text:004012D8
.text:004012D8 loc_4012D8:			       ; CODE XREF: sub_4012A5+17j
.text:004012D8					       ; sub_4012A5+21j
.text:004012D8		       mov     eax, [ebp+arg_8]
.text:004012DB		       mov     [eax], ebx
.text:004012DD		       mov     eax, [esi]
.text:004012DF		       test    eax, eax
.text:004012E1		       jz      short loc_4012E8
.text:004012E3		       mov     eax, [eax+4]
.text:004012E6		       mov     [esi], eax
.text:004012E8
.text:004012E8 loc_4012E8:			       ; CODE XREF: sub_4012A5+3Cj
.text:004012E8		       mov     edx, [ebp+arg_8]
.text:004012EB		       cmp     dword ptr [edx],	0
.text:004012EE		       setnz   al
.text:004012F1		       movzx   eax, al
.text:004012F4		       add     esp, 8
.text:004012F7		       pop     ebx
.text:004012F8		       pop     esi
.text:004012F9		       pop     edi
.text:004012FA		       pop     ebp
.text:004012FB		       retn
.text:004012FB sub_4012A5      endp
.text:004012FB
.text:004012FC
.text:004012FC ; =============== S U B R O U T I N E =======================================
.text:004012FC
.text:004012FC ; Attributes: bp-based frame
.text:004012FC
.text:004012FC sub_4012FC      proc near	       ; CODE XREF: sub_40719F+798p
.text:004012FC					       ; sub_407BAC+49p
.text:004012FC
.text:004012FC var_30	       = dword ptr -30h
.text:004012FC var_2C	       = dword ptr -2Ch
.text:004012FC var_28	       = dword ptr -28h
.text:004012FC var_24	       = dword ptr -24h
.text:004012FC var_20	       = dword ptr -20h
.text:004012FC var_10	       = dword ptr -10h
.text:004012FC arg_0	       = dword ptr  8
.text:004012FC
.text:004012FC		       push    ebp
.text:004012FD		       mov     ebp, esp
.text:004012FF		       push    edi
.text:00401300		       push    esi
.text:00401301		       push    ebx
.text:00401302		       sub     esp, 24h
.text:00401305		       mov     edx, [ebp+arg_0]
.text:00401308		       mov     eax, [edx]
.text:0040130A		       mov     [ebp+var_10], eax
.text:0040130D		       mov     [ebp+var_24], 1
.text:00401314
.text:00401314 loc_401314:			       ; CODE XREF: sub_4012FC+59j
.text:00401314					       ; sub_4012FC+134j
.text:00401314		       mov     ecx, [ebp+var_10]
.text:00401317		       mov     [ebp+var_10], 0
.text:0040131E		       test    ecx, ecx
.text:00401320		       jz      loc_40141D
.text:00401326		       mov     edx, ecx
.text:00401328		       lea     edi, [ebp+var_10]
.text:0040132B		       mov     esi, 0
.text:00401330		       jmp     loc_4013FE
.text:00401335 ; ---------------------------------------------------------------------------
.text:00401335
.text:00401335 loc_401335:			       ; CODE XREF: sub_4012FC+46j
.text:00401335					       ; sub_4012FC+116j
.text:00401335		       add     eax, 1
.text:00401338		       mov     edx, [edx+4]
.text:0040133B		       cmp     eax, [ebp+var_24]
.text:0040133E		       jge     short loc_401344
.text:00401340		       test    edx, edx
.text:00401342		       jnz     short loc_401335
.text:00401344
.text:00401344 loc_401344:			       ; CODE XREF: sub_4012FC+42j
.text:00401344					       ; sub_4012FC+109j ...
.text:00401344		       test    edx, edx
.text:00401346		       jnz     short loc_401357
.text:00401348		       mov     [edi], ecx
.text:0040134A		       test    esi, esi
.text:0040134C		       jz      loc_40141D
.text:00401352		       shl     [ebp+var_24], 1
.text:00401355		       jmp     short loc_401314
.text:00401357 ; ---------------------------------------------------------------------------
.text:00401357
.text:00401357 loc_401357:			       ; CODE XREF: sub_4012FC+4Aj
.text:00401357		       mov     esi, [edx+4]
.text:0040135A		       mov     dword ptr [edx+4], 0
.text:00401361		       test    esi, esi
.text:00401363		       jz      short loc_401370
.text:00401365		       mov     edx, esi
.text:00401367		       mov     eax, 1
.text:0040136C		       test    bl, bl
.text:0040136E		       jnz     short loc_401374
.text:00401370
.text:00401370 loc_401370:			       ; CODE XREF: sub_4012FC+67j
.text:00401370		       mov     edx, esi
.text:00401372		       jmp     short loc_401383
.text:00401374 ; ---------------------------------------------------------------------------
.text:00401374
.text:00401374 loc_401374:			       ; CODE XREF: sub_4012FC+72j
.text:00401374					       ; sub_4012FC+85j
.text:00401374		       add     eax, 1
.text:00401377		       mov     edx, [edx+4]
.text:0040137A		       cmp     eax, [ebp+var_24]
.text:0040137D		       jge     short loc_401383
.text:0040137F		       test    edx, edx
.text:00401381		       jnz     short loc_401374
.text:00401383
.text:00401383 loc_401383:			       ; CODE XREF: sub_4012FC+76j
.text:00401383					       ; sub_4012FC+81j
.text:00401383		       mov     [ebp+var_28], 0
.text:0040138A		       test    edx, edx
.text:0040138C		       jz      short loc_40139B
.text:0040138E		       mov     eax, [edx+4]
.text:00401391		       mov     [ebp+var_28], eax
.text:00401394		       mov     dword ptr [edx+4], 0
.text:0040139B
.text:0040139B loc_40139B:			       ; CODE XREF: sub_4012FC+90j
.text:0040139B		       mov     ebx, ecx
.text:0040139D		       jmp     short loc_4013C1
.text:0040139F ; ---------------------------------------------------------------------------
.text:0040139F
.text:0040139F loc_40139F:			       ; CODE XREF: sub_4012FC+CEj
.text:0040139F		       mov     [esp+30h+var_2C], esi
.text:004013A3		       mov     [esp+30h+var_30], ebx
.text:004013A6		       call    sub_4011A0
.text:004013AB		       test    eax, eax
.text:004013AD		       jns     short loc_4013B9
.text:004013AF		       mov     [edi], ebx
.text:004013B1		       lea     edi, [ebx+4]
.text:004013B4		       mov     ebx, [ebx+4]
.text:004013B7		       jmp     short loc_4013C1
.text:004013B9 ; ---------------------------------------------------------------------------
.text:004013B9
.text:004013B9 loc_4013B9:			       ; CODE XREF: sub_4012FC+B1j
.text:004013B9		       mov     [edi], esi
.text:004013BB		       lea     edi, [esi+4]
.text:004013BE		       mov     esi, [esi+4]
.text:004013C1
.text:004013C1 loc_4013C1:			       ; CODE XREF: sub_4012FC+A1j
.text:004013C1					       ; sub_4012FC+BBj
.text:004013C1		       test    ebx, ebx
.text:004013C3		       setnz   al
.text:004013C6		       jz      short loc_4013CC
.text:004013C8		       test    esi, esi
.text:004013CA		       jnz     short loc_40139F
.text:004013CC
.text:004013CC loc_4013CC:			       ; CODE XREF: sub_4012FC+CAj
.text:004013CC		       mov     [ebp+var_20], esi
.text:004013CF		       mov     edx, edi
.text:004013D1		       test    al, al
.text:004013D3		       jz      short loc_4013D9
.text:004013D5		       mov     [edx], ebx
.text:004013D7		       jmp     short loc_4013E4
.text:004013D9 ; ---------------------------------------------------------------------------
.text:004013D9
.text:004013D9 loc_4013D9:			       ; CODE XREF: sub_4012FC+D7j
.text:004013D9		       mov     eax, [ebp+var_20]
.text:004013DC		       mov     [edi], eax
.text:004013DE		       test    esi, esi
.text:004013E0		       jz      short loc_4013EE
.text:004013E2		       mov     ebx, esi
.text:004013E4
.text:004013E4 loc_4013E4:			       ; CODE XREF: sub_4012FC+DBj
.text:004013E4					       ; sub_4012FC+F0j
.text:004013E4		       lea     edi, [ebx+4]
.text:004013E7		       mov     ebx, [ebx+4]
.text:004013EA		       test    ebx, ebx
.text:004013EC		       jnz     short loc_4013E4
.text:004013EE
.text:004013EE loc_4013EE:			       ; CODE XREF: sub_4012FC+E4j
.text:004013EE		       cmp     [ebp+var_28], 0
.text:004013F2		       jz      short loc_40142D
.text:004013F4		       mov     edx, [ebp+var_28]
.text:004013F7		       mov     ecx, edx
.text:004013F9		       mov     esi, 1
.text:004013FE
.text:004013FE loc_4013FE:			       ; CODE XREF: sub_4012FC+34j
.text:004013FE		       cmp     [ebp+var_24], 1
.text:00401402		       setnle  bl
.text:00401405		       jle     loc_401344
.text:0040140B		       mov     eax, 1
.text:00401410		       test    edx, edx
.text:00401412		       jnz     loc_401335
.text:00401418		       jmp     loc_401344
.text:0040141D ; ---------------------------------------------------------------------------
.text:0040141D
.text:0040141D loc_40141D:			       ; CODE XREF: sub_4012FC+24j
.text:0040141D					       ; sub_4012FC+50j
.text:0040141D		       mov     eax, [ebp+var_10]
.text:00401420		       mov     edx, [ebp+arg_0]
.text:00401423		       mov     [edx], eax
.text:00401425		       add     esp, 24h
.text:00401428		       pop     ebx
.text:00401429		       pop     esi
.text:0040142A		       pop     edi
.text:0040142B		       pop     ebp
.text:0040142C		       retn
.text:0040142D ; ---------------------------------------------------------------------------
.text:0040142D
.text:0040142D loc_40142D:			       ; CODE XREF: sub_4012FC+F6j
.text:0040142D		       shl     [ebp+var_24], 1
.text:00401430		       jmp     loc_401314
.text:00401430 sub_4012FC      endp
.text:00401430
.text:00401435
.text:00401435 ; =============== S U B R O U T I N E =======================================
.text:00401435
.text:00401435 ; Attributes: bp-based frame
.text:00401435
.text:00401435 sub_401435      proc near	       ; CODE XREF: sub_40719F+3Dp
.text:00401435
.text:00401435 arg_0	       = dword ptr  8
.text:00401435
.text:00401435		       push    ebp
.text:00401436		       mov     ebp, esp
.text:00401438		       mov     edx, [ebp+arg_0]
.text:0040143B		       mov     eax, 0
.text:00401440		       test    edx, edx
.text:00401442		       jz      short loc_40144E
.text:00401444
.text:00401444 loc_401444:			       ; CODE XREF: sub_401435+17j
.text:00401444		       mov     edx, [edx+4]
.text:00401447		       add     eax, 1
.text:0040144A		       test    edx, edx
.text:0040144C		       jnz     short loc_401444
.text:0040144E
.text:0040144E loc_40144E:			       ; CODE XREF: sub_401435+Dj
.text:0040144E		       pop     ebp
.text:0040144F		       retn
.text:0040144F sub_401435      endp
.text:0040144F
.text:00401450
.text:00401450 ; =============== S U B R O U T I N E =======================================
.text:00401450
.text:00401450 ; Attributes: bp-based frame
.text:00401450
.text:00401450 sub_401450      proc near	       ; CODE XREF: sub_40719F+7BCp
.text:00401450
.text:00401450 arg_0	       = dword ptr  8
.text:00401450
.text:00401450		       push    ebp
.text:00401451		       mov     ebp, esp
.text:00401453		       push    ebx
.text:00401454		       mov     ebx, [ebp+arg_0]
.text:00401457		       mov     eax, [ebx]
.text:00401459		       mov     ecx, 0
.text:0040145E		       mov     edx, 0
.text:00401463		       test    eax, eax
.text:00401465		       jz      short loc_401479
.text:00401467
.text:00401467 loc_401467:			       ; CODE XREF: sub_401450+25j
.text:00401467		       mov     edx, [eax+4]
.text:0040146A		       mov     [eax+4],	ecx
.text:0040146D		       test    edx, edx
.text:0040146F		       jz      short loc_401477
.text:00401471		       mov     ecx, eax
.text:00401473		       mov     eax, edx
.text:00401475		       jmp     short loc_401467
.text:00401477 ; ---------------------------------------------------------------------------
.text:00401477
.text:00401477 loc_401477:			       ; CODE XREF: sub_401450+1Fj
.text:00401477		       mov     edx, eax
.text:00401479
.text:00401479 loc_401479:			       ; CODE XREF: sub_401450+15j
.text:00401479		       mov     [ebx], edx
.text:0040147B		       pop     ebx
.text:0040147C		       pop     ebp
.text:0040147D		       retn
.text:0040147D sub_401450      endp
.text:0040147D
.text:0040147E
.text:0040147E ; =============== S U B R O U T I N E =======================================
.text:0040147E
.text:0040147E ; Attributes: bp-based frame
.text:0040147E
.text:0040147E sub_40147E      proc near	       ; CODE XREF: .text:00402985p
.text:0040147E
.text:0040147E arg_0	       = dword ptr  8
.text:0040147E
.text:0040147E		       push    ebp
.text:0040147F		       mov     ebp, esp
.text:00401481		       mov     eax, [ebp+arg_0]
.text:00401484		       mov     eax, [eax]
.text:00401486		       pop     ebp
.text:00401487		       retn
.text:00401487 sub_40147E      endp
.text:00401487
.text:00401488
.text:00401488 ; =============== S U B R O U T I N E =======================================
.text:00401488
.text:00401488 ; Attributes: bp-based frame
.text:00401488
.text:00401488 sub_401488      proc near	       ; CODE XREF: sub_4014EE+1Ep
.text:00401488					       ; sub_40298C+10p ...
.text:00401488
.text:00401488 var_18	       = dword ptr -18h
.text:00401488 var_14	       = dword ptr -14h
.text:00401488 arg_0	       = dword ptr  8
.text:00401488
.text:00401488		       push    ebp
.text:00401489		       mov     ebp, esp
.text:0040148B		       push    edi
.text:0040148C		       push    esi
.text:0040148D		       push    ebx
.text:0040148E		       sub     esp, 0Ch
.text:00401491		       mov     eax, [ebp+arg_0]
.text:00401494		       mov     ebx, [eax+4]
.text:00401497		       mov     dword ptr [eax+4], 0
.text:0040149E		       mov     edi, [eax+8]
.text:004014A1		       test    edi, edi
.text:004014A3		       jz      short loc_4014C4
.text:004014A5		       mov     esi, [eax+0Ch]
.text:004014A8		       test    ebx, ebx
.text:004014AA		       jnz     short loc_4014B5
.text:004014AC		       jmp     short loc_4014E7
.text:004014AE ; ---------------------------------------------------------------------------
.text:004014AE
.text:004014AE loc_4014AE:			       ; CODE XREF: sub_401488+38j
.text:004014AE		       mov     ebx, [ebx+4]
.text:004014B1		       test    ebx, ebx
.text:004014B3		       jz      short loc_4014E7
.text:004014B5
.text:004014B5 loc_4014B5:			       ; CODE XREF: sub_401488+22j
.text:004014B5		       mov     [esp+18h+var_14], esi
.text:004014B9		       mov     [esp+18h+var_18], ebx
.text:004014BC		       call    edi
.text:004014BE		       test    eax, eax
.text:004014C0		       jnz     short loc_4014AE
.text:004014C2		       jmp     short loc_4014E0
.text:004014C4 ; ---------------------------------------------------------------------------
.text:004014C4
.text:004014C4 loc_4014C4:			       ; CODE XREF: sub_401488+1Bj
.text:004014C4		       mov     edx, [ebp+arg_0]
.text:004014C7		       mov     [edx], ebx
.text:004014C9		       test    ebx, ebx
.text:004014CB		       jz      short loc_4014D6
.text:004014CD
.text:004014CD loc_4014CD:			       ; CODE XREF: sub_401488+5Dj
.text:004014CD		       mov     eax, [ebx+4]
.text:004014D0		       mov     edx, [ebp+arg_0]
.text:004014D3		       mov     [edx+4],	eax
.text:004014D6
.text:004014D6 loc_4014D6:			       ; CODE XREF: sub_401488+43j
.text:004014D6					       ; sub_401488+64j
.text:004014D6		       mov     eax, ebx
.text:004014D8		       add     esp, 0Ch
.text:004014DB		       pop     ebx
.text:004014DC		       pop     esi
.text:004014DD		       pop     edi
.text:004014DE		       pop     ebp
.text:004014DF		       retn
.text:004014E0 ; ---------------------------------------------------------------------------
.text:004014E0
.text:004014E0 loc_4014E0:			       ; CODE XREF: sub_401488+3Aj
.text:004014E0		       mov     eax, [ebp+arg_0]
.text:004014E3		       mov     [eax], ebx
.text:004014E5		       jmp     short loc_4014CD
.text:004014E7 ; ---------------------------------------------------------------------------
.text:004014E7
.text:004014E7 loc_4014E7:			       ; CODE XREF: sub_401488+24j
.text:004014E7					       ; sub_401488+2Bj
.text:004014E7		       mov     edx, [ebp+arg_0]
.text:004014EA		       mov     [edx], ebx
.text:004014EC		       jmp     short loc_4014D6
.text:004014EC sub_401488      endp
.text:004014EC
.text:004014EE
.text:004014EE ; =============== S U B R O U T I N E =======================================
.text:004014EE
.text:004014EE ; Attributes: bp-based frame
.text:004014EE
.text:004014EE sub_4014EE      proc near	       ; CODE XREF: sub_401513+23p
.text:004014EE					       ; sub_40298C+44p ...
.text:004014EE
.text:004014EE var_8	       = dword ptr -8
.text:004014EE arg_0	       = dword ptr  8
.text:004014EE arg_4	       = dword ptr  0Ch
.text:004014EE arg_8	       = dword ptr  10h
.text:004014EE arg_C	       = dword ptr  14h
.text:004014EE
.text:004014EE		       push    ebp
.text:004014EF		       mov     ebp, esp
.text:004014F1		       sub     esp, 8
.text:004014F4		       mov     edx, [ebp+arg_0]
.text:004014F7		       mov     eax, [ebp+arg_8]
.text:004014FA		       mov     [edx+8],	eax
.text:004014FD		       mov     eax, [ebp+arg_C]
.text:00401500		       mov     [edx+0Ch], eax
.text:00401503		       mov     eax, [ebp+arg_4]
.text:00401506		       mov     [edx+4],	eax
.text:00401509		       mov     [esp+8+var_8], edx
.text:0040150C		       call    sub_401488
.text:00401511		       leave
.text:00401512		       retn
.text:00401512 sub_4014EE      endp
.text:00401512
.text:00401513
.text:00401513 ; =============== S U B R O U T I N E =======================================
.text:00401513
.text:00401513 ; Attributes: bp-based frame
.text:00401513
.text:00401513 sub_401513      proc near	       ; CODE XREF: sub_40719F+878p
.text:00401513					       ; sub_40719F+9DFp
.text:00401513
.text:00401513 var_18	       = dword ptr -18h
.text:00401513 var_14	       = dword ptr -14h
.text:00401513 var_10	       = dword ptr -10h
.text:00401513 var_C	       = dword ptr -0Ch
.text:00401513 arg_0	       = dword ptr  8
.text:00401513 arg_4	       = dword ptr  0Ch
.text:00401513
.text:00401513		       push    ebp
.text:00401514		       mov     ebp, esp
.text:00401516		       sub     esp, 18h
.text:00401519		       mov     [esp+18h+var_C],	0
.text:00401521		       mov     [esp+18h+var_10], 0
.text:00401529		       mov     eax, [ebp+arg_4]
.text:0040152C		       mov     [esp+18h+var_14], eax
.text:00401530		       mov     eax, [ebp+arg_0]
.text:00401533		       mov     [esp+18h+var_18], eax
.text:00401536		       call    sub_4014EE
.text:0040153B		       leave
.text:0040153C		       retn
.text:0040153C sub_401513      endp
.text:0040153C
.text:0040153D
.text:0040153D ; =============== S U B R O U T I N E =======================================
.text:0040153D
.text:0040153D ; Attributes: bp-based frame
.text:0040153D
.text:0040153D sub_40153D      proc near	       ; CODE XREF: sub_4059BC+AEp
.text:0040153D					       ; sub_4059BC+B51p ...
.text:0040153D
.text:0040153D arg_0	       = dword ptr  8
.text:0040153D arg_4	       = dword ptr  0Ch
.text:0040153D
.text:0040153D		       push    ebp
.text:0040153E		       mov     ebp, esp
.text:00401540		       mov     ecx, [ebp+arg_0]
.text:00401543		       mov     edx, [ebp+arg_4]
.text:00401546		       mov     eax, [ecx]
.text:00401548		       test    eax, eax
.text:0040154A		       jnz     short loc_40155E
.text:0040154C		       mov     [ecx], edx
.text:0040154E		       mov     dword ptr [edx+8], 0
.text:00401555		       mov     dword ptr [edx+4], 0
.text:0040155C		       jmp     short loc_401578
.text:0040155E ; ---------------------------------------------------------------------------
.text:0040155E
.text:0040155E loc_40155E:			       ; CODE XREF: sub_40153D+Dj
.text:0040155E		       mov     [edx+4],	eax
.text:00401561		       mov     eax, [ecx]
.text:00401563		       mov     eax, [eax+8]
.text:00401566		       mov     [edx+8],	eax
.text:00401569		       mov     eax, [ecx]
.text:0040156B		       mov     [eax+8],	edx
.text:0040156E		       mov     eax, [edx+8]
.text:00401571		       test    eax, eax
.text:00401573		       jz      short loc_401578
.text:00401575		       mov     [eax+4],	edx
.text:00401578
.text:00401578 loc_401578:			       ; CODE XREF: sub_40153D+1Fj
.text:00401578					       ; sub_40153D+36j
.text:00401578		       pop     ebp
.text:00401579		       retn
.text:00401579 sub_40153D      endp
.text:00401579
.text:0040157A
.text:0040157A ; =============== S U B R O U T I N E =======================================
.text:0040157A
.text:0040157A ; Attributes: bp-based frame
.text:0040157A
.text:0040157A sub_40157A      proc near	       ; CODE XREF: sub_4059BC+11Ep
.text:0040157A
.text:0040157A arg_0	       = dword ptr  8
.text:0040157A arg_4	       = dword ptr  0Ch
.text:0040157A
.text:0040157A		       push    ebp
.text:0040157B		       mov     ebp, esp
.text:0040157D		       mov     ecx, [ebp+arg_0]
.text:00401580		       mov     edx, [ebp+arg_4]
.text:00401583		       mov     eax, [ecx]
.text:00401585		       test    eax, eax
.text:00401587		       jnz     short loc_40159B
.text:00401589		       mov     [ecx], edx
.text:0040158B		       mov     dword ptr [edx+8], 0
.text:00401592		       mov     dword ptr [edx+4], 0
.text:00401599		       jmp     short loc_4015B5
.text:0040159B ; ---------------------------------------------------------------------------
.text:0040159B
.text:0040159B loc_40159B:			       ; CODE XREF: sub_40157A+Dj
.text:0040159B		       mov     eax, [eax+4]
.text:0040159E		       mov     [edx+4],	eax
.text:004015A1		       mov     eax, [ecx]
.text:004015A3		       mov     [edx+8],	eax
.text:004015A6		       mov     eax, [ecx]
.text:004015A8		       mov     [eax+4],	edx
.text:004015AB		       mov     eax, [edx+4]
.text:004015AE		       test    eax, eax
.text:004015B0		       jz      short loc_4015B5
.text:004015B2		       mov     [eax+8],	edx
.text:004015B5
.text:004015B5 loc_4015B5:			       ; CODE XREF: sub_40157A+1Fj
.text:004015B5					       ; sub_40157A+36j
.text:004015B5		       pop     ebp
.text:004015B6		       retn
.text:004015B6 sub_40157A      endp
.text:004015B6
.text:004015B7
.text:004015B7 ; =============== S U B R O U T I N E =======================================
.text:004015B7
.text:004015B7 ; Attributes: bp-based frame
.text:004015B7
.text:004015B7 sub_4015B7      proc near	       ; CODE XREF: sub_4059BC+14Fp
.text:004015B7
.text:004015B7 arg_0	       = dword ptr  8
.text:004015B7 arg_4	       = dword ptr  0Ch
.text:004015B7
.text:004015B7		       push    ebp
.text:004015B8		       mov     ebp, esp
.text:004015BA		       mov     ecx, [ebp+arg_0]
.text:004015BD		       mov     edx, [ebp+arg_4]
.text:004015C0		       mov     eax, [ecx]
.text:004015C2		       test    eax, eax
.text:004015C4		       jnz     short loc_4015D8
.text:004015C6		       mov     [ecx], edx
.text:004015C8		       mov     dword ptr [edx+8], 0
.text:004015CF		       mov     dword ptr [edx+4], 0
.text:004015D6		       jmp     short loc_4015F2
.text:004015D8 ; ---------------------------------------------------------------------------
.text:004015D8
.text:004015D8 loc_4015D8:			       ; CODE XREF: sub_4015B7+Dj
.text:004015D8		       mov     [edx+4],	eax
.text:004015DB		       mov     eax, [ecx]
.text:004015DD		       mov     eax, [eax+8]
.text:004015E0		       mov     [edx+8],	eax
.text:004015E3		       mov     eax, [ecx]
.text:004015E5		       mov     [eax+8],	edx
.text:004015E8		       mov     eax, [edx+8]
.text:004015EB		       test    eax, eax
.text:004015ED		       jz      short loc_4015F2
.text:004015EF		       mov     [eax+4],	edx
.text:004015F2
.text:004015F2 loc_4015F2:			       ; CODE XREF: sub_4015B7+1Fj
.text:004015F2					       ; sub_4015B7+36j
.text:004015F2		       pop     ebp
.text:004015F3		       retn
.text:004015F3 sub_4015B7      endp
.text:004015F3
.text:004015F4
.text:004015F4 ; =============== S U B R O U T I N E =======================================
.text:004015F4
.text:004015F4 ; Attributes: bp-based frame
.text:004015F4
.text:004015F4 sub_4015F4      proc near	       ; CODE XREF: sub_4059BC+81Fp
.text:004015F4
.text:004015F4 var_14	       = dword ptr -14h
.text:004015F4 var_10	       = dword ptr -10h
.text:004015F4 arg_0	       = dword ptr  8
.text:004015F4 arg_4	       = dword ptr  0Ch
.text:004015F4 arg_8	       = dword ptr  10h
.text:004015F4
.text:004015F4		       push    ebp
.text:004015F5		       mov     ebp, esp
.text:004015F7		       push    edi
.text:004015F8		       push    esi
.text:004015F9		       push    ebx
.text:004015FA		       sub     esp, 8
.text:004015FD		       mov     edi, [ebp+arg_4]
.text:00401600		       mov     eax, [ebp+arg_0]
.text:00401603		       mov     esi, [eax]
.text:00401605		       mov     ebx, esi
.text:00401607		       test    esi, esi
.text:00401609		       jnz     short loc_401617
.text:0040160B		       jmp     loc_401698
.text:00401610 ; ---------------------------------------------------------------------------
.text:00401610
.text:00401610 loc_401610:			       ; CODE XREF: sub_4015F4+31j
.text:00401610		       mov     ebx, [ebx+8]
.text:00401613		       test    ebx, ebx
.text:00401615		       jz      short loc_40162B
.text:00401617
.text:00401617 loc_401617:			       ; CODE XREF: sub_4015F4+15j
.text:00401617		       mov     [esp+14h+var_10], edi
.text:0040161B		       mov     [esp+14h+var_14], ebx
.text:0040161E		       call    sub_4011A0
.text:00401623		       test    eax, eax
.text:00401625		       jnz     short loc_401610
.text:00401627		       mov     esi, ebx
.text:00401629		       jmp     short loc_40164B
.text:0040162B ; ---------------------------------------------------------------------------
.text:0040162B
.text:0040162B loc_40162B:			       ; CODE XREF: sub_4015F4+21j
.text:0040162B		       mov     esi, [esi+4]
.text:0040162E		       test    esi, esi
.text:00401630		       jnz     short loc_40163B
.text:00401632		       jmp     short loc_401698
.text:00401634 ; ---------------------------------------------------------------------------
.text:00401634
.text:00401634 loc_401634:			       ; CODE XREF: sub_4015F4+55j
.text:00401634		       mov     esi, [esi+4]
.text:00401637		       test    esi, esi
.text:00401639		       jz      short loc_401698
.text:0040163B
.text:0040163B loc_40163B:			       ; CODE XREF: sub_4015F4+3Cj
.text:0040163B		       mov     [esp+14h+var_10], edi
.text:0040163F		       mov     [esp+14h+var_14], esi
.text:00401642		       call    sub_4011A0
.text:00401647		       test    eax, eax
.text:00401649		       jnz     short loc_401634
.text:0040164B
.text:0040164B loc_40164B:			       ; CODE XREF: sub_4015F4+35j
.text:0040164B		       mov     edx, [ebp+arg_8]
.text:0040164E		       mov     [edx], esi
.text:00401650		       jmp     short loc_401684
.text:00401652 ; ---------------------------------------------------------------------------
.text:00401652
.text:00401652 loc_401652:			       ; CODE XREF: sub_4015F4+B2j
.text:00401652		       mov     eax, [ebp+arg_0]
.text:00401655		       mov     [eax], edi
.text:00401657		       mov     dword ptr [edi+8], 0
.text:0040165E		       mov     dword ptr [edi+4], 0
.text:00401665		       jmp     short loc_401684
.text:00401667 ; ---------------------------------------------------------------------------
.text:00401667
.text:00401667 loc_401667:			       ; CODE XREF: sub_4015F4+B0j
.text:00401667		       mov     [edi+4],	eax
.text:0040166A		       mov     edx, [ebp+arg_0]
.text:0040166D		       mov     eax, [edx]
.text:0040166F		       mov     eax, [eax+8]
.text:00401672		       mov     [edi+8],	eax
.text:00401675		       mov     eax, [edx]
.text:00401677		       mov     [eax+8],	edi
.text:0040167A		       mov     eax, [edi+8]
.text:0040167D		       test    eax, eax
.text:0040167F		       jz      short loc_401684
.text:00401681		       mov     [eax+4],	edi
.text:00401684
.text:00401684 loc_401684:			       ; CODE XREF: sub_4015F4+5Cj
.text:00401684					       ; sub_4015F4+71j ...
.text:00401684		       mov     eax, [ebp+arg_8]
.text:00401687		       cmp     dword ptr [eax],	0
.text:0040168A		       setz    al
.text:0040168D		       movzx   eax, al
.text:00401690		       add     esp, 8
.text:00401693		       pop     ebx
.text:00401694		       pop     esi
.text:00401695		       pop     edi
.text:00401696		       pop     ebp
.text:00401697		       retn
.text:00401698 ; ---------------------------------------------------------------------------
.text:00401698
.text:00401698 loc_401698:			       ; CODE XREF: sub_4015F4+17j
.text:00401698					       ; sub_4015F4+3Ej ...
.text:00401698		       mov     edx, [ebp+arg_8]
.text:0040169B		       mov     [edx], esi
.text:0040169D		       mov     edx, [ebp+arg_0]
.text:004016A0		       mov     eax, [edx]
.text:004016A2		       test    eax, eax
.text:004016A4		       jnz     short loc_401667
.text:004016A6		       jmp     short loc_401652
.text:004016A6 sub_4015F4      endp
.text:004016A6
.text:004016A8
.text:004016A8 ; =============== S U B R O U T I N E =======================================
.text:004016A8
.text:004016A8 ; Attributes: bp-based frame
.text:004016A8
.text:004016A8 sub_4016A8      proc near	       ; CODE XREF: sub_4059BC+8B9p
.text:004016A8
.text:004016A8 var_14	       = dword ptr -14h
.text:004016A8 var_10	       = dword ptr -10h
.text:004016A8 arg_0	       = dword ptr  8
.text:004016A8 arg_4	       = dword ptr  0Ch
.text:004016A8 arg_8	       = dword ptr  10h
.text:004016A8
.text:004016A8		       push    ebp
.text:004016A9		       mov     ebp, esp
.text:004016AB		       push    edi
.text:004016AC		       push    esi
.text:004016AD		       push    ebx
.text:004016AE		       sub     esp, 8
.text:004016B1		       mov     edi, [ebp+arg_4]
.text:004016B4		       mov     eax, [ebp+arg_0]
.text:004016B7		       mov     esi, [eax]
.text:004016B9		       mov     ebx, esi
.text:004016BB		       test    esi, esi
.text:004016BD		       jnz     short loc_4016CB
.text:004016BF		       jmp     loc_40174F
.text:004016C4 ; ---------------------------------------------------------------------------
.text:004016C4
.text:004016C4 loc_4016C4:			       ; CODE XREF: sub_4016A8+31j
.text:004016C4		       mov     ebx, [ebx+8]
.text:004016C7		       test    ebx, ebx
.text:004016C9		       jz      short loc_4016DF
.text:004016CB
.text:004016CB loc_4016CB:			       ; CODE XREF: sub_4016A8+15j
.text:004016CB		       mov     [esp+14h+var_10], edi
.text:004016CF		       mov     [esp+14h+var_14], ebx
.text:004016D2		       call    sub_4011A0
.text:004016D7		       test    eax, eax
.text:004016D9		       jnz     short loc_4016C4
.text:004016DB		       mov     esi, ebx
.text:004016DD		       jmp     short loc_401702
.text:004016DF ; ---------------------------------------------------------------------------
.text:004016DF
.text:004016DF loc_4016DF:			       ; CODE XREF: sub_4016A8+21j
.text:004016DF		       mov     esi, [esi+4]
.text:004016E2		       test    esi, esi
.text:004016E4		       jnz     short loc_4016F2
.text:004016E6		       jmp     short loc_40174F
.text:004016E8 ; ---------------------------------------------------------------------------
.text:004016E8
.text:004016E8 loc_4016E8:			       ; CODE XREF: sub_4016A8+58j
.text:004016E8		       mov     esi, [esi+4]
.text:004016EB		       test    esi, esi
.text:004016ED		       lea     esi, [esi+0]
.text:004016F0		       jz      short loc_40174F
.text:004016F2
.text:004016F2 loc_4016F2:			       ; CODE XREF: sub_4016A8+3Cj
.text:004016F2		       mov     [esp+14h+var_10], edi
.text:004016F6		       mov     [esp+14h+var_14], esi
.text:004016F9		       call    sub_4011A0
.text:004016FE		       test    eax, eax
.text:00401700		       jnz     short loc_4016E8
.text:00401702
.text:00401702 loc_401702:			       ; CODE XREF: sub_4016A8+35j
.text:00401702		       mov     edx, [ebp+arg_8]
.text:00401705		       mov     [edx], esi
.text:00401707		       jmp     short loc_40173B
.text:00401709 ; ---------------------------------------------------------------------------
.text:00401709
.text:00401709 loc_401709:			       ; CODE XREF: sub_4016A8+B5j
.text:00401709		       mov     eax, [ebp+arg_0]
.text:0040170C		       mov     [eax], edi
.text:0040170E		       mov     dword ptr [edi+8], 0
.text:00401715		       mov     dword ptr [edi+4], 0
.text:0040171C		       jmp     short loc_40173B
.text:0040171E ; ---------------------------------------------------------------------------
.text:0040171E
.text:0040171E loc_40171E:			       ; CODE XREF: sub_4016A8+B3j
.text:0040171E		       mov     eax, [eax+4]
.text:00401721		       mov     [edi+4],	eax
.text:00401724		       mov     edx, [ebp+arg_0]
.text:00401727		       mov     eax, [edx]
.text:00401729		       mov     [edi+8],	eax
.text:0040172C		       mov     eax, [edx]
.text:0040172E		       mov     [eax+4],	edi
.text:00401731		       mov     eax, [edi+4]
.text:00401734		       test    eax, eax
.text:00401736		       jz      short loc_40173B
.text:00401738		       mov     [eax+8],	edi
.text:0040173B
.text:0040173B loc_40173B:			       ; CODE XREF: sub_4016A8+5Fj
.text:0040173B					       ; sub_4016A8+74j ...
.text:0040173B		       mov     eax, [ebp+arg_8]
.text:0040173E		       cmp     dword ptr [eax],	0
.text:00401741		       setz    al
.text:00401744		       movzx   eax, al
.text:00401747		       add     esp, 8
.text:0040174A		       pop     ebx
.text:0040174B		       pop     esi
.text:0040174C		       pop     edi
.text:0040174D		       pop     ebp
.text:0040174E		       retn
.text:0040174F ; ---------------------------------------------------------------------------
.text:0040174F
.text:0040174F loc_40174F:			       ; CODE XREF: sub_4016A8+17j
.text:0040174F					       ; sub_4016A8+3Ej ...
.text:0040174F		       mov     edx, [ebp+arg_8]
.text:00401752		       mov     [edx], esi
.text:00401754		       mov     edx, [ebp+arg_0]
.text:00401757		       mov     eax, [edx]
.text:00401759		       test    eax, eax
.text:0040175B		       jnz     short loc_40171E
.text:0040175D		       jmp     short loc_401709
.text:0040175D sub_4016A8      endp
.text:0040175D
.text:0040175F
.text:0040175F ; =============== S U B R O U T I N E =======================================
.text:0040175F
.text:0040175F ; Attributes: bp-based frame
.text:0040175F
.text:0040175F sub_40175F      proc near	       ; CODE XREF: sub_4059BC+86Cp
.text:0040175F
.text:0040175F var_14	       = dword ptr -14h
.text:0040175F var_10	       = dword ptr -10h
.text:0040175F arg_0	       = dword ptr  8
.text:0040175F arg_4	       = dword ptr  0Ch
.text:0040175F arg_8	       = dword ptr  10h
.text:0040175F
.text:0040175F		       push    ebp
.text:00401760		       mov     ebp, esp
.text:00401762		       push    edi
.text:00401763		       push    esi
.text:00401764		       push    ebx
.text:00401765		       sub     esp, 8
.text:00401768		       mov     edi, [ebp+arg_4]
.text:0040176B		       mov     eax, [ebp+arg_0]
.text:0040176E		       mov     esi, [eax]
.text:00401770		       mov     ebx, esi
.text:00401772		       test    esi, esi
.text:00401774		       jnz     short loc_401782
.text:00401776		       jmp     loc_401806
.text:0040177B ; ---------------------------------------------------------------------------
.text:0040177B
.text:0040177B loc_40177B:			       ; CODE XREF: sub_40175F+31j
.text:0040177B		       mov     ebx, [ebx+8]
.text:0040177E		       test    ebx, ebx
.text:00401780		       jz      short loc_401796
.text:00401782
.text:00401782 loc_401782:			       ; CODE XREF: sub_40175F+15j
.text:00401782		       mov     [esp+14h+var_10], edi
.text:00401786		       mov     [esp+14h+var_14], ebx
.text:00401789		       call    sub_4011A0
.text:0040178E		       test    eax, eax
.text:00401790		       jnz     short loc_40177B
.text:00401792		       mov     esi, ebx
.text:00401794		       jmp     short loc_4017B9
.text:00401796 ; ---------------------------------------------------------------------------
.text:00401796
.text:00401796 loc_401796:			       ; CODE XREF: sub_40175F+21j
.text:00401796		       mov     esi, [esi+4]
.text:00401799		       test    esi, esi
.text:0040179B		       jnz     short loc_4017A9
.text:0040179D		       lea     esi, [esi+0]
.text:004017A0		       jmp     short loc_401806
.text:004017A2 ; ---------------------------------------------------------------------------
.text:004017A2
.text:004017A2 loc_4017A2:			       ; CODE XREF: sub_40175F+58j
.text:004017A2		       mov     esi, [esi+4]
.text:004017A5		       test    esi, esi
.text:004017A7		       jz      short loc_401806
.text:004017A9
.text:004017A9 loc_4017A9:			       ; CODE XREF: sub_40175F+3Cj
.text:004017A9		       mov     [esp+14h+var_10], edi
.text:004017AD		       mov     [esp+14h+var_14], esi
.text:004017B0		       call    sub_4011A0
.text:004017B5		       test    eax, eax
.text:004017B7		       jnz     short loc_4017A2
.text:004017B9
.text:004017B9 loc_4017B9:			       ; CODE XREF: sub_40175F+35j
.text:004017B9		       mov     edx, [ebp+arg_8]
.text:004017BC		       mov     [edx], esi
.text:004017BE		       jmp     short loc_4017F2
.text:004017C0 ; ---------------------------------------------------------------------------
.text:004017C0
.text:004017C0 loc_4017C0:			       ; CODE XREF: sub_40175F+B5j
.text:004017C0		       mov     eax, [ebp+arg_0]
.text:004017C3		       mov     [eax], edi
.text:004017C5		       mov     dword ptr [edi+8], 0
.text:004017CC		       mov     dword ptr [edi+4], 0
.text:004017D3		       jmp     short loc_4017F2
.text:004017D5 ; ---------------------------------------------------------------------------
.text:004017D5
.text:004017D5 loc_4017D5:			       ; CODE XREF: sub_40175F+B3j
.text:004017D5		       mov     [edi+4],	eax
.text:004017D8		       mov     edx, [ebp+arg_0]
.text:004017DB		       mov     eax, [edx]
.text:004017DD		       mov     eax, [eax+8]
.text:004017E0		       mov     [edi+8],	eax
.text:004017E3		       mov     eax, [edx]
.text:004017E5		       mov     [eax+8],	edi
.text:004017E8		       mov     eax, [edi+8]
.text:004017EB		       test    eax, eax
.text:004017ED		       jz      short loc_4017F2
.text:004017EF		       mov     [eax+4],	edi
.text:004017F2
.text:004017F2 loc_4017F2:			       ; CODE XREF: sub_40175F+5Fj
.text:004017F2					       ; sub_40175F+74j ...
.text:004017F2		       mov     eax, [ebp+arg_8]
.text:004017F5		       cmp     dword ptr [eax],	0
.text:004017F8		       setz    al
.text:004017FB		       movzx   eax, al
.text:004017FE		       add     esp, 8
.text:00401801		       pop     ebx
.text:00401802		       pop     esi
.text:00401803		       pop     edi
.text:00401804		       pop     ebp
.text:00401805		       retn
.text:00401806 ; ---------------------------------------------------------------------------
.text:00401806
.text:00401806 loc_401806:			       ; CODE XREF: sub_40175F+17j
.text:00401806					       ; sub_40175F+41j ...
.text:00401806		       mov     edx, [ebp+arg_8]
.text:00401809		       mov     [edx], esi
.text:0040180B		       mov     edx, [ebp+arg_0]
.text:0040180E		       mov     eax, [edx]
.text:00401810		       test    eax, eax
.text:00401812		       jnz     short loc_4017D5
.text:00401814		       jmp     short loc_4017C0
.text:00401814 sub_40175F      endp
.text:00401814
.text:00401816
.text:00401816 ; =============== S U B R O U T I N E =======================================
.text:00401816
.text:00401816 ; Attributes: bp-based frame
.text:00401816
.text:00401816 sub_401816      proc near	       ; CODE XREF: sub_4059BC+EDp
.text:00401816
.text:00401816 arg_0	       = dword ptr  8
.text:00401816 arg_4	       = dword ptr  0Ch
.text:00401816
.text:00401816		       push    ebp
.text:00401817		       mov     ebp, esp
.text:00401819		       mov     edx, [ebp+arg_0]
.text:0040181C		       mov     ecx, [ebp+arg_4]
.text:0040181F		       mov     eax, [edx]
.text:00401821		       test    eax, eax
.text:00401823		       jnz     short loc_401829
.text:00401825		       mov     [edx], ecx
.text:00401827		       jmp     short loc_401861
.text:00401829 ; ---------------------------------------------------------------------------
.text:00401829
.text:00401829 loc_401829:			       ; CODE XREF: sub_401816+Dj
.text:00401829		       test    ecx, ecx
.text:0040182B		       jz      short loc_401861
.text:0040182D
.text:0040182D loc_40182D:			       ; CODE XREF: sub_401816+1Ej
.text:0040182D		       mov     edx, eax
.text:0040182F		       mov     eax, [eax+4]
.text:00401832		       test    eax, eax
.text:00401834		       jnz     short loc_40182D
.text:00401836		       test    edx, edx
.text:00401838		       jnz     short loc_40184A
.text:0040183A		       mov     dword ptr [ecx+8], 0
.text:00401841		       mov     dword ptr [ecx+4], 0
.text:00401848		       jmp     short loc_401861
.text:0040184A ; ---------------------------------------------------------------------------
.text:0040184A
.text:0040184A loc_40184A:			       ; CODE XREF: sub_401816+22j
.text:0040184A		       mov     dword ptr [ecx+4], 0
.text:00401851		       mov     [ecx+8],	edx
.text:00401854		       mov     [edx+4],	ecx
.text:00401857		       mov     eax, [ecx+4]
.text:0040185A		       test    eax, eax
.text:0040185C		       jz      short loc_401861
.text:0040185E		       mov     [eax+8],	ecx
.text:00401861
.text:00401861 loc_401861:			       ; CODE XREF: sub_401816+11j
.text:00401861					       ; sub_401816+15j ...
.text:00401861		       pop     ebp
.text:00401862		       retn
.text:00401862 sub_401816      endp
.text:00401862
.text:00401863
.text:00401863 ; =============== S U B R O U T I N E =======================================
.text:00401863
.text:00401863 ; Attributes: bp-based frame
.text:00401863
.text:00401863 sub_401863      proc near	       ; CODE XREF: sub_4059BC+6C6p
.text:00401863
.text:00401863 var_8	       = dword ptr -8
.text:00401863 var_4	       = dword ptr -4
.text:00401863 arg_0	       = dword ptr  8
.text:00401863 arg_4	       = dword ptr  0Ch
.text:00401863
.text:00401863		       push    ebp
.text:00401864		       mov     ebp, esp
.text:00401866		       sub     esp, 8
.text:00401869		       mov     [esp+8+var_8], ebx
.text:0040186C		       mov     [esp+8+var_4], esi
.text:00401870		       mov     esi, [ebp+arg_0]
.text:00401873		       mov     ecx, [ebp+arg_4]
.text:00401876		       mov     eax, [esi]
.text:00401878		       mov     ebx, eax
.text:0040187A		       cmp     eax, ecx
.text:0040187C		       jnz     short loc_401888
.text:0040187E		       mov     ebx, [eax+8]
.text:00401881		       test    ebx, ebx
.text:00401883		       jnz     short loc_401888
.text:00401885		       mov     ebx, [eax+4]
.text:00401888
.text:00401888 loc_401888:			       ; CODE XREF: sub_401863+19j
.text:00401888					       ; sub_401863+20j
.text:00401888		       mov     edx, [ecx+4]
.text:0040188B		       test    edx, edx
.text:0040188D		       jz      short loc_401895
.text:0040188F		       mov     eax, [ecx+8]
.text:00401892		       mov     [edx+8],	eax
.text:00401895
.text:00401895 loc_401895:			       ; CODE XREF: sub_401863+2Aj
.text:00401895		       mov     edx, [ecx+8]
.text:00401898		       test    edx, edx
.text:0040189A		       jz      short loc_4018A2
.text:0040189C		       mov     eax, [ecx+4]
.text:0040189F		       mov     [edx+4],	eax
.text:004018A2
.text:004018A2 loc_4018A2:			       ; CODE XREF: sub_401863+37j
.text:004018A2		       mov     [esi], ebx
.text:004018A4		       mov     ebx, [esp+8+var_8]
.text:004018A7		       mov     esi, [esp+8+var_4]
.text:004018AB		       mov     esp, ebp
.text:004018AD		       pop     ebp
.text:004018AE		       retn
.text:004018AE sub_401863      endp
.text:004018AE
.text:004018AF
.text:004018AF ; =============== S U B R O U T I N E =======================================
.text:004018AF
.text:004018AF ; Attributes: bp-based frame
.text:004018AF
.text:004018AF sub_4018AF      proc near	       ; CODE XREF: sub_4059BC+A8Ep
.text:004018AF
.text:004018AF var_14	       = dword ptr -14h
.text:004018AF var_10	       = dword ptr -10h
.text:004018AF arg_0	       = dword ptr  8
.text:004018AF arg_4	       = dword ptr  0Ch
.text:004018AF arg_8	       = dword ptr  10h
.text:004018AF
.text:004018AF		       push    ebp
.text:004018B0		       mov     ebp, esp
.text:004018B2		       push    edi
.text:004018B3		       push    esi
.text:004018B4		       push    ebx
.text:004018B5		       sub     esp, 8
.text:004018B8		       mov     edi, [ebp+arg_4]
.text:004018BB		       mov     eax, [ebp+arg_0]
.text:004018BE		       mov     esi, [eax]
.text:004018C0		       mov     ebx, esi
.text:004018C2		       test    esi, esi
.text:004018C4		       jnz     short loc_4018D2
.text:004018C6		       jmp     loc_401956
.text:004018CB ; ---------------------------------------------------------------------------
.text:004018CB
.text:004018CB loc_4018CB:			       ; CODE XREF: sub_4018AF+31j
.text:004018CB		       mov     ebx, [ebx+8]
.text:004018CE		       test    ebx, ebx
.text:004018D0		       jz      short loc_4018E6
.text:004018D2
.text:004018D2 loc_4018D2:			       ; CODE XREF: sub_4018AF+15j
.text:004018D2		       mov     [esp+14h+var_10], edi
.text:004018D6		       mov     [esp+14h+var_14], ebx
.text:004018D9		       call    sub_4011A0
.text:004018DE		       test    eax, eax
.text:004018E0		       jnz     short loc_4018CB
.text:004018E2		       mov     esi, ebx
.text:004018E4		       jmp     short loc_401909
.text:004018E6 ; ---------------------------------------------------------------------------
.text:004018E6
.text:004018E6 loc_4018E6:			       ; CODE XREF: sub_4018AF+21j
.text:004018E6		       mov     esi, [esi+4]
.text:004018E9		       test    esi, esi
.text:004018EB		       jnz     short loc_4018F9
.text:004018ED		       lea     esi, [esi+0]
.text:004018F0		       jmp     short loc_401956
.text:004018F2 ; ---------------------------------------------------------------------------
.text:004018F2
.text:004018F2 loc_4018F2:			       ; CODE XREF: sub_4018AF+58j
.text:004018F2		       mov     esi, [esi+4]
.text:004018F5		       test    esi, esi
.text:004018F7		       jz      short loc_401956
.text:004018F9
.text:004018F9 loc_4018F9:			       ; CODE XREF: sub_4018AF+3Cj
.text:004018F9		       mov     [esp+14h+var_10], edi
.text:004018FD		       mov     [esp+14h+var_14], esi
.text:00401900		       call    sub_4011A0
.text:00401905		       test    eax, eax
.text:00401907		       jnz     short loc_4018F2
.text:00401909
.text:00401909 loc_401909:			       ; CODE XREF: sub_4018AF+35j
.text:00401909		       mov     edx, [ebp+arg_8]
.text:0040190C		       mov     [edx], esi
.text:0040190E		       mov     edx, [ebp+arg_0]
.text:00401911		       mov     eax, [edx]
.text:00401913		       mov     ecx, eax
.text:00401915		       cmp     eax, esi
.text:00401917		       jnz     short loc_401923
.text:00401919		       mov     ecx, [eax+8]
.text:0040191C		       test    ecx, ecx
.text:0040191E		       jnz     short loc_401923
.text:00401920		       mov     ecx, [eax+4]
.text:00401923
.text:00401923 loc_401923:			       ; CODE XREF: sub_4018AF+68j
.text:00401923					       ; sub_4018AF+6Fj
.text:00401923		       mov     edx, [esi+4]
.text:00401926		       test    edx, edx
.text:00401928		       jz      short loc_401930
.text:0040192A		       mov     eax, [esi+8]
.text:0040192D		       mov     [edx+8],	eax
.text:00401930
.text:00401930 loc_401930:			       ; CODE XREF: sub_4018AF+79j
.text:00401930		       mov     edx, [esi+8]
.text:00401933		       test    edx, edx
.text:00401935		       jz      short loc_40193D
.text:00401937		       mov     eax, [esi+4]
.text:0040193A		       mov     [edx+4],	eax
.text:0040193D
.text:0040193D loc_40193D:			       ; CODE XREF: sub_4018AF+86j
.text:0040193D		       mov     eax, [ebp+arg_0]
.text:00401940		       mov     [eax], ecx
.text:00401942
.text:00401942 loc_401942:			       ; CODE XREF: sub_4018AF+ACj
.text:00401942		       mov     edx, [ebp+arg_8]
.text:00401945		       cmp     dword ptr [edx],	0
.text:00401948		       setnz   al
.text:0040194B		       movzx   eax, al
.text:0040194E		       add     esp, 8
.text:00401951		       pop     ebx
.text:00401952		       pop     esi
.text:00401953		       pop     edi
.text:00401954		       pop     ebp
.text:00401955		       retn
.text:00401956 ; ---------------------------------------------------------------------------
.text:00401956
.text:00401956 loc_401956:			       ; CODE XREF: sub_4018AF+17j
.text:00401956					       ; sub_4018AF+41j ...
.text:00401956		       mov     eax, [ebp+arg_8]
.text:00401959		       mov     [eax], esi
.text:0040195B		       jmp     short loc_401942
.text:0040195B sub_4018AF      endp
.text:0040195B
.text:0040195D
.text:0040195D ; =============== S U B R O U T I N E =======================================
.text:0040195D
.text:0040195D ; Attributes: bp-based frame
.text:0040195D
.text:0040195D sub_40195D      proc near	       ; CODE XREF: sub_4059BC+586p
.text:0040195D					       ; sub_4059BC+5CDp ...
.text:0040195D
.text:0040195D arg_0	       = dword ptr  8
.text:0040195D arg_4	       = dword ptr  0Ch
.text:0040195D
.text:0040195D		       push    ebp
.text:0040195E		       mov     ebp, esp
.text:00401960		       push    ebx
.text:00401961		       mov     edx, [ebp+arg_0]
.text:00401964		       mov     ecx, [ebp+arg_4]
.text:00401967		       test    edx, edx
.text:00401969		       setnz   bl
.text:0040196C		       jz      short loc_401974
.text:0040196E		       mov     eax, edx
.text:00401970		       cmp     edx, ecx
.text:00401972		       jnz     short loc_401978
.text:00401974
.text:00401974 loc_401974:			       ; CODE XREF: sub_40195D+Fj
.text:00401974		       mov     eax, edx
.text:00401976		       jmp     short loc_401983
.text:00401978 ; ---------------------------------------------------------------------------
.text:00401978
.text:00401978 loc_401978:			       ; CODE XREF: sub_40195D+15j
.text:00401978					       ; sub_40195D+24j
.text:00401978		       mov     eax, [eax+8]
.text:0040197B		       test    eax, eax
.text:0040197D		       jz      short loc_401983
.text:0040197F		       cmp     ecx, eax
.text:00401981		       jnz     short loc_401978
.text:00401983
.text:00401983 loc_401983:			       ; CODE XREF: sub_40195D+19j
.text:00401983					       ; sub_40195D+20j
.text:00401983		       test    eax, eax
.text:00401985		       setnz   al
.text:00401988		       movzx   eax, al
.text:0040198B		       test    eax, eax
.text:0040198D		       jnz     short loc_4019BA
.text:0040198F		       test    bl, bl
.text:00401991		       jz      short loc_4019BA
.text:00401993		       mov     edx, [edx+4]
.text:00401996		       test    edx, edx
.text:00401998		       jz      short loc_4019A0
.text:0040199A		       mov     eax, edx
.text:0040199C		       cmp     ecx, edx
.text:0040199E		       jnz     short loc_4019A4
.text:004019A0
.text:004019A0 loc_4019A0:			       ; CODE XREF: sub_40195D+3Bj
.text:004019A0		       mov     eax, edx
.text:004019A2		       jmp     short loc_4019B2
.text:004019A4 ; ---------------------------------------------------------------------------
.text:004019A4
.text:004019A4 loc_4019A4:			       ; CODE XREF: sub_40195D+41j
.text:004019A4					       ; sub_40195D+53j
.text:004019A4		       mov     eax, [eax+4]
.text:004019A7		       test    eax, eax
.text:004019A9		       jz      short loc_4019B2
.text:004019AB		       cmp     ecx, eax
.text:004019AD		       lea     esi, [esi+0]
.text:004019B0		       jnz     short loc_4019A4
.text:004019B2
.text:004019B2 loc_4019B2:			       ; CODE XREF: sub_40195D+45j
.text:004019B2					       ; sub_40195D+4Cj
.text:004019B2		       test    eax, eax
.text:004019B4		       setnz   al
.text:004019B7		       movzx   eax, al
.text:004019BA
.text:004019BA loc_4019BA:			       ; CODE XREF: sub_40195D+30j
.text:004019BA					       ; sub_40195D+34j
.text:004019BA		       pop     ebx
.text:004019BB		       pop     ebp
.text:004019BC		       retn
.text:004019BC sub_40195D      endp
.text:004019BC
.text:004019BD
.text:004019BD ; =============== S U B R O U T I N E =======================================
.text:004019BD
.text:004019BD ; Attributes: bp-based frame
.text:004019BD
.text:004019BD sub_4019BD      proc near	       ; CODE XREF: sub_4059BC+4DEp
.text:004019BD					       ; sub_4059BC+529p ...
.text:004019BD
.text:004019BD var_14	       = dword ptr -14h
.text:004019BD var_10	       = dword ptr -10h
.text:004019BD arg_0	       = dword ptr  8
.text:004019BD arg_4	       = dword ptr  0Ch
.text:004019BD
.text:004019BD		       push    ebp
.text:004019BE		       mov     ebp, esp
.text:004019C0		       push    edi
.text:004019C1		       push    esi
.text:004019C2		       push    ebx
.text:004019C3		       sub     esp, 8
.text:004019C6		       mov     edi, [ebp+arg_0]
.text:004019C9		       mov     esi, [ebp+arg_4]
.text:004019CC		       mov     ebx, edi
.text:004019CE		       mov     edx, edi
.text:004019D0		       test    edi, edi
.text:004019D2		       jnz     short loc_4019DD
.text:004019D4		       jmp     short loc_401A17
.text:004019D6 ; ---------------------------------------------------------------------------
.text:004019D6
.text:004019D6 loc_4019D6:			       ; CODE XREF: sub_4019BD+2Ej
.text:004019D6		       mov     ebx, [ebx+8]
.text:004019D9		       test    ebx, ebx
.text:004019DB		       jz      short loc_4019F1
.text:004019DD
.text:004019DD loc_4019DD:			       ; CODE XREF: sub_4019BD+15j
.text:004019DD		       mov     [esp+14h+var_10], esi
.text:004019E1		       mov     [esp+14h+var_14], ebx
.text:004019E4		       call    sub_4011A0
.text:004019E9		       test    eax, eax
.text:004019EB		       jnz     short loc_4019D6
.text:004019ED		       mov     edx, ebx
.text:004019EF		       jmp     short loc_401A17
.text:004019F1 ; ---------------------------------------------------------------------------
.text:004019F1
.text:004019F1 loc_4019F1:			       ; CODE XREF: sub_4019BD+1Ej
.text:004019F1		       mov     eax, [edi+4]
.text:004019F4		       mov     ebx, eax
.text:004019F6		       mov     edx, eax
.text:004019F8		       test    eax, eax
.text:004019FA		       jnz     short loc_401A05
.text:004019FC		       jmp     short loc_401A17
.text:004019FE ; ---------------------------------------------------------------------------
.text:004019FE
.text:004019FE loc_4019FE:			       ; CODE XREF: sub_4019BD+56j
.text:004019FE		       mov     ebx, [ebx+4]
.text:00401A01		       test    ebx, ebx
.text:00401A03		       jz      short loc_401A15
.text:00401A05
.text:00401A05 loc_401A05:			       ; CODE XREF: sub_4019BD+3Dj
.text:00401A05		       mov     [esp+14h+var_10], esi
.text:00401A09		       mov     [esp+14h+var_14], ebx
.text:00401A0C		       call    sub_4011A0
.text:00401A11		       test    eax, eax
.text:00401A13		       jnz     short loc_4019FE
.text:00401A15
.text:00401A15 loc_401A15:			       ; CODE XREF: sub_4019BD+46j
.text:00401A15		       mov     edx, ebx
.text:00401A17
.text:00401A17 loc_401A17:			       ; CODE XREF: sub_4019BD+17j
.text:00401A17					       ; sub_4019BD+32j ...
.text:00401A17		       mov     eax, edx
.text:00401A19		       add     esp, 8
.text:00401A1C		       pop     ebx
.text:00401A1D		       pop     esi
.text:00401A1E		       pop     edi
.text:00401A1F		       pop     ebp
.text:00401A20		       retn
.text:00401A20 sub_4019BD      endp
.text:00401A20
.text:00401A21
.text:00401A21 ; =============== S U B R O U T I N E =======================================
.text:00401A21
.text:00401A21 ; Attributes: bp-based frame
.text:00401A21
.text:00401A21 sub_401A21      proc near	       ; CODE XREF: sub_4059BC+17Ap
.text:00401A21					       ; sub_4059BC+196p ...
.text:00401A21
.text:00401A21 arg_0	       = dword ptr  8
.text:00401A21
.text:00401A21		       push    ebp
.text:00401A22		       mov     ebp, esp
.text:00401A24		       mov     edx, [ebp+arg_0]
.text:00401A27		       mov     eax, edx
.text:00401A29		       test    edx, edx
.text:00401A2B		       jz      short loc_401A38
.text:00401A2D
.text:00401A2D loc_401A2D:			       ; CODE XREF: sub_401A21+15j
.text:00401A2D		       mov     edx, [eax+8]
.text:00401A30		       test    edx, edx
.text:00401A32		       jz      short loc_401A38
.text:00401A34		       mov     eax, edx
.text:00401A36		       jmp     short loc_401A2D
.text:00401A38 ; ---------------------------------------------------------------------------
.text:00401A38
.text:00401A38 loc_401A38:			       ; CODE XREF: sub_401A21+Aj
.text:00401A38					       ; sub_401A21+11j
.text:00401A38		       pop     ebp
.text:00401A39		       retn
.text:00401A39 sub_401A21      endp
.text:00401A39
.text:00401A3A ; ---------------------------------------------------------------------------
.text:00401A3A		       push    ebp
.text:00401A3B		       mov     ebp, esp
.text:00401A3D		       mov     edx, [ebp+8]
.text:00401A40		       mov     eax, edx
.text:00401A42		       test    edx, edx
.text:00401A44		       jz      short loc_401A51
.text:00401A46
.text:00401A46 loc_401A46:			       ; CODE XREF: .text:00401A4Fj
.text:00401A46		       mov     edx, [eax+4]
.text:00401A49		       test    edx, edx
.text:00401A4B		       jz      short loc_401A51
.text:00401A4D		       mov     eax, edx
.text:00401A4F		       jmp     short loc_401A46
.text:00401A51 ; ---------------------------------------------------------------------------
.text:00401A51
.text:00401A51 loc_401A51:			       ; CODE XREF: .text:00401A44j
.text:00401A51					       ; .text:00401A4Bj
.text:00401A51		       pop     ebp
.text:00401A52		       retn
.text:00401A53
.text:00401A53 ; =============== S U B R O U T I N E =======================================
.text:00401A53
.text:00401A53 ; Attributes: bp-based frame
.text:00401A53
.text:00401A53 sub_401A53      proc near	       ; CODE XREF: sub_4059BC+1EAp
.text:00401A53					       ; sub_4059BC+1F8p ...
.text:00401A53
.text:00401A53 var_30	       = dword ptr -30h
.text:00401A53 var_2C	       = dword ptr -2Ch
.text:00401A53 var_28	       = dword ptr -28h
.text:00401A53 var_24	       = dword ptr -24h
.text:00401A53 var_20	       = dword ptr -20h
.text:00401A53 var_10	       = dword ptr -10h
.text:00401A53 arg_0	       = dword ptr  8
.text:00401A53
.text:00401A53		       push    ebp
.text:00401A54		       mov     ebp, esp
.text:00401A56		       push    edi
.text:00401A57		       push    esi
.text:00401A58		       push    ebx
.text:00401A59		       sub     esp, 24h
.text:00401A5C		       mov     edx, [ebp+arg_0]
.text:00401A5F		       mov     eax, [edx]
.text:00401A61		       test    eax, eax
.text:00401A63		       jz      loc_401BBD
.text:00401A69
.text:00401A69 loc_401A69:			       ; CODE XREF: sub_401A53+1Dj
.text:00401A69		       mov     edx, eax
.text:00401A6B		       mov     eax, [eax+8]
.text:00401A6E		       test    eax, eax
.text:00401A70		       jnz     short loc_401A69
.text:00401A72		       mov     [ebp+var_10], edx
.text:00401A75		       mov     [ebp+var_28], 1
.text:00401A7C
.text:00401A7C loc_401A7C:			       ; CODE XREF: sub_401A53+6Dj
.text:00401A7C					       ; sub_401A53+160j
.text:00401A7C		       mov     ecx, [ebp+var_10]
.text:00401A7F		       mov     [ebp+var_10], 0
.text:00401A86		       test    ecx, ecx
.text:00401A88		       jz      loc_401BB8
.text:00401A8E		       mov     edx, ecx
.text:00401A90		       lea     edi, [ebp+var_10]
.text:00401A93		       mov     esi, 0
.text:00401A98		       jmp     loc_401B69
.text:00401A9D ; ---------------------------------------------------------------------------
.text:00401A9D
.text:00401A9D loc_401A9D:			       ; CODE XREF: sub_401A53+57j
.text:00401A9D					       ; sub_401A53+12Aj
.text:00401A9D		       add     eax, 1
.text:00401AA0		       mov     edx, [edx+4]
.text:00401AA3		       cmp     eax, [ebp+var_28]
.text:00401AA6		       jge     short loc_401AAC
.text:00401AA8		       test    edx, edx
.text:00401AAA		       jnz     short loc_401A9D
.text:00401AAC
.text:00401AAC loc_401AAC:			       ; CODE XREF: sub_401A53+53j
.text:00401AAC					       ; sub_401A53+11Dj ...
.text:00401AAC		       test    edx, edx
.text:00401AAE		       jnz     short loc_401AC2
.text:00401AB0		       mov     [edi], ecx
.text:00401AB2		       test    esi, esi
.text:00401AB4		       jz      loc_401B88
.text:00401ABA		       shl     [ebp+var_28], 1
.text:00401ABD		       lea     esi, [esi+0]
.text:00401AC0		       jmp     short loc_401A7C
.text:00401AC2 ; ---------------------------------------------------------------------------
.text:00401AC2
.text:00401AC2 loc_401AC2:			       ; CODE XREF: sub_401A53+5Bj
.text:00401AC2		       mov     esi, [edx+4]
.text:00401AC5		       mov     dword ptr [edx+4], 0
.text:00401ACC		       test    esi, esi
.text:00401ACE		       jz      short loc_401ADB
.text:00401AD0		       mov     edx, esi
.text:00401AD2		       mov     eax, 1
.text:00401AD7		       test    bl, bl
.text:00401AD9		       jnz     short loc_401ADF
.text:00401ADB
.text:00401ADB loc_401ADB:			       ; CODE XREF: sub_401A53+7Bj
.text:00401ADB		       mov     edx, esi
.text:00401ADD		       jmp     short loc_401AEE
.text:00401ADF ; ---------------------------------------------------------------------------
.text:00401ADF
.text:00401ADF loc_401ADF:			       ; CODE XREF: sub_401A53+86j
.text:00401ADF					       ; sub_401A53+99j
.text:00401ADF		       add     eax, 1
.text:00401AE2		       mov     edx, [edx+4]
.text:00401AE5		       cmp     eax, [ebp+var_28]
.text:00401AE8		       jge     short loc_401AEE
.text:00401AEA		       test    edx, edx
.text:00401AEC		       jnz     short loc_401ADF
.text:00401AEE
.text:00401AEE loc_401AEE:			       ; CODE XREF: sub_401A53+8Aj
.text:00401AEE					       ; sub_401A53+95j
.text:00401AEE		       mov     [ebp+var_24], 0
.text:00401AF5		       test    edx, edx
.text:00401AF7		       jz      short loc_401B06
.text:00401AF9		       mov     eax, [edx+4]
.text:00401AFC		       mov     [ebp+var_24], eax
.text:00401AFF		       mov     dword ptr [edx+4], 0
.text:00401B06
.text:00401B06 loc_401B06:			       ; CODE XREF: sub_401A53+A4j
.text:00401B06		       mov     ebx, ecx
.text:00401B08		       jmp     short loc_401B2C
.text:00401B0A ; ---------------------------------------------------------------------------
.text:00401B0A
.text:00401B0A loc_401B0A:			       ; CODE XREF: sub_401A53+E2j
.text:00401B0A		       mov     [esp+30h+var_2C], esi
.text:00401B0E		       mov     [esp+30h+var_30], ebx
.text:00401B11		       call    sub_4011A0
.text:00401B16		       test    eax, eax
.text:00401B18		       jns     short loc_401B24
.text:00401B1A		       mov     [edi], ebx
.text:00401B1C		       lea     edi, [ebx+4]
.text:00401B1F		       mov     ebx, [ebx+4]
.text:00401B22		       jmp     short loc_401B2C
.text:00401B24 ; ---------------------------------------------------------------------------
.text:00401B24
.text:00401B24 loc_401B24:			       ; CODE XREF: sub_401A53+C5j
.text:00401B24		       mov     [edi], esi
.text:00401B26		       lea     edi, [esi+4]
.text:00401B29		       mov     esi, [esi+4]
.text:00401B2C
.text:00401B2C loc_401B2C:			       ; CODE XREF: sub_401A53+B5j
.text:00401B2C					       ; sub_401A53+CFj
.text:00401B2C		       test    ebx, ebx
.text:00401B2E		       setnz   al
.text:00401B31		       jz      short loc_401B37
.text:00401B33		       test    esi, esi
.text:00401B35		       jnz     short loc_401B0A
.text:00401B37
.text:00401B37 loc_401B37:			       ; CODE XREF: sub_401A53+DEj
.text:00401B37		       mov     edx, edi
.text:00401B39		       mov     [ebp+var_20], esi
.text:00401B3C		       test    al, al
.text:00401B3E		       jz      short loc_401B44
.text:00401B40		       mov     [edx], ebx
.text:00401B42		       jmp     short loc_401B4F
.text:00401B44 ; ---------------------------------------------------------------------------
.text:00401B44
.text:00401B44 loc_401B44:			       ; CODE XREF: sub_401A53+EBj
.text:00401B44		       mov     eax, [ebp+var_20]
.text:00401B47		       mov     [edi], eax
.text:00401B49		       test    esi, esi
.text:00401B4B		       jz      short loc_401B59
.text:00401B4D		       mov     ebx, esi
.text:00401B4F
.text:00401B4F loc_401B4F:			       ; CODE XREF: sub_401A53+EFj
.text:00401B4F					       ; sub_401A53+104j
.text:00401B4F		       lea     edi, [ebx+4]
.text:00401B52		       mov     ebx, [ebx+4]
.text:00401B55		       test    ebx, ebx
.text:00401B57		       jnz     short loc_401B4F
.text:00401B59
.text:00401B59 loc_401B59:			       ; CODE XREF: sub_401A53+F8j
.text:00401B59		       cmp     [ebp+var_24], 0
.text:00401B5D		       jz      short loc_401BB0
.text:00401B5F		       mov     edx, [ebp+var_24]
.text:00401B62		       mov     ecx, edx
.text:00401B64		       mov     esi, 1
.text:00401B69
.text:00401B69 loc_401B69:			       ; CODE XREF: sub_401A53+45j
.text:00401B69		       cmp     [ebp+var_28], 1
.text:00401B6D		       setnle  bl
.text:00401B70		       jle     loc_401AAC
.text:00401B76		       mov     eax, 1
.text:00401B7B		       test    edx, edx
.text:00401B7D		       jnz     loc_401A9D
.text:00401B83		       jmp     loc_401AAC
.text:00401B88 ; ---------------------------------------------------------------------------
.text:00401B88
.text:00401B88 loc_401B88:			       ; CODE XREF: sub_401A53+61j
.text:00401B88		       mov     ebx, [ebp+var_10]
.text:00401B8B		       test    ebx, ebx
.text:00401B8D		       lea     esi, [esi+0]
.text:00401B90		       jz      short loc_401BA9
.text:00401B92		       mov     eax, ebx
.text:00401B94		       mov     ecx, 0
.text:00401B99
.text:00401B99 loc_401B99:			       ; CODE XREF: sub_401A53+154j
.text:00401B99		       mov     [eax+8],	ecx
.text:00401B9C		       mov     edx, [eax+4]
.text:00401B9F		       test    edx, edx
.text:00401BA1		       jz      short loc_401BA9
.text:00401BA3		       mov     ecx, eax
.text:00401BA5		       mov     eax, edx
.text:00401BA7		       jmp     short loc_401B99
.text:00401BA9 ; ---------------------------------------------------------------------------
.text:00401BA9
.text:00401BA9 loc_401BA9:			       ; CODE XREF: sub_401A53+13Dj
.text:00401BA9					       ; sub_401A53+14Ej ...
.text:00401BA9		       mov     edx, [ebp+arg_0]
.text:00401BAC		       mov     [edx], ebx
.text:00401BAE		       jmp     short loc_401BBD
.text:00401BB0 ; ---------------------------------------------------------------------------
.text:00401BB0
.text:00401BB0 loc_401BB0:			       ; CODE XREF: sub_401A53+10Aj
.text:00401BB0		       shl     [ebp+var_28], 1
.text:00401BB3		       jmp     loc_401A7C
.text:00401BB8 ; ---------------------------------------------------------------------------
.text:00401BB8
.text:00401BB8 loc_401BB8:			       ; CODE XREF: sub_401A53+35j
.text:00401BB8		       mov     ebx, [ebp+var_10]
.text:00401BBB		       jmp     short loc_401BA9
.text:00401BBD ; ---------------------------------------------------------------------------
.text:00401BBD
.text:00401BBD loc_401BBD:			       ; CODE XREF: sub_401A53+10j
.text:00401BBD					       ; sub_401A53+15Bj
.text:00401BBD		       add     esp, 24h
.text:00401BC0		       pop     ebx
.text:00401BC1		       pop     esi
.text:00401BC2		       pop     edi
.text:00401BC3		       pop     ebp
.text:00401BC4		       retn
.text:00401BC4 sub_401A53      endp
.text:00401BC4
.text:00401BC5
.text:00401BC5 ; =============== S U B R O U T I N E =======================================
.text:00401BC5
.text:00401BC5 ; Attributes: bp-based frame
.text:00401BC5
.text:00401BC5 sub_401BC5      proc near	       ; CODE XREF: sub_4059BC+51p
.text:00401BC5
.text:00401BC5 arg_0	       = dword ptr  8
.text:00401BC5
.text:00401BC5		       push    ebp
.text:00401BC6		       mov     ebp, esp
.text:00401BC8		       push    ebx
.text:00401BC9		       mov     ebx, [ebp+arg_0]
.text:00401BCC		       mov     edx, ebx
.text:00401BCE		       mov     ecx, 0
.text:00401BD3		       mov     eax, 0
.text:00401BD8		       test    ebx, ebx
.text:00401BDA		       jz      short loc_401C02
.text:00401BDC
.text:00401BDC loc_401BDC:			       ; CODE XREF: sub_401BC5+23j
.text:00401BDC		       mov     eax, [edx+8]
.text:00401BDF		       add     ecx, 1
.text:00401BE2		       test    eax, eax
.text:00401BE4		       jz      short loc_401BEA
.text:00401BE6		       mov     edx, eax
.text:00401BE8		       jmp     short loc_401BDC
.text:00401BEA ; ---------------------------------------------------------------------------
.text:00401BEA
.text:00401BEA loc_401BEA:			       ; CODE XREF: sub_401BC5+1Fj
.text:00401BEA		       mov     edx, [ebx+4]
.text:00401BED		       mov     eax, 0
.text:00401BF2		       test    edx, edx
.text:00401BF4		       jz      short loc_401C00
.text:00401BF6
.text:00401BF6 loc_401BF6:			       ; CODE XREF: sub_401BC5+39j
.text:00401BF6		       mov     edx, [edx+4]
.text:00401BF9		       add     eax, 1
.text:00401BFC		       test    edx, edx
.text:00401BFE		       jnz     short loc_401BF6
.text:00401C00
.text:00401C00 loc_401C00:			       ; CODE XREF: sub_401BC5+2Fj
.text:00401C00		       add     eax, ecx
.text:00401C02
.text:00401C02 loc_401C02:			       ; CODE XREF: sub_401BC5+15j
.text:00401C02		       pop     ebx
.text:00401C03		       pop     ebp
.text:00401C04		       retn
.text:00401C04 sub_401BC5      endp
.text:00401C04
.text:00401C05
.text:00401C05 ; =============== S U B R O U T I N E =======================================
.text:00401C05
.text:00401C05 ; Attributes: bp-based frame
.text:00401C05
.text:00401C05 sub_401C05      proc near	       ; CODE XREF: sub_4059BC+C0Ap
.text:00401C05
.text:00401C05 arg_0	       = dword ptr  8
.text:00401C05
.text:00401C05		       push    ebp
.text:00401C06		       mov     ebp, esp
.text:00401C08		       push    ebx
.text:00401C09		       mov     eax, [ebp+arg_0]
.text:00401C0C		       mov     ecx, [eax]
.text:00401C0E		       test    ecx, ecx
.text:00401C10		       jz      short loc_401C3F
.text:00401C12		       mov     ebx, [ecx+4]
.text:00401C15
.text:00401C15 loc_401C15:			       ; CODE XREF: sub_401C05+20j
.text:00401C15		       mov     edx, [ecx+4]
.text:00401C18		       mov     eax, [ecx+8]
.text:00401C1B		       mov     [ecx+4],	eax
.text:00401C1E		       mov     [ecx+8],	edx
.text:00401C21		       mov     ecx, eax
.text:00401C23		       test    eax, eax
.text:00401C25		       jnz     short loc_401C15
.text:00401C27		       test    ebx, ebx
.text:00401C29		       jz      short loc_401C3F
.text:00401C2B
.text:00401C2B loc_401C2B:			       ; CODE XREF: sub_401C05+38j
.text:00401C2B		       mov     edx, [ebx+4]
.text:00401C2E		       mov     eax, [ebx+8]
.text:00401C31		       mov     [ebx+4],	eax
.text:00401C34		       mov     [ebx+8],	edx
.text:00401C37		       test    edx, edx
.text:00401C39		       jz      short loc_401C3F
.text:00401C3B		       mov     ebx, edx
.text:00401C3D		       jmp     short loc_401C2B
.text:00401C3F ; ---------------------------------------------------------------------------
.text:00401C3F
.text:00401C3F loc_401C3F:			       ; CODE XREF: sub_401C05+Bj
.text:00401C3F					       ; sub_401C05+24j ...
.text:00401C3F		       pop     ebx
.text:00401C40		       pop     ebp
.text:00401C41		       retn
.text:00401C41 sub_401C05      endp
.text:00401C41
.text:00401C42 ; ---------------------------------------------------------------------------
.text:00401C42		       push    ebp
.text:00401C43		       mov     ebp, esp
.text:00401C45		       mov     eax, [ebp+8]
.text:00401C48		       mov     eax, [eax]
.text:00401C4A		       pop     ebp
.text:00401C4B		       retn
.text:00401C4C
.text:00401C4C ; =============== S U B R O U T I N E =======================================
.text:00401C4C
.text:00401C4C ; Attributes: bp-based frame
.text:00401C4C
.text:00401C4C sub_401C4C      proc near	       ; CODE XREF: sub_401CEE+2Bp
.text:00401C4C					       ; sub_4059BC+E13p ...
.text:00401C4C
.text:00401C4C var_18	       = dword ptr -18h
.text:00401C4C var_14	       = dword ptr -14h
.text:00401C4C arg_0	       = dword ptr  8
.text:00401C4C
.text:00401C4C		       push    ebp
.text:00401C4D		       mov     ebp, esp
.text:00401C4F		       push    edi
.text:00401C50		       push    esi
.text:00401C51		       push    ebx
.text:00401C52		       sub     esp, 0Ch
.text:00401C55		       mov     eax, [ebp+arg_0]
.text:00401C58		       mov     ebx, [eax+4]
.text:00401C5B		       mov     dword ptr [eax+4], 0
.text:00401C62		       mov     edi, [eax+0Ch]
.text:00401C65		       test    edi, edi
.text:00401C67		       jz      short loc_401C88
.text:00401C69		       mov     esi, [eax+10h]
.text:00401C6C		       test    ebx, ebx
.text:00401C6E		       jnz     short loc_401C79
.text:00401C70		       jmp     short loc_401C9D
.text:00401C72 ; ---------------------------------------------------------------------------
.text:00401C72
.text:00401C72 loc_401C72:			       ; CODE XREF: sub_401C4C+38j
.text:00401C72		       mov     ebx, [ebx+8]
.text:00401C75		       test    ebx, ebx
.text:00401C77		       jz      short loc_401C9D
.text:00401C79
.text:00401C79 loc_401C79:			       ; CODE XREF: sub_401C4C+22j
.text:00401C79		       mov     [esp+18h+var_14], ebx
.text:00401C7D		       mov     [esp+18h+var_18], esi
.text:00401C80		       call    edi
.text:00401C82		       test    eax, eax
.text:00401C84		       jnz     short loc_401C72
.text:00401C86		       jmp     short loc_401C92
.text:00401C88 ; ---------------------------------------------------------------------------
.text:00401C88
.text:00401C88 loc_401C88:			       ; CODE XREF: sub_401C4C+1Bj
.text:00401C88		       test    ebx, ebx
.text:00401C8A		       lea     esi, [esi+0]
.text:00401C90		       jz      short loc_401C9D
.text:00401C92
.text:00401C92 loc_401C92:			       ; CODE XREF: sub_401C4C+3Aj
.text:00401C92		       mov     eax, [ebx+8]
.text:00401C95		       mov     edx, [ebp+arg_0]
.text:00401C98		       mov     [edx+4],	eax
.text:00401C9B		       jmp     short loc_401CDF
.text:00401C9D ; ---------------------------------------------------------------------------
.text:00401C9D
.text:00401C9D loc_401C9D:			       ; CODE XREF: sub_401C4C+24j
.text:00401C9D					       ; sub_401C4C+2Bj ...
.text:00401C9D		       mov     eax, [ebp+arg_0]
.text:00401CA0		       mov     ebx, [eax+8]
.text:00401CA3		       mov     dword ptr [eax+8], 0
.text:00401CAA		       mov     edi, [eax+0Ch]
.text:00401CAD		       test    edi, edi
.text:00401CAF		       jz      short loc_401CD2
.text:00401CB1		       mov     esi, [eax+10h]
.text:00401CB4		       test    ebx, ebx
.text:00401CB6		       jnz     short loc_401CC2
.text:00401CB8		       jmp     short loc_401CDF
.text:00401CBA ; ---------------------------------------------------------------------------
.text:00401CBA
.text:00401CBA loc_401CBA:			       ; CODE XREF: sub_401C4C+81j
.text:00401CBA		       mov     ebx, [ebx+4]
.text:00401CBD		       test    ebx, ebx
.text:00401CBF		       nop
.text:00401CC0		       jz      short loc_401CDF
.text:00401CC2
.text:00401CC2 loc_401CC2:			       ; CODE XREF: sub_401C4C+6Aj
.text:00401CC2		       mov     [esp+18h+var_14], esi
.text:00401CC6		       mov     [esp+18h+var_18], ebx
.text:00401CC9		       call    edi
.text:00401CCB		       test    eax, eax
.text:00401CCD		       jnz     short loc_401CBA
.text:00401CCF		       nop
.text:00401CD0		       jmp     short loc_401CD6
.text:00401CD2 ; ---------------------------------------------------------------------------
.text:00401CD2
.text:00401CD2 loc_401CD2:			       ; CODE XREF: sub_401C4C+63j
.text:00401CD2		       test    ebx, ebx
.text:00401CD4		       jz      short loc_401CDF
.text:00401CD6
.text:00401CD6 loc_401CD6:			       ; CODE XREF: sub_401C4C+84j
.text:00401CD6		       mov     eax, [ebx+4]
.text:00401CD9		       mov     edx, [ebp+arg_0]
.text:00401CDC		       mov     [edx+8],	eax
.text:00401CDF
.text:00401CDF loc_401CDF:			       ; CODE XREF: sub_401C4C+4Fj
.text:00401CDF					       ; sub_401C4C+6Cj ...
.text:00401CDF		       mov     eax, [ebp+arg_0]
.text:00401CE2		       mov     [eax], ebx
.text:00401CE4		       mov     eax, ebx
.text:00401CE6		       add     esp, 0Ch
.text:00401CE9		       pop     ebx
.text:00401CEA		       pop     esi
.text:00401CEB		       pop     edi
.text:00401CEC		       pop     ebp
.text:00401CED		       retn
.text:00401CED sub_401C4C      endp
.text:00401CED
.text:00401CEE
.text:00401CEE ; =============== S U B R O U T I N E =======================================
.text:00401CEE
.text:00401CEE ; Attributes: bp-based frame
.text:00401CEE
.text:00401CEE sub_401CEE      proc near	       ; CODE XREF: sub_401D20+23p
.text:00401CEE					       ; sub_4059BC+EF9p
.text:00401CEE
.text:00401CEE var_8	       = dword ptr -8
.text:00401CEE arg_0	       = dword ptr  8
.text:00401CEE arg_4	       = dword ptr  0Ch
.text:00401CEE arg_8	       = dword ptr  10h
.text:00401CEE arg_C	       = dword ptr  14h
.text:00401CEE
.text:00401CEE		       push    ebp
.text:00401CEF		       mov     ebp, esp
.text:00401CF1		       sub     esp, 8
.text:00401CF4		       mov     edx, [ebp+arg_0]
.text:00401CF7		       mov     ecx, [ebp+arg_4]
.text:00401CFA		       mov     eax, [ebp+arg_8]
.text:00401CFD		       mov     [edx+0Ch], eax
.text:00401D00		       mov     eax, [ebp+arg_C]
.text:00401D03		       mov     [edx+10h], eax
.text:00401D06		       mov     [edx+4],	ecx
.text:00401D09		       mov     [edx+8],	ecx
.text:00401D0C		       test    ecx, ecx
.text:00401D0E		       jz      short loc_401D16
.text:00401D10		       mov     eax, [ecx+4]
.text:00401D13		       mov     [edx+8],	eax
.text:00401D16
.text:00401D16 loc_401D16:			       ; CODE XREF: sub_401CEE+20j
.text:00401D16		       mov     [esp+8+var_8], edx
.text:00401D19		       call    sub_401C4C
.text:00401D1E		       leave
.text:00401D1F		       retn
.text:00401D1F sub_401CEE      endp
.text:00401D1F
.text:00401D20
.text:00401D20 ; =============== S U B R O U T I N E =======================================
.text:00401D20
.text:00401D20 ; Attributes: bp-based frame
.text:00401D20
.text:00401D20 sub_401D20      proc near	       ; CODE XREF: sub_4059BC+DC7p
.text:00401D20					       ; sub_4059BC+E49p ...
.text:00401D20
.text:00401D20 var_18	       = dword ptr -18h
.text:00401D20 var_14	       = dword ptr -14h
.text:00401D20 var_10	       = dword ptr -10h
.text:00401D20 var_C	       = dword ptr -0Ch
.text:00401D20 arg_0	       = dword ptr  8
.text:00401D20 arg_4	       = dword ptr  0Ch
.text:00401D20
.text:00401D20		       push    ebp
.text:00401D21		       mov     ebp, esp
.text:00401D23		       sub     esp, 18h
.text:00401D26		       mov     [esp+18h+var_C],	0
.text:00401D2E		       mov     [esp+18h+var_10], 0
.text:00401D36		       mov     eax, [ebp+arg_4]
.text:00401D39		       mov     [esp+18h+var_14], eax
.text:00401D3D		       mov     eax, [ebp+arg_0]
.text:00401D40		       mov     [esp+18h+var_18], eax
.text:00401D43		       call    sub_401CEE
.text:00401D48		       leave
.text:00401D49		       retn
.text:00401D49 sub_401D20      endp
.text:00401D49
.text:00401D4A
.text:00401D4A ; =============== S U B R O U T I N E =======================================
.text:00401D4A
.text:00401D4A ; Attributes: bp-based frame
.text:00401D4A
.text:00401D4A sub_401D4A      proc near	       ; CODE XREF: sub_40502E+3DEp
.text:00401D4A					       ; sub_40502E+426p
.text:00401D4A
.text:00401D4A var_10	       = dword ptr -10h
.text:00401D4A var_C	       = dword ptr -0Ch
.text:00401D4A arg_0	       = dword ptr  8
.text:00401D4A arg_4	       = dword ptr  0Ch
.text:00401D4A
.text:00401D4A		       push    ebp
.text:00401D4B		       mov     ebp, esp
.text:00401D4D		       push    esi
.text:00401D4E		       push    ebx
.text:00401D4F		       sub     esp, 8
.text:00401D52		       mov     eax, [ebp+arg_0]
.text:00401D55		       mov     esi, [ebp+arg_4]
.text:00401D58		       mov     ebx, eax
.text:00401D5A		       test    eax, eax
.text:00401D5C		       jnz     short loc_401D67
.text:00401D5E		       jmp     short loc_401DA2
.text:00401D60 ; ---------------------------------------------------------------------------
.text:00401D60
.text:00401D60 loc_401D60:			       ; CODE XREF: sub_401D4A+2Bj
.text:00401D60		       mov     ebx, [ebx+4]
.text:00401D63		       test    ebx, ebx
.text:00401D65		       jz      short loc_401DA2
.text:00401D67
.text:00401D67 loc_401D67:			       ; CODE XREF: sub_401D4A+12j
.text:00401D67		       mov     [esp+10h+var_C],	esi
.text:00401D6B		       mov     [esp+10h+var_10], ebx
.text:00401D6E		       call    sub_4011A0
.text:00401D73		       test    eax, eax
.text:00401D75		       js      short loc_401D60
.text:00401D77		       test    ebx, ebx
.text:00401D79		       jz      short loc_401DA2
.text:00401D7B		       cmp     esi, ebx
.text:00401D7D		       lea     esi, [esi+0]
.text:00401D80		       jnz     short loc_401D92
.text:00401D82		       jmp     short loc_401DA2
.text:00401D84 ; ---------------------------------------------------------------------------
.text:00401D84
.text:00401D84 loc_401D84:			       ; CODE XREF: sub_401D4A+56j
.text:00401D84		       mov     ebx, [ebx+4]
.text:00401D87		       test    ebx, ebx
.text:00401D89		       jz      short loc_401DA2
.text:00401D8B		       cmp     esi, ebx
.text:00401D8D		       lea     esi, [esi+0]
.text:00401D90		       jz      short loc_401DA2
.text:00401D92
.text:00401D92 loc_401D92:			       ; CODE XREF: sub_401D4A+36j
.text:00401D92		       mov     [esp+10h+var_C],	esi
.text:00401D96		       mov     [esp+10h+var_10], ebx
.text:00401D99		       call    sub_4011A0
.text:00401D9E		       test    eax, eax
.text:00401DA0		       jz      short loc_401D84
.text:00401DA2
.text:00401DA2 loc_401DA2:			       ; CODE XREF: sub_401D4A+14j
.text:00401DA2					       ; sub_401D4A+1Bj ...
.text:00401DA2		       cmp     ebx, esi
.text:00401DA4		       setz    al
.text:00401DA7		       movzx   eax, al
.text:00401DAA		       add     esp, 8
.text:00401DAD		       pop     ebx
.text:00401DAE		       pop     esi
.text:00401DAF		       pop     ebp
.text:00401DB0		       retn
.text:00401DB0 sub_401D4A      endp
.text:00401DB0
.text:00401DB1
.text:00401DB1 ; =============== S U B R O U T I N E =======================================
.text:00401DB1
.text:00401DB1 ; Attributes: bp-based frame
.text:00401DB1
.text:00401DB1 sub_401DB1      proc near	       ; CODE XREF: sub_40502E+33Dp
.text:00401DB1					       ; sub_40502E+388p ...
.text:00401DB1
.text:00401DB1 var_10	       = dword ptr -10h
.text:00401DB1 var_C	       = dword ptr -0Ch
.text:00401DB1 arg_0	       = dword ptr  8
.text:00401DB1 arg_4	       = dword ptr  0Ch
.text:00401DB1
.text:00401DB1		       push    ebp
.text:00401DB2		       mov     ebp, esp
.text:00401DB4		       push    esi
.text:00401DB5		       push    ebx
.text:00401DB6		       sub     esp, 8
.text:00401DB9		       mov     eax, [ebp+arg_0]
.text:00401DBC		       mov     esi, [ebp+arg_4]
.text:00401DBF		       mov     ebx, eax
.text:00401DC1		       test    eax, eax
.text:00401DC3		       jnz     short loc_401DCE
.text:00401DC5		       jmp     short loc_401DE4
.text:00401DC7 ; ---------------------------------------------------------------------------
.text:00401DC7
.text:00401DC7 loc_401DC7:			       ; CODE XREF: sub_401DB1+2Bj
.text:00401DC7		       mov     ebx, [ebx+4]
.text:00401DCA		       test    ebx, ebx
.text:00401DCC		       jz      short loc_401DE4
.text:00401DCE
.text:00401DCE loc_401DCE:			       ; CODE XREF: sub_401DB1+12j
.text:00401DCE		       mov     [esp+10h+var_C],	esi
.text:00401DD2		       mov     [esp+10h+var_10], ebx
.text:00401DD5		       call    sub_4011A0
.text:00401DDA		       test    eax, eax
.text:00401DDC		       js      short loc_401DC7
.text:00401DDE		       mov     edx, ebx
.text:00401DE0		       test    eax, eax
.text:00401DE2		       jz      short loc_401DE9
.text:00401DE4
.text:00401DE4 loc_401DE4:			       ; CODE XREF: sub_401DB1+14j
.text:00401DE4					       ; sub_401DB1+1Bj
.text:00401DE4		       mov     edx, 0
.text:00401DE9
.text:00401DE9 loc_401DE9:			       ; CODE XREF: sub_401DB1+31j
.text:00401DE9		       mov     eax, edx
.text:00401DEB		       add     esp, 8
.text:00401DEE		       pop     ebx
.text:00401DEF		       pop     esi
.text:00401DF0		       pop     ebp
.text:00401DF1		       retn
.text:00401DF1 sub_401DB1      endp
.text:00401DF1
.text:00401DF2
.text:00401DF2 ; =============== S U B R O U T I N E =======================================
.text:00401DF2
.text:00401DF2 ; Attributes: bp-based frame
.text:00401DF2
.text:00401DF2 sub_401DF2      proc near	       ; CODE XREF: sub_40502E+56Bp
.text:00401DF2
.text:00401DF2 var_14	       = dword ptr -14h
.text:00401DF2 var_10	       = dword ptr -10h
.text:00401DF2 arg_0	       = dword ptr  8
.text:00401DF2 arg_4	       = dword ptr  0Ch
.text:00401DF2 arg_8	       = dword ptr  10h
.text:00401DF2
.text:00401DF2		       push    ebp
.text:00401DF3		       mov     ebp, esp
.text:00401DF5		       push    edi
.text:00401DF6		       push    esi
.text:00401DF7		       push    ebx
.text:00401DF8		       sub     esp, 8
.text:00401DFB		       mov     eax, [ebp+arg_0]
.text:00401DFE		       mov     edi, [ebp+arg_4]
.text:00401E01		       mov     ebx, [eax]
.text:00401E03		       mov     esi, eax
.text:00401E05		       test    ebx, ebx
.text:00401E07		       jnz     short loc_401E15
.text:00401E09		       jmp     short loc_401E52
.text:00401E0B ; ---------------------------------------------------------------------------
.text:00401E0B
.text:00401E0B loc_401E0B:			       ; CODE XREF: sub_401DF2+31j
.text:00401E0B		       lea     esi, [ebx+4]
.text:00401E0E		       mov     ebx, [ebx+4]
.text:00401E11		       test    ebx, ebx
.text:00401E13		       jz      short loc_401E29
.text:00401E15
.text:00401E15 loc_401E15:			       ; CODE XREF: sub_401DF2+15j
.text:00401E15		       mov     [esp+14h+var_10], edi
.text:00401E19		       mov     [esp+14h+var_14], ebx
.text:00401E1C		       call    sub_4011A0
.text:00401E21		       test    eax, eax
.text:00401E23		       js      short loc_401E0B
.text:00401E25		       test    eax, eax
.text:00401E27		       jz      short loc_401E39
.text:00401E29
.text:00401E29 loc_401E29:			       ; CODE XREF: sub_401DF2+21j
.text:00401E29					       ; sub_401DF2+62j
.text:00401E29		       mov     [edi+4],	ebx
.text:00401E2C		       mov     [esi], edi
.text:00401E2E		       mov     eax, [ebp+arg_8]
.text:00401E31		       mov     dword ptr [eax],	0
.text:00401E37		       jmp     short loc_401E3E
.text:00401E39 ; ---------------------------------------------------------------------------
.text:00401E39
.text:00401E39 loc_401E39:			       ; CODE XREF: sub_401DF2+35j
.text:00401E39		       mov     eax, [ebp+arg_8]
.text:00401E3C		       mov     [eax], ebx
.text:00401E3E
.text:00401E3E loc_401E3E:			       ; CODE XREF: sub_401DF2+45j
.text:00401E3E		       mov     edx, [ebp+arg_8]
.text:00401E41		       cmp     dword ptr [edx],	0
.text:00401E44		       setz    al
.text:00401E47		       movzx   eax, al
.text:00401E4A		       add     esp, 8
.text:00401E4D		       pop     ebx
.text:00401E4E		       pop     esi
.text:00401E4F		       pop     edi
.text:00401E50		       pop     ebp
.text:00401E51		       retn
.text:00401E52 ; ---------------------------------------------------------------------------
.text:00401E52
.text:00401E52 loc_401E52:			       ; CODE XREF: sub_401DF2+17j
.text:00401E52		       mov     esi, eax
.text:00401E54		       jmp     short loc_401E29
.text:00401E54 sub_401DF2      endp
.text:00401E54
.text:00401E56
.text:00401E56 ; =============== S U B R O U T I N E =======================================
.text:00401E56
.text:00401E56 ; Attributes: bp-based frame
.text:00401E56
.text:00401E56 sub_401E56      proc near	       ; CODE XREF: sub_40502E+90p
.text:00401E56					       ; sub_40502E+713p ...
.text:00401E56
.text:00401E56 var_14	       = dword ptr -14h
.text:00401E56 var_10	       = dword ptr -10h
.text:00401E56 arg_0	       = dword ptr  8
.text:00401E56 arg_4	       = dword ptr  0Ch
.text:00401E56
.text:00401E56		       push    ebp
.text:00401E57		       mov     ebp, esp
.text:00401E59		       push    edi
.text:00401E5A		       push    esi
.text:00401E5B		       push    ebx
.text:00401E5C		       sub     esp, 8
.text:00401E5F		       mov     eax, [ebp+arg_0]
.text:00401E62		       mov     edi, [ebp+arg_4]
.text:00401E65		       mov     ebx, [eax]
.text:00401E67		       mov     esi, eax
.text:00401E69		       test    ebx, ebx
.text:00401E6B		       jnz     short loc_401E79
.text:00401E6D		       jmp     short loc_401E89
.text:00401E6F ; ---------------------------------------------------------------------------
.text:00401E6F
.text:00401E6F loc_401E6F:			       ; CODE XREF: sub_401E56+31j
.text:00401E6F		       lea     esi, [ebx+4]
.text:00401E72		       mov     ebx, [ebx+4]
.text:00401E75		       test    ebx, ebx
.text:00401E77		       jz      short loc_401E89
.text:00401E79
.text:00401E79 loc_401E79:			       ; CODE XREF: sub_401E56+15j
.text:00401E79		       mov     [esp+14h+var_10], edi
.text:00401E7D		       mov     [esp+14h+var_14], ebx
.text:00401E80		       call    sub_4011A0
.text:00401E85		       test    eax, eax
.text:00401E87		       js      short loc_401E6F
.text:00401E89
.text:00401E89 loc_401E89:			       ; CODE XREF: sub_401E56+17j
.text:00401E89					       ; sub_401E56+21j
.text:00401E89		       mov     [edi+4],	ebx
.text:00401E8C		       mov     [esi], edi
.text:00401E8E		       add     esp, 8
.text:00401E91		       pop     ebx
.text:00401E92		       pop     esi
.text:00401E93		       pop     edi
.text:00401E94		       pop     ebp
.text:00401E95		       retn
.text:00401E95 sub_401E56      endp
.text:00401E95
.text:00401E96
.text:00401E96 ; =============== S U B R O U T I N E =======================================
.text:00401E96
.text:00401E96 ; Attributes: bp-based frame
.text:00401E96
.text:00401E96 sub_401E96      proc near	       ; CODE XREF: sub_40502E+656p
.text:00401E96
.text:00401E96 var_14	       = dword ptr -14h
.text:00401E96 var_10	       = dword ptr -10h
.text:00401E96 arg_0	       = dword ptr  8
.text:00401E96 arg_4	       = dword ptr  0Ch
.text:00401E96 arg_8	       = dword ptr  10h
.text:00401E96
.text:00401E96		       push    ebp
.text:00401E97		       mov     ebp, esp
.text:00401E99		       push    edi
.text:00401E9A		       push    esi
.text:00401E9B		       push    ebx
.text:00401E9C		       sub     esp, 8
.text:00401E9F		       mov     eax, [ebp+arg_0]
.text:00401EA2		       mov     edi, [ebp+arg_4]
.text:00401EA5		       mov     ebx, [eax]
.text:00401EA7		       mov     esi, eax
.text:00401EA9		       test    ebx, ebx
.text:00401EAB		       jnz     short loc_401EB9
.text:00401EAD		       jmp     short loc_401EDB
.text:00401EAF ; ---------------------------------------------------------------------------
.text:00401EAF
.text:00401EAF loc_401EAF:			       ; CODE XREF: sub_401E96+31j
.text:00401EAF		       lea     esi, [ebx+4]
.text:00401EB2		       mov     ebx, [ebx+4]
.text:00401EB5		       test    ebx, ebx
.text:00401EB7		       jz      short loc_401EC9
.text:00401EB9
.text:00401EB9 loc_401EB9:			       ; CODE XREF: sub_401E96+15j
.text:00401EB9		       mov     [esp+14h+var_10], edi
.text:00401EBD		       mov     [esp+14h+var_14], ebx
.text:00401EC0		       call    sub_4011A0
.text:00401EC5		       test    eax, eax
.text:00401EC7		       js      short loc_401EAF
.text:00401EC9
.text:00401EC9 loc_401EC9:			       ; CODE XREF: sub_401E96+21j
.text:00401EC9		       test    eax, eax
.text:00401ECB		       jnz     short loc_401EDB
.text:00401ECD		       mov     eax, [ebp+arg_8]
.text:00401ED0		       mov     [eax], ebx
.text:00401ED2		       mov     eax, [esi]
.text:00401ED4		       mov     eax, [eax+4]
.text:00401ED7		       mov     [esi], eax
.text:00401ED9		       jmp     short loc_401EE4
.text:00401EDB ; ---------------------------------------------------------------------------
.text:00401EDB
.text:00401EDB loc_401EDB:			       ; CODE XREF: sub_401E96+17j
.text:00401EDB					       ; sub_401E96+35j
.text:00401EDB		       mov     edx, [ebp+arg_8]
.text:00401EDE		       mov     dword ptr [edx],	0
.text:00401EE4
.text:00401EE4 loc_401EE4:			       ; CODE XREF: sub_401E96+43j
.text:00401EE4		       mov     eax, [ebp+arg_8]
.text:00401EE7		       cmp     dword ptr [eax],	0
.text:00401EEA		       setnz   al
.text:00401EED		       movzx   eax, al
.text:00401EF0		       add     esp, 8
.text:00401EF3		       pop     ebx
.text:00401EF4		       pop     esi
.text:00401EF5		       pop     edi
.text:00401EF6		       pop     ebp
.text:00401EF7		       retn
.text:00401EF7 sub_401E96      endp
.text:00401EF7
.text:00401EF8
.text:00401EF8 ; =============== S U B R O U T I N E =======================================
.text:00401EF8
.text:00401EF8 ; Attributes: bp-based frame
.text:00401EF8
.text:00401EF8 sub_401EF8      proc near	       ; CODE XREF: sub_40502E+32p
.text:00401EF8
.text:00401EF8 arg_0	       = dword ptr  8
.text:00401EF8
.text:00401EF8		       push    ebp
.text:00401EF9		       mov     ebp, esp
.text:00401EFB		       mov     edx, [ebp+arg_0]
.text:00401EFE		       mov     eax, 0
.text:00401F03		       test    edx, edx
.text:00401F05		       jz      short loc_401F11
.text:00401F07
.text:00401F07 loc_401F07:			       ; CODE XREF: sub_401EF8+17j
.text:00401F07		       mov     edx, [edx+4]
.text:00401F0A		       add     eax, 1
.text:00401F0D		       test    edx, edx
.text:00401F0F		       jnz     short loc_401F07
.text:00401F11
.text:00401F11 loc_401F11:			       ; CODE XREF: sub_401EF8+Dj
.text:00401F11		       pop     ebp
.text:00401F12		       retn
.text:00401F12 sub_401EF8      endp
.text:00401F12
.text:00401F13
.text:00401F13 ; =============== S U B R O U T I N E =======================================
.text:00401F13
.text:00401F13 ; Attributes: bp-based frame
.text:00401F13
.text:00401F13 sub_401F13      proc near	       ; CODE XREF: sub_40502E+748p
.text:00401F13
.text:00401F13 var_30	       = dword ptr -30h
.text:00401F13 var_2C	       = dword ptr -2Ch
.text:00401F13 var_28	       = dword ptr -28h
.text:00401F13 var_24	       = dword ptr -24h
.text:00401F13 var_20	       = dword ptr -20h
.text:00401F13 var_10	       = dword ptr -10h
.text:00401F13 arg_0	       = dword ptr  8
.text:00401F13
.text:00401F13		       push    ebp
.text:00401F14		       mov     ebp, esp
.text:00401F16		       push    edi
.text:00401F17		       push    esi
.text:00401F18		       push    ebx
.text:00401F19		       sub     esp, 24h
.text:00401F1C		       mov     edx, [ebp+arg_0]
.text:00401F1F		       mov     eax, [edx]
.text:00401F21		       mov     [ebp+var_10], eax
.text:00401F24		       mov     [ebp+var_24], 1
.text:00401F2B
.text:00401F2B loc_401F2B:			       ; CODE XREF: sub_401F13+59j
.text:00401F2B					       ; sub_401F13+134j
.text:00401F2B		       mov     ecx, [ebp+var_10]
.text:00401F2E		       mov     [ebp+var_10], 0
.text:00401F35		       test    ecx, ecx
.text:00401F37		       jz      loc_402034
.text:00401F3D		       mov     edx, ecx
.text:00401F3F		       lea     edi, [ebp+var_10]
.text:00401F42		       mov     esi, 0
.text:00401F47		       jmp     loc_402015
.text:00401F4C ; ---------------------------------------------------------------------------
.text:00401F4C
.text:00401F4C loc_401F4C:			       ; CODE XREF: sub_401F13+46j
.text:00401F4C					       ; sub_401F13+116j
.text:00401F4C		       add     eax, 1
.text:00401F4F		       mov     edx, [edx+4]
.text:00401F52		       cmp     eax, [ebp+var_24]
.text:00401F55		       jge     short loc_401F5B
.text:00401F57		       test    edx, edx
.text:00401F59		       jnz     short loc_401F4C
.text:00401F5B
.text:00401F5B loc_401F5B:			       ; CODE XREF: sub_401F13+42j
.text:00401F5B					       ; sub_401F13+109j ...
.text:00401F5B		       test    edx, edx
.text:00401F5D		       jnz     short loc_401F6E
.text:00401F5F		       mov     [edi], ecx
.text:00401F61		       test    esi, esi
.text:00401F63		       jz      loc_402034
.text:00401F69		       shl     [ebp+var_24], 1
.text:00401F6C		       jmp     short loc_401F2B
.text:00401F6E ; ---------------------------------------------------------------------------
.text:00401F6E
.text:00401F6E loc_401F6E:			       ; CODE XREF: sub_401F13+4Aj
.text:00401F6E		       mov     esi, [edx+4]
.text:00401F71		       mov     dword ptr [edx+4], 0
.text:00401F78		       test    esi, esi
.text:00401F7A		       jz      short loc_401F87
.text:00401F7C		       mov     edx, esi
.text:00401F7E		       mov     eax, 1
.text:00401F83		       test    bl, bl
.text:00401F85		       jnz     short loc_401F8B
.text:00401F87
.text:00401F87 loc_401F87:			       ; CODE XREF: sub_401F13+67j
.text:00401F87		       mov     edx, esi
.text:00401F89		       jmp     short loc_401F9A
.text:00401F8B ; ---------------------------------------------------------------------------
.text:00401F8B
.text:00401F8B loc_401F8B:			       ; CODE XREF: sub_401F13+72j
.text:00401F8B					       ; sub_401F13+85j
.text:00401F8B		       add     eax, 1
.text:00401F8E		       mov     edx, [edx+4]
.text:00401F91		       cmp     eax, [ebp+var_24]
.text:00401F94		       jge     short loc_401F9A
.text:00401F96		       test    edx, edx
.text:00401F98		       jnz     short loc_401F8B
.text:00401F9A
.text:00401F9A loc_401F9A:			       ; CODE XREF: sub_401F13+76j
.text:00401F9A					       ; sub_401F13+81j
.text:00401F9A		       mov     [ebp+var_28], 0
.text:00401FA1		       test    edx, edx
.text:00401FA3		       jz      short loc_401FB2
.text:00401FA5		       mov     eax, [edx+4]
.text:00401FA8		       mov     [ebp+var_28], eax
.text:00401FAB		       mov     dword ptr [edx+4], 0
.text:00401FB2
.text:00401FB2 loc_401FB2:			       ; CODE XREF: sub_401F13+90j
.text:00401FB2		       mov     ebx, ecx
.text:00401FB4		       jmp     short loc_401FD8
.text:00401FB6 ; ---------------------------------------------------------------------------
.text:00401FB6
.text:00401FB6 loc_401FB6:			       ; CODE XREF: sub_401F13+CEj
.text:00401FB6		       mov     [esp+30h+var_2C], esi
.text:00401FBA		       mov     [esp+30h+var_30], ebx
.text:00401FBD		       call    sub_4011A0
.text:00401FC2		       test    eax, eax
.text:00401FC4		       jns     short loc_401FD0
.text:00401FC6		       mov     [edi], ebx
.text:00401FC8		       lea     edi, [ebx+4]
.text:00401FCB		       mov     ebx, [ebx+4]
.text:00401FCE		       jmp     short loc_401FD8
.text:00401FD0 ; ---------------------------------------------------------------------------
.text:00401FD0
.text:00401FD0 loc_401FD0:			       ; CODE XREF: sub_401F13+B1j
.text:00401FD0		       mov     [edi], esi
.text:00401FD2		       lea     edi, [esi+4]
.text:00401FD5		       mov     esi, [esi+4]
.text:00401FD8
.text:00401FD8 loc_401FD8:			       ; CODE XREF: sub_401F13+A1j
.text:00401FD8					       ; sub_401F13+BBj
.text:00401FD8		       test    ebx, ebx
.text:00401FDA		       setnz   al
.text:00401FDD		       jz      short loc_401FE3
.text:00401FDF		       test    esi, esi
.text:00401FE1		       jnz     short loc_401FB6
.text:00401FE3
.text:00401FE3 loc_401FE3:			       ; CODE XREF: sub_401F13+CAj
.text:00401FE3		       mov     [ebp+var_20], esi
.text:00401FE6		       mov     edx, edi
.text:00401FE8		       test    al, al
.text:00401FEA		       jz      short loc_401FF0
.text:00401FEC		       mov     [edx], ebx
.text:00401FEE		       jmp     short loc_401FFB
.text:00401FF0 ; ---------------------------------------------------------------------------
.text:00401FF0
.text:00401FF0 loc_401FF0:			       ; CODE XREF: sub_401F13+D7j
.text:00401FF0		       mov     eax, [ebp+var_20]
.text:00401FF3		       mov     [edi], eax
.text:00401FF5		       test    esi, esi
.text:00401FF7		       jz      short loc_402005
.text:00401FF9		       mov     ebx, esi
.text:00401FFB
.text:00401FFB loc_401FFB:			       ; CODE XREF: sub_401F13+DBj
.text:00401FFB					       ; sub_401F13+F0j
.text:00401FFB		       lea     edi, [ebx+4]
.text:00401FFE		       mov     ebx, [ebx+4]
.text:00402001		       test    ebx, ebx
.text:00402003		       jnz     short loc_401FFB
.text:00402005
.text:00402005 loc_402005:			       ; CODE XREF: sub_401F13+E4j
.text:00402005		       cmp     [ebp+var_28], 0
.text:00402009		       jz      short loc_402044
.text:0040200B		       mov     edx, [ebp+var_28]
.text:0040200E		       mov     ecx, edx
.text:00402010		       mov     esi, 1
.text:00402015
.text:00402015 loc_402015:			       ; CODE XREF: sub_401F13+34j
.text:00402015		       cmp     [ebp+var_24], 1
.text:00402019		       setnle  bl
.text:0040201C		       jle     loc_401F5B
.text:00402022		       mov     eax, 1
.text:00402027		       test    edx, edx
.text:00402029		       jnz     loc_401F4C
.text:0040202F		       jmp     loc_401F5B
.text:00402034 ; ---------------------------------------------------------------------------
.text:00402034
.text:00402034 loc_402034:			       ; CODE XREF: sub_401F13+24j
.text:00402034					       ; sub_401F13+50j
.text:00402034		       mov     eax, [ebp+var_10]
.text:00402037		       mov     edx, [ebp+arg_0]
.text:0040203A		       mov     [edx], eax
.text:0040203C		       add     esp, 24h
.text:0040203F		       pop     ebx
.text:00402040		       pop     esi
.text:00402041		       pop     edi
.text:00402042		       pop     ebp
.text:00402043		       retn
.text:00402044 ; ---------------------------------------------------------------------------
.text:00402044
.text:00402044 loc_402044:			       ; CODE XREF: sub_401F13+F6j
.text:00402044		       shl     [ebp+var_24], 1
.text:00402047		       jmp     loc_401F2B
.text:00402047 sub_401F13      endp
.text:00402047
.text:0040204C ; ---------------------------------------------------------------------------
.text:0040204C		       push    ebp
.text:0040204D		       mov     ebp, esp
.text:0040204F		       mov     eax, [ebp+8]
.text:00402052		       mov     eax, [eax]
.text:00402054		       pop     ebp
.text:00402055		       retn
.text:00402056
.text:00402056 ; =============== S U B R O U T I N E =======================================
.text:00402056
.text:00402056 ; Attributes: bp-based frame
.text:00402056
.text:00402056 sub_402056      proc near	       ; CODE XREF: sub_4020C1+1Ep
.text:00402056					       ; sub_40502E+83Fp ...
.text:00402056
.text:00402056 var_18	       = dword ptr -18h
.text:00402056 var_14	       = dword ptr -14h
.text:00402056 arg_0	       = dword ptr  8
.text:00402056
.text:00402056		       push    ebp
.text:00402057		       mov     ebp, esp
.text:00402059		       push    edi
.text:0040205A		       push    esi
.text:0040205B		       push    ebx
.text:0040205C		       sub     esp, 0Ch
.text:0040205F		       mov     eax, [ebp+arg_0]
.text:00402062		       mov     ebx, [eax+4]
.text:00402065		       mov     dword ptr [eax+4], 0
.text:0040206C		       mov     edi, [eax+8]
.text:0040206F		       test    edi, edi
.text:00402071		       jz      short loc_402098
.text:00402073		       mov     esi, [eax+0Ch]
.text:00402076		       test    ebx, ebx
.text:00402078		       jnz     short loc_402083
.text:0040207A		       jmp     short loc_402098
.text:0040207C ; ---------------------------------------------------------------------------
.text:0040207C
.text:0040207C loc_40207C:			       ; CODE XREF: sub_402056+38j
.text:0040207C		       mov     ebx, [ebx+4]
.text:0040207F		       test    ebx, ebx
.text:00402081		       jz      short loc_402098
.text:00402083
.text:00402083 loc_402083:			       ; CODE XREF: sub_402056+22j
.text:00402083		       mov     [esp+18h+var_14], esi
.text:00402087		       mov     [esp+18h+var_18], ebx
.text:0040208A		       call    edi
.text:0040208C		       test    eax, eax
.text:0040208E		       js      short loc_40207C
.text:00402090		       test    ebx, ebx
.text:00402092		       jz      short loc_402098
.text:00402094		       test    eax, eax
.text:00402096		       jg      short loc_4020B1
.text:00402098
.text:00402098 loc_402098:			       ; CODE XREF: sub_402056+1Bj
.text:00402098					       ; sub_402056+24j ...
.text:00402098		       mov     edx, [ebp+arg_0]
.text:0040209B		       mov     [edx], ebx
.text:0040209D		       test    ebx, ebx
.text:0040209F		       jz      short loc_4020A7
.text:004020A1		       mov     eax, [ebx+4]
.text:004020A4		       mov     [edx+4],	eax
.text:004020A7
.text:004020A7 loc_4020A7:			       ; CODE XREF: sub_402056+49j
.text:004020A7					       ; sub_402056+69j
.text:004020A7		       mov     eax, ebx
.text:004020A9		       add     esp, 0Ch
.text:004020AC		       pop     ebx
.text:004020AD		       pop     esi
.text:004020AE		       pop     edi
.text:004020AF		       pop     ebp
.text:004020B0		       retn
.text:004020B1 ; ---------------------------------------------------------------------------
.text:004020B1
.text:004020B1 loc_4020B1:			       ; CODE XREF: sub_402056+40j
.text:004020B1		       mov     eax, [ebp+arg_0]
.text:004020B4		       mov     dword ptr [eax],	0
.text:004020BA		       mov     ebx, 0
.text:004020BF		       jmp     short loc_4020A7
.text:004020BF sub_402056      endp
.text:004020BF
.text:004020C1
.text:004020C1 ; =============== S U B R O U T I N E =======================================
.text:004020C1
.text:004020C1 ; Attributes: bp-based frame
.text:004020C1
.text:004020C1 sub_4020C1      proc near	       ; CODE XREF: sub_4020E6+23p
.text:004020C1					       ; sub_40502E+8A7p
.text:004020C1
.text:004020C1 var_8	       = dword ptr -8
.text:004020C1 arg_0	       = dword ptr  8
.text:004020C1 arg_4	       = dword ptr  0Ch
.text:004020C1 arg_8	       = dword ptr  10h
.text:004020C1 arg_C	       = dword ptr  14h
.text:004020C1
.text:004020C1		       push    ebp
.text:004020C2		       mov     ebp, esp
.text:004020C4		       sub     esp, 8
.text:004020C7		       mov     edx, [ebp+arg_0]
.text:004020CA		       mov     eax, [ebp+arg_8]
.text:004020CD		       mov     [edx+8],	eax
.text:004020D0		       mov     eax, [ebp+arg_C]
.text:004020D3		       mov     [edx+0Ch], eax
.text:004020D6		       mov     eax, [ebp+arg_4]
.text:004020D9		       mov     [edx+4],	eax
.text:004020DC		       mov     [esp+8+var_8], edx
.text:004020DF		       call    sub_402056
.text:004020E4		       leave
.text:004020E5		       retn
.text:004020E5 sub_4020C1      endp
.text:004020E5
.text:004020E6
.text:004020E6 ; =============== S U B R O U T I N E =======================================
.text:004020E6
.text:004020E6 ; Attributes: bp-based frame
.text:004020E6
.text:004020E6 sub_4020E6      proc near	       ; CODE XREF: sub_40502E+7F6p
.text:004020E6					       ; sub_40502E+960p
.text:004020E6
.text:004020E6 var_18	       = dword ptr -18h
.text:004020E6 var_14	       = dword ptr -14h
.text:004020E6 var_10	       = dword ptr -10h
.text:004020E6 var_C	       = dword ptr -0Ch
.text:004020E6 arg_0	       = dword ptr  8
.text:004020E6 arg_4	       = dword ptr  0Ch
.text:004020E6
.text:004020E6		       push    ebp
.text:004020E7		       mov     ebp, esp
.text:004020E9		       sub     esp, 18h
.text:004020EC		       mov     [esp+18h+var_C],	0
.text:004020F4		       mov     [esp+18h+var_10], 0
.text:004020FC		       mov     eax, [ebp+arg_4]
.text:004020FF		       mov     [esp+18h+var_14], eax
.text:00402103		       mov     eax, [ebp+arg_0]
.text:00402106		       mov     [esp+18h+var_18], eax
.text:00402109		       call    sub_4020C1
.text:0040210E		       leave
.text:0040210F		       retn
.text:0040210F sub_4020E6      endp
.text:0040210F
.text:00402110 ; ---------------------------------------------------------------------------
.text:00402110		       push    ebp
.text:00402111		       mov     ebp, esp
.text:00402113		       mov     eax, [ebp+8]
.text:00402116		       mov     ecx, [ebp+0Ch]
.text:00402119		       test    eax, eax
.text:0040211B		       jz      short loc_402136
.text:0040211D		       cmp     eax, ecx
.text:0040211F		       jz      short loc_402136
.text:00402121		       mov     edx, [ecx]
.text:00402123		       cmp     edx, [eax]
.text:00402125		       jnz     short loc_402136
.text:00402127
.text:00402127 loc_402127:			       ; CODE XREF: .text:00402134j
.text:00402127		       mov     eax, [eax+4]
.text:0040212A		       test    eax, eax
.text:0040212C		       jz      short loc_402136
.text:0040212E		       cmp     ecx, eax
.text:00402130		       jz      short loc_402136
.text:00402132		       cmp     [eax], edx
.text:00402134		       jz      short loc_402127
.text:00402136
.text:00402136 loc_402136:			       ; CODE XREF: .text:0040211Bj
.text:00402136					       ; .text:0040211Fj ...
.text:00402136		       cmp     eax, ecx
.text:00402138		       setz    al
.text:0040213B		       movzx   eax, al
.text:0040213E		       pop     ebp
.text:0040213F		       retn
.text:00402140 ; ---------------------------------------------------------------------------
.text:00402140		       push    ebp
.text:00402141		       mov     ebp, esp
.text:00402143		       push    ebx
.text:00402144		       mov     ebx, [ebp+8]
.text:00402147		       test    ebx, ebx
.text:00402149		       jz      short loc_402169
.text:0040214B		       mov     eax, [ebp+0Ch]
.text:0040214E		       mov     edx, [eax]
.text:00402150		       mov     eax, ebx
.text:00402152		       mov     ecx, edx
.text:00402154		       sub     ecx, [ebx]
.text:00402156		       jns     short loc_402165
.text:00402158
.text:00402158 loc_402158:			       ; CODE XREF: .text:00402163j
.text:00402158		       mov     eax, [eax+4]
.text:0040215B		       test    eax, eax
.text:0040215D		       jz      short loc_402165
.text:0040215F		       mov     ecx, edx
.text:00402161		       sub     ecx, [eax]
.text:00402163		       js      short loc_402158
.text:00402165
.text:00402165 loc_402165:			       ; CODE XREF: .text:00402156j
.text:00402165					       ; .text:0040215Dj
.text:00402165		       test    ecx, ecx
.text:00402167		       jz      short loc_40216E
.text:00402169
.text:00402169 loc_402169:			       ; CODE XREF: .text:00402149j
.text:00402169		       mov     eax, 0
.text:0040216E
.text:0040216E loc_40216E:			       ; CODE XREF: .text:00402167j
.text:0040216E		       pop     ebx
.text:0040216F		       pop     ebp
.text:00402170		       retn
.text:00402171 ; ---------------------------------------------------------------------------
.text:00402171		       push    ebp
.text:00402172		       mov     ebp, esp
.text:00402174		       push    edi
.text:00402175		       push    esi
.text:00402176		       push    ebx
.text:00402177		       mov     esi, [ebp+8]
.text:0040217A		       mov     edi, [ebp+0Ch]
.text:0040217D		       mov     eax, [esi]
.text:0040217F		       mov     ecx, esi
.text:00402181		       test    eax, eax
.text:00402183		       jz      short loc_4021A5
.text:00402185		       mov     edx, [edi]
.text:00402187		       mov     ebx, edx
.text:00402189		       sub     ebx, [eax]
.text:0040218B		       js      short loc_402191
.text:0040218D		       mov     ecx, esi
.text:0040218F		       jmp     short loc_4021A1
.text:00402191 ; ---------------------------------------------------------------------------
.text:00402191
.text:00402191 loc_402191:			       ; CODE XREF: .text:0040218Bj
.text:00402191					       ; .text:0040219Fj
.text:00402191		       lea     ecx, [eax+4]
.text:00402194		       mov     eax, [eax+4]
.text:00402197		       test    eax, eax
.text:00402199		       jz      short loc_4021A1
.text:0040219B		       mov     ebx, edx
.text:0040219D		       sub     ebx, [eax]
.text:0040219F		       js      short loc_402191
.text:004021A1
.text:004021A1 loc_4021A1:			       ; CODE XREF: .text:0040218Fj
.text:004021A1					       ; .text:00402199j
.text:004021A1		       test    ebx, ebx
.text:004021A3		       jz      short loc_4021B5
.text:004021A5
.text:004021A5 loc_4021A5:			       ; CODE XREF: .text:00402183j
.text:004021A5		       mov     [edi+4],	eax
.text:004021A8		       mov     [ecx], edi
.text:004021AA		       mov     eax, [ebp+10h]
.text:004021AD		       mov     dword ptr [eax],	0
.text:004021B3		       jmp     short loc_4021BA
.text:004021B5 ; ---------------------------------------------------------------------------
.text:004021B5
.text:004021B5 loc_4021B5:			       ; CODE XREF: .text:004021A3j
.text:004021B5		       mov     edx, [ebp+10h]
.text:004021B8		       mov     [edx], eax
.text:004021BA
.text:004021BA loc_4021BA:			       ; CODE XREF: .text:004021B3j
.text:004021BA		       mov     eax, [ebp+10h]
.text:004021BD		       cmp     dword ptr [eax],	0
.text:004021C0		       setz    al
.text:004021C3		       movzx   eax, al
.text:004021C6		       pop     ebx
.text:004021C7		       pop     esi
.text:004021C8		       pop     edi
.text:004021C9		       pop     ebp
.text:004021CA		       retn
.text:004021CB ; ---------------------------------------------------------------------------
.text:004021CB		       push    ebp
.text:004021CC		       mov     ebp, esp
.text:004021CE		       push    ebx
.text:004021CF		       mov     ecx, [ebp+8]
.text:004021D2		       mov     ebx, [ebp+0Ch]
.text:004021D5		       mov     eax, [ecx]
.text:004021D7		       test    eax, eax
.text:004021D9		       jz      short loc_4021EF
.text:004021DB		       mov     edx, [ebx]
.text:004021DD		       cmp     edx, [eax]
.text:004021DF		       jns     short loc_4021EF
.text:004021E1
.text:004021E1 loc_4021E1:			       ; CODE XREF: .text:004021EDj
.text:004021E1		       lea     ecx, [eax+4]
.text:004021E4		       mov     eax, [eax+4]
.text:004021E7		       test    eax, eax
.text:004021E9		       jz      short loc_4021EF
.text:004021EB		       cmp     edx, [eax]
.text:004021ED		       js      short loc_4021E1
.text:004021EF
.text:004021EF loc_4021EF:			       ; CODE XREF: .text:004021D9j
.text:004021EF					       ; .text:004021DFj ...
.text:004021EF		       mov     [ebx+4],	eax
.text:004021F2		       mov     [ecx], ebx
.text:004021F4		       pop     ebx
.text:004021F5		       pop     ebp
.text:004021F6		       retn
.text:004021F7 ; ---------------------------------------------------------------------------
.text:004021F7		       push    ebp
.text:004021F8		       mov     ebp, esp
.text:004021FA		       push    esi
.text:004021FB		       push    ebx
.text:004021FC		       mov     ebx, [ebp+8]
.text:004021FF		       mov     esi, [ebp+10h]
.text:00402202		       mov     edx, [ebx]
.text:00402204		       test    edx, edx
.text:00402206		       jz      short loc_402232
.text:00402208		       mov     eax, [ebp+0Ch]
.text:0040220B		       mov     ecx, [eax]
.text:0040220D		       mov     eax, ecx
.text:0040220F		       sub     eax, [edx]
.text:00402211		       jns     short loc_402223
.text:00402213
.text:00402213 loc_402213:			       ; CODE XREF: .text:00402221j
.text:00402213		       lea     ebx, [edx+4]
.text:00402216		       mov     edx, [edx+4]
.text:00402219		       test    edx, edx
.text:0040221B		       jz      short loc_402223
.text:0040221D		       mov     eax, ecx
.text:0040221F		       sub     eax, [edx]
.text:00402221		       js      short loc_402213
.text:00402223
.text:00402223 loc_402223:			       ; CODE XREF: .text:00402211j
.text:00402223					       ; .text:0040221Bj
.text:00402223		       test    eax, eax
.text:00402225		       jnz     short loc_402232
.text:00402227		       mov     [esi], edx
.text:00402229		       mov     eax, [ebx]
.text:0040222B		       mov     eax, [eax+4]
.text:0040222E		       mov     [ebx], eax
.text:00402230		       jmp     short loc_402238
.text:00402232 ; ---------------------------------------------------------------------------
.text:00402232
.text:00402232 loc_402232:			       ; CODE XREF: .text:00402206j
.text:00402232					       ; .text:00402225j
.text:00402232		       mov     dword ptr [esi],	0
.text:00402238
.text:00402238 loc_402238:			       ; CODE XREF: .text:00402230j
.text:00402238		       cmp     dword ptr [esi],	0
.text:0040223B		       setnz   al
.text:0040223E		       movzx   eax, al
.text:00402241		       pop     ebx
.text:00402242		       pop     esi
.text:00402243		       pop     ebp
.text:00402244		       retn
.text:00402245 ; ---------------------------------------------------------------------------
.text:00402245		       push    ebp
.text:00402246		       mov     ebp, esp
.text:00402248		       mov     edx, [ebp+8]
.text:0040224B		       mov     eax, 0
.text:00402250		       test    edx, edx
.text:00402252		       jz      short loc_40225E
.text:00402254
.text:00402254 loc_402254:			       ; CODE XREF: .text:0040225Cj
.text:00402254		       mov     edx, [edx+4]
.text:00402257		       add     eax, 1
.text:0040225A		       test    edx, edx
.text:0040225C		       jnz     short loc_402254
.text:0040225E
.text:0040225E loc_40225E:			       ; CODE XREF: .text:00402252j
.text:0040225E		       pop     ebp
.text:0040225F		       retn
.text:00402260 ; ---------------------------------------------------------------------------
.text:00402260		       push    ebp
.text:00402261		       mov     ebp, esp
.text:00402263		       push    edi
.text:00402264		       push    esi
.text:00402265		       push    ebx
.text:00402266		       sub     esp, 14h
.text:00402269		       mov     edx, [ebp+8]
.text:0040226C		       mov     eax, [edx]
.text:0040226E		       mov     [ebp-10h], eax
.text:00402271		       mov     ebx, 1
.text:00402276
.text:00402276 loc_402276:			       ; CODE XREF: .text:004022B8j
.text:00402276					       ; .text:0040235Ej
.text:00402276		       mov     edi, [ebp-10h]
.text:00402279		       mov     dword ptr [ebp-10h], 0
.text:00402280		       test    edi, edi
.text:00402282		       jz      loc_40234C
.text:00402288		       mov     ecx, edi
.text:0040228A		       lea     esi, [ebp-10h]
.text:0040228D		       mov     edx, 0
.text:00402292		       jmp     loc_40232D
.text:00402297 ; ---------------------------------------------------------------------------
.text:00402297
.text:00402297 loc_402297:			       ; CODE XREF: .text:004022A3j
.text:00402297					       ; .text:00402341j
.text:00402297		       add     eax, 1
.text:0040229A		       mov     ecx, [ecx+4]
.text:0040229D		       cmp     eax, ebx
.text:0040229F		       jge     short loc_4022A5
.text:004022A1		       test    ecx, ecx
.text:004022A3		       jnz     short loc_402297
.text:004022A5
.text:004022A5 loc_4022A5:			       ; CODE XREF: .text:0040229Fj
.text:004022A5					       ; .text:00402334j ...
.text:004022A5		       test    ecx, ecx
.text:004022A7		       jnz     short loc_4022BA
.text:004022A9		       mov     [esi], edi
.text:004022AB		       test    edx, edx
.text:004022AD		       lea     esi, [esi+0]
.text:004022B0		       jz      loc_40234C
.text:004022B6		       add     ebx, ebx
.text:004022B8		       jmp     short loc_402276
.text:004022BA ; ---------------------------------------------------------------------------
.text:004022BA
.text:004022BA loc_4022BA:			       ; CODE XREF: .text:004022A7j
.text:004022BA		       mov     edx, [ecx+4]
.text:004022BD		       mov     dword ptr [ecx+4], 0
.text:004022C4		       test    edx, edx
.text:004022C6		       setnz   byte ptr	[ebp-1Eh]
.text:004022CA		       jz      short loc_4022D9
.text:004022CC		       mov     ecx, edx
.text:004022CE		       mov     eax, 1
.text:004022D3		       cmp     byte ptr	[ebp-1Dh], 0
.text:004022D7		       jnz     short loc_4022DD
.text:004022D9
.text:004022D9 loc_4022D9:			       ; CODE XREF: .text:004022CAj
.text:004022D9		       mov     ecx, edx
.text:004022DB		       jmp     short loc_4022EB
.text:004022DD ; ---------------------------------------------------------------------------
.text:004022DD
.text:004022DD loc_4022DD:			       ; CODE XREF: .text:004022D7j
.text:004022DD					       ; .text:004022E9j
.text:004022DD		       add     eax, 1
.text:004022E0		       mov     ecx, [ecx+4]
.text:004022E3		       cmp     eax, ebx
.text:004022E5		       jge     short loc_4022EB
.text:004022E7		       test    ecx, ecx
.text:004022E9		       jnz     short loc_4022DD
.text:004022EB
.text:004022EB loc_4022EB:			       ; CODE XREF: .text:004022DBj
.text:004022EB					       ; .text:004022E5j
.text:004022EB		       mov     eax, 0
.text:004022F0		       test    ecx, ecx
.text:004022F2		       jz      short loc_4022FE
.text:004022F4		       mov     eax, [ecx+4]
.text:004022F7		       mov     dword ptr [ecx+4], 0
.text:004022FE
.text:004022FE loc_4022FE:			       ; CODE XREF: .text:004022F2j
.text:004022FE		       cmp     byte ptr	[ebp-1Eh], 0
.text:00402302		       jz      short loc_402310
.text:00402304
.text:00402304 loc_402304:			       ; CODE XREF: .text:0040230Ej
.text:00402304		       mov     [esi], edx
.text:00402306		       lea     esi, [edx+4]
.text:00402309		       mov     edx, [edx+4]
.text:0040230C		       test    edx, edx
.text:0040230E		       jnz     short loc_402304
.text:00402310
.text:00402310 loc_402310:			       ; CODE XREF: .text:00402302j
.text:00402310		       mov     [esi], edi
.text:00402312		       test    edi, edi
.text:00402314		       jz      short loc_402320
.text:00402316
.text:00402316 loc_402316:			       ; CODE XREF: .text:0040231Ej
.text:00402316		       lea     esi, [edi+4]
.text:00402319		       mov     edi, [edi+4]
.text:0040231C		       test    edi, edi
.text:0040231E		       jnz     short loc_402316
.text:00402320
.text:00402320 loc_402320:			       ; CODE XREF: .text:00402314j
.text:00402320		       test    eax, eax
.text:00402322		       jz      short loc_40235C
.text:00402324		       mov     ecx, eax
.text:00402326		       mov     edi, eax
.text:00402328		       mov     edx, 1
.text:0040232D
.text:0040232D loc_40232D:			       ; CODE XREF: .text:00402292j
.text:0040232D		       cmp     ebx, 1
.text:00402330		       setnle  byte ptr	[ebp-1Dh]
.text:00402334		       jle     loc_4022A5
.text:0040233A		       mov     eax, 1
.text:0040233F		       test    ecx, ecx
.text:00402341		       jnz     loc_402297
.text:00402347		       jmp     loc_4022A5
.text:0040234C ; ---------------------------------------------------------------------------
.text:0040234C
.text:0040234C loc_40234C:			       ; CODE XREF: .text:00402282j
.text:0040234C					       ; .text:004022B0j
.text:0040234C		       mov     eax, [ebp-10h]
.text:0040234F		       mov     edx, [ebp+8]
.text:00402352		       mov     [edx], eax
.text:00402354		       add     esp, 14h
.text:00402357		       pop     ebx
.text:00402358		       pop     esi
.text:00402359		       pop     edi
.text:0040235A		       pop     ebp
.text:0040235B		       retn
.text:0040235C ; ---------------------------------------------------------------------------
.text:0040235C
.text:0040235C loc_40235C:			       ; CODE XREF: .text:00402322j
.text:0040235C		       add     ebx, ebx
.text:0040235E		       jmp     loc_402276
.text:00402363 ; ---------------------------------------------------------------------------
.text:00402363		       push    ebp
.text:00402364		       mov     ebp, esp
.text:00402366		       mov     eax, [ebp+8]
.text:00402369		       mov     eax, [eax]
.text:0040236B		       pop     ebp
.text:0040236C		       retn
.text:0040236D
.text:0040236D ; =============== S U B R O U T I N E =======================================
.text:0040236D
.text:0040236D ; Attributes: bp-based frame
.text:0040236D
.text:0040236D sub_40236D      proc near	       ; CODE XREF: sub_4023DB+1Ep
.text:0040236D
.text:0040236D var_18	       = dword ptr -18h
.text:0040236D var_14	       = dword ptr -14h
.text:0040236D arg_0	       = dword ptr  8
.text:0040236D
.text:0040236D		       push    ebp
.text:0040236E		       mov     ebp, esp
.text:00402370		       push    edi
.text:00402371		       push    esi
.text:00402372		       push    ebx
.text:00402373		       sub     esp, 0Ch
.text:00402376		       mov     eax, [ebp+arg_0]
.text:00402379		       mov     ebx, [eax+4]
.text:0040237C		       mov     dword ptr [eax+4], 0
.text:00402383		       mov     edi, [eax+8]
.text:00402386		       test    edi, edi
.text:00402388		       jz      short loc_4023B2
.text:0040238A		       mov     esi, [eax+0Ch]
.text:0040238D		       test    ebx, ebx
.text:0040238F		       jnz     short loc_40239A
.text:00402391		       jmp     short loc_4023B2
.text:00402393 ; ---------------------------------------------------------------------------
.text:00402393
.text:00402393 loc_402393:			       ; CODE XREF: sub_40236D+38j
.text:00402393		       mov     ebx, [ebx+4]
.text:00402396		       test    ebx, ebx
.text:00402398		       jz      short loc_4023B2
.text:0040239A
.text:0040239A loc_40239A:			       ; CODE XREF: sub_40236D+22j
.text:0040239A		       mov     [esp+18h+var_14], esi
.text:0040239E		       mov     [esp+18h+var_18], ebx
.text:004023A1		       call    edi
.text:004023A3		       test    eax, eax
.text:004023A5		       js      short loc_402393
.text:004023A7		       test    ebx, ebx
.text:004023A9		       jz      short loc_4023B2
.text:004023AB		       test    eax, eax
.text:004023AD		       lea     esi, [esi+0]
.text:004023B0		       jg      short loc_4023CB
.text:004023B2
.text:004023B2 loc_4023B2:			       ; CODE XREF: sub_40236D+1Bj
.text:004023B2					       ; sub_40236D+24j ...
.text:004023B2		       mov     edx, [ebp+arg_0]
.text:004023B5		       mov     [edx], ebx
.text:004023B7		       test    ebx, ebx
.text:004023B9		       jz      short loc_4023C1
.text:004023BB		       mov     eax, [ebx+4]
.text:004023BE		       mov     [edx+4],	eax
.text:004023C1
.text:004023C1 loc_4023C1:			       ; CODE XREF: sub_40236D+4Cj
.text:004023C1					       ; sub_40236D+6Cj
.text:004023C1		       mov     eax, ebx
.text:004023C3		       add     esp, 0Ch
.text:004023C6		       pop     ebx
.text:004023C7		       pop     esi
.text:004023C8		       pop     edi
.text:004023C9		       pop     ebp
.text:004023CA		       retn
.text:004023CB ; ---------------------------------------------------------------------------
.text:004023CB
.text:004023CB loc_4023CB:			       ; CODE XREF: sub_40236D+43j
.text:004023CB		       mov     eax, [ebp+arg_0]
.text:004023CE		       mov     dword ptr [eax],	0
.text:004023D4		       mov     ebx, 0
.text:004023D9		       jmp     short loc_4023C1
.text:004023D9 sub_40236D      endp
.text:004023D9
.text:004023DB
.text:004023DB ; =============== S U B R O U T I N E =======================================
.text:004023DB
.text:004023DB ; Attributes: bp-based frame
.text:004023DB
.text:004023DB sub_4023DB      proc near	       ; CODE XREF: .text:00402423p
.text:004023DB
.text:004023DB var_8	       = dword ptr -8
.text:004023DB arg_0	       = dword ptr  8
.text:004023DB arg_4	       = dword ptr  0Ch
.text:004023DB arg_8	       = dword ptr  10h
.text:004023DB arg_C	       = dword ptr  14h
.text:004023DB
.text:004023DB		       push    ebp
.text:004023DC		       mov     ebp, esp
.text:004023DE		       sub     esp, 8
.text:004023E1		       mov     edx, [ebp+arg_0]
.text:004023E4		       mov     eax, [ebp+arg_8]
.text:004023E7		       mov     [edx+8],	eax
.text:004023EA		       mov     eax, [ebp+arg_C]
.text:004023ED		       mov     [edx+0Ch], eax
.text:004023F0		       mov     eax, [ebp+arg_4]
.text:004023F3		       mov     [edx+4],	eax
.text:004023F6		       mov     [esp+8+var_8], edx
.text:004023F9		       call    sub_40236D
.text:004023FE		       leave
.text:004023FF		       retn
.text:004023FF sub_4023DB      endp
.text:004023FF
.text:00402400 ; ---------------------------------------------------------------------------
.text:00402400		       push    ebp
.text:00402401		       mov     ebp, esp
.text:00402403		       sub     esp, 18h
.text:00402406		       mov     dword ptr [esp+0Ch], 0
.text:0040240E		       mov     dword ptr [esp+8], 0
.text:00402416		       mov     eax, [ebp+0Ch]
.text:00402419		       mov     [esp+4],	eax
.text:0040241D		       mov     eax, [ebp+8]
.text:00402420		       mov     [esp], eax
.text:00402423		       call    sub_4023DB
.text:00402428		       leave
.text:00402429		       retn
.text:0040242A
.text:0040242A ; =============== S U B R O U T I N E =======================================
.text:0040242A
.text:0040242A ; Attributes: bp-based frame
.text:0040242A
.text:0040242A sub_40242A      proc near	       ; CODE XREF: sub_40242A+49p
.text:0040242A					       ; sub_40242A+117p ...
.text:0040242A
.text:0040242A var_18	       = dword ptr -18h
.text:0040242A var_14	       = dword ptr -14h
.text:0040242A var_C	       = dword ptr -0Ch
.text:0040242A var_8	       = dword ptr -8
.text:0040242A var_4	       = dword ptr -4
.text:0040242A
.text:0040242A		       push    ebp
.text:0040242B		       mov     ebp, esp
.text:0040242D		       sub     esp, 18h
.text:00402430		       mov     [ebp+var_C], ebx
.text:00402433		       mov     [ebp+var_8], esi
.text:00402436		       mov     [ebp+var_4], edi
.text:00402439		       mov     edi, eax
.text:0040243B		       mov     esi, edx
.text:0040243D		       mov     ebx, [eax]
.text:0040243F		       test    ebx, ebx
.text:00402441		       jnz     short loc_40244E
.text:00402443		       mov     byte ptr	[edx+0Ch], 1
.text:00402447		       mov     [edi], edx
.text:00402449		       jmp     loc_4025EB
.text:0040244E ; ---------------------------------------------------------------------------
.text:0040244E
.text:0040244E loc_40244E:			       ; CODE XREF: sub_40242A+17j
.text:0040244E		       mov     [esp+18h+var_14], ebx
.text:00402452		       mov     [esp+18h+var_18], edx
.text:00402455		       call    sub_4011A0
.text:0040245A		       test    eax, eax
.text:0040245C		       js      short loc_40246E
.text:0040245E		       test    eax, eax
.text:00402460		       jnz     loc_40253C
.text:00402466		       cmp     esi, ebx
.text:00402468		       jnb     loc_40253C
.text:0040246E
.text:0040246E loc_40246E:			       ; CODE XREF: sub_40242A+32j
.text:0040246E		       lea     eax, [ebx+10h]
.text:00402471		       mov     edx, esi
.text:00402473		       call    sub_40242A
.text:00402478		       cmp     byte ptr	[ebx+0Ch], 0
.text:0040247C		       jnz     loc_4025EB
.text:00402482		       mov     ecx, [edi]
.text:00402484		       mov     ebx, [ecx+10h]
.text:00402487		       mov     eax, [ecx+14h]
.text:0040248A		       test    eax, eax
.text:0040248C		       jz      short loc_4024D4
.text:0040248E		       cmp     byte ptr	[eax+0Ch], 1
.text:00402492		       jnz     short loc_4024D4
.text:00402494		       cmp     byte ptr	[ebx+0Ch], 1
.text:00402498		       jnz     loc_4025EB
.text:0040249E		       mov     eax, [ebx+10h]
.text:004024A1		       test    eax, eax
.text:004024A3		       jz      short loc_4024AB
.text:004024A5		       cmp     byte ptr	[eax+0Ch], 1
.text:004024A9		       jz      short loc_4024C0
.text:004024AB
.text:004024AB loc_4024AB:			       ; CODE XREF: sub_40242A+79j
.text:004024AB		       mov     eax, [ebx+14h]
.text:004024AE		       test    eax, eax
.text:004024B0		       jz      loc_4025EB
.text:004024B6		       cmp     byte ptr	[eax+0Ch], 1
.text:004024BA		       jnz     loc_4025EB
.text:004024C0
.text:004024C0 loc_4024C0:			       ; CODE XREF: sub_40242A+7Fj
.text:004024C0		       mov     byte ptr	[ebx+0Ch], 0
.text:004024C4		       mov     eax, [ecx+14h]
.text:004024C7		       mov     byte ptr	[eax+0Ch], 0
.text:004024CB		       mov     byte ptr	[ecx+0Ch], 1
.text:004024CF		       jmp     loc_4025EB
.text:004024D4 ; ---------------------------------------------------------------------------
.text:004024D4
.text:004024D4 loc_4024D4:			       ; CODE XREF: sub_40242A+62j
.text:004024D4					       ; sub_40242A+68j
.text:004024D4		       cmp     byte ptr	[ebx+0Ch], 1
.text:004024D8		       jnz     loc_4025EB
.text:004024DE		       mov     edx, [ebx+10h]
.text:004024E1		       test    edx, edx
.text:004024E3		       jz      short loc_402506
.text:004024E5		       cmp     byte ptr	[edx+0Ch], 1
.text:004024E9		       jnz     short loc_402506
.text:004024EB		       mov     eax, [ebx+14h]
.text:004024EE		       mov     [ecx+10h], eax
.text:004024F1		       mov     [ebx+10h], edx
.text:004024F4		       mov     [ebx+14h], ecx
.text:004024F7		       mov     byte ptr	[ecx+0Ch], 1
.text:004024FB		       mov     byte ptr	[ebx+0Ch], 0
.text:004024FF		       mov     [edi], ebx
.text:00402501		       jmp     loc_4025EB
.text:00402506 ; ---------------------------------------------------------------------------
.text:00402506
.text:00402506 loc_402506:			       ; CODE XREF: sub_40242A+B9j
.text:00402506					       ; sub_40242A+BFj
.text:00402506		       mov     esi, [ebx+14h]
.text:00402509		       test    esi, esi
.text:0040250B		       jz      loc_4025EB
.text:00402511		       cmp     byte ptr	[esi+0Ch], 1
.text:00402515		       jnz     loc_4025EB
.text:0040251B		       mov     edx, [esi+14h]
.text:0040251E		       mov     eax, [esi+10h]
.text:00402521		       mov     [ebx+14h], eax
.text:00402524		       mov     [ecx+10h], edx
.text:00402527		       mov     [esi+10h], ebx
.text:0040252A		       mov     [esi+14h], ecx
.text:0040252D		       mov     byte ptr	[esi+0Ch], 0
.text:00402531		       mov     byte ptr	[ecx+0Ch], 1
.text:00402535		       mov     [edi], esi
.text:00402537		       jmp     loc_4025EB
.text:0040253C ; ---------------------------------------------------------------------------
.text:0040253C
.text:0040253C loc_40253C:			       ; CODE XREF: sub_40242A+36j
.text:0040253C					       ; sub_40242A+3Ej
.text:0040253C		       lea     eax, [ebx+14h]
.text:0040253F		       mov     edx, esi
.text:00402541		       call    sub_40242A
.text:00402546		       cmp     byte ptr	[ebx+0Ch], 0
.text:0040254A		       jnz     loc_4025EB
.text:00402550		       mov     ecx, [edi]
.text:00402552		       mov     ebx, [ecx+14h]
.text:00402555		       mov     eax, [ecx+10h]
.text:00402558		       test    eax, eax
.text:0040255A		       jz      short loc_402597
.text:0040255C		       cmp     byte ptr	[eax+0Ch], 1
.text:00402560		       jnz     short loc_402597
.text:00402562		       cmp     byte ptr	[ebx+0Ch], 1
.text:00402566		       jnz     loc_4025EB
.text:0040256C		       mov     eax, [ebx+14h]
.text:0040256F		       test    eax, eax
.text:00402571		       jz      short loc_402579
.text:00402573		       cmp     byte ptr	[eax+0Ch], 1
.text:00402577		       jz      short loc_402586
.text:00402579
.text:00402579 loc_402579:			       ; CODE XREF: sub_40242A+147j
.text:00402579		       mov     eax, [ebx+10h]
.text:0040257C		       test    eax, eax
.text:0040257E		       jz      short loc_4025EB
.text:00402580		       cmp     byte ptr	[eax+0Ch], 1
.text:00402584		       jnz     short loc_4025EB
.text:00402586
.text:00402586 loc_402586:			       ; CODE XREF: sub_40242A+14Dj
.text:00402586		       mov     byte ptr	[ebx+0Ch], 0
.text:0040258A		       mov     eax, [ecx+10h]
.text:0040258D		       mov     byte ptr	[eax+0Ch], 0
.text:00402591		       mov     byte ptr	[ecx+0Ch], 1
.text:00402595		       jmp     short loc_4025EB
.text:00402597 ; ---------------------------------------------------------------------------
.text:00402597
.text:00402597 loc_402597:			       ; CODE XREF: sub_40242A+130j
.text:00402597					       ; sub_40242A+136j
.text:00402597		       cmp     byte ptr	[ebx+0Ch], 1
.text:0040259B		       jnz     short loc_4025EB
.text:0040259D		       mov     edx, [ebx+14h]
.text:004025A0		       test    edx, edx
.text:004025A2		       jz      short loc_4025C2
.text:004025A4		       cmp     byte ptr	[edx+0Ch], 1
.text:004025A8		       jnz     short loc_4025C2
.text:004025AA		       mov     eax, [ebx+10h]
.text:004025AD		       mov     [ecx+14h], eax
.text:004025B0		       mov     [ebx+14h], edx
.text:004025B3		       mov     [ebx+10h], ecx
.text:004025B6		       mov     byte ptr	[ecx+0Ch], 1
.text:004025BA		       mov     byte ptr	[ebx+0Ch], 0
.text:004025BE		       mov     [edi], ebx
.text:004025C0		       jmp     short loc_4025EB
.text:004025C2 ; ---------------------------------------------------------------------------
.text:004025C2
.text:004025C2 loc_4025C2:			       ; CODE XREF: sub_40242A+178j
.text:004025C2					       ; sub_40242A+17Ej
.text:004025C2		       mov     esi, [ebx+10h]
.text:004025C5		       test    esi, esi
.text:004025C7		       jz      short loc_4025EB
.text:004025C9		       cmp     byte ptr	[esi+0Ch], 1
.text:004025CD		       jnz     short loc_4025EB
.text:004025CF		       mov     edx, [esi+10h]
.text:004025D2		       mov     eax, [esi+14h]
.text:004025D5		       mov     [ebx+10h], eax
.text:004025D8		       mov     [ecx+14h], edx
.text:004025DB		       mov     [esi+14h], ebx
.text:004025DE		       mov     [esi+10h], ecx
.text:004025E1		       mov     byte ptr	[esi+0Ch], 0
.text:004025E5		       mov     byte ptr	[ecx+0Ch], 1
.text:004025E9		       mov     [edi], esi
.text:004025EB
.text:004025EB loc_4025EB:			       ; CODE XREF: sub_40242A+1Fj
.text:004025EB					       ; sub_40242A+52j ...
.text:004025EB		       mov     ebx, [ebp+var_C]
.text:004025EE		       mov     esi, [ebp+var_8]
.text:004025F1		       mov     edi, [ebp+var_4]
.text:004025F4		       mov     esp, ebp
.text:004025F6		       pop     ebp
.text:004025F7		       retn
.text:004025F7 sub_40242A      endp
.text:004025F7
.text:004025F8
.text:004025F8 ; =============== S U B R O U T I N E =======================================
.text:004025F8
.text:004025F8 ; Attributes: bp-based frame
.text:004025F8
.text:004025F8 sub_4025F8      proc near	       ; CODE XREF: sub_402663+35p
.text:004025F8					       ; sub_4041AA+90p
.text:004025F8
.text:004025F8 arg_0	       = dword ptr  8
.text:004025F8 arg_4	       = dword ptr  0Ch
.text:004025F8
.text:004025F8		       push    ebp
.text:004025F9		       mov     ebp, esp
.text:004025FB		       push    ebx
.text:004025FC		       sub     esp, 4
.text:004025FF		       mov     ebx, [ebp+arg_0]
.text:00402602		       mov     edx, [ebp+arg_4]
.text:00402605		       mov     dword ptr [edx+14h], 0
.text:0040260C		       mov     dword ptr [edx+10h], 0
.text:00402613		       mov     eax, ebx
.text:00402615		       call    sub_40242A
.text:0040261A		       mov     eax, [ebx]
.text:0040261C		       mov     byte ptr	[eax+0Ch], 0
.text:00402620		       add     esp, 4
.text:00402623		       pop     ebx
.text:00402624		       pop     ebp
.text:00402625		       retn
.text:00402625 sub_4025F8      endp
.text:00402625
.text:00402626
.text:00402626 ; =============== S U B R O U T I N E =======================================
.text:00402626
.text:00402626 ; Attributes: bp-based frame
.text:00402626
.text:00402626 sub_402626      proc near	       ; CODE XREF: sub_402663+1Bp
.text:00402626					       ; sub_403A0A+16p ...
.text:00402626
.text:00402626 var_10	       = dword ptr -10h
.text:00402626 var_C	       = dword ptr -0Ch
.text:00402626 arg_0	       = dword ptr  8
.text:00402626 arg_4	       = dword ptr  0Ch
.text:00402626
.text:00402626		       push    ebp
.text:00402627		       mov     ebp, esp
.text:00402629		       push    esi
.text:0040262A		       push    ebx
.text:0040262B		       sub     esp, 8
.text:0040262E		       mov     eax, [ebp+arg_0]
.text:00402631		       mov     esi, [ebp+arg_4]
.text:00402634		       mov     ebx, eax
.text:00402636		       test    eax, eax
.text:00402638		       jz      short loc_40265A
.text:0040263A
.text:0040263A loc_40263A:			       ; CODE XREF: sub_402626+32j
.text:0040263A		       mov     [esp+10h+var_C],	ebx
.text:0040263E		       mov     [esp+10h+var_10], esi
.text:00402641		       call    sub_4011A0
.text:00402646		       test    eax, eax
.text:00402648		       jns     short loc_40264F
.text:0040264A		       mov     ebx, [ebx+10h]
.text:0040264D		       jmp     short loc_402656
.text:0040264F ; ---------------------------------------------------------------------------
.text:0040264F
.text:0040264F loc_40264F:			       ; CODE XREF: sub_402626+22j
.text:0040264F		       test    eax, eax
.text:00402651		       jle     short loc_40265A
.text:00402653		       mov     ebx, [ebx+14h]
.text:00402656
.text:00402656 loc_402656:			       ; CODE XREF: sub_402626+27j
.text:00402656		       test    ebx, ebx
.text:00402658		       jnz     short loc_40263A
.text:0040265A
.text:0040265A loc_40265A:			       ; CODE XREF: sub_402626+12j
.text:0040265A					       ; sub_402626+2Bj
.text:0040265A		       mov     eax, ebx
.text:0040265C		       add     esp, 8
.text:0040265F		       pop     ebx
.text:00402660		       pop     esi
.text:00402661		       pop     ebp
.text:00402662		       retn
.text:00402662 sub_402626      endp
.text:00402662
.text:00402663
.text:00402663 ; =============== S U B R O U T I N E =======================================
.text:00402663
.text:00402663 ; Attributes: bp-based frame
.text:00402663
.text:00402663 sub_402663      proc near	       ; CODE XREF: sub_4041AA+B6Fp
.text:00402663
.text:00402663 var_18	       = dword ptr -18h
.text:00402663 var_14	       = dword ptr -14h
.text:00402663 var_8	       = dword ptr -8
.text:00402663 var_4	       = dword ptr -4
.text:00402663 arg_0	       = dword ptr  8
.text:00402663 arg_4	       = dword ptr  0Ch
.text:00402663 arg_8	       = dword ptr  10h
.text:00402663
.text:00402663		       push    ebp
.text:00402664		       mov     ebp, esp
.text:00402666		       sub     esp, 18h
.text:00402669		       mov     [ebp+var_8], ebx
.text:0040266C		       mov     [ebp+var_4], esi
.text:0040266F		       mov     esi, [ebp+arg_0]
.text:00402672		       mov     ebx, [ebp+arg_4]
.text:00402675		       mov     [esp+18h+var_14], ebx
.text:00402679		       mov     eax, [esi]
.text:0040267B		       mov     [esp+18h+var_18], eax
.text:0040267E		       call    sub_402626
.text:00402683		       mov     edx, [ebp+arg_8]
.text:00402686		       mov     [edx], eax
.text:00402688		       mov     edx, 0
.text:0040268D		       test    eax, eax
.text:0040268F		       jnz     short loc_4026A2
.text:00402691		       mov     [esp+18h+var_14], ebx
.text:00402695		       mov     [esp+18h+var_18], esi
.text:00402698		       call    sub_4025F8
.text:0040269D		       mov     edx, 1
.text:004026A2
.text:004026A2 loc_4026A2:			       ; CODE XREF: sub_402663+2Cj
.text:004026A2		       mov     eax, edx
.text:004026A4		       mov     ebx, [ebp+var_8]
.text:004026A7		       mov     esi, [ebp+var_4]
.text:004026AA		       mov     esp, ebp
.text:004026AC		       pop     ebp
.text:004026AD		       retn
.text:004026AD sub_402663      endp
.text:004026AD
.text:004026AE
.text:004026AE ; =============== S U B R O U T I N E =======================================
.text:004026AE
.text:004026AE ; Attributes: bp-based frame
.text:004026AE
.text:004026AE sub_4026AE      proc near	       ; CODE XREF: sub_402804+Dp
.text:004026AE					       ; sub_402DDA+FAp
.text:004026AE
.text:004026AE var_28	       = dword ptr -28h
.text:004026AE var_24	       = dword ptr -24h
.text:004026AE var_18	       = dword ptr -18h
.text:004026AE var_14	       = dword ptr -14h
.text:004026AE var_10	       = dword ptr -10h
.text:004026AE arg_0	       = dword ptr  8
.text:004026AE
.text:004026AE		       push    ebp
.text:004026AF		       mov     ebp, esp
.text:004026B1		       push    edi
.text:004026B2		       push    esi
.text:004026B3		       push    ebx
.text:004026B4		       sub     esp, 1Ch
.text:004026B7		       mov     esi, [ebp+arg_0]
.text:004026BA		       mov     eax, [esi+288h]
.text:004026C0		       mov     [ebp+var_14], eax
.text:004026C3		       mov     edx, [esi+28Ch]
.text:004026C9		       mov     [ebp+var_10], edx
.text:004026CC		       mov     dword ptr [esi],	0
.text:004026D2		       jmp     loc_4027D6
.text:004026D7 ; ---------------------------------------------------------------------------
.text:004026D7
.text:004026D7 loc_4026D7:			       ; CODE XREF: sub_4026AE+137j
.text:004026D7		       movsx   edi, ax
.text:004026DA		       mov     ecx, edi
.text:004026DC		       sub     ecx, 1
.text:004026DF		       mov     [ebp+var_18], ecx
.text:004026E2		       js      loc_4027BA
.text:004026E8		       movzx   edx, byte ptr [esi+ecx+4]
.text:004026ED		       cmp     dl, 1
.text:004026F0		       jle     short loc_402701
.text:004026F2		       sub     eax, 1
.text:004026F5		       mov     [esi+284h], ax
.text:004026FC		       jmp     loc_4027AE
.text:00402701 ; ---------------------------------------------------------------------------
.text:00402701
.text:00402701 loc_402701:			       ; CODE XREF: sub_4026AE+42j
.text:00402701		       test    dl, dl
.text:00402703		       jnz     short loc_402714
.text:00402705		       mov     edx, [ebp+var_18]
.text:00402708		       mov     eax, [esi+edx*4+84h]
.text:0040270F		       mov     eax, [eax+10h]
.text:00402712		       jmp     short loc_402721
.text:00402714 ; ---------------------------------------------------------------------------
.text:00402714
.text:00402714 loc_402714:			       ; CODE XREF: sub_4026AE+55j
.text:00402714		       mov     ecx, [ebp+var_18]
.text:00402717		       mov     eax, [esi+ecx*4+84h]
.text:0040271E		       mov     eax, [eax+14h]
.text:00402721
.text:00402721 loc_402721:			       ; CODE XREF: sub_4026AE+64j
.text:00402721		       cmp     [ebp+var_14], 0
.text:00402725		       jz      short loc_40278B
.text:00402727		       cmp     [ebp+var_10], 0
.text:0040272B		       jz      short loc_402735
.text:0040272D		       mov     ebx, eax
.text:0040272F		       test    eax, eax
.text:00402731		       jnz     short loc_402764
.text:00402733		       jmp     short loc_4027A6
.text:00402735 ; ---------------------------------------------------------------------------
.text:00402735
.text:00402735 loc_402735:			       ; CODE XREF: sub_4026AE+7Dj
.text:00402735		       test    eax, eax
.text:00402737		       jz      short loc_4027A6
.text:00402739		       mov     ebx, eax
.text:0040273B
.text:0040273B loc_40273B:			       ; CODE XREF: sub_4026AE+B2j
.text:0040273B		       mov     [esp+28h+var_24], ebx
.text:0040273F		       mov     eax, [ebp+var_14]
.text:00402742		       mov     [esp+28h+var_28], eax
.text:00402745		       call    sub_4011A0
.text:0040274A		       test    eax, eax
.text:0040274C		       jns     short loc_402753
.text:0040274E		       mov     ebx, [ebx+10h]
.text:00402751		       jmp     short loc_40275E
.text:00402753 ; ---------------------------------------------------------------------------
.text:00402753
.text:00402753 loc_402753:			       ; CODE XREF: sub_4026AE+9Ej
.text:00402753		       test    eax, eax
.text:00402755		       jg      short loc_40275B
.text:00402757		       mov     eax, ebx
.text:00402759		       jmp     short loc_402792
.text:0040275B ; ---------------------------------------------------------------------------
.text:0040275B
.text:0040275B loc_40275B:			       ; CODE XREF: sub_4026AE+A7j
.text:0040275B		       mov     ebx, [ebx+14h]
.text:0040275E
.text:0040275E loc_40275E:			       ; CODE XREF: sub_4026AE+A3j
.text:0040275E		       test    ebx, ebx
.text:00402760		       jnz     short loc_40273B
.text:00402762		       jmp     short loc_4027A6
.text:00402764 ; ---------------------------------------------------------------------------
.text:00402764
.text:00402764 loc_402764:			       ; CODE XREF: sub_4026AE+83j
.text:00402764					       ; sub_4026AE+D9j
.text:00402764		       mov     [esp+28h+var_24], ebx
.text:00402768		       mov     edx, [ebp+var_14]
.text:0040276B		       mov     [esp+28h+var_28], edx
.text:0040276E		       call    [ebp+var_10]
.text:00402771		       test    eax, eax
.text:00402773		       jns     short loc_40277A
.text:00402775		       mov     ebx, [ebx+10h]
.text:00402778		       jmp     short loc_402785
.text:0040277A ; ---------------------------------------------------------------------------
.text:0040277A
.text:0040277A loc_40277A:			       ; CODE XREF: sub_4026AE+C5j
.text:0040277A		       test    eax, eax
.text:0040277C		       lea     esi, [esi+0]
.text:00402780		       jle     short loc_4027ED
.text:00402782		       mov     ebx, [ebx+14h]
.text:00402785
.text:00402785 loc_402785:			       ; CODE XREF: sub_4026AE+CAj
.text:00402785		       test    ebx, ebx
.text:00402787		       jnz     short loc_402764
.text:00402789		       jmp     short loc_4027A6
.text:0040278B ; ---------------------------------------------------------------------------
.text:0040278B
.text:0040278B loc_40278B:			       ; CODE XREF: sub_4026AE+77j
.text:0040278B		       test    eax, eax
.text:0040278D		       lea     esi, [esi+0]
.text:00402790		       jz      short loc_4027A6
.text:00402792
.text:00402792 loc_402792:			       ; CODE XREF: sub_4026AE+ABj
.text:00402792					       ; sub_4026AE+142j
.text:00402792		       mov     [esi+edi*4+84h],	eax
.text:00402799		       mov     byte ptr	[esi+edi+4], 0
.text:0040279E		       add     word ptr	[esi+284h], 1
.text:004027A6
.text:004027A6 loc_4027A6:			       ; CODE XREF: sub_4026AE+85j
.text:004027A6					       ; sub_4026AE+89j ...
.text:004027A6		       mov     ecx, [ebp+var_18]
.text:004027A9		       add     byte ptr	[esi+ecx+4], 1
.text:004027AE
.text:004027AE loc_4027AE:			       ; CODE XREF: sub_4026AE+4Ej
.text:004027AE		       movzx   eax, word ptr [esi+284h]
.text:004027B5		       test    ax, ax
.text:004027B8		       jle     short loc_4027D6
.text:004027BA
.text:004027BA loc_4027BA:			       ; CODE XREF: sub_4026AE+34j
.text:004027BA		       cwde
.text:004027BB		       lea     edx, [eax-1]
.text:004027BE		       movsx   ax, byte	ptr [esi+edx+4]
.text:004027C4		       cmp     [esi+286h], ax
.text:004027CB		       jnz     short loc_4027D6
.text:004027CD		       mov     eax, [esi+edx*4+84h]
.text:004027D4		       mov     [esi], eax
.text:004027D6
.text:004027D6 loc_4027D6:			       ; CODE XREF: sub_4026AE+24j
.text:004027D6					       ; sub_4026AE+10Aj ...
.text:004027D6		       movzx   eax, word ptr [esi+284h]
.text:004027DD		       test    ax, ax
.text:004027E0		       jle     short loc_4027F2
.text:004027E2		       cmp     dword ptr [esi],	0
.text:004027E5		       jz      loc_4026D7
.text:004027EB		       jmp     short loc_4027F2
.text:004027ED ; ---------------------------------------------------------------------------
.text:004027ED
.text:004027ED loc_4027ED:			       ; CODE XREF: sub_4026AE+D2j
.text:004027ED		       mov     eax, ebx
.text:004027EF		       nop
.text:004027F0		       jmp     short loc_402792
.text:004027F2 ; ---------------------------------------------------------------------------
.text:004027F2
.text:004027F2 loc_4027F2:			       ; CODE XREF: sub_4026AE+132j
.text:004027F2					       ; sub_4026AE+13Dj
.text:004027F2		       add     esp, 1Ch
.text:004027F5		       pop     ebx
.text:004027F6		       pop     esi
.text:004027F7		       pop     edi
.text:004027F8		       pop     ebp
.text:004027F9		       retn
.text:004027F9 sub_4026AE      endp
.text:004027F9
.text:004027FA
.text:004027FA ; =============== S U B R O U T I N E =======================================
.text:004027FA
.text:004027FA ; Attributes: bp-based frame
.text:004027FA
.text:004027FA sub_4027FA      proc near	       ; CODE XREF: sub_4041AA+523p
.text:004027FA
.text:004027FA arg_0	       = dword ptr  8
.text:004027FA
.text:004027FA		       push    ebp
.text:004027FB		       mov     ebp, esp
.text:004027FD		       mov     eax, [ebp+arg_0]
.text:00402800		       mov     eax, [eax]
.text:00402802		       pop     ebp
.text:00402803		       retn
.text:00402803 sub_4027FA      endp
.text:00402803
.text:00402804
.text:00402804 ; =============== S U B R O U T I N E =======================================
.text:00402804
.text:00402804 ; Attributes: bp-based frame
.text:00402804
.text:00402804 sub_402804      proc near	       ; CODE XREF: sub_4041AA+50Fp
.text:00402804					       ; sub_4041AA+63Dp ...
.text:00402804
.text:00402804 var_8	       = dword ptr -8
.text:00402804 arg_0	       = dword ptr  8
.text:00402804
.text:00402804		       push    ebp
.text:00402805		       mov     ebp, esp
.text:00402807		       push    ebx
.text:00402808		       sub     esp, 4
.text:0040280B		       mov     ebx, [ebp+arg_0]
.text:0040280E		       mov     [esp+8+var_8], ebx
.text:00402811		       call    sub_4026AE
.text:00402816		       mov     eax, [ebx]
.text:00402818		       add     esp, 4
.text:0040281B		       pop     ebx
.text:0040281C		       pop     ebp
.text:0040281D		       retn
.text:0040281D sub_402804      endp
.text:0040281D
.text:0040281E
.text:0040281E ; =============== S U B R O U T I N E =======================================
.text:0040281E
.text:0040281E ; Attributes: bp-based frame
.text:0040281E
.text:0040281E sub_40281E      proc near	       ; CODE XREF: sub_406A03+1Ep
.text:0040281E
.text:0040281E arg_0	       = dword ptr  8
.text:0040281E
.text:0040281E		       push    ebp
.text:0040281F		       mov     ebp, esp
.text:00402821		       mov     edx, [ebp+arg_0]
.text:00402824		       mov     eax, 0
.text:00402829
.text:00402829 loc_402829:			       ; CODE XREF: sub_40281E+18j
.text:00402829		       mov     dword ptr [edx+eax*4], 0
.text:00402830		       add     eax, 1
.text:00402833		       cmp     eax, 64h
.text:00402836		       jnz     short loc_402829
.text:00402838		       pop     ebp
.text:00402839		       retn
.text:00402839 sub_40281E      endp
.text:00402839
.text:0040283A
.text:0040283A ; =============== S U B R O U T I N E =======================================
.text:0040283A
.text:0040283A ; Attributes: bp-based frame
.text:0040283A
.text:0040283A sub_40283A      proc near	       ; CODE XREF: sub_406A03+5Ep
.text:0040283A
.text:0040283A var_C	       = dword ptr -0Ch
.text:0040283A var_8	       = dword ptr -8
.text:0040283A arg_0	       = dword ptr  8
.text:0040283A arg_4	       = dword ptr  0Ch
.text:0040283A
.text:0040283A		       push    ebp
.text:0040283B		       mov     ebp, esp
.text:0040283D		       push    ebx
.text:0040283E		       sub     esp, 8
.text:00402841		       mov     ebx, [ebp+arg_4]
.text:00402844		       mov     [esp+0Ch+var_C],	ebx
.text:00402847		       call    sub_4011AF
.text:0040284C		       mov     ecx, eax
.text:0040284E		       mov     [esp+0Ch+var_8],	ebx
.text:00402852		       mov     edx, 51EB851Fh
.text:00402857		       mul     edx
.text:00402859		       shr     edx, 5
.text:0040285C		       imul    edx, 64h
.text:0040285F		       mov     eax, ecx
.text:00402861		       sub     eax, edx
.text:00402863		       mov     edx, [ebp+arg_0]
.text:00402866		       lea     eax, [edx+eax*4]
.text:00402869		       mov     [esp+0Ch+var_C],	eax
.text:0040286C		       call    sub_401272
.text:00402871		       add     esp, 8
.text:00402874		       pop     ebx
.text:00402875		       pop     ebp
.text:00402876		       retn
.text:00402876 sub_40283A      endp
.text:00402876
.text:00402877
.text:00402877 ; =============== S U B R O U T I N E =======================================
.text:00402877
.text:00402877 ; Attributes: bp-based frame
.text:00402877
.text:00402877 sub_402877      proc near	       ; CODE XREF: sub_406A03+4AAp
.text:00402877
.text:00402877 var_10	       = dword ptr -10h
.text:00402877 var_C	       = dword ptr -0Ch
.text:00402877 var_8	       = dword ptr -8
.text:00402877 arg_0	       = dword ptr  8
.text:00402877 arg_4	       = dword ptr  0Ch
.text:00402877 arg_8	       = dword ptr  10h
.text:00402877
.text:00402877		       push    ebp
.text:00402878		       mov     ebp, esp
.text:0040287A		       push    ebx
.text:0040287B		       sub     esp, 0Ch
.text:0040287E		       mov     ebx, [ebp+arg_4]
.text:00402881		       mov     [esp+10h+var_10], ebx
.text:00402884		       call    sub_4011AF
.text:00402889		       mov     ecx, eax
.text:0040288B		       mov     edx, [ebp+arg_8]
.text:0040288E		       mov     [esp+10h+var_8],	edx
.text:00402892		       mov     [esp+10h+var_C],	ebx
.text:00402896		       mov     edx, 51EB851Fh
.text:0040289B		       mul     edx
.text:0040289D		       shr     edx, 5
.text:004028A0		       imul    edx, 64h
.text:004028A3		       mov     eax, ecx
.text:004028A5		       sub     eax, edx
.text:004028A7		       mov     edx, [ebp+arg_0]
.text:004028AA		       lea     eax, [edx+eax*4]
.text:004028AD		       mov     [esp+10h+var_10], eax
.text:004028B0		       call    sub_40121B
.text:004028B5		       add     esp, 0Ch
.text:004028B8		       pop     ebx
.text:004028B9		       pop     ebp
.text:004028BA		       retn
.text:004028BA sub_402877      endp
.text:004028BA
.text:004028BB
.text:004028BB ; =============== S U B R O U T I N E =======================================
.text:004028BB
.text:004028BB ; Attributes: bp-based frame
.text:004028BB
.text:004028BB sub_4028BB      proc near	       ; CODE XREF: sub_406A03+571p
.text:004028BB
.text:004028BB var_10	       = dword ptr -10h
.text:004028BB var_C	       = dword ptr -0Ch
.text:004028BB var_8	       = dword ptr -8
.text:004028BB arg_0	       = dword ptr  8
.text:004028BB arg_4	       = dword ptr  0Ch
.text:004028BB arg_8	       = dword ptr  10h
.text:004028BB
.text:004028BB		       push    ebp
.text:004028BC		       mov     ebp, esp
.text:004028BE		       push    ebx
.text:004028BF		       sub     esp, 0Ch
.text:004028C2		       mov     ebx, [ebp+arg_4]
.text:004028C5		       mov     [esp+10h+var_10], ebx
.text:004028C8		       call    sub_4011AF
.text:004028CD		       mov     ecx, eax
.text:004028CF		       mov     edx, [ebp+arg_8]
.text:004028D2		       mov     [esp+10h+var_8],	edx
.text:004028D6		       mov     [esp+10h+var_C],	ebx
.text:004028DA		       mov     edx, 51EB851Fh
.text:004028DF		       mul     edx
.text:004028E1		       shr     edx, 5
.text:004028E4		       imul    edx, 64h
.text:004028E7		       mov     eax, ecx
.text:004028E9		       sub     eax, edx
.text:004028EB		       mov     edx, [ebp+arg_0]
.text:004028EE		       lea     eax, [edx+eax*4]
.text:004028F1		       mov     [esp+10h+var_10], eax
.text:004028F4		       call    sub_4012A5
.text:004028F9		       add     esp, 0Ch
.text:004028FC		       pop     ebx
.text:004028FD		       pop     ebp
.text:004028FE		       retn
.text:004028FE sub_4028BB      endp
.text:004028FE
.text:004028FF
.text:004028FF ; =============== S U B R O U T I N E =======================================
.text:004028FF
.text:004028FF ; Attributes: bp-based frame
.text:004028FF
.text:004028FF sub_4028FF      proc near	       ; CODE XREF: sub_406A03+332p
.text:004028FF					       ; sub_406A03+3B5p
.text:004028FF
.text:004028FF var_C	       = dword ptr -0Ch
.text:004028FF var_8	       = dword ptr -8
.text:004028FF arg_0	       = dword ptr  8
.text:004028FF arg_4	       = dword ptr  0Ch
.text:004028FF
.text:004028FF		       push    ebp
.text:00402900		       mov     ebp, esp
.text:00402902		       push    ebx
.text:00402903		       sub     esp, 8
.text:00402906		       mov     ebx, [ebp+arg_4]
.text:00402909		       mov     [esp+0Ch+var_C],	ebx
.text:0040290C		       call    sub_4011AF
.text:00402911		       mov     ecx, eax
.text:00402913		       mov     [esp+0Ch+var_8],	ebx
.text:00402917		       mov     edx, 51EB851Fh
.text:0040291C		       mul     edx
.text:0040291E		       shr     edx, 5
.text:00402921		       imul    edx, 64h
.text:00402924		       mov     eax, ecx
.text:00402926		       sub     eax, edx
.text:00402928		       mov     edx, [ebp+arg_0]
.text:0040292B		       mov     eax, [edx+eax*4]
.text:0040292E		       mov     [esp+0Ch+var_C],	eax
.text:00402931		       call    sub_4011B9
.text:00402936		       add     esp, 8
.text:00402939		       pop     ebx
.text:0040293A		       pop     ebp
.text:0040293B		       retn
.text:0040293B sub_4028FF      endp
.text:0040293B
.text:0040293C
.text:0040293C ; =============== S U B R O U T I N E =======================================
.text:0040293C
.text:0040293C ; Attributes: bp-based frame
.text:0040293C
.text:0040293C sub_40293C      proc near	       ; CODE XREF: sub_406A03+2F8p
.text:0040293C					       ; sub_406A03+37Bp ...
.text:0040293C
.text:0040293C var_C	       = dword ptr -0Ch
.text:0040293C var_8	       = dword ptr -8
.text:0040293C arg_0	       = dword ptr  8
.text:0040293C arg_4	       = dword ptr  0Ch
.text:0040293C
.text:0040293C		       push    ebp
.text:0040293D		       mov     ebp, esp
.text:0040293F		       push    ebx
.text:00402940		       sub     esp, 8
.text:00402943		       mov     ebx, [ebp+arg_4]
.text:00402946		       mov     [esp+0Ch+var_C],	ebx
.text:00402949		       call    sub_4011AF
.text:0040294E		       mov     ecx, eax
.text:00402950		       mov     [esp+0Ch+var_8],	ebx
.text:00402954		       mov     edx, 51EB851Fh
.text:00402959		       mul     edx
.text:0040295B		       shr     edx, 5
.text:0040295E		       imul    edx, 64h
.text:00402961		       mov     eax, ecx
.text:00402963		       sub     eax, edx
.text:00402965		       mov     edx, [ebp+arg_0]
.text:00402968		       mov     eax, [edx+eax*4]
.text:0040296B		       mov     [esp+0Ch+var_C],	eax
.text:0040296E		       call    sub_4011E5
.text:00402973		       add     esp, 8
.text:00402976		       pop     ebx
.text:00402977		       pop     ebp
.text:00402978		       retn
.text:00402978 sub_40293C      endp
.text:00402978
.text:00402979 ; ---------------------------------------------------------------------------
.text:00402979		       push    ebp
.text:0040297A		       mov     ebp, esp
.text:0040297C		       sub     esp, 4
.text:0040297F		       mov     eax, [ebp+8]
.text:00402982		       mov     [esp], eax
.text:00402985		       call    sub_40147E
.text:0040298A		       leave
.text:0040298B		       retn
.text:0040298C
.text:0040298C ; =============== S U B R O U T I N E =======================================
.text:0040298C
.text:0040298C ; Attributes: bp-based frame
.text:0040298C
.text:0040298C sub_40298C      proc near	       ; CODE XREF: sub_4029F2+40p
.text:0040298C					       ; sub_406A03+64Fp ...
.text:0040298C
.text:0040298C var_18	       = dword ptr -18h
.text:0040298C var_14	       = dword ptr -14h
.text:0040298C var_10	       = dword ptr -10h
.text:0040298C var_C	       = dword ptr -0Ch
.text:0040298C arg_0	       = dword ptr  8
.text:0040298C
.text:0040298C		       push    ebp
.text:0040298D		       mov     ebp, esp
.text:0040298F		       push    esi
.text:00402990		       push    ebx
.text:00402991		       sub     esp, 10h
.text:00402994		       mov     ebx, [ebp+arg_0]
.text:00402997		       mov     esi, ebx
.text:00402999		       mov     [esp+18h+var_18], ebx
.text:0040299C		       call    sub_401488
.text:004029A1		       mov     ecx, eax
.text:004029A3		       test    eax, eax
.text:004029A5		       jnz     short loc_4029E9
.text:004029A7		       mov     eax, [ebx+14h]
.text:004029AA		       lea     edx, [eax+1]
.text:004029AD		       mov     [ebx+14h], edx
.text:004029B0		       cmp     edx, 63h
.text:004029B3		       jg      short loc_4029E9
.text:004029B5
.text:004029B5 loc_4029B5:			       ; CODE XREF: sub_40298C+5Bj
.text:004029B5		       mov     eax, [ebx+1Ch]
.text:004029B8		       mov     [esp+18h+var_C],	eax
.text:004029BC		       mov     eax, [ebx+18h]
.text:004029BF		       mov     [esp+18h+var_10], eax
.text:004029C3		       mov     eax, [ebx+10h]
.text:004029C6		       mov     eax, [eax+edx*4]
.text:004029C9		       mov     [esp+18h+var_14], eax
.text:004029CD		       mov     [esp+18h+var_18], esi
.text:004029D0		       call    sub_4014EE
.text:004029D5		       mov     ecx, eax
.text:004029D7		       test    eax, eax
.text:004029D9		       jnz     short loc_4029E9
.text:004029DB		       mov     eax, [ebx+14h]
.text:004029DE		       lea     edx, [eax+1]
.text:004029E1		       mov     [ebx+14h], edx
.text:004029E4		       cmp     edx, 63h
.text:004029E7		       jle     short loc_4029B5
.text:004029E9
.text:004029E9 loc_4029E9:			       ; CODE XREF: sub_40298C+19j
.text:004029E9					       ; sub_40298C+27j ...
.text:004029E9		       mov     eax, ecx
.text:004029EB		       add     esp, 10h
.text:004029EE		       pop     ebx
.text:004029EF		       pop     esi
.text:004029F0		       pop     ebp
.text:004029F1		       retn
.text:004029F1 sub_40298C      endp
.text:004029F1
.text:004029F2
.text:004029F2 ; =============== S U B R O U T I N E =======================================
.text:004029F2
.text:004029F2 ; Attributes: bp-based frame
.text:004029F2
.text:004029F2 sub_4029F2      proc near	       ; CODE XREF: sub_402A3D+23p
.text:004029F2					       ; sub_406A03+6D2p
.text:004029F2
.text:004029F2 var_18	       = dword ptr -18h
.text:004029F2 var_14	       = dword ptr -14h
.text:004029F2 var_10	       = dword ptr -10h
.text:004029F2 var_C	       = dword ptr -0Ch
.text:004029F2 arg_0	       = dword ptr  8
.text:004029F2 arg_4	       = dword ptr  0Ch
.text:004029F2 arg_8	       = dword ptr  10h
.text:004029F2 arg_C	       = dword ptr  14h
.text:004029F2
.text:004029F2		       push    ebp
.text:004029F3		       mov     ebp, esp
.text:004029F5		       push    ebx
.text:004029F6		       sub     esp, 14h
.text:004029F9		       mov     ebx, [ebp+arg_0]
.text:004029FC		       mov     ecx, [ebp+arg_4]
.text:004029FF		       mov     edx, [ebp+arg_8]
.text:00402A02		       mov     eax, [ebp+arg_C]
.text:00402A05		       mov     [ebx+10h], ecx
.text:00402A08		       mov     dword ptr [ebx+14h], 0
.text:00402A0F		       mov     [ebx+18h], edx
.text:00402A12		       mov     [ebx+1Ch], eax
.text:00402A15		       mov     [esp+18h+var_C],	eax
.text:00402A19		       mov     [esp+18h+var_10], edx
.text:00402A1D		       mov     eax, [ecx]
.text:00402A1F		       mov     [esp+18h+var_14], eax
.text:00402A23		       mov     [esp+18h+var_18], ebx
.text:00402A26		       call    sub_4014EE
.text:00402A2B		       test    eax, eax
.text:00402A2D		       jnz     short loc_402A37
.text:00402A2F		       mov     [esp+18h+var_18], ebx
.text:00402A32		       call    sub_40298C
.text:00402A37
.text:00402A37 loc_402A37:			       ; CODE XREF: sub_4029F2+3Bj
.text:00402A37		       add     esp, 14h
.text:00402A3A		       pop     ebx
.text:00402A3B		       pop     ebp
.text:00402A3C		       retn
.text:00402A3C sub_4029F2      endp
.text:00402A3C
.text:00402A3D
.text:00402A3D ; =============== S U B R O U T I N E =======================================
.text:00402A3D
.text:00402A3D ; Attributes: bp-based frame
.text:00402A3D
.text:00402A3D sub_402A3D      proc near	       ; CODE XREF: sub_406A03+601p
.text:00402A3D					       ; sub_406A03+76Ep
.text:00402A3D
.text:00402A3D var_18	       = dword ptr -18h
.text:00402A3D var_14	       = dword ptr -14h
.text:00402A3D var_10	       = dword ptr -10h
.text:00402A3D var_C	       = dword ptr -0Ch
.text:00402A3D arg_0	       = dword ptr  8
.text:00402A3D arg_4	       = dword ptr  0Ch
.text:00402A3D
.text:00402A3D		       push    ebp
.text:00402A3E		       mov     ebp, esp
.text:00402A40		       sub     esp, 18h
.text:00402A43		       mov     [esp+18h+var_C],	0
.text:00402A4B		       mov     [esp+18h+var_10], 0
.text:00402A53		       mov     eax, [ebp+arg_4]
.text:00402A56		       mov     [esp+18h+var_14], eax
.text:00402A5A		       mov     eax, [ebp+arg_0]
.text:00402A5D		       mov     [esp+18h+var_18], eax
.text:00402A60		       call    sub_4029F2
.text:00402A65		       leave
.text:00402A66		       retn
.text:00402A66 sub_402A3D      endp
.text:00402A66
.text:00402A67
.text:00402A67 ; =============== S U B R O U T I N E =======================================
.text:00402A67
.text:00402A67 ; Attributes: bp-based frame
.text:00402A67
.text:00402A67 sub_402A67      proc near	       ; CODE XREF: sub_402AD6+14p
.text:00402A67					       ; sub_402AD6+25p
.text:00402A67
.text:00402A67 var_18	       = dword ptr -18h
.text:00402A67 var_14	       = dword ptr -14h
.text:00402A67 var_10	       = dword ptr -10h
.text:00402A67 var_C	       = dword ptr -0Ch
.text:00402A67 arg_0	       = dword ptr  8
.text:00402A67
.text:00402A67		       push    ebp
.text:00402A68		       mov     ebp, esp
.text:00402A6A		       sub     esp, 18h
.text:00402A6D		       mov     edx, [ebp+arg_0]
.text:00402A70		       test    edx, edx
.text:00402A72		       jz      short locret_402AD4
.text:00402A74		       mov     eax, [edx+8]
.text:00402A77		       test    eax, eax
.text:00402A79		       jz      short loc_402AA4
.text:00402A7B		       cmp     [eax+4],	edx
.text:00402A7E		       jz      short loc_402AA4
.text:00402A80		       mov     [esp+18h+var_C],	offset aLPreviousNextL ; "l->previous->next == l"
.text:00402A88		       mov     [esp+18h+var_10], offset	aCheck_double_l	; "check_double_linked_list_element"
.text:00402A90		       mov     [esp+18h+var_14], 0DEh
.text:00402A98		       mov     [esp+18h+var_18], offset	aSelftest_c ; "selftest.c"
.text:00402A9F		       call    __assert_func
.text:00402AA4
.text:00402AA4 loc_402AA4:			       ; CODE XREF: sub_402A67+12j
.text:00402AA4					       ; sub_402A67+17j
.text:00402AA4		       mov     eax, [edx+4]
.text:00402AA7		       test    eax, eax
.text:00402AA9		       jz      short locret_402AD4
.text:00402AAB		       cmp     [eax+8],	edx
.text:00402AAE		       jz      short locret_402AD4
.text:00402AB0		       mov     [esp+18h+var_C],	offset aLNextPreviousL ; "l->next->previous == l"
.text:00402AB8		       mov     [esp+18h+var_10], offset	aCheck_double_l	; "check_double_linked_list_element"
.text:00402AC0		       mov     [esp+18h+var_14], 0DFh
.text:00402AC8		       mov     [esp+18h+var_18], offset	aSelftest_c ; "selftest.c"
.text:00402ACF		       call    __assert_func
.text:00402AD4
.text:00402AD4 locret_402AD4:			       ; CODE XREF: sub_402A67+Bj
.text:00402AD4					       ; sub_402A67+42j ...
.text:00402AD4		       leave
.text:00402AD5		       retn
.text:00402AD5 sub_402A67      endp
.text:00402AD5
.text:00402AD6
.text:00402AD6 ; =============== S U B R O U T I N E =======================================
.text:00402AD6
.text:00402AD6 ; Attributes: bp-based frame
.text:00402AD6
.text:00402AD6 sub_402AD6      proc near	       ; CODE XREF: sub_4059BC+BCp
.text:00402AD6					       ; sub_4059BC+FBp ...
.text:00402AD6
.text:00402AD6 var_18	       = dword ptr -18h
.text:00402AD6 arg_0	       = dword ptr  8
.text:00402AD6
.text:00402AD6		       push    ebp
.text:00402AD7		       mov     ebp, esp
.text:00402AD9		       push    esi
.text:00402ADA		       push    ebx
.text:00402ADB		       sub     esp, 10h
.text:00402ADE		       mov     esi, [ebp+arg_0]
.text:00402AE1		       test    esi, esi
.text:00402AE3		       jz      short loc_402B07
.text:00402AE5		       mov     ebx, esi
.text:00402AE7
.text:00402AE7 loc_402AE7:			       ; CODE XREF: sub_402AD6+1Ej
.text:00402AE7		       mov     [esp+18h+var_18], ebx
.text:00402AEA		       call    sub_402A67
.text:00402AEF		       mov     ebx, [ebx+8]
.text:00402AF2		       test    ebx, ebx
.text:00402AF4		       jnz     short loc_402AE7
.text:00402AF6		       mov     ebx, esi
.text:00402AF8
.text:00402AF8 loc_402AF8:			       ; CODE XREF: sub_402AD6+2Fj
.text:00402AF8		       mov     [esp+18h+var_18], ebx
.text:00402AFB		       call    sub_402A67
.text:00402B00		       mov     ebx, [ebx+4]
.text:00402B03		       test    ebx, ebx
.text:00402B05		       jnz     short loc_402AF8
.text:00402B07
.text:00402B07 loc_402B07:			       ; CODE XREF: sub_402AD6+Dj
.text:00402B07		       add     esp, 10h
.text:00402B0A		       pop     ebx
.text:00402B0B		       pop     esi
.text:00402B0C		       pop     ebp
.text:00402B0D		       retn
.text:00402B0D sub_402AD6      endp
.text:00402B0D
.text:00402B0E
.text:00402B0E ; =============== S U B R O U T I N E =======================================
.text:00402B0E
.text:00402B0E ; Attributes: bp-based frame
.text:00402B0E
.text:00402B0E sub_402B0E      proc near	       ; CODE XREF: sub_4059BC+22Cp
.text:00402B0E					       ; sub_4059BC+244p ...
.text:00402B0E
.text:00402B0E var_18	       = dword ptr -18h
.text:00402B0E var_14	       = dword ptr -14h
.text:00402B0E var_10	       = dword ptr -10h
.text:00402B0E var_C	       = dword ptr -0Ch
.text:00402B0E arg_0	       = dword ptr  8
.text:00402B0E arg_4	       = dword ptr  0Ch
.text:00402B0E
.text:00402B0E		       push    ebp
.text:00402B0F		       mov     ebp, esp
.text:00402B11		       push    ebx
.text:00402B12		       sub     esp, 14h
.text:00402B15		       mov     edx, [ebp+arg_0]
.text:00402B18		       mov     ebx, [ebp+arg_4]
.text:00402B1B		       mov     ecx, ebx
.text:00402B1D		       test    edx, edx
.text:00402B1F		       jz      short loc_402B6A
.text:00402B21		       test    ebx, ebx
.text:00402B23		       jz      short loc_402B3C
.text:00402B25		       mov     eax, [edx]
.text:00402B27		       mov     ecx, ebx
.text:00402B29		       cmp     eax, [ebx]
.text:00402B2B		       jz      short loc_402B60
.text:00402B2D		       lea     esi, [esi+0]
.text:00402B30		       jmp     short loc_402B3C
.text:00402B32 ; ---------------------------------------------------------------------------
.text:00402B32
.text:00402B32 loc_402B32:			       ; CODE XREF: sub_402B0E+5Aj
.text:00402B32		       test    ecx, ecx
.text:00402B34		       jz      short loc_402B3C
.text:00402B36		       mov     eax, [edx]
.text:00402B38		       cmp     eax, [ecx]
.text:00402B3A		       jz      short loc_402B60
.text:00402B3C
.text:00402B3C loc_402B3C:			       ; CODE XREF: sub_402B0E+15j
.text:00402B3C					       ; sub_402B0E+22j ...
.text:00402B3C		       mov     [esp+18h+var_C],	offset aL2NullL1NL2N ; "l2!=NULL && l1->n == l2->n"
.text:00402B44		       mov     [esp+18h+var_10], offset	aCheck_list_equ	; "check_list_equality"
.text:00402B4C		       mov     [esp+18h+var_14], 0A9h
.text:00402B54		       mov     [esp+18h+var_18], offset	aSelftest_c ; "selftest.c"
.text:00402B5B		       call    __assert_func
.text:00402B60
.text:00402B60 loc_402B60:			       ; CODE XREF: sub_402B0E+1Dj
.text:00402B60					       ; sub_402B0E+2Cj
.text:00402B60		       mov     edx, [edx+4]
.text:00402B63		       mov     ecx, [ecx+4]
.text:00402B66		       test    edx, edx
.text:00402B68		       jnz     short loc_402B32
.text:00402B6A
.text:00402B6A loc_402B6A:			       ; CODE XREF: sub_402B0E+11j
.text:00402B6A		       test    ecx, ecx
.text:00402B6C		       jz      short loc_402B92
.text:00402B6E		       mov     [esp+18h+var_C],	offset aL2Null ; "l2 ==	NULL"
.text:00402B76		       mov     [esp+18h+var_10], offset	aCheck_list_equ	; "check_list_equality"
.text:00402B7E		       mov     [esp+18h+var_14], 0ADh
.text:00402B86		       mov     [esp+18h+var_18], offset	aSelftest_c ; "selftest.c"
.text:00402B8D		       call    __assert_func
.text:00402B92
.text:00402B92 loc_402B92:			       ; CODE XREF: sub_402B0E+5Ej
.text:00402B92		       add     esp, 14h
.text:00402B95		       pop     ebx
.text:00402B96		       pop     ebp
.text:00402B97		       retn
.text:00402B97 sub_402B0E      endp
.text:00402B97
.text:00402B98
.text:00402B98 ; =============== S U B R O U T I N E =======================================
.text:00402B98
.text:00402B98 ; Attributes: bp-based frame
.text:00402B98
.text:00402B98 sub_402B98      proc near	       ; CODE XREF: sub_403FDE+44p
.text:00402B98					       ; sub_404029+44p
.text:00402B98
.text:00402B98 var_18	       = dword ptr -18h
.text:00402B98 var_14	       = dword ptr -14h
.text:00402B98 var_10	       = dword ptr -10h
.text:00402B98 var_C	       = dword ptr -0Ch
.text:00402B98 arg_0	       = dword ptr  8
.text:00402B98 arg_4	       = dword ptr  0Ch
.text:00402B98
.text:00402B98		       push    ebp
.text:00402B99		       mov     ebp, esp
.text:00402B9B		       push    ebx
.text:00402B9C		       sub     esp, 14h
.text:00402B9F		       mov     ebx, [ebp+arg_0]
.text:00402BA2		       mov     ecx, [ebp+arg_4]
.text:00402BA5		       mov     eax, 0
.text:00402BAA
.text:00402BAA loc_402BAA:			       ; CODE XREF: sub_402B98+74j
.text:00402BAA		       cmp     dword ptr [ebx+eax*4], 0
.text:00402BAE		       jnz     short loc_402BDA
.text:00402BB0		       cmp     dword ptr [ecx+eax*4], 0
.text:00402BB4		       jz      short loc_402C04
.text:00402BB6		       mov     [esp+18h+var_C],	offset aCheck_countsI0 ; "check_counts[i]==0"
.text:00402BBE		       mov     [esp+18h+var_10], offset	aCompare_unique	; "compare_unique_counts"
.text:00402BC6		       mov     [esp+18h+var_14], 82h
.text:00402BCE		       mov     [esp+18h+var_18], offset	aSelftest_c ; "selftest.c"
.text:00402BD5		       call    __assert_func
.text:00402BDA
.text:00402BDA loc_402BDA:			       ; CODE XREF: sub_402B98+16j
.text:00402BDA		       cmp     dword ptr [ecx+eax*4], 1
.text:00402BDE		       jz      short loc_402C04
.text:00402BE0		       mov     [esp+18h+var_C],	offset aCheck_countsI1 ; "check_counts[i]==1"
.text:00402BE8		       mov     [esp+18h+var_10], offset	aCompare_unique	; "compare_unique_counts"
.text:00402BF0		       mov     [esp+18h+var_14], 83h
.text:00402BF8		       mov     [esp+18h+var_18], offset	aSelftest_c ; "selftest.c"
.text:00402BFF		       call    __assert_func
.text:00402C04
.text:00402C04 loc_402C04:			       ; CODE XREF: sub_402B98+1Cj
.text:00402C04					       ; sub_402B98+46j
.text:00402C04		       add     eax, 1
.text:00402C07		       cmp     eax, 3E8h
.text:00402C0C		       jnz     short loc_402BAA
.text:00402C0E		       add     esp, 14h
.text:00402C11		       pop     ebx
.text:00402C12		       pop     ebp
.text:00402C13		       retn
.text:00402C13 sub_402B98      endp
.text:00402C13
.text:00402C14
.text:00402C14 ; =============== S U B R O U T I N E =======================================
.text:00402C14
.text:00402C14 ; Attributes: bp-based frame
.text:00402C14
.text:00402C14 sub_402C14      proc near	       ; CODE XREF: sub_402C14+138p
.text:00402C14					       ; sub_402C14+146p ...
.text:00402C14
.text:00402C14 var_28	       = dword ptr -28h
.text:00402C14 var_24	       = dword ptr -24h
.text:00402C14 var_20	       = dword ptr -20h
.text:00402C14 var_1C	       = dword ptr -1Ch
.text:00402C14 var_14	       = dword ptr -14h
.text:00402C14 var_10	       = dword ptr -10h
.text:00402C14 var_C	       = dword ptr -0Ch
.text:00402C14 var_8	       = dword ptr -8
.text:00402C14 var_4	       = dword ptr -4
.text:00402C14
.text:00402C14		       push    ebp
.text:00402C15		       mov     ebp, esp
.text:00402C17		       sub     esp, 28h
.text:00402C1A		       mov     [ebp+var_C], ebx
.text:00402C1D		       mov     [ebp+var_8], esi
.text:00402C20		       mov     [ebp+var_4], edi
.text:00402C23		       mov     esi, eax
.text:00402C25		       mov     [ebp+var_10], edx
.text:00402C28		       mov     [ebp+var_14], ecx
.text:00402C2B		       test    eax, eax
.text:00402C2D		       jnz     short loc_402C6A
.text:00402C2F		       mov     eax, [edx]
.text:00402C31		       test    eax, eax
.text:00402C33		       jns     short loc_402C3C
.text:00402C35		       mov     [edx], ecx
.text:00402C37		       jmp     loc_402D80
.text:00402C3C ; ---------------------------------------------------------------------------
.text:00402C3C
.text:00402C3C loc_402C3C:			       ; CODE XREF: sub_402C14+1Fj
.text:00402C3C		       cmp     eax, [ebp+var_14]
.text:00402C3F		       nop
.text:00402C40		       jz      loc_402D80
.text:00402C46		       mov     [esp+28h+var_1C], offset	aPathdeepCdeep ; "*pathdeep == cdeep"
.text:00402C4E		       mov     [esp+28h+var_20], offset	aSglib___tree_c	; "sglib___Tree_consistency_check_recursiv"...
.text:00402C56		       mov     [esp+28h+var_24], 48h
.text:00402C5E		       mov     [esp+28h+var_28], offset	aSelftest_c ; "selftest.c"
.text:00402C65		       call    __assert_func
.text:00402C6A
.text:00402C6A loc_402C6A:			       ; CODE XREF: sub_402C14+19j
.text:00402C6A		       mov     edi, [eax+10h]
.text:00402C6D		       test    edi, edi
.text:00402C6F		       jz      short loc_402CA5
.text:00402C71		       mov     [esp+28h+var_24], eax
.text:00402C75		       mov     [esp+28h+var_28], edi
.text:00402C78		       call    sub_4011A0
.text:00402C7D		       test    eax, eax
.text:00402C7F		       jle     short loc_402CA5
.text:00402C81		       mov     [esp+28h+var_1C], offset	aMylistcmpTLeft	; "myListCmp(t->left_ptr, t) <=	0"
.text:00402C89		       mov     [esp+28h+var_20], offset	aSglib___tree_c	; "sglib___Tree_consistency_check_recursiv"...
.text:00402C91		       mov     [esp+28h+var_24], 48h
.text:00402C99		       mov     [esp+28h+var_28], offset	aSelftest_c ; "selftest.c"
.text:00402CA0		       call    __assert_func
.text:00402CA5
.text:00402CA5 loc_402CA5:			       ; CODE XREF: sub_402C14+5Bj
.text:00402CA5					       ; sub_402C14+6Bj
.text:00402CA5		       mov     ebx, [esi+14h]
.text:00402CA8		       test    ebx, ebx
.text:00402CAA		       jz      short loc_402CE0
.text:00402CAC		       mov     [esp+28h+var_24], ebx
.text:00402CB0		       mov     [esp+28h+var_28], esi
.text:00402CB3		       call    sub_4011A0
.text:00402CB8		       test    eax, eax
.text:00402CBA		       jle     short loc_402CE0
.text:00402CBC		       mov     [esp+28h+var_1C], offset	aMylistcmpTTRig	; "myListCmp(t,	t->right_ptr) <= 0"
.text:00402CC4		       mov     [esp+28h+var_20], offset	aSglib___tree_c	; "sglib___Tree_consistency_check_recursiv"...
.text:00402CCC		       mov     [esp+28h+var_24], 48h
.text:00402CD4		       mov     [esp+28h+var_28], offset	aSelftest_c ; "selftest.c"
.text:00402CDB		       call    __assert_func
.text:00402CE0
.text:00402CE0 loc_402CE0:			       ; CODE XREF: sub_402C14+96j
.text:00402CE0					       ; sub_402C14+A6j
.text:00402CE0		       cmp     byte ptr	[esi+0Ch], 1
.text:00402CE4		       jnz     short loc_402D61
.text:00402CE6		       test    edi, edi
.text:00402CE8		       jz      short loc_402D16
.text:00402CEA		       cmp     byte ptr	[edi+0Ch], 0
.text:00402CEE		       db      66h
.text:00402CEE		       nop
.text:00402CF0		       jz      short loc_402D16
.text:00402CF2		       mov     [esp+28h+var_1C], offset	aTLeft_ptrNullS	; "t->left_ptr == NULL || SGLIB___GET_VALU"...
.text:00402CFA		       mov     [esp+28h+var_20], offset	aSglib___tree_c	; "sglib___Tree_consistency_check_recursiv"...
.text:00402D02		       mov     [esp+28h+var_24], 48h
.text:00402D0A		       mov     [esp+28h+var_28], offset	aSelftest_c ; "selftest.c"
.text:00402D11		       call    __assert_func
.text:00402D16
.text:00402D16 loc_402D16:			       ; CODE XREF: sub_402C14+D4j
.text:00402D16					       ; sub_402C14+DCj
.text:00402D16		       test    ebx, ebx
.text:00402D18		       jz      short loc_402D44
.text:00402D1A		       cmp     byte ptr	[ebx+0Ch], 0
.text:00402D1E		       jz      short loc_402D44
.text:00402D20		       mov     [esp+28h+var_1C], offset	aTRight_ptrNull	; "t->right_ptr	== NULL	|| SGLIB___GET_VAL"...
.text:00402D28		       mov     [esp+28h+var_20], offset	aSglib___tree_c	; "sglib___Tree_consistency_check_recursiv"...
.text:00402D30		       mov     [esp+28h+var_24], 48h
.text:00402D38		       mov     [esp+28h+var_28], offset	aSelftest_c ; "selftest.c"
.text:00402D3F		       call    __assert_func
.text:00402D44
.text:00402D44 loc_402D44:			       ; CODE XREF: sub_402C14+104j
.text:00402D44					       ; sub_402C14+10Aj
.text:00402D44		       mov     ecx, [ebp+var_14]
.text:00402D47		       mov     edx, [ebp+var_10]
.text:00402D4A		       mov     eax, edi
.text:00402D4C		       call    sub_402C14
.text:00402D51		       mov     eax, [esi+14h]
.text:00402D54		       mov     ecx, [ebp+var_14]
.text:00402D57		       mov     edx, [ebp+var_10]
.text:00402D5A		       call    sub_402C14
.text:00402D5F		       jmp     short loc_402D80
.text:00402D61 ; ---------------------------------------------------------------------------
.text:00402D61
.text:00402D61 loc_402D61:			       ; CODE XREF: sub_402C14+D0j
.text:00402D61		       mov     ebx, [ebp+var_14]
.text:00402D64		       add     ebx, 1
.text:00402D67		       mov     ecx, ebx
.text:00402D69		       mov     edx, [ebp+var_10]
.text:00402D6C		       mov     eax, edi
.text:00402D6E		       call    sub_402C14
.text:00402D73		       mov     eax, [esi+14h]
.text:00402D76		       mov     ecx, ebx
.text:00402D78		       mov     edx, [ebp+var_10]
.text:00402D7B		       call    sub_402C14
.text:00402D80
.text:00402D80 loc_402D80:			       ; CODE XREF: sub_402C14+23j
.text:00402D80					       ; sub_402C14+2Cj ...
.text:00402D80		       mov     ebx, [ebp+var_C]
.text:00402D83		       mov     esi, [ebp+var_8]
.text:00402D86		       mov     edi, [ebp+var_4]
.text:00402D89		       mov     esp, ebp
.text:00402D8B		       pop     ebp
.text:00402D8C		       retn
.text:00402D8C sub_402C14      endp
.text:00402D8C
.text:00402D8D
.text:00402D8D ; =============== S U B R O U T I N E =======================================
.text:00402D8D
.text:00402D8D ; Attributes: bp-based frame
.text:00402D8D
.text:00402D8D sub_402D8D      proc near	       ; CODE XREF: sub_4041AA+9Ep
.text:00402D8D					       ; sub_4041AA+AE7p ...
.text:00402D8D
.text:00402D8D var_28	       = dword ptr -28h
.text:00402D8D var_24	       = dword ptr -24h
.text:00402D8D var_20	       = dword ptr -20h
.text:00402D8D var_1C	       = dword ptr -1Ch
.text:00402D8D var_4	       = dword ptr -4
.text:00402D8D arg_0	       = dword ptr  8
.text:00402D8D
.text:00402D8D		       push    ebp
.text:00402D8E		       mov     ebp, esp
.text:00402D90		       sub     esp, 28h
.text:00402D93		       mov     eax, [ebp+arg_0]
.text:00402D96		       test    eax, eax
.text:00402D98		       jz      short loc_402DC4
.text:00402D9A		       cmp     byte ptr	[eax+0Ch], 0
.text:00402D9E		       jz      short loc_402DC4
.text:00402DA0		       mov     [esp+28h+var_1C], offset	aTNullSglib___g	; "t==NULL || SGLIB___GET_VALUE(t->color) "...
.text:00402DA8		       mov     [esp+28h+var_20], offset	aSglib___tree_0	; "sglib___Tree_consistency_check"
.text:00402DB0		       mov     [esp+28h+var_24], 48h
.text:00402DB8		       mov     [esp+28h+var_28], offset	aSelftest_c ; "selftest.c"
.text:00402DBF		       call    __assert_func
.text:00402DC4
.text:00402DC4 loc_402DC4:			       ; CODE XREF: sub_402D8D+Bj
.text:00402DC4					       ; sub_402D8D+11j
.text:00402DC4		       mov     [ebp+var_4], 0FFFFFFFFh
.text:00402DCB		       lea     edx, [ebp+var_4]
.text:00402DCE		       mov     ecx, 0
.text:00402DD3		       call    sub_402C14
.text:00402DD8		       leave
.text:00402DD9		       retn
.text:00402DD9 sub_402D8D      endp
.text:00402DD9
.text:00402DDA
.text:00402DDA ; =============== S U B R O U T I N E =======================================
.text:00402DDA
.text:00402DDA ; Attributes: bp-based frame
.text:00402DDA
.text:00402DDA sub_402DDA      proc near	       ; CODE XREF: sub_402EEA+29p
.text:00402DDA					       ; .text:00402F45p ...
.text:00402DDA
.text:00402DDA var_28	       = dword ptr -28h
.text:00402DDA var_24	       = dword ptr -24h
.text:00402DDA var_20	       = dword ptr -20h
.text:00402DDA var_1C	       = dword ptr -1Ch
.text:00402DDA arg_0	       = dword ptr  8
.text:00402DDA arg_4	       = dword ptr  0Ch
.text:00402DDA arg_8	       = dword ptr  10h
.text:00402DDA arg_C	       = dword ptr  14h
.text:00402DDA arg_10	       = dword ptr  18h
.text:00402DDA
.text:00402DDA		       push    ebp
.text:00402DDB		       mov     ebp, esp
.text:00402DDD		       push    edi
.text:00402DDE		       push    esi
.text:00402DDF		       push    ebx
.text:00402DE0		       sub     esp, 1Ch
.text:00402DE3		       mov     edx, [ebp+arg_4]
.text:00402DE6		       mov     esi, [ebp+arg_C]
.text:00402DE9		       mov     edi, [ebp+arg_10]
.text:00402DEC		       cmp     [ebp+arg_0], 0
.text:00402DF0		       jnz     short loc_402E16
.text:00402DF2		       mov     [esp+28h+var_1C], offset	aItNull	; "it!=NULL"
.text:00402DFA		       mov     [esp+28h+var_20], offset	aSglib__tree_it	; "sglib__Tree_it_init"
.text:00402E02		       mov     [esp+28h+var_24], 48h
.text:00402E0A		       mov     [esp+28h+var_28], offset	aSelftest_c ; "selftest.c"
.text:00402E11		       call    __assert_func
.text:00402E16
.text:00402E16 loc_402E16:			       ; CODE XREF: sub_402DDA+16j
.text:00402E16		       movzx   ecx, word ptr [ebp+arg_8]
.text:00402E1A		       mov     eax, [ebp+arg_0]
.text:00402E1D		       mov     [eax+286h], cx
.text:00402E24		       mov     [eax+288h], edi
.text:00402E2A		       mov     [eax+28Ch], esi
.text:00402E30		       test    edi, edi
.text:00402E32		       jz      short loc_402E94
.text:00402E34		       test    esi, esi
.text:00402E36		       jz      short loc_402E42
.text:00402E38		       mov     ebx, edx
.text:00402E3A		       test    edx, edx
.text:00402E3C		       jnz     short loc_402E72
.text:00402E3E		       db      66h
.text:00402E3E		       nop
.text:00402E40		       jmp     short loc_402E9A
.text:00402E42 ; ---------------------------------------------------------------------------
.text:00402E42
.text:00402E42 loc_402E42:			       ; CODE XREF: sub_402DDA+5Cj
.text:00402E42		       test    edx, edx
.text:00402E44		       jz      short loc_402E9A
.text:00402E46		       mov     ebx, edx
.text:00402E48
.text:00402E48 loc_402E48:			       ; CODE XREF: sub_402DDA+91j
.text:00402E48		       mov     [esp+28h+var_24], ebx
.text:00402E4C		       mov     [esp+28h+var_28], edi
.text:00402E4F		       call    sub_4011A0
.text:00402E54		       test    eax, eax
.text:00402E56		       jns     short loc_402E5D
.text:00402E58		       mov     ebx, [ebx+10h]
.text:00402E5B		       jmp     short loc_402E69
.text:00402E5D ; ---------------------------------------------------------------------------
.text:00402E5D
.text:00402E5D loc_402E5D:			       ; CODE XREF: sub_402DDA+7Cj
.text:00402E5D		       test    eax, eax
.text:00402E5F		       nop
.text:00402E60		       jg      short loc_402E66
.text:00402E62		       mov     eax, ebx
.text:00402E64		       jmp     short loc_402EAE
.text:00402E66 ; ---------------------------------------------------------------------------
.text:00402E66
.text:00402E66 loc_402E66:			       ; CODE XREF: sub_402DDA+86j
.text:00402E66		       mov     ebx, [ebx+14h]
.text:00402E69
.text:00402E69 loc_402E69:			       ; CODE XREF: sub_402DDA+81j
.text:00402E69		       test    ebx, ebx
.text:00402E6B		       jnz     short loc_402E48
.text:00402E6D		       lea     esi, [esi+0]
.text:00402E70		       jmp     short loc_402E9A
.text:00402E72 ; ---------------------------------------------------------------------------
.text:00402E72
.text:00402E72 loc_402E72:			       ; CODE XREF: sub_402DDA+62j
.text:00402E72					       ; sub_402DDA+B6j
.text:00402E72		       mov     [esp+28h+var_24], ebx
.text:00402E76		       mov     [esp+28h+var_28], edi
.text:00402E79		       call    esi
.text:00402E7B		       test    eax, eax
.text:00402E7D		       lea     esi, [esi+0]
.text:00402E80		       jns     short loc_402E87
.text:00402E82		       mov     ebx, [ebx+10h]
.text:00402E85		       jmp     short loc_402E8E
.text:00402E87 ; ---------------------------------------------------------------------------
.text:00402E87
.text:00402E87 loc_402E87:			       ; CODE XREF: sub_402DDA+A6j
.text:00402E87		       test    eax, eax
.text:00402E89		       jle     short loc_402EE6
.text:00402E8B		       mov     ebx, [ebx+14h]
.text:00402E8E
.text:00402E8E loc_402E8E:			       ; CODE XREF: sub_402DDA+ABj
.text:00402E8E		       test    ebx, ebx
.text:00402E90		       jnz     short loc_402E72
.text:00402E92		       jmp     short loc_402E9A
.text:00402E94 ; ---------------------------------------------------------------------------
.text:00402E94
.text:00402E94 loc_402E94:			       ; CODE XREF: sub_402DDA+58j
.text:00402E94		       mov     eax, edx
.text:00402E96		       test    edx, edx
.text:00402E98		       jnz     short loc_402EAE
.text:00402E9A
.text:00402E9A loc_402E9A:			       ; CODE XREF: sub_402DDA+66j
.text:00402E9A					       ; sub_402DDA+6Aj ...
.text:00402E9A		       mov     eax, [ebp+arg_0]
.text:00402E9D		       mov     word ptr	[eax+284h], 0
.text:00402EA6		       mov     dword ptr [eax],	0
.text:00402EAC		       jmp     short loc_402ED9
.text:00402EAE ; ---------------------------------------------------------------------------
.text:00402EAE
.text:00402EAE loc_402EAE:			       ; CODE XREF: sub_402DDA+8Aj
.text:00402EAE					       ; sub_402DDA+BEj ...
.text:00402EAE		       mov     edx, [ebp+arg_0]
.text:00402EB1		       mov     word ptr	[edx+284h], 1
.text:00402EBA		       mov     byte ptr	[edx+4], 0
.text:00402EBE		       mov     [edx+84h], eax
.text:00402EC4		       cmp     [ebp+arg_8], 0
.text:00402EC8		       jnz     short loc_402ECE
.text:00402ECA		       mov     [edx], eax
.text:00402ECC		       jmp     short loc_402ED9
.text:00402ECE ; ---------------------------------------------------------------------------
.text:00402ECE
.text:00402ECE loc_402ECE:			       ; CODE XREF: sub_402DDA+EEj
.text:00402ECE		       mov     ecx, [ebp+arg_0]
.text:00402ED1		       mov     [esp+28h+var_28], ecx
.text:00402ED4		       call    sub_4026AE
.text:00402ED9
.text:00402ED9 loc_402ED9:			       ; CODE XREF: sub_402DDA+D2j
.text:00402ED9					       ; sub_402DDA+F2j
.text:00402ED9		       mov     edx, [ebp+arg_0]
.text:00402EDC		       mov     eax, [edx]
.text:00402EDE		       add     esp, 1Ch
.text:00402EE1		       pop     ebx
.text:00402EE2		       pop     esi
.text:00402EE3		       pop     edi
.text:00402EE4		       pop     ebp
.text:00402EE5		       retn
.text:00402EE6 ; ---------------------------------------------------------------------------
.text:00402EE6
.text:00402EE6 loc_402EE6:			       ; CODE XREF: sub_402DDA+AFj
.text:00402EE6		       mov     eax, ebx
.text:00402EE8		       jmp     short loc_402EAE
.text:00402EE8 sub_402DDA      endp
.text:00402EE8
.text:00402EEA
.text:00402EEA ; =============== S U B R O U T I N E =======================================
.text:00402EEA
.text:00402EEA ; Attributes: bp-based frame
.text:00402EEA
.text:00402EEA sub_402EEA      proc near	       ; CODE XREF: sub_4041AA+5E9p
.text:00402EEA					       ; sub_4041AA+698p
.text:00402EEA
.text:00402EEA var_18	       = dword ptr -18h
.text:00402EEA var_14	       = dword ptr -14h
.text:00402EEA var_10	       = dword ptr -10h
.text:00402EEA var_C	       = dword ptr -0Ch
.text:00402EEA var_8	       = dword ptr -8
.text:00402EEA arg_0	       = dword ptr  8
.text:00402EEA arg_4	       = dword ptr  0Ch
.text:00402EEA arg_8	       = dword ptr  10h
.text:00402EEA arg_C	       = dword ptr  14h
.text:00402EEA
.text:00402EEA		       push    ebp
.text:00402EEB		       mov     ebp, esp
.text:00402EED		       sub     esp, 18h
.text:00402EF0		       mov     eax, [ebp+arg_C]
.text:00402EF3		       mov     [esp+18h+var_8],	eax
.text:00402EF7		       mov     eax, [ebp+arg_8]
.text:00402EFA		       mov     [esp+18h+var_C],	eax
.text:00402EFE		       mov     [esp+18h+var_10], 1
.text:00402F06		       mov     eax, [ebp+arg_4]
.text:00402F09		       mov     [esp+18h+var_14], eax
.text:00402F0D		       mov     eax, [ebp+arg_0]
.text:00402F10		       mov     [esp+18h+var_18], eax
.text:00402F13		       call    sub_402DDA
.text:00402F18		       leave
.text:00402F19		       retn
.text:00402F19 sub_402EEA      endp
.text:00402F19
.text:00402F1A ; ---------------------------------------------------------------------------
.text:00402F1A		       push    ebp
.text:00402F1B		       mov     ebp, esp
.text:00402F1D		       sub     esp, 18h
.text:00402F20		       mov     dword ptr [esp+10h], 0
.text:00402F28		       mov     dword ptr [esp+0Ch], 0
.text:00402F30		       mov     dword ptr [esp+8], 2
.text:00402F38		       mov     eax, [ebp+0Ch]
.text:00402F3B		       mov     [esp+4],	eax
.text:00402F3F		       mov     eax, [ebp+8]
.text:00402F42		       mov     [esp], eax
.text:00402F45		       call    sub_402DDA
.text:00402F4A		       leave
.text:00402F4B		       retn
.text:00402F4C
.text:00402F4C ; =============== S U B R O U T I N E =======================================
.text:00402F4C
.text:00402F4C ; Attributes: bp-based frame
.text:00402F4C
.text:00402F4C sub_402F4C      proc near	       ; CODE XREF: sub_4041AA+3CBp
.text:00402F4C
.text:00402F4C var_18	       = dword ptr -18h
.text:00402F4C var_14	       = dword ptr -14h
.text:00402F4C var_10	       = dword ptr -10h
.text:00402F4C var_C	       = dword ptr -0Ch
.text:00402F4C var_8	       = dword ptr -8
.text:00402F4C arg_0	       = dword ptr  8
.text:00402F4C arg_4	       = dword ptr  0Ch
.text:00402F4C
.text:00402F4C		       push    ebp
.text:00402F4D		       mov     ebp, esp
.text:00402F4F		       sub     esp, 18h
.text:00402F52		       mov     [esp+18h+var_8],	0
.text:00402F5A		       mov     [esp+18h+var_C],	0
.text:00402F62		       mov     [esp+18h+var_10], 1
.text:00402F6A		       mov     eax, [ebp+arg_4]
.text:00402F6D		       mov     [esp+18h+var_14], eax
.text:00402F71		       mov     eax, [ebp+arg_0]
.text:00402F74		       mov     [esp+18h+var_18], eax
.text:00402F77		       call    sub_402DDA
.text:00402F7C		       leave
.text:00402F7D		       retn
.text:00402F7D sub_402F4C      endp
.text:00402F7D
.text:00402F7E ; ---------------------------------------------------------------------------
.text:00402F7E		       push    ebp
.text:00402F7F		       mov     ebp, esp
.text:00402F81		       sub     esp, 18h
.text:00402F84		       mov     dword ptr [esp+10h], 0
.text:00402F8C		       mov     dword ptr [esp+0Ch], 0
.text:00402F94		       mov     dword ptr [esp+8], 0
.text:00402F9C		       mov     eax, [ebp+0Ch]
.text:00402F9F		       mov     [esp+4],	eax
.text:00402FA3		       mov     eax, [ebp+8]
.text:00402FA6		       mov     [esp], eax
.text:00402FA9		       call    sub_402DDA
.text:00402FAE		       leave
.text:00402FAF		       retn
.text:00402FB0 ; ---------------------------------------------------------------------------
.text:00402FB0		       push    ebp
.text:00402FB1		       mov     ebp, esp
.text:00402FB3		       sub     esp, 18h
.text:00402FB6		       mov     dword ptr [esp+10h], 0
.text:00402FBE		       mov     dword ptr [esp+0Ch], 0
.text:00402FC6		       mov     dword ptr [esp+8], 2
.text:00402FCE		       mov     eax, [ebp+0Ch]
.text:00402FD1		       mov     [esp+4],	eax
.text:00402FD5		       mov     eax, [ebp+8]
.text:00402FD8		       mov     [esp], eax
.text:00402FDB		       call    sub_402DDA
.text:00402FE0		       leave
.text:00402FE1		       retn
.text:00402FE2
.text:00402FE2 ; =============== S U B R O U T I N E =======================================
.text:00402FE2
.text:00402FE2 ; Attributes: bp-based frame
.text:00402FE2
.text:00402FE2 sub_402FE2      proc near	       ; CODE XREF: sub_4041AA+32p
.text:00402FE2
.text:00402FE2 var_2A8	       = dword ptr -2A8h
.text:00402FE2 var_2A4	       = dword ptr -2A4h
.text:00402FE2 var_2A0	       = dword ptr -2A0h
.text:00402FE2 var_29C	       = dword ptr -29Ch
.text:00402FE2 var_28C	       = dword ptr -28Ch
.text:00402FE2 var_8C	       = byte ptr -8Ch
.text:00402FE2 arg_0	       = dword ptr  8
.text:00402FE2
.text:00402FE2		       push    ebp
.text:00402FE3		       mov     ebp, esp
.text:00402FE5		       push    edi
.text:00402FE6		       push    esi
.text:00402FE7		       push    ebx
.text:00402FE8		       sub     esp, 29Ch
.text:00402FEE		       mov     eax, [ebp+arg_0]
.text:00402FF1		       test    eax, eax
.text:00402FF3		       jz      loc_4030A6
.text:00402FF9		       mov     edx, eax
.text:00402FFB		       mov     esi, 0
.text:00403000		       mov     edi, 0
.text:00403005
.text:00403005 loc_403005:			       ; CODE XREF: sub_402FE2+BFj
.text:00403005					       ; sub_402FE2+E8j
.text:00403005		       lea     ecx, [ebp+esi*4+var_28C]
.text:0040300C		       lea     eax, [ebp+var_8C]
.text:00403012		       add     eax, esi
.text:00403014
.text:00403014 loc_403014:			       ; CODE XREF: sub_402FE2+71j
.text:00403014		       mov     ebx, [edx+14h]
.text:00403017		       mov     edx, [edx+10h]
.text:0040301A		       add     esi, 1
.text:0040301D		       cmp     esi, 7Fh
.text:00403020		       jle     short loc_403046
.text:00403022		       mov     [esp+2A8h+var_29C], offset a0TheBinary_tre ; "0 && \"the	binary_tree is too deep\""
.text:0040302A		       mov     [esp+2A8h+var_2A0], offset aSglib_tree_len ; "sglib_Tree_len"
.text:00403032		       mov     [esp+2A8h+var_2A4], 48h
.text:0040303A		       mov     [esp+2A8h+var_2A8], offset aSelftest_c ;	"selftest.c"
.text:00403041		       call    __assert_func
.text:00403046
.text:00403046 loc_403046:			       ; CODE XREF: sub_402FE2+3Ej
.text:00403046		       mov     [ecx], ebx
.text:00403048		       mov     byte ptr	[eax], 0
.text:0040304B		       add     ecx, 4
.text:0040304E		       add     eax, 1
.text:00403051		       test    edx, edx
.text:00403053		       jnz     short loc_403014
.text:00403055		       lea     eax, [esi-1]
.text:00403058		       lea     edx, [ebp+var_8C]
.text:0040305E		       add     edx, eax
.text:00403060		       lea     ecx, [ebp+eax*4+var_28C]
.text:00403067
.text:00403067 loc_403067:			       ; CODE XREF: sub_402FE2+A7j
.text:00403067		       lea     ebx, [esi-1]
.text:0040306A		       movzx   eax, byte ptr [edx]
.text:0040306D		       cmp     al, 1
.text:0040306F		       adc     edi, 0
.text:00403072		       add     eax, 1
.text:00403075		       mov     [edx], al
.text:00403077		       test    ebx, ebx
.text:00403079		       jle     short loc_40308B
.text:0040307B		       mov     eax, [ecx]
.text:0040307D		       sub     edx, 1
.text:00403080		       sub     ecx, 4
.text:00403083		       test    eax, eax
.text:00403085		       jnz     short loc_4030B8
.text:00403087		       mov     esi, ebx
.text:00403089		       jmp     short loc_403067
.text:0040308B ; ---------------------------------------------------------------------------
.text:0040308B
.text:0040308B loc_40308B:			       ; CODE XREF: sub_402FE2+97j
.text:0040308B		       mov     edx, [ebp+ebx*4+var_28C]
.text:00403092		       test    edx, edx
.text:00403094		       jz      short loc_4030AB
.text:00403096		       mov     [ebp+ebx*4+var_28C], 0
.text:004030A1		       jmp     loc_403005
.text:004030A6 ; ---------------------------------------------------------------------------
.text:004030A6
.text:004030A6 loc_4030A6:			       ; CODE XREF: sub_402FE2+11j
.text:004030A6		       mov     edi, 0
.text:004030AB
.text:004030AB loc_4030AB:			       ; CODE XREF: sub_402FE2+B2j
.text:004030AB		       mov     eax, edi
.text:004030AD		       add     esp, 29Ch
.text:004030B3		       pop     ebx
.text:004030B4		       pop     esi
.text:004030B5		       pop     edi
.text:004030B6		       pop     ebp
.text:004030B7		       retn
.text:004030B8 ; ---------------------------------------------------------------------------
.text:004030B8
.text:004030B8 loc_4030B8:			       ; CODE XREF: sub_402FE2+A3j
.text:004030B8		       mov     edx, [ebp+ebx*4+var_28C]
.text:004030BF		       mov     [ebp+ebx*4+var_28C], 0
.text:004030CA		       jmp     loc_403005
.text:004030CA sub_402FE2      endp
.text:004030CA
.text:004030CF
.text:004030CF ; =============== S U B R O U T I N E =======================================
.text:004030CF
.text:004030CF ; Attributes: bp-based frame
.text:004030CF
.text:004030CF sub_4030CF      proc near	       ; CODE XREF: sub_4041AA+2E9p
.text:004030CF					       ; sub_4041AA+38Bp
.text:004030CF
.text:004030CF var_18	       = dword ptr -18h
.text:004030CF var_14	       = dword ptr -14h
.text:004030CF var_10	       = dword ptr -10h
.text:004030CF var_C	       = dword ptr -0Ch
.text:004030CF arg_0	       = dword ptr  8
.text:004030CF arg_4	       = dword ptr  0Ch
.text:004030CF
.text:004030CF		       push    ebp
.text:004030D0		       mov     ebp, esp
.text:004030D2		       push    esi
.text:004030D3		       push    ebx
.text:004030D4		       sub     esp, 10h
.text:004030D7		       mov     ebx, [ebp+arg_0]
.text:004030DA		       mov     esi, [ebp+arg_4]
.text:004030DD		       test    ebx, ebx
.text:004030DF		       jz      short loc_40314A
.text:004030E1
.text:004030E1 loc_4030E1:			       ; CODE XREF: sub_4030CF+79j
.text:004030E1		       mov     [esp+18h+var_14], ebx
.text:004030E5		       mov     [esp+18h+var_18], esi
.text:004030E8		       call    sub_4011A0
.text:004030ED		       test    eax, eax
.text:004030EF		       js      short loc_4030FC
.text:004030F1		       test    eax, eax
.text:004030F3		       setz    dl
.text:004030F6		       jnz     short loc_403102
.text:004030F8		       cmp     esi, ebx
.text:004030FA		       jnb     short loc_403102
.text:004030FC
.text:004030FC loc_4030FC:			       ; CODE XREF: sub_4030CF+20j
.text:004030FC		       mov     ebx, [ebx+10h]
.text:004030FF		       nop
.text:00403100		       jmp     short loc_403146
.text:00403102 ; ---------------------------------------------------------------------------
.text:00403102
.text:00403102 loc_403102:			       ; CODE XREF: sub_4030CF+27j
.text:00403102					       ; sub_4030CF+2Bj
.text:00403102		       test    eax, eax
.text:00403104		       jg      short loc_403112
.text:00403106		       test    dl, dl
.text:00403108		       jz      short loc_403117
.text:0040310A		       cmp     esi, ebx
.text:0040310C		       lea     esi, [esi+0]
.text:00403110		       jbe     short loc_403117
.text:00403112
.text:00403112 loc_403112:			       ; CODE XREF: sub_4030CF+35j
.text:00403112		       mov     ebx, [ebx+14h]
.text:00403115		       jmp     short loc_403146
.text:00403117 ; ---------------------------------------------------------------------------
.text:00403117
.text:00403117 loc_403117:			       ; CODE XREF: sub_4030CF+39j
.text:00403117					       ; sub_4030CF+41j
.text:00403117		       mov     eax, 1
.text:0040311C		       cmp     ebx, esi
.text:0040311E		       db      66h
.text:0040311E		       nop
.text:00403120		       jz      short loc_40314F
.text:00403122		       mov     [esp+18h+var_C],	offset aTElem ;	"t == elem"
.text:0040312A		       mov     [esp+18h+var_10], offset	aSglib_tree_is_	; "sglib_Tree_is_member"
.text:00403132		       mov     [esp+18h+var_14], 48h
.text:0040313A		       mov     [esp+18h+var_18], offset	aSelftest_c ; "selftest.c"
.text:00403141		       call    __assert_func
.text:00403146
.text:00403146 loc_403146:			       ; CODE XREF: sub_4030CF+31j
.text:00403146					       ; sub_4030CF+46j
.text:00403146		       test    ebx, ebx
.text:00403148		       jnz     short loc_4030E1
.text:0040314A
.text:0040314A loc_40314A:			       ; CODE XREF: sub_4030CF+10j
.text:0040314A		       mov     eax, 0
.text:0040314F
.text:0040314F loc_40314F:			       ; CODE XREF: sub_4030CF+51j
.text:0040314F		       add     esp, 10h
.text:00403152		       pop     ebx
.text:00403153		       pop     esi
.text:00403154		       pop     ebp
.text:00403155		       retn
.text:00403155 sub_4030CF      endp
.text:00403155
.text:00403156
.text:00403156 ; =============== S U B R O U T I N E =======================================
.text:00403156
.text:00403156 ; Attributes: bp-based frame
.text:00403156
.text:00403156 sub_403156      proc near	       ; CODE XREF: sub_403497+8Cp
.text:00403156					       ; sub_403877+A8p
.text:00403156
.text:00403156 var_38	       = dword ptr -38h
.text:00403156 var_34	       = dword ptr -34h
.text:00403156 var_30	       = dword ptr -30h
.text:00403156 var_2C	       = dword ptr -2Ch
.text:00403156 var_1C	       = dword ptr -1Ch
.text:00403156 var_18	       = dword ptr -18h
.text:00403156 var_14	       = dword ptr -14h
.text:00403156 var_10	       = dword ptr -10h
.text:00403156 var_C	       = dword ptr -0Ch
.text:00403156 var_8	       = dword ptr -8
.text:00403156 var_4	       = dword ptr -4
.text:00403156
.text:00403156		       push    ebp
.text:00403157		       mov     ebp, esp
.text:00403159		       sub     esp, 38h
.text:0040315C		       mov     [ebp+var_C], ebx
.text:0040315F		       mov     [ebp+var_8], esi
.text:00403162		       mov     [ebp+var_4], edi
.text:00403165		       mov     ecx, eax
.text:00403167		       mov     edi, [eax]
.text:00403169		       test    edi, edi
.text:0040316B		       jnz     short loc_403191
.text:0040316D		       mov     [esp+38h+var_2C], offset	aTNull ; "t!=NULL"
.text:00403175		       mov     [esp+38h+var_30], offset	aSglib___tree_f	; "sglib___Tree_fix_right_deletion_discrep"...
.text:0040317D		       mov     [esp+38h+var_34], 48h
.text:00403185		       mov     [esp+38h+var_38], offset	aSelftest_c ; "selftest.c"
.text:0040318C		       call    __assert_func
.text:00403191
.text:00403191 loc_403191:			       ; CODE XREF: sub_403156+15j
.text:00403191		       mov     ebx, [edi+10h]
.text:00403194		       test    ebx, ebx
.text:00403196		       jnz     short loc_4031D0
.text:00403198		       cmp     byte ptr	[edi+0Ch], 1
.text:0040319C		       jz      short loc_4031C2
.text:0040319E		       mov     [esp+38h+var_2C], offset	aSglib___get_va	; "SGLIB___GET_VALUE(t->color)==1"
.text:004031A6		       mov     [esp+38h+var_30], offset	aSglib___tree_f	; "sglib___Tree_fix_right_deletion_discrep"...
.text:004031AE		       mov     [esp+38h+var_34], 48h
.text:004031B6		       mov     [esp+38h+var_38], offset	aSelftest_c ; "selftest.c"
.text:004031BD		       call    __assert_func
.text:004031C2
.text:004031C2 loc_4031C2:			       ; CODE XREF: sub_403156+46j
.text:004031C2		       mov     byte ptr	[edi+0Ch], 0
.text:004031C6		       mov     eax, 0
.text:004031CB		       jmp     loc_40348A
.text:004031D0 ; ---------------------------------------------------------------------------
.text:004031D0
.text:004031D0 loc_4031D0:			       ; CODE XREF: sub_403156+40j
.text:004031D0		       mov     edx, [ebx+10h]
.text:004031D3		       mov     esi, [ebx+14h]
.text:004031D6		       cmp     byte ptr	[ebx+0Ch], 1
.text:004031DA		       jnz     loc_403374
.text:004031E0		       test    esi, esi
.text:004031E2		       jnz     short loc_4031FE
.text:004031E4		       mov     [eax], ebx
.text:004031E6		       mov     byte ptr	[ebx+0Ch], 0
.text:004031EA		       mov     [ebx+14h], edi
.text:004031ED		       mov     dword ptr [edi+10h], 0
.text:004031F4		       mov     eax, 0
.text:004031F9		       jmp     loc_40348A
.text:004031FE ; ---------------------------------------------------------------------------
.text:004031FE
.text:004031FE loc_4031FE:			       ; CODE XREF: sub_403156+8Cj
.text:004031FE		       cmp     byte ptr	[esi+0Ch], 0
.text:00403202		       jz      short loc_403228
.text:00403204		       mov     [esp+38h+var_2C], offset	aCNullSglib___g	; "c!=NULL && SGLIB___GET_VALUE(c->color)="...
.text:0040320C		       mov     [esp+38h+var_30], offset	aSglib___tree_f	; "sglib___Tree_fix_right_deletion_discrep"...
.text:00403214		       mov     [esp+38h+var_34], 48h
.text:0040321C		       mov     [esp+38h+var_38], offset	aSelftest_c ; "selftest.c"
.text:00403223		       call    __assert_func
.text:00403228
.text:00403228 loc_403228:			       ; CODE XREF: sub_403156+ACj
.text:00403228		       mov     eax, [esi+10h]
.text:0040322B		       mov     [ebp+var_1C], eax
.text:0040322E		       mov     eax, [esi+14h]
.text:00403231		       mov     [ebp+var_18], eax
.text:00403234		       cmp     [ebp+var_1C], 0
.text:00403238		       jz      short loc_403243
.text:0040323A		       mov     eax, [ebp+var_1C]
.text:0040323D		       cmp     byte ptr	[eax+0Ch], 0
.text:00403241		       jnz     short loc_403272
.text:00403243
.text:00403243 loc_403243:			       ; CODE XREF: sub_403156+E2j
.text:00403243		       cmp     [ebp+var_18], 0
.text:00403247		       jz      short loc_403252
.text:00403249		       mov     eax, [ebp+var_18]
.text:0040324C		       cmp     byte ptr	[eax+0Ch], 0
.text:00403250		       jnz     short loc_40326C
.text:00403252
.text:00403252 loc_403252:			       ; CODE XREF: sub_403156+F1j
.text:00403252		       mov     [ecx], ebx
.text:00403254		       mov     [ebx+14h], edi
.text:00403257		       mov     byte ptr	[ebx+0Ch], 0
.text:0040325B		       mov     [edi+10h], esi
.text:0040325E		       mov     byte ptr	[esi+0Ch], 1
.text:00403262		       mov     eax, 0
.text:00403267		       jmp     loc_40348A
.text:0040326C ; ---------------------------------------------------------------------------
.text:0040326C
.text:0040326C loc_40326C:			       ; CODE XREF: sub_403156+FAj
.text:0040326C		       cmp     [ebp+var_1C], 0
.text:00403270		       jz      short loc_4032E1
.text:00403272
.text:00403272 loc_403272:			       ; CODE XREF: sub_403156+EBj
.text:00403272		       mov     eax, [ebp+var_1C]
.text:00403275		       cmp     byte ptr	[eax+0Ch], 1
.text:00403279		       jnz     short loc_4032DB
.text:0040327B		       cmp     [ebp+var_18], 0
.text:0040327F		       nop
.text:00403280		       jz      short loc_4032B6
.text:00403282		       mov     eax, [ebp+var_18]
.text:00403285		       cmp     byte ptr	[eax+0Ch], 1
.text:00403289		       jnz     short loc_4032B6
.text:0040328B		       mov     edx, [eax+10h]
.text:0040328E		       mov     [ebp+var_1C], edx
.text:00403291		       mov     edx, [eax+14h]
.text:00403294		       mov     [ecx], eax
.text:00403296		       mov     byte ptr	[eax+0Ch], 0
.text:0040329A		       mov     [eax+10h], ebx
.text:0040329D		       mov     eax, [ebp+var_1C]
.text:004032A0		       mov     [esi+14h], eax
.text:004032A3		       mov     eax, [ebp+var_18]
.text:004032A6		       mov     [eax+14h], edi
.text:004032A9		       mov     [edi+10h], edx
.text:004032AC		       mov     eax, 0
.text:004032B1		       jmp     loc_40348A
.text:004032B6 ; ---------------------------------------------------------------------------
.text:004032B6
.text:004032B6 loc_4032B6:			       ; CODE XREF: sub_403156+12Aj
.text:004032B6					       ; sub_403156+133j
.text:004032B6		       mov     [ecx], esi
.text:004032B8		       mov     [esi+10h], ebx
.text:004032BB		       mov     [esi+14h], edi
.text:004032BE		       mov     [ebx+10h], edx
.text:004032C1		       mov     edx, [ebp+var_1C]
.text:004032C4		       mov     [ebx+14h], edx
.text:004032C7		       mov     eax, [ebp+var_18]
.text:004032CA		       mov     [edi+10h], eax
.text:004032CD		       mov     byte ptr	[edx+0Ch], 0
.text:004032D1		       mov     eax, 0
.text:004032D6		       jmp     loc_40348A
.text:004032DB ; ---------------------------------------------------------------------------
.text:004032DB
.text:004032DB loc_4032DB:			       ; CODE XREF: sub_403156+123j
.text:004032DB		       cmp     [ebp+var_18], 0
.text:004032DF		       jz      short loc_403350
.text:004032E1
.text:004032E1 loc_4032E1:			       ; CODE XREF: sub_403156+11Aj
.text:004032E1		       mov     edx, [ebp+var_18]
.text:004032E4		       cmp     byte ptr	[edx+0Ch], 1
.text:004032E8		       jnz     short loc_403350
.text:004032EA		       cmp     [ebp+var_1C], 0
.text:004032EE		       db      66h
.text:004032EE		       nop
.text:004032F0		       jz      short loc_40331F
.text:004032F2		       mov     eax, [ebp+var_1C]
.text:004032F5		       cmp     byte ptr	[eax+0Ch], 0
.text:004032F9		       jz      short loc_40331F
.text:004032FB		       mov     [esp+38h+var_2C], offset	aClNullSglib___	; "cl==NULL || SGLIB___GET_VALUE(cl->color"...
.text:00403303		       mov     [esp+38h+var_30], offset	aSglib___tree_f	; "sglib___Tree_fix_right_deletion_discrep"...
.text:0040330B		       mov     [esp+38h+var_34], 48h
.text:00403313		       mov     [esp+38h+var_38], offset	aSelftest_c ; "selftest.c"
.text:0040331A		       call    __assert_func
.text:0040331F
.text:0040331F loc_40331F:			       ; CODE XREF: sub_403156+19Aj
.text:0040331F					       ; sub_403156+1A3j
.text:0040331F		       mov     edx, [ebp+var_18]
.text:00403322		       mov     edx, [edx+10h]
.text:00403325		       mov     [ebp+var_1C], edx
.text:00403328		       mov     eax, [ebp+var_18]
.text:0040332B		       mov     edx, [eax+14h]
.text:0040332E		       mov     [ecx], eax
.text:00403330		       mov     byte ptr	[eax+0Ch], 0
.text:00403334		       mov     [eax+10h], ebx
.text:00403337		       mov     eax, [ebp+var_1C]
.text:0040333A		       mov     [esi+14h], eax
.text:0040333D		       mov     eax, [ebp+var_18]
.text:00403340		       mov     [eax+14h], edi
.text:00403343		       mov     [edi+10h], edx
.text:00403346		       mov     eax, 0
.text:0040334B		       jmp     loc_40348A
.text:00403350 ; ---------------------------------------------------------------------------
.text:00403350
.text:00403350 loc_403350:			       ; CODE XREF: sub_403156+189j
.text:00403350					       ; sub_403156+192j
.text:00403350		       mov     [esp+38h+var_2C], offset	a0 ; "0"
.text:00403358		       mov     [esp+38h+var_30], offset	aSglib___tree_f	; "sglib___Tree_fix_right_deletion_discrep"...
.text:00403360		       mov     [esp+38h+var_34], 48h
.text:00403368		       mov     [esp+38h+var_38], offset	aSelftest_c ; "selftest.c"
.text:0040336F		       call    __assert_func
.text:00403374
.text:00403374 loc_403374:			       ; CODE XREF: sub_403156+84j
.text:00403374		       test    edx, edx
.text:00403376		       jz      short loc_40337E
.text:00403378		       cmp     byte ptr	[edx+0Ch], 0
.text:0040337C		       jnz     short loc_4033A7
.text:0040337E
.text:0040337E loc_40337E:			       ; CODE XREF: sub_403156+220j
.text:0040337E		       test    esi, esi
.text:00403380		       jz      short loc_403388
.text:00403382		       cmp     byte ptr	[esi+0Ch], 0
.text:00403386		       jnz     short loc_40339F
.text:00403388
.text:00403388 loc_403388:			       ; CODE XREF: sub_403156+22Aj
.text:00403388		       cmp     byte ptr	[edi+0Ch], 0
.text:0040338C		       setz    al
.text:0040338F		       movzx   eax, al
.text:00403392		       mov     byte ptr	[edi+0Ch], 0
.text:00403396		       mov     byte ptr	[ebx+0Ch], 1
.text:0040339A		       jmp     loc_40348A
.text:0040339F ; ---------------------------------------------------------------------------
.text:0040339F
.text:0040339F loc_40339F:			       ; CODE XREF: sub_403156+230j
.text:0040339F		       test    edx, edx
.text:004033A1		       jz      loc_403436
.text:004033A7
.text:004033A7 loc_4033A7:			       ; CODE XREF: sub_403156+226j
.text:004033A7		       cmp     byte ptr	[edx+0Ch], 1
.text:004033AB		       jnz     loc_403432
.text:004033B1		       test    esi, esi
.text:004033B3		       jz      short loc_4033BD
.text:004033B5		       movzx   eax, byte ptr [esi+0Ch]
.text:004033B9		       test    al, al
.text:004033BB		       jnz     short loc_4033DE
.text:004033BD
.text:004033BD loc_4033BD:			       ; CODE XREF: sub_403156+25Dj
.text:004033BD		       mov     [ecx], ebx
.text:004033BF		       movzx   eax, byte ptr [edi+0Ch]
.text:004033C3		       mov     [ebx+0Ch], al
.text:004033C6		       mov     byte ptr	[edi+0Ch], 0
.text:004033CA		       mov     [ebx+14h], edi
.text:004033CD		       mov     [edi+10h], esi
.text:004033D0		       mov     byte ptr	[edx+0Ch], 0
.text:004033D4		       mov     eax, 0
.text:004033D9		       jmp     loc_40348A
.text:004033DE ; ---------------------------------------------------------------------------
.text:004033DE
.text:004033DE loc_4033DE:			       ; CODE XREF: sub_403156+265j
.text:004033DE		       cmp     al, 1
.text:004033E0		       jz      short loc_403406
.text:004033E2		       mov     [esp+38h+var_2C], offset	aSglib___get__0	; "SGLIB___GET_VALUE(br->color)==1"
.text:004033EA		       mov     [esp+38h+var_30], offset	aSglib___tree_f	; "sglib___Tree_fix_right_deletion_discrep"...
.text:004033F2		       mov     [esp+38h+var_34], 48h
.text:004033FA		       mov     [esp+38h+var_38], offset	aSelftest_c ; "selftest.c"
.text:00403401		       call    __assert_func
.text:00403406
.text:00403406 loc_403406:			       ; CODE XREF: sub_403156+28Aj
.text:00403406		       mov     eax, [esi+10h]
.text:00403409		       mov     edx, [esi+14h]
.text:0040340C		       mov     [ebp+var_14], edx
.text:0040340F		       mov     [ecx], esi
.text:00403411		       movzx   edx, byte ptr [edi+0Ch]
.text:00403415		       mov     [esi+0Ch], dl
.text:00403418		       mov     byte ptr	[edi+0Ch], 0
.text:0040341C		       mov     [esi+10h], ebx
.text:0040341F		       mov     [esi+14h], edi
.text:00403422		       mov     [ebx+14h], eax
.text:00403425		       mov     eax, [ebp+var_14]
.text:00403428		       mov     [edi+10h], eax
.text:0040342B		       mov     eax, 0
.text:00403430		       jmp     short loc_40348A
.text:00403432 ; ---------------------------------------------------------------------------
.text:00403432
.text:00403432 loc_403432:			       ; CODE XREF: sub_403156+255j
.text:00403432		       test    esi, esi
.text:00403434		       jz      short loc_40343C
.text:00403436
.text:00403436 loc_403436:			       ; CODE XREF: sub_403156+24Bj
.text:00403436		       cmp     byte ptr	[esi+0Ch], 1
.text:0040343A		       jz      short loc_403460
.text:0040343C
.text:0040343C loc_40343C:			       ; CODE XREF: sub_403156+2DEj
.text:0040343C		       mov     [esp+38h+var_2C], offset	aBrNullSglib___	; "br!=NULL && SGLIB___GET_VALUE(br->color"...
.text:00403444		       mov     [esp+38h+var_30], offset	aSglib___tree_f	; "sglib___Tree_fix_right_deletion_discrep"...
.text:0040344C		       mov     [esp+38h+var_34], 48h
.text:00403454		       mov     [esp+38h+var_38], offset	aSelftest_c ; "selftest.c"
.text:0040345B		       call    __assert_func
.text:00403460
.text:00403460 loc_403460:			       ; CODE XREF: sub_403156+2E4j
.text:00403460		       mov     eax, [esi+10h]
.text:00403463		       mov     edx, [esi+14h]
.text:00403466		       mov     [ebp+var_10], edx
.text:00403469		       mov     [ecx], esi
.text:0040346B		       movzx   edx, byte ptr [edi+0Ch]
.text:0040346F		       mov     [esi+0Ch], dl
.text:00403472		       mov     byte ptr	[edi+0Ch], 0
.text:00403476		       mov     [esi+10h], ebx
.text:00403479		       mov     [esi+14h], edi
.text:0040347C		       mov     [ebx+14h], eax
.text:0040347F		       mov     eax, [ebp+var_10]
.text:00403482		       mov     [edi+10h], eax
.text:00403485		       mov     eax, 0
.text:0040348A
.text:0040348A loc_40348A:			       ; CODE XREF: sub_403156+75j
.text:0040348A					       ; sub_403156+A3j ...
.text:0040348A		       mov     ebx, [ebp+var_C]
.text:0040348D		       mov     esi, [ebp+var_8]
.text:00403490		       mov     edi, [ebp+var_4]
.text:00403493		       mov     esp, ebp
.text:00403495		       pop     ebp
.text:00403496		       retn
.text:00403496 sub_403156      endp
.text:00403496
.text:00403497
.text:00403497 ; =============== S U B R O U T I N E =======================================
.text:00403497
.text:00403497 ; Attributes: bp-based frame
.text:00403497
.text:00403497 sub_403497      proc near	       ; CODE XREF: sub_403497+7Cp
.text:00403497					       ; sub_403877+121p
.text:00403497
.text:00403497 var_18	       = dword ptr -18h
.text:00403497 var_14	       = dword ptr -14h
.text:00403497 var_10	       = dword ptr -10h
.text:00403497 var_C	       = dword ptr -0Ch
.text:00403497 var_8	       = dword ptr -8
.text:00403497 var_4	       = dword ptr -4
.text:00403497
.text:00403497		       push    ebp
.text:00403498		       mov     ebp, esp
.text:0040349A		       sub     esp, 18h
.text:0040349D		       mov     [ebp+var_8], ebx
.text:004034A0		       mov     [ebp+var_4], esi
.text:004034A3		       mov     esi, eax
.text:004034A5		       mov     ecx, [eax]
.text:004034A7		       test    ecx, ecx
.text:004034A9		       jnz     short loc_4034CF
.text:004034AB		       mov     [esp+18h+var_C],	offset aTNull ;	"t!=NULL"
.text:004034B3		       mov     [esp+18h+var_10], offset	aSglib___tree_d	; "sglib___Tree_delete_rightmost_leaf"
.text:004034BB		       mov     [esp+18h+var_14], 48h
.text:004034C3		       mov     [esp+18h+var_18], offset	aSelftest_c ; "selftest.c"
.text:004034CA		       call    __assert_func
.text:004034CF
.text:004034CF loc_4034CF:			       ; CODE XREF: sub_403497+12j
.text:004034CF		       cmp     dword ptr [ecx+14h], 0
.text:004034D3		       jnz     short loc_403510
.text:004034D5		       mov     [edx], ecx
.text:004034D7		       mov     ebx, [ecx+10h]
.text:004034DA		       test    ebx, ebx
.text:004034DC		       jz      short loc_4034FE
.text:004034DE		       mov     edx, 0
.text:004034E3		       cmp     byte ptr	[ecx+0Ch], 0
.text:004034E7		       jnz     short loc_4034F3
.text:004034E9		       cmp     byte ptr	[ebx+0Ch], 0
.text:004034ED		       setz    al
.text:004034F0		       movzx   edx, al
.text:004034F3
.text:004034F3 loc_4034F3:			       ; CODE XREF: sub_403497+50j
.text:004034F3		       mov     byte ptr	[ebx+0Ch], 0
.text:004034F7		       mov     eax, [ecx+10h]
.text:004034FA		       mov     [esi], eax
.text:004034FC		       jmp     short loc_40352A
.text:004034FE ; ---------------------------------------------------------------------------
.text:004034FE
.text:004034FE loc_4034FE:			       ; CODE XREF: sub_403497+45j
.text:004034FE		       mov     dword ptr [eax],	0
.text:00403504		       cmp     byte ptr	[ecx+0Ch], 0
.text:00403508		       setz    al
.text:0040350B		       movzx   edx, al
.text:0040350E		       jmp     short loc_40352A
.text:00403510 ; ---------------------------------------------------------------------------
.text:00403510
.text:00403510 loc_403510:			       ; CODE XREF: sub_403497+3Cj
.text:00403510		       lea     eax, [ecx+14h]
.text:00403513		       call    sub_403497
.text:00403518		       mov     edx, 0
.text:0040351D		       test    eax, eax
.text:0040351F		       jz      short loc_40352A
.text:00403521		       mov     eax, esi
.text:00403523		       call    sub_403156
.text:00403528		       mov     edx, eax
.text:0040352A
.text:0040352A loc_40352A:			       ; CODE XREF: sub_403497+65j
.text:0040352A					       ; sub_403497+77j ...
.text:0040352A		       mov     eax, edx
.text:0040352C		       mov     ebx, [ebp+var_8]
.text:0040352F		       mov     esi, [ebp+var_4]
.text:00403532		       mov     esp, ebp
.text:00403534		       pop     ebp
.text:00403535		       retn
.text:00403535 sub_403497      endp
.text:00403535
.text:00403536
.text:00403536 ; =============== S U B R O U T I N E =======================================
.text:00403536
.text:00403536 ; Attributes: bp-based frame
.text:00403536
.text:00403536 sub_403536      proc near	       ; CODE XREF: sub_403877+74p
.text:00403536					       ; sub_403877+14Dp
.text:00403536
.text:00403536 var_38	       = dword ptr -38h
.text:00403536 var_34	       = dword ptr -34h
.text:00403536 var_30	       = dword ptr -30h
.text:00403536 var_2C	       = dword ptr -2Ch
.text:00403536 var_1C	       = dword ptr -1Ch
.text:00403536 var_18	       = dword ptr -18h
.text:00403536 var_14	       = dword ptr -14h
.text:00403536 var_10	       = dword ptr -10h
.text:00403536 var_C	       = dword ptr -0Ch
.text:00403536 var_8	       = dword ptr -8
.text:00403536 var_4	       = dword ptr -4
.text:00403536
.text:00403536		       push    ebp
.text:00403537		       mov     ebp, esp
.text:00403539		       sub     esp, 38h
.text:0040353C		       mov     [ebp+var_C], ebx
.text:0040353F		       mov     [ebp+var_8], esi
.text:00403542		       mov     [ebp+var_4], edi
.text:00403545		       mov     ecx, eax
.text:00403547		       mov     edi, [eax]
.text:00403549		       test    edi, edi
.text:0040354B		       jnz     short loc_403571
.text:0040354D		       mov     [esp+38h+var_2C], offset	aTNull ; "t!=NULL"
.text:00403555		       mov     [esp+38h+var_30], offset	aSglib___tree_1	; "sglib___Tree_fix_left_deletion_discrepa"...
.text:0040355D		       mov     [esp+38h+var_34], 48h
.text:00403565		       mov     [esp+38h+var_38], offset	aSelftest_c ; "selftest.c"
.text:0040356C		       call    __assert_func
.text:00403571
.text:00403571 loc_403571:			       ; CODE XREF: sub_403536+15j
.text:00403571		       mov     ebx, [edi+14h]
.text:00403574		       test    ebx, ebx
.text:00403576		       jnz     short loc_4035B0
.text:00403578		       cmp     byte ptr	[edi+0Ch], 1
.text:0040357C		       jz      short loc_4035A2
.text:0040357E		       mov     [esp+38h+var_2C], offset	aSglib___get_va	; "SGLIB___GET_VALUE(t->color)==1"
.text:00403586		       mov     [esp+38h+var_30], offset	aSglib___tree_1	; "sglib___Tree_fix_left_deletion_discrepa"...
.text:0040358E		       mov     [esp+38h+var_34], 48h
.text:00403596		       mov     [esp+38h+var_38], offset	aSelftest_c ; "selftest.c"
.text:0040359D		       call    __assert_func
.text:004035A2
.text:004035A2 loc_4035A2:			       ; CODE XREF: sub_403536+46j
.text:004035A2		       mov     byte ptr	[edi+0Ch], 0
.text:004035A6		       mov     eax, 0
.text:004035AB		       jmp     loc_40386A
.text:004035B0 ; ---------------------------------------------------------------------------
.text:004035B0
.text:004035B0 loc_4035B0:			       ; CODE XREF: sub_403536+40j
.text:004035B0		       mov     edx, [ebx+14h]
.text:004035B3		       mov     esi, [ebx+10h]
.text:004035B6		       cmp     byte ptr	[ebx+0Ch], 1
.text:004035BA		       jnz     loc_403754
.text:004035C0		       test    esi, esi
.text:004035C2		       jnz     short loc_4035DE
.text:004035C4		       mov     [eax], ebx
.text:004035C6		       mov     byte ptr	[ebx+0Ch], 0
.text:004035CA		       mov     [ebx+10h], edi
.text:004035CD		       mov     dword ptr [edi+14h], 0
.text:004035D4		       mov     eax, 0
.text:004035D9		       jmp     loc_40386A
.text:004035DE ; ---------------------------------------------------------------------------
.text:004035DE
.text:004035DE loc_4035DE:			       ; CODE XREF: sub_403536+8Cj
.text:004035DE		       cmp     byte ptr	[esi+0Ch], 0
.text:004035E2		       jz      short loc_403608
.text:004035E4		       mov     [esp+38h+var_2C], offset	aCNullSglib___g	; "c!=NULL && SGLIB___GET_VALUE(c->color)="...
.text:004035EC		       mov     [esp+38h+var_30], offset	aSglib___tree_1	; "sglib___Tree_fix_left_deletion_discrepa"...
.text:004035F4		       mov     [esp+38h+var_34], 48h
.text:004035FC		       mov     [esp+38h+var_38], offset	aSelftest_c ; "selftest.c"
.text:00403603		       call    __assert_func
.text:00403608
.text:00403608 loc_403608:			       ; CODE XREF: sub_403536+ACj
.text:00403608		       mov     eax, [esi+14h]
.text:0040360B		       mov     [ebp+var_1C], eax
.text:0040360E		       mov     eax, [esi+10h]
.text:00403611		       mov     [ebp+var_18], eax
.text:00403614		       cmp     [ebp+var_1C], 0
.text:00403618		       jz      short loc_403623
.text:0040361A		       mov     eax, [ebp+var_1C]
.text:0040361D		       cmp     byte ptr	[eax+0Ch], 0
.text:00403621		       jnz     short loc_403652
.text:00403623
.text:00403623 loc_403623:			       ; CODE XREF: sub_403536+E2j
.text:00403623		       cmp     [ebp+var_18], 0
.text:00403627		       jz      short loc_403632
.text:00403629		       mov     eax, [ebp+var_18]
.text:0040362C		       cmp     byte ptr	[eax+0Ch], 0
.text:00403630		       jnz     short loc_40364C
.text:00403632
.text:00403632 loc_403632:			       ; CODE XREF: sub_403536+F1j
.text:00403632		       mov     [ecx], ebx
.text:00403634		       mov     [ebx+10h], edi
.text:00403637		       mov     byte ptr	[ebx+0Ch], 0
.text:0040363B		       mov     [edi+14h], esi
.text:0040363E		       mov     byte ptr	[esi+0Ch], 1
.text:00403642		       mov     eax, 0
.text:00403647		       jmp     loc_40386A
.text:0040364C ; ---------------------------------------------------------------------------
.text:0040364C
.text:0040364C loc_40364C:			       ; CODE XREF: sub_403536+FAj
.text:0040364C		       cmp     [ebp+var_1C], 0
.text:00403650		       jz      short loc_4036C1
.text:00403652
.text:00403652 loc_403652:			       ; CODE XREF: sub_403536+EBj
.text:00403652		       mov     eax, [ebp+var_1C]
.text:00403655		       cmp     byte ptr	[eax+0Ch], 1
.text:00403659		       jnz     short loc_4036BB
.text:0040365B		       cmp     [ebp+var_18], 0
.text:0040365F		       nop
.text:00403660		       jz      short loc_403696
.text:00403662		       mov     eax, [ebp+var_18]
.text:00403665		       cmp     byte ptr	[eax+0Ch], 1
.text:00403669		       jnz     short loc_403696
.text:0040366B		       mov     edx, [eax+14h]
.text:0040366E		       mov     [ebp+var_1C], edx
.text:00403671		       mov     edx, [eax+10h]
.text:00403674		       mov     [ecx], eax
.text:00403676		       mov     byte ptr	[eax+0Ch], 0
.text:0040367A		       mov     [eax+14h], ebx
.text:0040367D		       mov     eax, [ebp+var_1C]
.text:00403680		       mov     [esi+10h], eax
.text:00403683		       mov     eax, [ebp+var_18]
.text:00403686		       mov     [eax+10h], edi
.text:00403689		       mov     [edi+14h], edx
.text:0040368C		       mov     eax, 0
.text:00403691		       jmp     loc_40386A
.text:00403696 ; ---------------------------------------------------------------------------
.text:00403696
.text:00403696 loc_403696:			       ; CODE XREF: sub_403536+12Aj
.text:00403696					       ; sub_403536+133j
.text:00403696		       mov     [ecx], esi
.text:00403698		       mov     [esi+14h], ebx
.text:0040369B		       mov     [esi+10h], edi
.text:0040369E		       mov     [ebx+14h], edx
.text:004036A1		       mov     edx, [ebp+var_1C]
.text:004036A4		       mov     [ebx+10h], edx
.text:004036A7		       mov     eax, [ebp+var_18]
.text:004036AA		       mov     [edi+14h], eax
.text:004036AD		       mov     byte ptr	[edx+0Ch], 0
.text:004036B1		       mov     eax, 0
.text:004036B6		       jmp     loc_40386A
.text:004036BB ; ---------------------------------------------------------------------------
.text:004036BB
.text:004036BB loc_4036BB:			       ; CODE XREF: sub_403536+123j
.text:004036BB		       cmp     [ebp+var_18], 0
.text:004036BF		       jz      short loc_403730
.text:004036C1
.text:004036C1 loc_4036C1:			       ; CODE XREF: sub_403536+11Aj
.text:004036C1		       mov     edx, [ebp+var_18]
.text:004036C4		       cmp     byte ptr	[edx+0Ch], 1
.text:004036C8		       jnz     short loc_403730
.text:004036CA		       cmp     [ebp+var_1C], 0
.text:004036CE		       db      66h
.text:004036CE		       nop
.text:004036D0		       jz      short loc_4036FF
.text:004036D2		       mov     eax, [ebp+var_1C]
.text:004036D5		       cmp     byte ptr	[eax+0Ch], 0
.text:004036D9		       jz      short loc_4036FF
.text:004036DB		       mov     [esp+38h+var_2C], offset	aClNullSglib___	; "cl==NULL || SGLIB___GET_VALUE(cl->color"...
.text:004036E3		       mov     [esp+38h+var_30], offset	aSglib___tree_1	; "sglib___Tree_fix_left_deletion_discrepa"...
.text:004036EB		       mov     [esp+38h+var_34], 48h
.text:004036F3		       mov     [esp+38h+var_38], offset	aSelftest_c ; "selftest.c"
.text:004036FA		       call    __assert_func
.text:004036FF
.text:004036FF loc_4036FF:			       ; CODE XREF: sub_403536+19Aj
.text:004036FF					       ; sub_403536+1A3j
.text:004036FF		       mov     edx, [ebp+var_18]
.text:00403702		       mov     edx, [edx+14h]
.text:00403705		       mov     [ebp+var_1C], edx
.text:00403708		       mov     eax, [ebp+var_18]
.text:0040370B		       mov     edx, [eax+10h]
.text:0040370E		       mov     [ecx], eax
.text:00403710		       mov     byte ptr	[eax+0Ch], 0
.text:00403714		       mov     [eax+14h], ebx
.text:00403717		       mov     eax, [ebp+var_1C]
.text:0040371A		       mov     [esi+10h], eax
.text:0040371D		       mov     eax, [ebp+var_18]
.text:00403720		       mov     [eax+10h], edi
.text:00403723		       mov     [edi+14h], edx
.text:00403726		       mov     eax, 0
.text:0040372B		       jmp     loc_40386A
.text:00403730 ; ---------------------------------------------------------------------------
.text:00403730
.text:00403730 loc_403730:			       ; CODE XREF: sub_403536+189j
.text:00403730					       ; sub_403536+192j
.text:00403730		       mov     [esp+38h+var_2C], offset	a0 ; "0"
.text:00403738		       mov     [esp+38h+var_30], offset	aSglib___tree_1	; "sglib___Tree_fix_left_deletion_discrepa"...
.text:00403740		       mov     [esp+38h+var_34], 48h
.text:00403748		       mov     [esp+38h+var_38], offset	aSelftest_c ; "selftest.c"
.text:0040374F		       call    __assert_func
.text:00403754
.text:00403754 loc_403754:			       ; CODE XREF: sub_403536+84j
.text:00403754		       test    edx, edx
.text:00403756		       jz      short loc_40375E
.text:00403758		       cmp     byte ptr	[edx+0Ch], 0
.text:0040375C		       jnz     short loc_403787
.text:0040375E
.text:0040375E loc_40375E:			       ; CODE XREF: sub_403536+220j
.text:0040375E		       test    esi, esi
.text:00403760		       jz      short loc_403768
.text:00403762		       cmp     byte ptr	[esi+0Ch], 0
.text:00403766		       jnz     short loc_40377F
.text:00403768
.text:00403768 loc_403768:			       ; CODE XREF: sub_403536+22Aj
.text:00403768		       cmp     byte ptr	[edi+0Ch], 0
.text:0040376C		       setz    al
.text:0040376F		       movzx   eax, al
.text:00403772		       mov     byte ptr	[edi+0Ch], 0
.text:00403776		       mov     byte ptr	[ebx+0Ch], 1
.text:0040377A		       jmp     loc_40386A
.text:0040377F ; ---------------------------------------------------------------------------
.text:0040377F
.text:0040377F loc_40377F:			       ; CODE XREF: sub_403536+230j
.text:0040377F		       test    edx, edx
.text:00403781		       jz      loc_403816
.text:00403787
.text:00403787 loc_403787:			       ; CODE XREF: sub_403536+226j
.text:00403787		       cmp     byte ptr	[edx+0Ch], 1
.text:0040378B		       jnz     loc_403812
.text:00403791		       test    esi, esi
.text:00403793		       jz      short loc_40379D
.text:00403795		       movzx   eax, byte ptr [esi+0Ch]
.text:00403799		       test    al, al
.text:0040379B		       jnz     short loc_4037BE
.text:0040379D
.text:0040379D loc_40379D:			       ; CODE XREF: sub_403536+25Dj
.text:0040379D		       mov     [ecx], ebx
.text:0040379F		       movzx   eax, byte ptr [edi+0Ch]
.text:004037A3		       mov     [ebx+0Ch], al
.text:004037A6		       mov     byte ptr	[edi+0Ch], 0
.text:004037AA		       mov     [ebx+10h], edi
.text:004037AD		       mov     [edi+14h], esi
.text:004037B0		       mov     byte ptr	[edx+0Ch], 0
.text:004037B4		       mov     eax, 0
.text:004037B9		       jmp     loc_40386A
.text:004037BE ; ---------------------------------------------------------------------------
.text:004037BE
.text:004037BE loc_4037BE:			       ; CODE XREF: sub_403536+265j
.text:004037BE		       cmp     al, 1
.text:004037C0		       jz      short loc_4037E6
.text:004037C2		       mov     [esp+38h+var_2C], offset	aSglib___get__0	; "SGLIB___GET_VALUE(br->color)==1"
.text:004037CA		       mov     [esp+38h+var_30], offset	aSglib___tree_1	; "sglib___Tree_fix_left_deletion_discrepa"...
.text:004037D2		       mov     [esp+38h+var_34], 48h
.text:004037DA		       mov     [esp+38h+var_38], offset	aSelftest_c ; "selftest.c"
.text:004037E1		       call    __assert_func
.text:004037E6
.text:004037E6 loc_4037E6:			       ; CODE XREF: sub_403536+28Aj
.text:004037E6		       mov     eax, [esi+14h]
.text:004037E9		       mov     edx, [esi+10h]
.text:004037EC		       mov     [ebp+var_14], edx
.text:004037EF		       mov     [ecx], esi
.text:004037F1		       movzx   edx, byte ptr [edi+0Ch]
.text:004037F5		       mov     [esi+0Ch], dl
.text:004037F8		       mov     byte ptr	[edi+0Ch], 0
.text:004037FC		       mov     [esi+14h], ebx
.text:004037FF		       mov     [esi+10h], edi
.text:00403802		       mov     [ebx+10h], eax
.text:00403805		       mov     eax, [ebp+var_14]
.text:00403808		       mov     [edi+14h], eax
.text:0040380B		       mov     eax, 0
.text:00403810		       jmp     short loc_40386A
.text:00403812 ; ---------------------------------------------------------------------------
.text:00403812
.text:00403812 loc_403812:			       ; CODE XREF: sub_403536+255j
.text:00403812		       test    esi, esi
.text:00403814		       jz      short loc_40381C
.text:00403816
.text:00403816 loc_403816:			       ; CODE XREF: sub_403536+24Bj
.text:00403816		       cmp     byte ptr	[esi+0Ch], 1
.text:0040381A		       jz      short loc_403840
.text:0040381C
.text:0040381C loc_40381C:			       ; CODE XREF: sub_403536+2DEj
.text:0040381C		       mov     [esp+38h+var_2C], offset	aBrNullSglib___	; "br!=NULL && SGLIB___GET_VALUE(br->color"...
.text:00403824		       mov     [esp+38h+var_30], offset	aSglib___tree_1	; "sglib___Tree_fix_left_deletion_discrepa"...
.text:0040382C		       mov     [esp+38h+var_34], 48h
.text:00403834		       mov     [esp+38h+var_38], offset	aSelftest_c ; "selftest.c"
.text:0040383B		       call    __assert_func
.text:00403840
.text:00403840 loc_403840:			       ; CODE XREF: sub_403536+2E4j
.text:00403840		       mov     eax, [esi+14h]
.text:00403843		       mov     edx, [esi+10h]
.text:00403846		       mov     [ebp+var_10], edx
.text:00403849		       mov     [ecx], esi
.text:0040384B		       movzx   edx, byte ptr [edi+0Ch]
.text:0040384F		       mov     [esi+0Ch], dl
.text:00403852		       mov     byte ptr	[edi+0Ch], 0
.text:00403856		       mov     [esi+14h], ebx
.text:00403859		       mov     [esi+10h], edi
.text:0040385C		       mov     [ebx+10h], eax
.text:0040385F		       mov     eax, [ebp+var_10]
.text:00403862		       mov     [edi+14h], eax
.text:00403865		       mov     eax, 0
.text:0040386A
.text:0040386A loc_40386A:			       ; CODE XREF: sub_403536+75j
.text:0040386A					       ; sub_403536+A3j ...
.text:0040386A		       mov     ebx, [ebp+var_C]
.text:0040386D		       mov     esi, [ebp+var_8]
.text:00403870		       mov     edi, [ebp+var_4]
.text:00403873		       mov     esp, ebp
.text:00403875		       pop     ebp
.text:00403876		       retn
.text:00403876 sub_403536      endp
.text:00403876
.text:00403877
.text:00403877 ; =============== S U B R O U T I N E =======================================
.text:00403877
.text:00403877 ; Attributes: bp-based frame
.text:00403877
.text:00403877 sub_403877      proc near	       ; CODE XREF: sub_403877+65p
.text:00403877					       ; sub_403877+99p ...
.text:00403877
.text:00403877 var_38	       = dword ptr -38h
.text:00403877 var_34	       = dword ptr -34h
.text:00403877 var_30	       = dword ptr -30h
.text:00403877 var_2C	       = dword ptr -2Ch
.text:00403877 var_10	       = dword ptr -10h
.text:00403877 var_C	       = dword ptr -0Ch
.text:00403877 var_8	       = dword ptr -8
.text:00403877 var_4	       = dword ptr -4
.text:00403877 arg_0	       = dword ptr  8
.text:00403877 arg_4	       = dword ptr  0Ch
.text:00403877
.text:00403877		       push    ebp
.text:00403878		       mov     ebp, esp
.text:0040387A		       sub     esp, 38h
.text:0040387D		       mov     [ebp+var_C], ebx
.text:00403880		       mov     [ebp+var_8], esi
.text:00403883		       mov     [ebp+var_4], edi
.text:00403886		       mov     edi, [ebp+arg_0]
.text:00403889		       mov     esi, [ebp+arg_4]
.text:0040388C		       mov     ebx, [edi]
.text:0040388E		       test    ebx, ebx
.text:00403890		       jnz     short loc_4038B6
.text:00403892		       mov     [esp+38h+var_2C], offset	a0TheElementToD	; "0 &&	\"The element to delete	not found i"...
.text:0040389A		       mov     [esp+38h+var_30], offset	aSglib___tree_2	; "sglib___Tree_delete_recursive"
.text:004038A2		       mov     [esp+38h+var_34], 48h
.text:004038AA		       mov     [esp+38h+var_38], offset	aSelftest_c ; "selftest.c"
.text:004038B1		       call    __assert_func
.text:004038B6
.text:004038B6 loc_4038B6:			       ; CODE XREF: sub_403877+19j
.text:004038B6		       mov     [esp+38h+var_34], ebx
.text:004038BA		       mov     [esp+38h+var_38], esi
.text:004038BD		       call    sub_4011A0
.text:004038C2		       test    eax, eax
.text:004038C4		       js      short loc_4038D2
.text:004038C6		       test    eax, eax
.text:004038C8		       setz    dl
.text:004038CB		       jnz     short loc_4038F7
.text:004038CD		       cmp     esi, ebx
.text:004038CF		       nop
.text:004038D0		       jnb     short loc_4038F7
.text:004038D2
.text:004038D2 loc_4038D2:			       ; CODE XREF: sub_403877+4Dj
.text:004038D2		       mov     [esp+38h+var_34], esi
.text:004038D6		       lea     eax, [ebx+10h]
.text:004038D9		       mov     [esp+38h+var_38], eax
.text:004038DC		       call    sub_403877
.text:004038E1		       test    eax, eax
.text:004038E3		       jz      loc_4039CD
.text:004038E9		       mov     eax, edi
.text:004038EB		       call    sub_403536
.text:004038F0		       mov     edx, eax
.text:004038F2		       jmp     loc_4039D2
.text:004038F7 ; ---------------------------------------------------------------------------
.text:004038F7
.text:004038F7 loc_4038F7:			       ; CODE XREF: sub_403877+54j
.text:004038F7					       ; sub_403877+59j
.text:004038F7		       test    eax, eax
.text:004038F9		       jg      short loc_403906
.text:004038FB		       test    dl, dl
.text:004038FD		       lea     esi, [esi+0]
.text:00403900		       jz      short loc_40392B
.text:00403902		       cmp     esi, ebx
.text:00403904		       jbe     short loc_40392B
.text:00403906
.text:00403906 loc_403906:			       ; CODE XREF: sub_403877+82j
.text:00403906		       mov     [esp+38h+var_34], esi
.text:0040390A		       lea     eax, [ebx+14h]
.text:0040390D		       mov     [esp+38h+var_38], eax
.text:00403910		       call    sub_403877
.text:00403915		       test    eax, eax
.text:00403917		       jz      loc_4039CD
.text:0040391D		       mov     eax, edi
.text:0040391F		       call    sub_403156
.text:00403924		       mov     edx, eax
.text:00403926		       jmp     loc_4039D2
.text:0040392B ; ---------------------------------------------------------------------------
.text:0040392B
.text:0040392B loc_40392B:			       ; CODE XREF: sub_403877+89j
.text:0040392B					       ; sub_403877+8Dj
.text:0040392B		       cmp     esi, ebx
.text:0040392D		       jz      short loc_403953
.text:0040392F		       mov     [esp+38h+var_2C], offset	aElemTDeletingA	; "elem==t && \"Deleting an element which i"...
.text:00403937		       mov     [esp+38h+var_30], offset	aSglib___tree_2	; "sglib___Tree_delete_recursive"
.text:0040393F		       mov     [esp+38h+var_34], 48h
.text:00403947		       mov     [esp+38h+var_38], offset	aSelftest_c ; "selftest.c"
.text:0040394E		       call    __assert_func
.text:00403953
.text:00403953 loc_403953:			       ; CODE XREF: sub_403877+B6j
.text:00403953		       cmp     dword ptr [esi+10h], 0
.text:00403957		       jnz     short loc_403992
.text:00403959		       mov     ecx, [esi+14h]
.text:0040395C		       test    ecx, ecx
.text:0040395E		       jnz     short loc_403972
.text:00403960		       mov     dword ptr [edi],	0
.text:00403966		       cmp     byte ptr	[esi+0Ch], 0
.text:0040396A		       setz    al
.text:0040396D		       movzx   edx, al
.text:00403970		       jmp     short loc_4039D2
.text:00403972 ; ---------------------------------------------------------------------------
.text:00403972
.text:00403972 loc_403972:			       ; CODE XREF: sub_403877+E7j
.text:00403972		       mov     edx, 0
.text:00403977		       cmp     byte ptr	[esi+0Ch], 0
.text:0040397B		       jnz     short loc_403987
.text:0040397D		       cmp     byte ptr	[ecx+0Ch], 0
.text:00403981		       setz    al
.text:00403984		       movzx   edx, al
.text:00403987
.text:00403987 loc_403987:			       ; CODE XREF: sub_403877+104j
.text:00403987		       mov     byte ptr	[ecx+0Ch], 0
.text:0040398B		       mov     eax, [esi+14h]
.text:0040398E		       mov     [edi], eax
.text:00403990		       jmp     short loc_4039D2
.text:00403992 ; ---------------------------------------------------------------------------
.text:00403992
.text:00403992 loc_403992:			       ; CODE XREF: sub_403877+E0j
.text:00403992		       lea     edx, [ebp+var_10]
.text:00403995		       lea     eax, [esi+10h]
.text:00403998		       call    sub_403497
.text:0040399D		       mov     ecx, [esi+10h]
.text:004039A0		       mov     edx, [ebp+var_10]
.text:004039A3		       mov     [edx+10h], ecx
.text:004039A6		       mov     ecx, [esi+14h]
.text:004039A9		       mov     edx, [ebp+var_10]
.text:004039AC		       mov     [edx+14h], ecx
.text:004039AF		       movzx   ecx, byte ptr [esi+0Ch]
.text:004039B3		       mov     edx, [ebp+var_10]
.text:004039B6		       mov     [edx+0Ch], cl
.text:004039B9		       mov     edx, [ebp+var_10]
.text:004039BC		       mov     [edi], edx
.text:004039BE		       test    eax, eax
.text:004039C0		       jz      short loc_4039CD
.text:004039C2		       mov     eax, edi
.text:004039C4		       call    sub_403536
.text:004039C9		       mov     edx, eax
.text:004039CB		       jmp     short loc_4039D2
.text:004039CD ; ---------------------------------------------------------------------------
.text:004039CD
.text:004039CD loc_4039CD:			       ; CODE XREF: sub_403877+6Cj
.text:004039CD					       ; sub_403877+A0j ...
.text:004039CD		       mov     edx, 0
.text:004039D2
.text:004039D2 loc_4039D2:			       ; CODE XREF: sub_403877+7Bj
.text:004039D2					       ; sub_403877+AFj ...
.text:004039D2		       mov     eax, edx
.text:004039D4		       mov     ebx, [ebp+var_C]
.text:004039D7		       mov     esi, [ebp+var_8]
.text:004039DA		       mov     edi, [ebp+var_4]
.text:004039DD		       mov     esp, ebp
.text:004039DF		       pop     ebp
.text:004039E0		       retn
.text:004039E0 sub_403877      endp
.text:004039E0
.text:004039E1
.text:004039E1 ; =============== S U B R O U T I N E =======================================
.text:004039E1
.text:004039E1 ; Attributes: bp-based frame
.text:004039E1
.text:004039E1 sub_4039E1      proc near	       ; CODE XREF: sub_403A0A+32p
.text:004039E1					       ; sub_4041AA+AD1p
.text:004039E1
.text:004039E1 var_18	       = dword ptr -18h
.text:004039E1 var_14	       = dword ptr -14h
.text:004039E1 arg_0	       = dword ptr  8
.text:004039E1 arg_4	       = dword ptr  0Ch
.text:004039E1
.text:004039E1		       push    ebp
.text:004039E2		       mov     ebp, esp
.text:004039E4		       push    ebx
.text:004039E5		       sub     esp, 14h
.text:004039E8		       mov     ebx, [ebp+arg_0]
.text:004039EB		       mov     eax, [ebp+arg_4]
.text:004039EE		       mov     [esp+18h+var_14], eax
.text:004039F2		       mov     [esp+18h+var_18], ebx
.text:004039F5		       call    sub_403877
.text:004039FA		       mov     eax, [ebx]
.text:004039FC		       test    eax, eax
.text:004039FE		       jz      short loc_403A04
.text:00403A00		       mov     byte ptr	[eax+0Ch], 0
.text:00403A04
.text:00403A04 loc_403A04:			       ; CODE XREF: sub_4039E1+1Dj
.text:00403A04		       add     esp, 14h
.text:00403A07		       pop     ebx
.text:00403A08		       pop     ebp
.text:00403A09		       retn
.text:00403A09 sub_4039E1      endp
.text:00403A09
.text:00403A0A
.text:00403A0A ; =============== S U B R O U T I N E =======================================
.text:00403A0A
.text:00403A0A ; Attributes: bp-based frame
.text:00403A0A
.text:00403A0A sub_403A0A      proc near	       ; CODE XREF: sub_4041AA+D7Cp
.text:00403A0A
.text:00403A0A var_18	       = dword ptr -18h
.text:00403A0A var_14	       = dword ptr -14h
.text:00403A0A arg_0	       = dword ptr  8
.text:00403A0A arg_4	       = dword ptr  0Ch
.text:00403A0A arg_8	       = dword ptr  10h
.text:00403A0A
.text:00403A0A		       push    ebp
.text:00403A0B		       mov     ebp, esp
.text:00403A0D		       push    ebx
.text:00403A0E		       sub     esp, 14h
.text:00403A11		       mov     ebx, [ebp+arg_0]
.text:00403A14		       mov     eax, [ebp+arg_4]
.text:00403A17		       mov     [esp+18h+var_14], eax
.text:00403A1B		       mov     eax, [ebx]
.text:00403A1D		       mov     [esp+18h+var_18], eax
.text:00403A20		       call    sub_402626
.text:00403A25		       mov     edx, eax
.text:00403A27		       mov     eax, [ebp+arg_8]
.text:00403A2A		       mov     [eax], edx
.text:00403A2C		       mov     eax, 0
.text:00403A31		       test    edx, edx
.text:00403A33		       jz      short loc_403A46
.text:00403A35		       mov     [esp+18h+var_14], edx
.text:00403A39		       mov     [esp+18h+var_18], ebx
.text:00403A3C		       call    sub_4039E1
.text:00403A41		       mov     eax, 1
.text:00403A46
.text:00403A46 loc_403A46:			       ; CODE XREF: sub_403A0A+29j
.text:00403A46		       add     esp, 14h
.text:00403A49		       pop     ebx
.text:00403A4A		       pop     ebp
.text:00403A4B		       retn
.text:00403A4B sub_403A0A      endp
.text:00403A4B
.text:00403A4C ; ---------------------------------------------------------------------------
.text:00403A4C		       push    ebp
.text:00403A4D		       mov     ebp, esp
.text:00403A4F		       sub     esp, 18h
.text:00403A52		       mov     edx, [ebp+8]
.text:00403A55		       mov     ecx, [ebp+0Ch]
.text:00403A58		       mov     eax, [edx]
.text:00403A5A		       test    eax, eax
.text:00403A5C		       jz      short loc_403A74
.text:00403A5E		       cmp     eax, ecx
.text:00403A60		       jz      short loc_403A70
.text:00403A62
.text:00403A62 loc_403A62:			       ; CODE XREF: .text:00403A6Ej
.text:00403A62		       lea     edx, [eax+4]
.text:00403A65		       mov     eax, [eax+4]
.text:00403A68		       test    eax, eax
.text:00403A6A		       jz      short loc_403A74
.text:00403A6C		       cmp     eax, ecx
.text:00403A6E		       jnz     short loc_403A62
.text:00403A70
.text:00403A70 loc_403A70:			       ; CODE XREF: .text:00403A60j
.text:00403A70		       test    eax, eax
.text:00403A72		       jnz     short loc_403A98
.text:00403A74
.text:00403A74 loc_403A74:			       ; CODE XREF: .text:00403A5Cj
.text:00403A74					       ; .text:00403A6Aj
.text:00403A74		       mov     dword ptr [esp+0Ch], offset a_p_NullElement ; "*_p_!=NULL && \"element is not member of"...
.text:00403A7C		       mov     dword ptr [esp+8], offset aSglib_reverses ; "sglib_ReverseSortedList_delete"
.text:00403A84		       mov     dword ptr [esp+4], 46h
.text:00403A8C		       mov     dword ptr [esp],	offset aSelftest_c ; "selftest.c"
.text:00403A93		       call    __assert_func
.text:00403A98
.text:00403A98 loc_403A98:			       ; CODE XREF: .text:00403A72j
.text:00403A98		       mov     eax, [eax+4]
.text:00403A9B		       mov     [edx], eax
.text:00403A9D		       leave
.text:00403A9E		       retn
.text:00403A9F
.text:00403A9F ; =============== S U B R O U T I N E =======================================
.text:00403A9F
.text:00403A9F ; Attributes: bp-based frame
.text:00403A9F
.text:00403A9F sub_403A9F      proc near	       ; CODE XREF: sub_40502E+4D5p
.text:00403A9F
.text:00403A9F var_18	       = dword ptr -18h
.text:00403A9F var_14	       = dword ptr -14h
.text:00403A9F var_10	       = dword ptr -10h
.text:00403A9F var_C	       = dword ptr -0Ch
.text:00403A9F arg_0	       = dword ptr  8
.text:00403A9F arg_4	       = dword ptr  0Ch
.text:00403A9F
.text:00403A9F		       push    ebp
.text:00403AA0		       mov     ebp, esp
.text:00403AA2		       sub     esp, 18h
.text:00403AA5		       mov     edx, [ebp+arg_0]
.text:00403AA8		       mov     ecx, [ebp+arg_4]
.text:00403AAB		       mov     eax, [edx]
.text:00403AAD		       test    eax, eax
.text:00403AAF		       jz      short loc_403AC7
.text:00403AB1		       cmp     eax, ecx
.text:00403AB3		       jz      short loc_403AC3
.text:00403AB5
.text:00403AB5 loc_403AB5:			       ; CODE XREF: sub_403A9F+22j
.text:00403AB5		       lea     edx, [eax+4]
.text:00403AB8		       mov     eax, [eax+4]
.text:00403ABB		       test    eax, eax
.text:00403ABD		       jz      short loc_403AC7
.text:00403ABF		       cmp     eax, ecx
.text:00403AC1		       jnz     short loc_403AB5
.text:00403AC3
.text:00403AC3 loc_403AC3:			       ; CODE XREF: sub_403A9F+14j
.text:00403AC3		       test    eax, eax
.text:00403AC5		       jnz     short loc_403AEB
.text:00403AC7
.text:00403AC7 loc_403AC7:			       ; CODE XREF: sub_403A9F+10j
.text:00403AC7					       ; sub_403A9F+1Ej
.text:00403AC7		       mov     [esp+18h+var_C],	offset a_p_NullElement ; "*_p_!=NULL &&	\"element is not member	of"...
.text:00403ACF		       mov     [esp+18h+var_10], offset	aSglib_sortedli	; "sglib_SortedList_delete"
.text:00403AD7		       mov     [esp+18h+var_14], 44h
.text:00403ADF		       mov     [esp+18h+var_18], offset	aSelftest_c ; "selftest.c"
.text:00403AE6		       call    __assert_func
.text:00403AEB
.text:00403AEB loc_403AEB:			       ; CODE XREF: sub_403A9F+26j
.text:00403AEB		       mov     eax, [eax+4]
.text:00403AEE		       mov     [edx], eax
.text:00403AF0		       leave
.text:00403AF1		       retn
.text:00403AF1 sub_403A9F      endp
.text:00403AF1
.text:00403AF2
.text:00403AF2 ; =============== S U B R O U T I N E =======================================
.text:00403AF2
.text:00403AF2 ; Attributes: bp-based frame
.text:00403AF2
.text:00403AF2 sub_403AF2      proc near	       ; CODE XREF: sub_403B45+32p
.text:00403AF2					       ; sub_40719F+55Fp
.text:00403AF2
.text:00403AF2 var_18	       = dword ptr -18h
.text:00403AF2 var_14	       = dword ptr -14h
.text:00403AF2 var_10	       = dword ptr -10h
.text:00403AF2 var_C	       = dword ptr -0Ch
.text:00403AF2 arg_0	       = dword ptr  8
.text:00403AF2 arg_4	       = dword ptr  0Ch
.text:00403AF2
.text:00403AF2		       push    ebp
.text:00403AF3		       mov     ebp, esp
.text:00403AF5		       sub     esp, 18h
.text:00403AF8		       mov     edx, [ebp+arg_0]
.text:00403AFB		       mov     ecx, [ebp+arg_4]
.text:00403AFE		       mov     eax, [edx]
.text:00403B00		       test    eax, eax
.text:00403B02		       jz      short loc_403B1A
.text:00403B04		       cmp     eax, ecx
.text:00403B06		       jz      short loc_403B16
.text:00403B08
.text:00403B08 loc_403B08:			       ; CODE XREF: sub_403AF2+22j
.text:00403B08		       lea     edx, [eax+4]
.text:00403B0B		       mov     eax, [eax+4]
.text:00403B0E		       test    eax, eax
.text:00403B10		       jz      short loc_403B1A
.text:00403B12		       cmp     eax, ecx
.text:00403B14		       jnz     short loc_403B08
.text:00403B16
.text:00403B16 loc_403B16:			       ; CODE XREF: sub_403AF2+14j
.text:00403B16		       test    eax, eax
.text:00403B18		       jnz     short loc_403B3E
.text:00403B1A
.text:00403B1A loc_403B1A:			       ; CODE XREF: sub_403AF2+10j
.text:00403B1A					       ; sub_403AF2+1Ej
.text:00403B1A		       mov     [esp+18h+var_C],	offset a_p_NullElement ; "*_p_!=NULL &&	\"element is not member	of"...
.text:00403B22		       mov     [esp+18h+var_10], offset	aSglib_simpleli	; "sglib_SimpleList_delete"
.text:00403B2A		       mov     [esp+18h+var_14], 40h
.text:00403B32		       mov     [esp+18h+var_18], offset	aSelftest_c ; "selftest.c"
.text:00403B39		       call    __assert_func
.text:00403B3E
.text:00403B3E loc_403B3E:			       ; CODE XREF: sub_403AF2+26j
.text:00403B3E		       mov     eax, [eax+4]
.text:00403B41		       mov     [edx], eax
.text:00403B43		       leave
.text:00403B44		       retn
.text:00403B44 sub_403AF2      endp
.text:00403B44
.text:00403B45
.text:00403B45 ; =============== S U B R O U T I N E =======================================
.text:00403B45
.text:00403B45 ; Attributes: bp-based frame
.text:00403B45
.text:00403B45 sub_403B45      proc near	       ; CODE XREF: sub_406A03+457p
.text:00403B45
.text:00403B45 var_18	       = dword ptr -18h
.text:00403B45 var_14	       = dword ptr -14h
.text:00403B45 arg_0	       = dword ptr  8
.text:00403B45 arg_4	       = dword ptr  0Ch
.text:00403B45
.text:00403B45		       push    ebp
.text:00403B46		       mov     ebp, esp
.text:00403B48		       push    ebx
.text:00403B49		       sub     esp, 14h
.text:00403B4C		       mov     ebx, [ebp+arg_4]
.text:00403B4F		       mov     [esp+18h+var_18], ebx
.text:00403B52		       call    sub_4011AF
.text:00403B57		       mov     ecx, eax
.text:00403B59		       mov     [esp+18h+var_14], ebx
.text:00403B5D		       mov     edx, 51EB851Fh
.text:00403B62		       mul     edx
.text:00403B64		       shr     edx, 5
.text:00403B67		       imul    edx, 64h
.text:00403B6A		       mov     eax, ecx
.text:00403B6C		       sub     eax, edx
.text:00403B6E		       mov     edx, [ebp+arg_0]
.text:00403B71		       lea     eax, [edx+eax*4]
.text:00403B74		       mov     [esp+18h+var_18], eax
.text:00403B77		       call    sub_403AF2
.text:00403B7C		       add     esp, 14h
.text:00403B7F		       pop     ebx
.text:00403B80		       pop     ebp
.text:00403B81		       retn
.text:00403B81 sub_403B45      endp
.text:00403B81
.text:00403B82
.text:00403B82 ; =============== S U B R O U T I N E =======================================
.text:00403B82
.text:00403B82 ; Attributes: bp-based frame
.text:00403B82
.text:00403B82 sub_403B82      proc near	       ; CODE XREF: sub_403B82+34p
.text:00403B82					       ; sub_403B82+76p ...
.text:00403B82
.text:00403B82 var_18	       = dword ptr -18h
.text:00403B82 var_14	       = dword ptr -14h
.text:00403B82 var_10	       = dword ptr -10h
.text:00403B82 arg_0	       = dword ptr  8
.text:00403B82
.text:00403B82		       push    ebp
.text:00403B83		       mov     ebp, esp
.text:00403B85		       push    ebx
.text:00403B86		       sub     esp, 14h
.text:00403B89		       mov     ebx, [ebp+arg_0]
.text:00403B8C		       test    ebx, ebx
.text:00403B8E		       jz      loc_403C19
.text:00403B94		       mov     [esp+18h+var_18], 28h
.text:00403B9B		       call    putchar
.text:00403BA0		       call    __getreent
.text:00403BA5		       mov     eax, [eax+8]
.text:00403BA8		       mov     [esp+18h+var_18], eax
.text:00403BAB		       call    fflush
.text:00403BB0		       mov     eax, [ebx+10h]
.text:00403BB3		       mov     [esp+18h+var_18], eax
.text:00403BB6		       call    sub_403B82
.text:00403BBB		       mov     ecx, [ebx]
.text:00403BBD		       cmp     byte ptr	[ebx+0Ch], 0
.text:00403BC1		       mov     edx, offset aB  ; "b"
.text:00403BC6		       mov     eax, offset aR  ; "r"
.text:00403BCB		       cmovnz  eax, edx
.text:00403BCE		       mov     [esp+18h+var_10], ecx
.text:00403BD2		       mov     [esp+18h+var_14], eax
.text:00403BD6		       mov     [esp+18h+var_18], offset	aSD ; "%s%d "
.text:00403BDD		       call    printf
.text:00403BE2		       call    __getreent
.text:00403BE7		       mov     eax, [eax+8]
.text:00403BEA		       mov     [esp+18h+var_18], eax
.text:00403BED		       call    fflush
.text:00403BF2		       mov     eax, [ebx+14h]
.text:00403BF5		       mov     [esp+18h+var_18], eax
.text:00403BF8		       call    sub_403B82
.text:00403BFD		       mov     [esp+18h+var_18], 29h
.text:00403C04		       call    putchar
.text:00403C09		       call    __getreent
.text:00403C0E		       mov     eax, [eax+8]
.text:00403C11		       mov     [esp+18h+var_18], eax
.text:00403C14		       call    fflush
.text:00403C19
.text:00403C19 loc_403C19:			       ; CODE XREF: sub_403B82+Cj
.text:00403C19		       add     esp, 14h
.text:00403C1C		       pop     ebx
.text:00403C1D		       pop     ebp
.text:00403C1E		       retn
.text:00403C1E sub_403B82      endp
.text:00403C1E
.text:00403C1F ; ---------------------------------------------------------------------------
.text:00403C1F		       push    ebp
.text:00403C20		       mov     ebp, esp
.text:00403C22		       sub     esp, 8
.text:00403C25		       mov     dword ptr [esp],	0Ah
.text:00403C2C		       call    putchar
.text:00403C31		       call    __getreent
.text:00403C36		       mov     eax, [eax+8]
.text:00403C39		       mov     [esp], eax
.text:00403C3C		       call    fflush
.text:00403C41		       mov     eax, [ebp+8]
.text:00403C44		       mov     [esp], eax
.text:00403C47		       call    sub_403B82
.text:00403C4C		       mov     dword ptr [esp],	0Ah
.text:00403C53		       call    putchar
.text:00403C58		       call    __getreent
.text:00403C5D		       mov     eax, [eax+8]
.text:00403C60		       mov     [esp], eax
.text:00403C63		       call    fflush
.text:00403C68		       leave
.text:00403C69		       retn
.text:00403C6A
.text:00403C6A ; =============== S U B R O U T I N E =======================================
.text:00403C6A
.text:00403C6A ; Attributes: bp-based frame
.text:00403C6A
.text:00403C6A sub_403C6A      proc near	       ; CODE XREF: sub_4059BC+C5Ap
.text:00403C6A					       ; sub_40719F+7D8p
.text:00403C6A
.text:00403C6A var_18	       = dword ptr -18h
.text:00403C6A var_14	       = dword ptr -14h
.text:00403C6A var_10	       = dword ptr -10h
.text:00403C6A var_C	       = dword ptr -0Ch
.text:00403C6A arg_0	       = dword ptr  8
.text:00403C6A
.text:00403C6A		       push    ebp
.text:00403C6B		       mov     ebp, esp
.text:00403C6D		       sub     esp, 18h
.text:00403C70		       mov     eax, [ebp+arg_0]
.text:00403C73		       test    eax, eax
.text:00403C75		       jnz     short loc_403CCE
.text:00403C77		       jmp     short locret_403CD5
.text:00403C79 ; ---------------------------------------------------------------------------
.text:00403C79
.text:00403C79 loc_403C79:			       ; CODE XREF: sub_403C6A+69j
.text:00403C79		       mov     eax, [eax]
.text:00403C7B		       cmp     eax, [edx]
.text:00403C7D		       jnb     short loc_403CCC
.text:00403C7F		       nop
.text:00403C80		       call    __getreent
.text:00403C85		       mov     eax, [eax+0Ch]
.text:00403C88		       mov     [esp+18h+var_C],	eax
.text:00403C8C		       mov     [esp+18h+var_10], 26h
.text:00403C94		       mov     [esp+18h+var_14], 1
.text:00403C9C		       mov     [esp+18h+var_18], offset	aErrorListUnsor	; "[ERROR] LIST	UNSORTED !!!!!!!!!!!!!!!\n"
.text:00403CA3		       call    fwrite
.text:00403CA8		       mov     [esp+18h+var_C],	offset a0 ; "0"
.text:00403CB0		       mov     [esp+18h+var_10], offset	aCheck_that_int	; "check_that_int_list_is_reverse_sorted"
.text:00403CB8		       mov     [esp+18h+var_14], 0D6h
.text:00403CC0		       mov     [esp+18h+var_18], offset	aSelftest_c ; "selftest.c"
.text:00403CC7		       call    __assert_func
.text:00403CCC
.text:00403CCC loc_403CCC:			       ; CODE XREF: sub_403C6A+13j
.text:00403CCC		       mov     eax, edx
.text:00403CCE
.text:00403CCE loc_403CCE:			       ; CODE XREF: sub_403C6A+Bj
.text:00403CCE		       mov     edx, [eax+4]
.text:00403CD1		       test    edx, edx
.text:00403CD3		       jnz     short loc_403C79
.text:00403CD5
.text:00403CD5 locret_403CD5:			       ; CODE XREF: sub_403C6A+Dj
.text:00403CD5		       leave
.text:00403CD6		       retn
.text:00403CD6 sub_403C6A      endp
.text:00403CD6
.text:00403CD7
.text:00403CD7 ; =============== S U B R O U T I N E =======================================
.text:00403CD7
.text:00403CD7 ; Attributes: bp-based frame
.text:00403CD7
.text:00403CD7 sub_403CD7      proc near	       ; CODE XREF: sub_40502E+9Ep
.text:00403CD7					       ; sub_40502E+4E3p ...
.text:00403CD7
.text:00403CD7 var_18	       = dword ptr -18h
.text:00403CD7 var_14	       = dword ptr -14h
.text:00403CD7 var_10	       = dword ptr -10h
.text:00403CD7 var_C	       = dword ptr -0Ch
.text:00403CD7 arg_0	       = dword ptr  8
.text:00403CD7
.text:00403CD7		       push    ebp
.text:00403CD8		       mov     ebp, esp
.text:00403CDA		       sub     esp, 18h
.text:00403CDD		       mov     eax, [ebp+arg_0]
.text:00403CE0		       test    eax, eax
.text:00403CE2		       jnz     short loc_403D3E
.text:00403CE4		       jmp     short locret_403D45
.text:00403CE6 ; ---------------------------------------------------------------------------
.text:00403CE6
.text:00403CE6 loc_403CE6:			       ; CODE XREF: sub_403CD7+6Cj
.text:00403CE6		       mov     eax, [eax]
.text:00403CE8		       cmp     eax, [edx]
.text:00403CEA		       jbe     short loc_403D3C
.text:00403CEC		       lea     esi, [esi+0]
.text:00403CF0		       call    __getreent
.text:00403CF5		       mov     eax, [eax+0Ch]
.text:00403CF8		       mov     [esp+18h+var_C],	eax
.text:00403CFC		       mov     [esp+18h+var_10], 26h
.text:00403D04		       mov     [esp+18h+var_14], 1
.text:00403D0C		       mov     [esp+18h+var_18], offset	aErrorListUnsor	; "[ERROR] LIST	UNSORTED !!!!!!!!!!!!!!!\n"
.text:00403D13		       call    fwrite
.text:00403D18		       mov     [esp+18h+var_C],	offset a0 ; "0"
.text:00403D20		       mov     [esp+18h+var_10], offset	aCheck_that_i_0	; "check_that_int_list_is_sorted"
.text:00403D28		       mov     [esp+18h+var_14], 0CAh
.text:00403D30		       mov     [esp+18h+var_18], offset	aSelftest_c ; "selftest.c"
.text:00403D37		       call    __assert_func
.text:00403D3C
.text:00403D3C loc_403D3C:			       ; CODE XREF: sub_403CD7+13j
.text:00403D3C		       mov     eax, edx
.text:00403D3E
.text:00403D3E loc_403D3E:			       ; CODE XREF: sub_403CD7+Bj
.text:00403D3E		       mov     edx, [eax+4]
.text:00403D41		       test    edx, edx
.text:00403D43		       jnz     short loc_403CE6
.text:00403D45
.text:00403D45 locret_403D45:			       ; CODE XREF: sub_403CD7+Dj
.text:00403D45		       leave
.text:00403D46		       retn
.text:00403D46 sub_403CD7      endp
.text:00403D46
.text:00403D47
.text:00403D47 ; =============== S U B R O U T I N E =======================================
.text:00403D47
.text:00403D47 ; Attributes: bp-based frame
.text:00403D47
.text:00403D47 sub_403D47      proc near	       ; CODE XREF: sub_407C31+1E4p
.text:00403D47					       ; sub_407E47+2AFp
.text:00403D47
.text:00403D47 var_18	       = dword ptr -18h
.text:00403D47 var_14	       = dword ptr -14h
.text:00403D47 var_10	       = dword ptr -10h
.text:00403D47 var_C	       = dword ptr -0Ch
.text:00403D47 arg_0	       = dword ptr  8
.text:00403D47 arg_4	       = dword ptr  0Ch
.text:00403D47
.text:00403D47		       push    ebp
.text:00403D48		       mov     ebp, esp
.text:00403D4A		       push    ebx
.text:00403D4B		       sub     esp, 14h
.text:00403D4E		       mov     edx, [ebp+arg_0]
.text:00403D51		       mov     ecx, [ebp+arg_4]
.text:00403D54		       sub     ecx, 1
.text:00403D57		       test    ecx, ecx
.text:00403D59		       jle     short loc_403DB9
.text:00403D5B		       mov     eax, [edx]
.text:00403D5D		       mov     ebx, 0
.text:00403D62		       cmp     eax, [edx+4]
.text:00403D65		       jle     short loc_403DB2
.text:00403D67		       jmp     short loc_403D72
.text:00403D69 ; ---------------------------------------------------------------------------
.text:00403D69
.text:00403D69 loc_403D69:			       ; CODE XREF: sub_403D47+70j
.text:00403D69		       mov     eax, [edx+ebx*4]
.text:00403D6C		       cmp     eax, [edx+ebx*4+4]
.text:00403D70		       jle     short loc_403DB2
.text:00403D72
.text:00403D72 loc_403D72:			       ; CODE XREF: sub_403D47+20j
.text:00403D72		       call    __getreent
.text:00403D77		       mov     [esp+18h+var_10], ebx
.text:00403D7B		       mov     [esp+18h+var_14], offset	aErrorArrayUnso	; "[ERROR] ARRAY UNSORTED AT INDEX %d !!!!"...
.text:00403D83		       mov     eax, [eax+0Ch]
.text:00403D86		       mov     [esp+18h+var_18], eax
.text:00403D89		       call    fprintf
.text:00403D8E		       mov     [esp+18h+var_C],	offset a0 ; "0"
.text:00403D96		       mov     [esp+18h+var_10], offset	aCheck_that_i_1	; "check_that_int_array_is_sorted"
.text:00403D9E		       mov     [esp+18h+var_14], 0BFh
.text:00403DA6		       mov     [esp+18h+var_18], offset	aSelftest_c ; "selftest.c"
.text:00403DAD		       call    __assert_func
.text:00403DB2
.text:00403DB2 loc_403DB2:			       ; CODE XREF: sub_403D47+1Ej
.text:00403DB2					       ; sub_403D47+29j
.text:00403DB2		       add     ebx, 1
.text:00403DB5		       cmp     ebx, ecx
.text:00403DB7		       jl      short loc_403D69
.text:00403DB9
.text:00403DB9 loc_403DB9:			       ; CODE XREF: sub_403D47+12j
.text:00403DB9		       add     esp, 14h
.text:00403DBC		       pop     ebx
.text:00403DBD		       pop     ebp
.text:00403DBE		       retn
.text:00403DBE sub_403D47      endp
.text:00403DBE
.text:00403DBF
.text:00403DBF ; =============== S U B R O U T I N E =======================================
.text:00403DBF
.text:00403DBF ; Attributes: bp-based frame
.text:00403DBF
.text:00403DBF sub_403DBF      proc near	       ; CODE XREF: sub_407C31+206p
.text:00403DBF					       ; sub_407E47+2D1p
.text:00403DBF
.text:00403DBF var_18	       = dword ptr -18h
.text:00403DBF var_14	       = dword ptr -14h
.text:00403DBF var_10	       = dword ptr -10h
.text:00403DBF var_C	       = dword ptr -0Ch
.text:00403DBF arg_0	       = dword ptr  8
.text:00403DBF arg_4	       = dword ptr  0Ch
.text:00403DBF
.text:00403DBF		       push    ebp
.text:00403DC0		       mov     ebp, esp
.text:00403DC2		       push    esi
.text:00403DC3		       push    ebx
.text:00403DC4		       sub     esp, 10h
.text:00403DC7		       mov     esi, [ebp+arg_0]
.text:00403DCA		       mov     ecx, [ebp+arg_4]
.text:00403DCD		       mov     ebx, 0
.text:00403DD2
.text:00403DD2 loc_403DD2:			       ; CODE XREF: sub_403DBF+6Dj
.text:00403DD2		       mov     eax, [esi+ebx*4]
.text:00403DD5		       mov     edx, eax
.text:00403DD7		       sar     edx, 1
.text:00403DD9		       shl     eax, 2
.text:00403DDC		       xor     edx, eax
.text:00403DDE		       cmp     [ecx+ebx*4], edx
.text:00403DE1		       jz      short loc_403E23
.text:00403DE3		       call    __getreent
.text:00403DE8		       mov     [esp+18h+var_10], ebx
.text:00403DEC		       mov     [esp+18h+var_14], offset	aErrorArrayCorr	; "[ERROR] ARRAY CORRESPONDENCE	PROBLEM	AT"...
.text:00403DF4		       mov     eax, [eax+0Ch]
.text:00403DF7		       mov     [esp+18h+var_18], eax
.text:00403DFA		       call    fprintf
.text:00403DFF		       mov     [esp+18h+var_C],	offset a0 ; "0"
.text:00403E07		       mov     [esp+18h+var_10], offset	aCheck_multiple	; "check_multiple_array_correspondence"
.text:00403E0F		       mov     [esp+18h+var_14], 0B5h
.text:00403E17		       mov     [esp+18h+var_18], offset	aSelftest_c ; "selftest.c"
.text:00403E1E		       call    __assert_func
.text:00403E23
.text:00403E23 loc_403E23:			       ; CODE XREF: sub_403DBF+22j
.text:00403E23		       add     ebx, 1
.text:00403E26		       cmp     ebx, 3E8h
.text:00403E2C		       jnz     short loc_403DD2
.text:00403E2E		       add     esp, 10h
.text:00403E31		       pop     ebx
.text:00403E32		       pop     esi
.text:00403E33		       pop     ebp
.text:00403E34		       retn
.text:00403E34 sub_403DBF      endp
.text:00403E34
.text:00403E35
.text:00403E35 ; =============== S U B R O U T I N E =======================================
.text:00403E35
.text:00403E35 ; Attributes: bp-based frame
.text:00403E35
.text:00403E35 sub_403E35      proc near	       ; CODE XREF: sub_404074+44p
.text:00403E35					       ; sub_4040BF+44p ...
.text:00403E35
.text:00403E35 var_28	       = dword ptr -28h
.text:00403E35 var_24	       = dword ptr -24h
.text:00403E35 var_20	       = dword ptr -20h
.text:00403E35 var_1C	       = dword ptr -1Ch
.text:00403E35 arg_0	       = dword ptr  8
.text:00403E35 arg_4	       = dword ptr  0Ch
.text:00403E35
.text:00403E35		       push    ebp
.text:00403E36		       mov     ebp, esp
.text:00403E38		       push    edi
.text:00403E39		       push    esi
.text:00403E3A		       push    ebx
.text:00403E3B		       sub     esp, 1Ch
.text:00403E3E		       mov     ecx, [ebp+arg_4]
.text:00403E41		       mov     edx, [ebp+arg_0]
.text:00403E44		       mov     ebx, 0
.text:00403E49
.text:00403E49 loc_403E49:			       ; CODE XREF: sub_403E35+F1j
.text:00403E49		       mov     edi, edx
.text:00403E4B		       mov     esi, ecx
.text:00403E4D		       mov     eax, [edx]
.text:00403E4F		       cmp     eax, [ecx]
.text:00403E51		       jz      loc_403F17
.text:00403E57		       call    __getreent
.text:00403E5C		       mov     eax, [eax+0Ch]
.text:00403E5F		       mov     [esp+28h+var_1C], eax
.text:00403E63		       mov     [esp+28h+var_20], 3Ch
.text:00403E6B		       mov     [esp+28h+var_24], 1
.text:00403E73		       mov     [esp+28h+var_28], offset	aErrorDifferent	; "[ERROR] DIFFERENT NUMBERS IN	TEST STRUC"...
.text:00403E7A		       call    fwrite
.text:00403E7F		       call    __getreent
.text:00403E84		       mov     [esp+28h+var_20], ebx
.text:00403E88		       mov     [esp+28h+var_24], offset	aErrorD	; "[ERROR] %d "
.text:00403E90		       mov     eax, [eax+0Ch]
.text:00403E93		       mov     [esp+28h+var_28], eax
.text:00403E96		       call    fprintf
.text:00403E9B		       mov     eax, [edi]
.text:00403E9D		       cmp     eax, [esi]
.text:00403E9F		       jle     short loc_403ECB
.text:00403EA1		       call    __getreent
.text:00403EA6		       mov     eax, [eax+0Ch]
.text:00403EA9		       mov     [esp+28h+var_1C], eax
.text:00403EAD		       mov     [esp+28h+var_20], 0Bh
.text:00403EB5		       mov     [esp+28h+var_24], 1
.text:00403EBD		       mov     [esp+28h+var_28], offset	aIsMissing ; "IS MISSING\n"
.text:00403EC4		       call    fwrite
.text:00403EC9		       jmp     short loc_403EF3
.text:00403ECB ; ---------------------------------------------------------------------------
.text:00403ECB
.text:00403ECB loc_403ECB:			       ; CODE XREF: sub_403E35+6Aj
.text:00403ECB		       call    __getreent
.text:00403ED0		       mov     eax, [eax+0Ch]
.text:00403ED3		       mov     [esp+28h+var_1C], eax
.text:00403ED7		       mov     [esp+28h+var_20], 9
.text:00403EDF		       mov     [esp+28h+var_24], 1
.text:00403EE7		       mov     [esp+28h+var_28], offset	aAppeared ; "APPEARED\n"
.text:00403EEE		       call    fwrite
.text:00403EF3
.text:00403EF3 loc_403EF3:			       ; CODE XREF: sub_403E35+94j
.text:00403EF3		       mov     [esp+28h+var_1C], offset	a0 ; "0"
.text:00403EFB		       mov     [esp+28h+var_20], offset	aCompare_counts	; "compare_counts"
.text:00403F03		       mov     [esp+28h+var_24], 7Ah
.text:00403F0B		       mov     [esp+28h+var_28], offset	aSelftest_c ; "selftest.c"
.text:00403F12		       call    __assert_func
.text:00403F17
.text:00403F17 loc_403F17:			       ; CODE XREF: sub_403E35+1Cj
.text:00403F17		       add     ebx, 1
.text:00403F1A		       add     ecx, 4
.text:00403F1D		       add     edx, 4
.text:00403F20		       cmp     ebx, 3E8h
.text:00403F26		       jnz     loc_403E49
.text:00403F2C		       add     esp, 1Ch
.text:00403F2F		       pop     ebx
.text:00403F30		       pop     esi
.text:00403F31		       pop     edi
.text:00403F32		       pop     ebp
.text:00403F33		       retn
.text:00403F33 sub_403E35      endp
.text:00403F33
.text:00403F34
.text:00403F34 ; =============== S U B R O U T I N E =======================================
.text:00403F34
.text:00403F34 ; Attributes: bp-based frame
.text:00403F34
.text:00403F34 sub_403F34      proc near	       ; CODE XREF: sub_403FDE+30p
.text:00403F34					       ; sub_404074+30p
.text:00403F34
.text:00403F34 arg_0	       = dword ptr  8
.text:00403F34 arg_4	       = dword ptr  0Ch
.text:00403F34
.text:00403F34		       push    ebp
.text:00403F35		       mov     ebp, esp
.text:00403F37		       push    edi
.text:00403F38		       push    esi
.text:00403F39		       push    ebx
.text:00403F3A		       mov     esi, [ebp+arg_0]
.text:00403F3D		       mov     edi, [ebp+arg_4]
.text:00403F40		       mov     edx, 3E8h
.text:00403F45		       mov     eax, 0
.text:00403F4A		       mov     ecx, edx
.text:00403F4C		       rep stosd
.text:00403F4E		       mov     ebx, 0
.text:00403F53
.text:00403F53 loc_403F53:			       ; CODE XREF: sub_403F34+3Cj
.text:00403F53		       mov     edx, [esi+ebx*4]
.text:00403F56		       test    edx, edx
.text:00403F58		       jz      short loc_403F6A
.text:00403F5A
.text:00403F5A loc_403F5A:			       ; CODE XREF: sub_403F34+34j
.text:00403F5A		       mov     eax, [edx]
.text:00403F5C		       mov     ecx, [ebp+arg_4]
.text:00403F5F		       add     dword ptr [ecx+eax*4], 1
.text:00403F63		       mov     edx, [edx+4]
.text:00403F66		       test    edx, edx
.text:00403F68		       jnz     short loc_403F5A
.text:00403F6A
.text:00403F6A loc_403F6A:			       ; CODE XREF: sub_403F34+24j
.text:00403F6A		       add     ebx, 1
.text:00403F6D		       cmp     ebx, 64h
.text:00403F70		       jnz     short loc_403F53
.text:00403F72		       pop     ebx
.text:00403F73		       pop     esi
.text:00403F74		       pop     edi
.text:00403F75		       pop     ebp
.text:00403F76		       retn
.text:00403F76 sub_403F34      endp
.text:00403F76
.text:00403F77
.text:00403F77 ; =============== S U B R O U T I N E =======================================
.text:00403F77
.text:00403F77 ; Attributes: bp-based frame
.text:00403F77
.text:00403F77 sub_403F77      proc near	       ; CODE XREF: sub_404029+30p
.text:00403F77					       ; sub_4040BF+30p ...
.text:00403F77
.text:00403F77 arg_0	       = dword ptr  8
.text:00403F77 arg_4	       = dword ptr  0Ch
.text:00403F77
.text:00403F77		       push    ebp
.text:00403F78		       mov     ebp, esp
.text:00403F7A		       push    edi
.text:00403F7B		       push    ebx
.text:00403F7C		       mov     edx, [ebp+arg_0]
.text:00403F7F		       mov     ebx, [ebp+arg_4]
.text:00403F82		       mov     edi, ebx
.text:00403F84		       mov     ecx, 3E8h
.text:00403F89		       mov     eax, 0
.text:00403F8E		       rep stosd
.text:00403F90		       test    edx, edx
.text:00403F92		       jz      short loc_403FA1
.text:00403F94
.text:00403F94 loc_403F94:			       ; CODE XREF: sub_403F77+28j
.text:00403F94		       mov     eax, [edx]
.text:00403F96		       add     dword ptr [ebx+eax*4], 1
.text:00403F9A		       mov     edx, [edx+4]
.text:00403F9D		       test    edx, edx
.text:00403F9F		       jnz     short loc_403F94
.text:00403FA1
.text:00403FA1 loc_403FA1:			       ; CODE XREF: sub_403F77+1Bj
.text:00403FA1		       pop     ebx
.text:00403FA2		       pop     edi
.text:00403FA3		       pop     ebp
.text:00403FA4		       retn
.text:00403FA4 sub_403F77      endp
.text:00403FA4
.text:00403FA5
.text:00403FA5 ; =============== S U B R O U T I N E =======================================
.text:00403FA5
.text:00403FA5 ; Attributes: bp-based frame
.text:00403FA5
.text:00403FA5 sub_403FA5      proc near	       ; CODE XREF: sub_403FDE+1Dp
.text:00403FA5					       ; sub_404029+1Dp ...
.text:00403FA5
.text:00403FA5 arg_0	       = dword ptr  8
.text:00403FA5 arg_4	       = dword ptr  0Ch
.text:00403FA5 arg_8	       = dword ptr  10h
.text:00403FA5
.text:00403FA5		       push    ebp
.text:00403FA6		       mov     ebp, esp
.text:00403FA8		       push    edi
.text:00403FA9		       push    esi
.text:00403FAA		       push    ebx
.text:00403FAB		       mov     ebx, [ebp+arg_4]
.text:00403FAE		       mov     esi, [ebp+arg_8]
.text:00403FB1		       mov     edi, ebx
.text:00403FB3		       mov     ecx, 3E8h
.text:00403FB8		       mov     eax, 0
.text:00403FBD		       rep stosd
.text:00403FBF		       test    esi, esi
.text:00403FC1		       jle     short loc_403FD9
.text:00403FC3		       mov     edx, 0
.text:00403FC8
.text:00403FC8 loc_403FC8:			       ; CODE XREF: sub_403FA5+32j
.text:00403FC8		       mov     ecx, [ebp+arg_0]
.text:00403FCB		       mov     eax, [ecx+edx*4]
.text:00403FCE		       add     dword ptr [ebx+eax*4], 1
.text:00403FD2		       add     edx, 1
.text:00403FD5		       cmp     esi, edx
.text:00403FD7		       jg      short loc_403FC8
.text:00403FD9
.text:00403FD9 loc_403FD9:			       ; CODE XREF: sub_403FA5+1Cj
.text:00403FD9		       pop     ebx
.text:00403FDA		       pop     esi
.text:00403FDB		       pop     edi
.text:00403FDC		       pop     ebp
.text:00403FDD		       retn
.text:00403FDD sub_403FA5      endp
.text:00403FDD
.text:00403FDE
.text:00403FDE ; =============== S U B R O U T I N E =======================================
.text:00403FDE
.text:00403FDE ; Attributes: bp-based frame
.text:00403FDE
.text:00403FDE sub_403FDE      proc near	       ; CODE XREF: sub_406A03+4CFp
.text:00403FDE
.text:00403FDE var_18	       = dword ptr -18h
.text:00403FDE var_14	       = dword ptr -14h
.text:00403FDE var_10	       = dword ptr -10h
.text:00403FDE arg_0	       = dword ptr  8
.text:00403FDE
.text:00403FDE		       push    ebp
.text:00403FDF		       mov     ebp, esp
.text:00403FE1		       sub     esp, 18h
.text:00403FE4		       mov     [esp+18h+var_10], 3E8h
.text:00403FEC		       mov     [esp+18h+var_14], offset	dword_40C0C0
.text:00403FF4		       mov     [esp+18h+var_18], offset	dword_40D060
.text:00403FFB		       call    sub_403FA5
.text:00404000		       mov     [esp+18h+var_14], offset	dword_40B120
.text:00404008		       mov     eax, [ebp+arg_0]
.text:0040400B		       mov     [esp+18h+var_18], eax
.text:0040400E		       call    sub_403F34
.text:00404013		       mov     [esp+18h+var_14], offset	dword_40B120
.text:0040401B		       mov     [esp+18h+var_18], offset	dword_40C0C0
.text:00404022		       call    sub_402B98
.text:00404027		       leave
.text:00404028		       retn
.text:00404028 sub_403FDE      endp
.text:00404028
.text:00404029
.text:00404029 ; =============== S U B R O U T I N E =======================================
.text:00404029
.text:00404029 ; Attributes: bp-based frame
.text:00404029
.text:00404029 sub_404029      proc near	       ; CODE XREF: sub_4041AA+CD3p
.text:00404029					       ; sub_40502E+59Ep ...
.text:00404029
.text:00404029 var_18	       = dword ptr -18h
.text:00404029 var_14	       = dword ptr -14h
.text:00404029 var_10	       = dword ptr -10h
.text:00404029 arg_0	       = dword ptr  8
.text:00404029
.text:00404029		       push    ebp
.text:0040402A		       mov     ebp, esp
.text:0040402C		       sub     esp, 18h
.text:0040402F		       mov     [esp+18h+var_10], 3E8h
.text:00404037		       mov     [esp+18h+var_14], offset	dword_40C0C0
.text:0040403F		       mov     [esp+18h+var_18], offset	dword_40D060
.text:00404046		       call    sub_403FA5
.text:0040404B		       mov     [esp+18h+var_14], offset	dword_40B120
.text:00404053		       mov     eax, [ebp+arg_0]
.text:00404056		       mov     [esp+18h+var_18], eax
.text:00404059		       call    sub_403F77
.text:0040405E		       mov     [esp+18h+var_14], offset	dword_40B120
.text:00404066		       mov     [esp+18h+var_18], offset	dword_40C0C0
.text:0040406D		       call    sub_402B98
.text:00404072		       leave
.text:00404073		       retn
.text:00404073 sub_404029      endp
.text:00404073
.text:00404074
.text:00404074 ; =============== S U B R O U T I N E =======================================
.text:00404074
.text:00404074 ; Attributes: bp-based frame
.text:00404074
.text:00404074 sub_404074      proc near	       ; CODE XREF: sub_406A03+77p
.text:00404074
.text:00404074 var_18	       = dword ptr -18h
.text:00404074 var_14	       = dword ptr -14h
.text:00404074 var_10	       = dword ptr -10h
.text:00404074 arg_0	       = dword ptr  8
.text:00404074
.text:00404074		       push    ebp
.text:00404075		       mov     ebp, esp
.text:00404077		       sub     esp, 18h
.text:0040407A		       mov     [esp+18h+var_10], 3E8h
.text:00404082		       mov     [esp+18h+var_14], offset	dword_40C0C0
.text:0040408A		       mov     [esp+18h+var_18], offset	dword_40D060
.text:00404091		       call    sub_403FA5
.text:00404096		       mov     [esp+18h+var_14], offset	dword_40B120
.text:0040409E		       mov     eax, [ebp+arg_0]
.text:004040A1		       mov     [esp+18h+var_18], eax
.text:004040A4		       call    sub_403F34
.text:004040A9		       mov     [esp+18h+var_14], offset	dword_40B120
.text:004040B1		       mov     [esp+18h+var_18], offset	dword_40C0C0
.text:004040B8		       call    sub_403E35
.text:004040BD		       leave
.text:004040BE		       retn
.text:004040BE sub_404074      endp
.text:004040BE
.text:004040BF
.text:004040BF ; =============== S U B R O U T I N E =======================================
.text:004040BF
.text:004040BF ; Attributes: bp-based frame
.text:004040BF
.text:004040BF sub_4040BF      proc near	       ; CODE XREF: sub_4041AA+1FEp
.text:004040BF					       ; sub_40502E+BBp ...
.text:004040BF
.text:004040BF var_18	       = dword ptr -18h
.text:004040BF var_14	       = dword ptr -14h
.text:004040BF var_10	       = dword ptr -10h
.text:004040BF arg_0	       = dword ptr  8
.text:004040BF
.text:004040BF		       push    ebp
.text:004040C0		       mov     ebp, esp
.text:004040C2		       sub     esp, 18h
.text:004040C5		       mov     [esp+18h+var_10], 3E8h
.text:004040CD		       mov     [esp+18h+var_14], offset	dword_40C0C0
.text:004040D5		       mov     [esp+18h+var_18], offset	dword_40D060
.text:004040DC		       call    sub_403FA5
.text:004040E1		       mov     [esp+18h+var_14], offset	dword_40B120
.text:004040E9		       mov     eax, [ebp+arg_0]
.text:004040EC		       mov     [esp+18h+var_18], eax
.text:004040EF		       call    sub_403F77
.text:004040F4		       mov     [esp+18h+var_14], offset	dword_40B120
.text:004040FC		       mov     [esp+18h+var_18], offset	dword_40C0C0
.text:00404103		       call    sub_403E35
.text:00404108		       leave
.text:00404109		       retn
.text:00404109 sub_4040BF      endp
.text:00404109
.text:0040410A
.text:0040410A ; =============== S U B R O U T I N E =======================================
.text:0040410A
.text:0040410A ; Attributes: bp-based frame
.text:0040410A
.text:0040410A sub_40410A      proc near	       ; CODE XREF: sub_407C31+1F4p
.text:0040410A					       ; sub_407E47+2BFp
.text:0040410A
.text:0040410A var_18	       = dword ptr -18h
.text:0040410A var_14	       = dword ptr -14h
.text:0040410A var_10	       = dword ptr -10h
.text:0040410A arg_0	       = dword ptr  8
.text:0040410A arg_4	       = dword ptr  0Ch
.text:0040410A
.text:0040410A		       push    ebp
.text:0040410B		       mov     ebp, esp
.text:0040410D		       sub     esp, 18h
.text:00404110		       mov     [esp+18h+var_10], 3E8h
.text:00404118		       mov     [esp+18h+var_14], offset	dword_40C0C0
.text:00404120		       mov     [esp+18h+var_18], offset	dword_40D060
.text:00404127		       call    sub_403FA5
.text:0040412C		       mov     eax, [ebp+arg_4]
.text:0040412F		       mov     [esp+18h+var_10], eax
.text:00404133		       mov     [esp+18h+var_14], offset	dword_40B120
.text:0040413B		       mov     eax, [ebp+arg_0]
.text:0040413E		       mov     [esp+18h+var_18], eax
.text:00404141		       call    sub_403FA5
.text:00404146		       mov     [esp+18h+var_14], offset	dword_40B120
.text:0040414E		       mov     [esp+18h+var_18], offset	dword_40C0C0
.text:00404155		       call    sub_403E35
.text:0040415A		       leave
.text:0040415B		       retn
.text:0040415B sub_40410A      endp
.text:0040415B
.text:0040415C
.text:0040415C ; =============== S U B R O U T I N E =======================================
.text:0040415C
.text:0040415C ; Attributes: bp-based frame
.text:0040415C
.text:0040415C sub_40415C      proc near	       ; CODE XREF: sub_4041AA+10p
.text:0040415C					       ; sub_40502E+10p ...
.text:0040415C
.text:0040415C var_10	       = dword ptr -10h
.text:0040415C
.text:0040415C		       push    ebp
.text:0040415D		       mov     ebp, esp
.text:0040415F		       push    edi
.text:00404160		       push    esi
.text:00404161		       push    ebx
.text:00404162		       sub     esp, 0Ch
.text:00404165		       mov     ebx, 0
.text:0040416A		       mov     edi, offset dword_40D060
.text:0040416F		       mov     esi, 10624DD3h
.text:00404174
.text:00404174 loc_404174:			       ; CODE XREF: sub_40415C+44j
.text:00404174		       call    random
.text:00404179		       mov     [ebp+var_10], eax
.text:0040417C		       imul    esi
.text:0040417E		       sar     edx, 6
.text:00404181		       mov     ecx, [ebp+var_10]
.text:00404184		       sar     ecx, 1Fh
.text:00404187		       sub     edx, ecx
.text:00404189		       imul    edx, 3E8h
.text:0040418F		       mov     eax, [ebp+var_10]
.text:00404192		       sub     eax, edx
.text:00404194		       mov     [edi+ebx*4], eax
.text:00404197		       add     ebx, 1
.text:0040419A		       cmp     ebx, 3E8h
.text:004041A0		       jnz     short loc_404174
.text:004041A2		       add     esp, 0Ch
.text:004041A5		       pop     ebx
.text:004041A6		       pop     esi
.text:004041A7		       pop     edi
.text:004041A8		       pop     ebp
.text:004041A9		       retn
.text:004041A9 sub_40415C      endp
.text:004041A9
.text:004041AA
.text:004041AA ; =============== S U B R O U T I N E =======================================
.text:004041AA
.text:004041AA ; Attributes: bp-based frame
.text:004041AA
.text:004041AA sub_4041AA      proc near	       ; CODE XREF: sub_408128+62p
.text:004041AA
.text:004041AA var_2762	       = byte ptr -2762h
.text:004041AA var_2761	       = byte ptr -2761h
.text:004041AA var_2760	       = dword ptr -2760h
.text:004041AA var_2759	       = byte ptr -2759h
.text:004041AA var_2758	       = dword ptr -2758h
.text:004041AA var_2754	       = dword ptr -2754h
.text:004041AA var_2750	       = dword ptr -2750h
.text:004041AA var_274C	       = dword ptr -274Ch
.text:004041AA var_2748	       = dword ptr -2748h
.text:004041AA var_2744	       = dword ptr -2744h
.text:004041AA var_2740	       = dword ptr -2740h
.text:004041AA var_273C	       = dword ptr -273Ch
.text:004041AA var_2738	       = dword ptr -2738h
.text:004041AA var_2734	       = dword ptr -2734h
.text:004041AA var_2730	       = dword ptr -2730h
.text:004041AA var_272C	       = dword ptr -272Ch
.text:004041AA var_2728	       = dword ptr -2728h
.text:004041AA var_2724	       = dword ptr -2724h
.text:004041AA var_2720	       = dword ptr -2720h
.text:004041AA var_2718	       = dword ptr -2718h
.text:004041AA var_2518	       = dword ptr -2518h
.text:004041AA var_2318	       = dword ptr -2318h
.text:004041AA var_2218	       = byte ptr -2218h
.text:004041AA var_1F88	       = dword ptr -1F88h
.text:004041AA var_1F84	       = dword ptr -1F84h
.text:004041AA var_1F6C	       = dword ptr -1F6Ch
.text:004041AA var_1F68	       = dword ptr -1F68h
.text:004041AA var_1F50	       = dword ptr -1F50h
.text:004041AA var_1F4C	       = dword ptr -1F4Ch
.text:004041AA var_FAC	       = dword ptr -0FACh
.text:004041AA var_FA8	       = byte ptr -0FA8h
.text:004041AA var_C	       = dword ptr -0Ch
.text:004041AA var_8	       = dword ptr -8
.text:004041AA var_4	       = dword ptr -4
.text:004041AA
.text:004041AA		       push    ebp
.text:004041AB		       mov     ebp, esp
.text:004041AD		       push    edi
.text:004041AE		       push    esi
.text:004041AF		       push    ebx
.text:004041B0		       mov     eax, 276Ch
.text:004041B5		       call    sub_4081C0
.text:004041BA		       call    sub_40415C
.text:004041BF		       mov     [ebp+var_1F50], 0
.text:004041C9		       mov     esi, 0
.text:004041CE		       mov     edi, offset dword_40D060
.text:004041D3
.text:004041D3 loc_4041D3:			       ; CODE XREF: sub_4041AA+ACj
.text:004041D3		       mov     eax, [ebp+var_1F50]
.text:004041D9		       mov     [esp+0Ch+var_C],	eax
.text:004041DC		       call    sub_402FE2
.text:004041E1		       mov     ebx, eax
.text:004041E3		       cmp     eax, esi
.text:004041E5		       jz      short loc_40420B
.text:004041E7		       mov     dword ptr [esp+0Ch], offset aSglib_tree_l_0 ; "sglib_Tree_len(tree) == i"
.text:004041EF		       mov     [esp+0Ch+var_4],	offset aRbtree_test ; "rbtree_test"
.text:004041F7		       mov     [esp+0Ch+var_8],	3EAh
.text:004041FF		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00404206		       call    __assert_func
.text:0040420B
.text:0040420B loc_40420B:			       ; CODE XREF: sub_4041AA+3Bj
.text:0040420B		       mov     eax, [edi+eax*4]
.text:0040420E		       mov     [ebp+ebx*4+var_FAC], eax
.text:00404215		       mov     [ebp+ebx*4+var_1F4C], ebx
.text:0040421C		       mov     [esp+0Ch+var_C],	18h
.text:00404223		       call    malloc
.text:00404228		       mov     edx, [edi+ebx*4]
.text:0040422B		       mov     [eax], edx
.text:0040422D		       mov     [esp+0Ch+var_8],	eax
.text:00404231		       lea     eax, [ebp+var_1F50]
.text:00404237		       mov     [esp+0Ch+var_C],	eax
.text:0040423A		       call    sub_4025F8
.text:0040423F		       mov     eax, [ebp+var_1F50]
.text:00404245		       mov     [esp+0Ch+var_C],	eax
.text:00404248		       call    sub_402D8D
.text:0040424D		       lea     esi, [ebx+1]
.text:00404250		       cmp     esi, 3E7h
.text:00404256		       jle     loc_4041D3
.text:0040425C		       mov     [ebp+var_1F88], 0
.text:00404266		       mov     edx, [ebp+var_1F50]
.text:0040426C		       test    edx, edx
.text:0040426E		       jz      loc_40439F
.text:00404274		       mov     [ebp+var_272C], 0
.text:0040427E
.text:0040427E loc_40427E:			       ; CODE XREF: sub_4041AA+1F0j
.text:0040427E					       ; sub_4041AA+E29j
.text:0040427E		       mov     eax, [ebp+var_272C]
.text:00404284		       shl     eax, 2
.text:00404287		       lea     ebx, [ebp+eax+var_2718]
.text:0040428E		       lea     ecx, [ebp+eax+var_2518]
.text:00404295		       mov     esi, [ebp+var_272C]
.text:0040429B		       lea     eax, [ebp+esi+var_2318]
.text:004042A2
.text:004042A2 loc_4042A2:			       ; CODE XREF: sub_4041AA+148j
.text:004042A2		       mov     esi, [edx+14h]
.text:004042A5		       mov     edi, [edx+10h]
.text:004042A8		       add     [ebp+var_272C], 1
.text:004042AF		       cmp     [ebp+var_272C], 7Fh
.text:004042B6		       jle     short loc_4042DC
.text:004042B8		       mov     dword ptr [esp+0Ch], offset a0TheBinary_tre ; "0	&& \"the binary_tree is	too deep\""
.text:004042C0		       mov     [esp+0Ch+var_4],	offset aRbtree_test ; "rbtree_test"
.text:004042C8		       mov     [esp+0Ch+var_8],	3F8h
.text:004042D0		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:004042D7		       call    __assert_func
.text:004042DC
.text:004042DC loc_4042DC:			       ; CODE XREF: sub_4041AA+10Cj
.text:004042DC		       mov     [ebx], edx
.text:004042DE		       mov     [ecx], esi
.text:004042E0		       mov     byte ptr	[eax], 0
.text:004042E3		       add     ebx, 4
.text:004042E6		       add     ecx, 4
.text:004042E9		       add     eax, 1
.text:004042EC		       test    edi, edi
.text:004042EE		       jz      short loc_4042F4
.text:004042F0		       mov     edx, edi
.text:004042F2		       jmp     short loc_4042A2
.text:004042F4 ; ---------------------------------------------------------------------------
.text:004042F4
.text:004042F4 loc_4042F4:			       ; CODE XREF: sub_4041AA+144j
.text:004042F4		       mov     eax, [ebp+var_272C]
.text:004042FA		       sub     eax, 1
.text:004042FD		       lea     esi, [ebp+eax+var_2318]
.text:00404304		       shl     eax, 2
.text:00404307		       lea     edi, [ebp+eax+var_2518]
.text:0040430E		       lea     eax, [ebp+eax+var_2718]
.text:00404315		       mov     [ebp+var_2730], eax
.text:0040431B
.text:0040431B loc_40431B:			       ; CODE XREF: sub_4041AA+1D2j
.text:0040431B		       mov     eax, [ebp+var_272C]
.text:00404321		       sub     eax, 1
.text:00404324		       mov     [ebp+var_2754], eax
.text:0040432A		       movzx   ebx, byte ptr [esi]
.text:0040432D		       test    bl, bl
.text:0040432F		       jnz     short loc_40434B
.text:00404331		       mov     edx, [ebp+var_2730]
.text:00404337		       mov     eax, [edx]
.text:00404339		       mov     [esp+0Ch+var_8],	eax
.text:0040433D		       lea     eax, [ebp+var_1F88]
.text:00404343		       mov     [esp+0Ch+var_C],	eax
.text:00404346		       call    sub_401272
.text:0040434B
.text:0040434B loc_40434B:			       ; CODE XREF: sub_4041AA+185j
.text:0040434B		       lea     eax, [ebx+1]
.text:0040434E		       mov     [esi], al
.text:00404350		       cmp     [ebp+var_2754], 0
.text:00404357		       jle     short loc_40437E
.text:00404359		       mov     eax, [edi]
.text:0040435B		       sub     esi, 1
.text:0040435E		       sub     edi, 4
.text:00404361		       sub     [ebp+var_2730], 4
.text:00404368		       test    eax, eax
.text:0040436A		       jnz     loc_404FBB
.text:00404370		       mov     edx, [ebp+var_2754]
.text:00404376		       mov     [ebp+var_272C], edx
.text:0040437C		       jmp     short loc_40431B
.text:0040437E ; ---------------------------------------------------------------------------
.text:0040437E
.text:0040437E loc_40437E:			       ; CODE XREF: sub_4041AA+1ADj
.text:0040437E		       mov     esi, [ebp+var_2754]
.text:00404384		       mov     edx, [ebp+esi*4+var_2518]
.text:0040438B		       test    edx, edx
.text:0040438D		       jz      short loc_40439F
.text:0040438F		       mov     [ebp+esi*4+var_2518], 0
.text:0040439A		       jmp     loc_40427E
.text:0040439F ; ---------------------------------------------------------------------------
.text:0040439F
.text:0040439F loc_40439F:			       ; CODE XREF: sub_4041AA+C4j
.text:0040439F					       ; sub_4041AA+1E3j
.text:0040439F		       mov     eax, [ebp+var_1F88]
.text:004043A5		       mov     [esp+0Ch+var_C],	eax
.text:004043A8		       call    sub_4040BF
.text:004043AD		       mov     edx, [ebp+var_1F50]
.text:004043B3		       test    edx, edx
.text:004043B5		       jz      loc_404517
.text:004043BB		       mov     [ebp+var_2728], 0
.text:004043C5
.text:004043C5 loc_4043C5:			       ; CODE XREF: sub_4041AA+368j
.text:004043C5					       ; sub_4041AA+E46j
.text:004043C5		       mov     eax, [ebp+var_2728]
.text:004043CB		       shl     eax, 2
.text:004043CE		       lea     ebx, [ebp+var_2518]
.text:004043D4		       add     ebx, eax
.text:004043D6		       lea     ecx, [ebp+var_2718]
.text:004043DC		       add     ecx, eax
.text:004043DE		       mov     edi, [ebp+var_2728]
.text:004043E4		       lea     eax, [ebp+edi+var_2318]
.text:004043EB
.text:004043EB loc_4043EB:			       ; CODE XREF: sub_4041AA+291j
.text:004043EB		       mov     esi, [edx+14h]
.text:004043EE		       mov     edi, [edx+10h]
.text:004043F1		       add     [ebp+var_2728], 1
.text:004043F8		       cmp     [ebp+var_2728], 7Fh
.text:004043FF		       jle     short loc_404425
.text:00404401		       mov     dword ptr [esp+0Ch], offset a0TheBinary_tre ; "0	&& \"the binary_tree is	too deep\""
.text:00404409		       mov     [esp+0Ch+var_4],	offset aRbtree_test ; "rbtree_test"
.text:00404411		       mov     [esp+0Ch+var_8],	3FDh
.text:00404419		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00404420		       call    __assert_func
.text:00404425
.text:00404425 loc_404425:			       ; CODE XREF: sub_4041AA+255j
.text:00404425		       mov     [ebx], edx
.text:00404427		       mov     [ecx], esi
.text:00404429		       mov     byte ptr	[eax], 0
.text:0040442C		       add     ebx, 4
.text:0040442F		       add     ecx, 4
.text:00404432		       add     eax, 1
.text:00404435		       test    edi, edi
.text:00404437		       jz      short loc_40443D
.text:00404439		       mov     edx, edi
.text:0040443B		       jmp     short loc_4043EB
.text:0040443D ; ---------------------------------------------------------------------------
.text:0040443D
.text:0040443D loc_40443D:			       ; CODE XREF: sub_4041AA+28Dj
.text:0040443D		       mov     eax, [ebp+var_2728]
.text:00404443		       sub     eax, 1
.text:00404446		       lea     ebx, [ebp+eax+var_2318]
.text:0040444D		       shl     eax, 2
.text:00404450		       lea     edi, [ebp+var_2718]
.text:00404456		       add     edi, eax
.text:00404458		       lea     edx, [ebp+var_2518]
.text:0040445E		       add     edx, eax
.text:00404460		       mov     [ebp+var_2734], edx
.text:00404466
.text:00404466 loc_404466:			       ; CODE XREF: sub_4041AA+347j
.text:00404466		       mov     esi, [ebp+var_2728]
.text:0040446C		       sub     esi, 1
.text:0040446F		       mov     [ebp+var_2724], esi
.text:00404475		       movzx   esi, byte ptr [ebx]
.text:00404478		       mov     eax, esi
.text:0040447A		       test    al, al
.text:0040447C		       jnz     short loc_4044C0
.text:0040447E		       mov     edx, [ebp+var_2734]
.text:00404484		       mov     eax, [edx]
.text:00404486		       mov     [esp+0Ch+var_8],	eax
.text:0040448A		       mov     eax, [ebp+var_1F50]
.text:00404490		       mov     [esp+0Ch+var_C],	eax
.text:00404493		       call    sub_4030CF
.text:00404498		       test    eax, eax
.text:0040449A		       jnz     short loc_4044C0
.text:0040449C		       mov     dword ptr [esp+0Ch], offset aSglib_tree_i_0 ; "sglib_Tree_is_member(tree, me)"
.text:004044A4		       mov     [esp+0Ch+var_4],	offset aRbtree_test ; "rbtree_test"
.text:004044AC		       mov     [esp+0Ch+var_8],	3FDh
.text:004044B4		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:004044BB		       call    __assert_func
.text:004044C0
.text:004044C0 loc_4044C0:			       ; CODE XREF: sub_4041AA+2D2j
.text:004044C0					       ; sub_4041AA+2F0j
.text:004044C0		       lea     eax, [esi+1]
.text:004044C3		       mov     [ebx], al
.text:004044C5		       cmp     [ebp+var_2724], 0
.text:004044CC		       jle     short loc_4044F6
.text:004044CE		       mov     eax, [edi]
.text:004044D0		       sub     ebx, 1
.text:004044D3		       sub     edi, 4
.text:004044D6		       sub     [ebp+var_2734], 4
.text:004044DD		       test    eax, eax
.text:004044DF		       jnz     loc_404FD8
.text:004044E5		       mov     esi, [ebp+var_2724]
.text:004044EB		       mov     [ebp+var_2728], esi
.text:004044F1		       jmp     loc_404466
.text:004044F6 ; ---------------------------------------------------------------------------
.text:004044F6
.text:004044F6 loc_4044F6:			       ; CODE XREF: sub_4041AA+322j
.text:004044F6		       mov     edi, [ebp+var_2724]
.text:004044FC		       mov     edx, [ebp+edi*4+var_2718]
.text:00404503		       test    edx, edx
.text:00404505		       jz      short loc_404517
.text:00404507		       mov     [ebp+edi*4+var_2718], 0
.text:00404512		       jmp     loc_4043C5
.text:00404517 ; ---------------------------------------------------------------------------
.text:00404517
.text:00404517 loc_404517:			       ; CODE XREF: sub_4041AA+20Bj
.text:00404517					       ; sub_4041AA+35Bj
.text:00404517		       mov     eax, ds:dword_40D060
.text:0040451C		       mov     [ebp+var_1F68], eax
.text:00404522		       lea     eax, [ebp+var_1F68]
.text:00404528		       mov     [esp+0Ch+var_8],	eax
.text:0040452C		       mov     eax, [ebp+var_1F50]
.text:00404532		       mov     [esp+0Ch+var_C],	eax
.text:00404535		       call    sub_4030CF
.text:0040453A		       test    eax, eax
.text:0040453C		       jz      short loc_404562
.text:0040453E		       mov     dword ptr [esp+0Ch], offset aSglib_tree_i_1 ; "!	sglib_Tree_is_member(tree, &te)"
.text:00404546		       mov     [esp+0Ch+var_4],	offset aRbtree_test ; "rbtree_test"
.text:0040454E		       mov     [esp+0Ch+var_8],	3FFh
.text:00404556		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:0040455D		       call    __assert_func
.text:00404562
.text:00404562 loc_404562:			       ; CODE XREF: sub_4041AA+392j
.text:00404562		       mov     eax, [ebp+var_1F50]
.text:00404568		       mov     [esp+0Ch+var_8],	eax
.text:0040456C		       lea     eax, [ebp+var_2218]
.text:00404572		       mov     [esp+0Ch+var_C],	eax
.text:00404575		       call    sub_402F4C
.text:0040457A		       mov     [ebp+var_2758], eax
.text:00404580		       mov     edx, [ebp+var_1F50]
.text:00404586		       test    edx, edx
.text:00404588		       jz      loc_40474B
.text:0040458E		       mov     [ebp+var_2750], 0
.text:00404598
.text:00404598 loc_404598:			       ; CODE XREF: sub_4041AA+59Cj
.text:00404598					       ; sub_4041AA+E5Dj
.text:00404598		       mov     eax, [ebp+var_2750]
.text:0040459E		       shl     eax, 2
.text:004045A1		       lea     ebx, [ebp+eax+var_2718]
.text:004045A8		       lea     ecx, [ebp+eax+var_2518]
.text:004045AF		       mov     esi, [ebp+var_2750]
.text:004045B5		       lea     eax, [ebp+esi+var_2318]
.text:004045BC
.text:004045BC loc_4045BC:			       ; CODE XREF: sub_4041AA+462j
.text:004045BC		       mov     esi, [edx+14h]
.text:004045BF		       mov     edi, [edx+10h]
.text:004045C2		       add     [ebp+var_2750], 1
.text:004045C9		       cmp     [ebp+var_2750], 7Fh
.text:004045D0		       jle     short loc_4045F6
.text:004045D2		       mov     dword ptr [esp+0Ch], offset a0TheBinary_tre ; "0	&& \"the binary_tree is	too deep\""
.text:004045DA		       mov     [esp+0Ch+var_4],	offset aRbtree_test ; "rbtree_test"
.text:004045E2		       mov     [esp+0Ch+var_8],	407h
.text:004045EA		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:004045F1		       call    __assert_func
.text:004045F6
.text:004045F6 loc_4045F6:			       ; CODE XREF: sub_4041AA+426j
.text:004045F6		       mov     [ebx], edx
.text:004045F8		       mov     [ecx], esi
.text:004045FA		       mov     byte ptr	[eax], 0
.text:004045FD		       add     ebx, 4
.text:00404600		       add     ecx, 4
.text:00404603		       add     eax, 1
.text:00404606		       test    edi, edi
.text:00404608		       jz      short loc_40460E
.text:0040460A		       mov     edx, edi
.text:0040460C		       jmp     short loc_4045BC
.text:0040460E ; ---------------------------------------------------------------------------
.text:0040460E
.text:0040460E loc_40460E:			       ; CODE XREF: sub_4041AA+45Ej
.text:0040460E		       mov     eax, [ebp+var_2750]
.text:00404614		       sub     eax, 1
.text:00404617		       lea     ebx, [ebp+eax+var_2318]
.text:0040461E		       shl     eax, 2
.text:00404621		       lea     edi, [ebp+eax+var_2518]
.text:00404628		       lea     eax, [ebp+eax+var_2718]
.text:0040462F		       mov     [ebp+var_2738], eax
.text:00404635
.text:00404635 loc_404635:			       ; CODE XREF: sub_4041AA+581j
.text:00404635		       mov     esi, [ebp+var_2750]
.text:0040463B		       sub     esi, 1
.text:0040463E		       movzx   eax, byte ptr [ebx]
.text:00404641		       mov     [ebp+var_2761], al
.text:00404647		       test    al, al
.text:00404649		       jnz     loc_4046FE
.text:0040464F		       mov     edx, [ebp+var_2738]
.text:00404655		       mov     eax, [edx]
.text:00404657		       cmp     [ebp+var_2758], 0
.text:0040465E		       jnz     short loc_404684
.text:00404660		       mov     dword ptr [esp+0Ch], offset aTNull ; "t!=NULL"
.text:00404668		       mov     [esp+0Ch+var_4],	offset aRbtree_test ; "rbtree_test"
.text:00404670		       mov     [esp+0Ch+var_8],	407h
.text:00404678		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:0040467F		       call    __assert_func
.text:00404684
.text:00404684 loc_404684:			       ; CODE XREF: sub_4041AA+4B4j
.text:00404684		       cmp     [ebp+var_2758], eax
.text:0040468A		       jz      short loc_4046B0
.text:0040468C		       mov     dword ptr [esp+0Ch], offset aTMe	; "t==me"
.text:00404694		       mov     [esp+0Ch+var_4],	offset aRbtree_test ; "rbtree_test"
.text:0040469C		       mov     [esp+0Ch+var_8],	407h
.text:004046A4		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:004046AB		       call    __assert_func
.text:004046B0
.text:004046B0 loc_4046B0:			       ; CODE XREF: sub_4041AA+4E0j
.text:004046B0		       lea     eax, [ebp+var_2218]
.text:004046B6		       mov     [esp+0Ch+var_C],	eax
.text:004046B9		       call    sub_402804
.text:004046BE		       mov     [ebp+var_2758], eax
.text:004046C4		       lea     edx, [ebp+var_2218]
.text:004046CA		       mov     [esp+0Ch+var_C],	edx
.text:004046CD		       call    sub_4027FA
.text:004046D2		       cmp     [ebp+var_2758], eax
.text:004046D8		       jz      short loc_4046FE
.text:004046DA		       mov     dword ptr [esp+0Ch], offset aTSglib_tree_it ; "t==sglib_Tree_it_current(&it)"
.text:004046E2		       mov     [esp+0Ch+var_4],	offset aRbtree_test ; "rbtree_test"
.text:004046EA		       mov     [esp+0Ch+var_8],	407h
.text:004046F2		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:004046F9		       call    __assert_func
.text:004046FE
.text:004046FE loc_4046FE:			       ; CODE XREF: sub_4041AA+49Fj
.text:004046FE					       ; sub_4041AA+52Ej
.text:004046FE		       movzx   eax, [ebp+var_2761]
.text:00404705		       add     eax, 1
.text:00404708		       mov     [ebx], al
.text:0040470A		       test    esi, esi
.text:0040470C		       jle     short loc_404730
.text:0040470E		       mov     eax, [edi]
.text:00404710		       sub     ebx, 1
.text:00404713		       sub     edi, 4
.text:00404716		       sub     [ebp+var_2738], 4
.text:0040471D		       test    eax, eax
.text:0040471F		       jnz     loc_404FF5
.text:00404725		       mov     [ebp+var_2750], esi
.text:0040472B		       jmp     loc_404635
.text:00404730 ; ---------------------------------------------------------------------------
.text:00404730
.text:00404730 loc_404730:			       ; CODE XREF: sub_4041AA+562j
.text:00404730		       mov     edx, [ebp+esi*4+var_2518]
.text:00404737		       test    edx, edx
.text:00404739		       jz      short loc_40474B
.text:0040473B		       mov     [ebp+esi*4+var_2518], 0
.text:00404746		       jmp     loc_404598
.text:0040474B ; ---------------------------------------------------------------------------
.text:0040474B
.text:0040474B loc_40474B:			       ; CODE XREF: sub_4041AA+3DEj
.text:0040474B					       ; sub_4041AA+58Fj
.text:0040474B		       mov     [esp+0Ch+var_8],	offset dword_40B120
.text:00404753		       mov     eax, [ebp+var_1F88]
.text:00404759		       mov     [esp+0Ch+var_C],	eax
.text:0040475C		       call    sub_403F77
.text:00404761		       mov     esi, 0
.text:00404766
.text:00404766 loc_404766:			       ; CODE XREF: sub_4041AA+724j
.text:00404766		       mov     edi, esi
.text:00404768		       mov     [ebp+var_1F84], esi
.text:0040476E		       lea     eax, [ebp+var_1F84]
.text:00404774		       mov     [esp+0Ch], eax
.text:00404778		       mov     [esp+0Ch+var_4],	0
.text:00404780		       mov     eax, [ebp+var_1F50]
.text:00404786		       mov     [esp+0Ch+var_8],	eax
.text:0040478A		       lea     edx, [ebp+var_2218]
.text:00404790		       mov     [esp+0Ch+var_C],	edx
.text:00404793		       call    sub_402EEA
.text:00404798		       mov     ebx, 0
.text:0040479D		       test    eax, eax
.text:0040479F		       jz      short loc_4047F0
.text:004047A1		       cmp     [eax], esi
.text:004047A3		       jz      short loc_4047D6
.text:004047A5		       jmp     short loc_4047B2
.text:004047A7 ; ---------------------------------------------------------------------------
.text:004047A7
.text:004047A7 loc_4047A7:			       ; CODE XREF: sub_4041AA+644j
.text:004047A7		       cmp     [eax], edi
.text:004047A9		       lea     esi, [esi+0]
.text:004047B0		       jz      short loc_4047DB
.text:004047B2
.text:004047B2 loc_4047B2:			       ; CODE XREF: sub_4041AA+5FBj
.text:004047B2		       mov     dword ptr [esp+0Ch], offset aLNI	; "l->n	== i"
.text:004047BA		       mov     [esp+0Ch+var_4],	offset aRbtree_test ; "rbtree_test"
.text:004047C2		       mov     [esp+0Ch+var_8],	410h
.text:004047CA		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:004047D1		       call    __assert_func
.text:004047D6
.text:004047D6 loc_4047D6:			       ; CODE XREF: sub_4041AA+5F9j
.text:004047D6		       mov     ebx, 0
.text:004047DB
.text:004047DB loc_4047DB:			       ; CODE XREF: sub_4041AA+606j
.text:004047DB		       add     ebx, 1
.text:004047DE		       lea     eax, [ebp+var_2218]
.text:004047E4		       mov     [esp+0Ch+var_C],	eax
.text:004047E7		       call    sub_402804
.text:004047EC		       test    eax, eax
.text:004047EE		       jnz     short loc_4047A7
.text:004047F0
.text:004047F0 loc_4047F0:			       ; CODE XREF: sub_4041AA+5F5j
.text:004047F0		       cmp     ds:dword_40B120[edi*4], ebx
.text:004047F7		       jz      short loc_40481D
.text:004047F9		       mov     dword ptr [esp+0Ch], offset aNCheck_countsI ; "n	== check_counts[i]"
.text:00404801		       mov     [esp+0Ch+var_4],	offset aRbtree_test ; "rbtree_test"
.text:00404809		       mov     [esp+0Ch+var_8],	413h
.text:00404811		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00404818		       call    __assert_func
.text:0040481D
.text:0040481D loc_40481D:			       ; CODE XREF: sub_4041AA+64Dj
.text:0040481D		       lea     edx, [ebp+var_1F84]
.text:00404823		       mov     [esp+0Ch], edx
.text:00404827		       mov     [esp+0Ch+var_4],	offset sub_4011A0
.text:0040482F		       mov     eax, [ebp+var_1F50]
.text:00404835		       mov     [esp+0Ch+var_8],	eax
.text:00404839		       lea     eax, [ebp+var_2218]
.text:0040483F		       mov     [esp+0Ch+var_C],	eax
.text:00404842		       call    sub_402EEA
.text:00404847		       mov     ebx, 0
.text:0040484C		       test    eax, eax
.text:0040484E		       jz      short loc_404898
.text:00404850		       cmp     [eax], edi
.text:00404852		       jz      short loc_40487E
.text:00404854		       jmp     short loc_40485A
.text:00404856 ; ---------------------------------------------------------------------------
.text:00404856
.text:00404856 loc_404856:			       ; CODE XREF: sub_4041AA+6ECj
.text:00404856		       cmp     [eax], edi
.text:00404858		       jz      short loc_404883
.text:0040485A
.text:0040485A loc_40485A:			       ; CODE XREF: sub_4041AA+6AAj
.text:0040485A		       mov     dword ptr [esp+0Ch], offset aLNI	; "l->n	== i"
.text:00404862		       mov     [esp+0Ch+var_4],	offset aRbtree_test ; "rbtree_test"
.text:0040486A		       mov     [esp+0Ch+var_8],	418h
.text:00404872		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00404879		       call    __assert_func
.text:0040487E
.text:0040487E loc_40487E:			       ; CODE XREF: sub_4041AA+6A8j
.text:0040487E		       mov     ebx, 0
.text:00404883
.text:00404883 loc_404883:			       ; CODE XREF: sub_4041AA+6AEj
.text:00404883		       add     ebx, 1
.text:00404886		       lea     edx, [ebp+var_2218]
.text:0040488C		       mov     [esp+0Ch+var_C],	edx
.text:0040488F		       call    sub_402804
.text:00404894		       test    eax, eax
.text:00404896		       jnz     short loc_404856
.text:00404898
.text:00404898 loc_404898:			       ; CODE XREF: sub_4041AA+6A4j
.text:00404898		       cmp     ds:dword_40B120[edi*4], ebx
.text:0040489F		       jz      short loc_4048C5
.text:004048A1		       mov     dword ptr [esp+0Ch], offset aNCheck_countsI ; "n	== check_counts[i]"
.text:004048A9		       mov     [esp+0Ch+var_4],	offset aRbtree_test ; "rbtree_test"
.text:004048B1		       mov     [esp+0Ch+var_8],	41Bh
.text:004048B9		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:004048C0		       call    __assert_func
.text:004048C5
.text:004048C5 loc_4048C5:			       ; CODE XREF: sub_4041AA+6F5j
.text:004048C5		       add     esi, 1
.text:004048C8		       cmp     esi, 3E8h
.text:004048CE		       jnz     loc_404766
.text:004048D4		       mov     [ebp+var_2318], 0
.text:004048DE		       mov     [ebp+var_2718], 3E8h
.text:004048E8		       mov     [ebp+var_274C], 1
.text:004048F2
.text:004048F2 loc_4048F2:			       ; CODE XREF: sub_4041AA+97Bj
.text:004048F2		       sub     [ebp+var_274C], 1
.text:004048F9		       mov     esi, [ebp+var_274C]
.text:004048FF		       mov     edi, [ebp+esi*4+var_2318]
.text:00404906		       mov     eax, [ebp+esi*4+var_2718]
.text:0040490D		       mov     [ebp+var_2748], eax
.text:00404913		       jmp     loc_404AC2
.text:00404918 ; ---------------------------------------------------------------------------
.text:00404918
.text:00404918 loc_404918:			       ; CODE XREF: sub_4041AA+923j
.text:00404918		       lea     ecx, [edi+1]
.text:0040491B		       mov     ebx, [ebp+var_2748]
.text:00404921		       sub     ebx, 1
.text:00404924		       cmp     ecx, ebx
.text:00404926		       jl      loc_404A22
.text:0040492C		       jmp     loc_404A4A
.text:00404931 ; ---------------------------------------------------------------------------
.text:00404931
.text:00404931 loc_404931:			       ; CODE XREF: sub_4041AA+795j
.text:00404931					       ; sub_4041AA+895j
.text:00404931		       add     ecx, 1
.text:00404934		       cmp     ebx, ecx
.text:00404936		       jl      short loc_404943
.text:00404938		       mov     eax, [edx]
.text:0040493A		       add     edx, 4
.text:0040493D		       cmp     eax, esi
.text:0040493F		       jle     short loc_404931
.text:00404941		       jmp     short loc_40498E
.text:00404943 ; ---------------------------------------------------------------------------
.text:00404943
.text:00404943 loc_404943:			       ; CODE XREF: sub_4041AA+78Cj
.text:00404943					       ; sub_4041AA+87Aj
.text:00404943		       mov     edx, [ebp+ebx*4+var_FAC]
.text:0040494A		       mov     eax, [ebp+edi*4+var_FAC]
.text:00404951		       mov     [ebp+ebx*4+var_FAC], eax
.text:00404958		       mov     [ebp+edi*4+var_FAC], edx
.text:0040495F		       mov     edx, [ebp+ebx*4+var_1F4C]
.text:00404966		       mov     eax, [ebp+edi*4+var_1F4C]
.text:0040496D		       mov     [ebp+ebx*4+var_1F4C], eax
.text:00404974		       mov     [ebp+edi*4+var_1F4C], edx
.text:0040497B		       mov     ecx, ebx
.text:0040497D		       jmp     loc_404A4A
.text:00404982 ; ---------------------------------------------------------------------------
.text:00404982
.text:00404982 loc_404982:			       ; CODE XREF: sub_4041AA+7EFj
.text:00404982		       sub     ebx, 1
.text:00404985		       sub     eax, 4
.text:00404988		       cmp     ecx, ebx
.text:0040498A		       jle     short loc_404995
.text:0040498C		       jmp     short loc_40499D
.text:0040498E ; ---------------------------------------------------------------------------
.text:0040498E
.text:0040498E loc_40498E:			       ; CODE XREF: sub_4041AA+797j
.text:0040498E					       ; sub_4041AA+89Bj
.text:0040498E		       lea     eax, [ebp+ebx*4+var_FAC]
.text:00404995
.text:00404995 loc_404995:			       ; CODE XREF: sub_4041AA+7E0j
.text:00404995		       mov     edx, [eax]
.text:00404997		       cmp     edx, esi
.text:00404999		       jge     short loc_404982
.text:0040499B		       jmp     short loc_4049D2
.text:0040499D ; ---------------------------------------------------------------------------
.text:0040499D
.text:0040499D loc_40499D:			       ; CODE XREF: sub_4041AA+7E2j
.text:0040499D		       mov     eax, [ebp+ebx*4+var_FAC]
.text:004049A4		       mov     [ebp+ebx*4+var_FAC], esi
.text:004049AB		       mov     [ebp+edi*4+var_FAC], eax
.text:004049B2		       mov     edx, [ebp+ebx*4+var_1F4C]
.text:004049B9		       mov     eax, [ebp+edi*4+var_1F4C]
.text:004049C0		       mov     [ebp+ebx*4+var_1F4C], eax
.text:004049C7		       mov     [ebp+edi*4+var_1F4C], edx
.text:004049CE		       mov     ecx, ebx
.text:004049D0		       jmp     short loc_404A4A
.text:004049D2 ; ---------------------------------------------------------------------------
.text:004049D2
.text:004049D2 loc_4049D2:			       ; CODE XREF: sub_4041AA+7F1j
.text:004049D2		       cmp     ecx, ebx
.text:004049D4		       jge     short loc_404A4A
.text:004049D6		       mov     eax, [ebp+ecx*4+var_FAC]
.text:004049DD		       mov     [ebp+ecx*4+var_FAC], edx
.text:004049E4		       mov     [ebp+ebx*4+var_FAC], eax
.text:004049EB		       mov     edx, [ebp+ecx*4+var_1F4C]
.text:004049F2		       mov     eax, [ebp+ebx*4+var_1F4C]
.text:004049F9		       mov     [ebp+ecx*4+var_1F4C], eax
.text:00404A00		       mov     [ebp+ebx*4+var_1F4C], edx
.text:00404A07		       lea     eax, [ecx+2]
.text:00404A0A		       cmp     eax, ebx
.text:00404A0C		       jge     short loc_404A1A
.text:00404A0E		       add     ecx, 1
.text:00404A11		       lea     ebx, [ebx-1]
.text:00404A14		       cmp     ecx, ebx
.text:00404A16		       jl      short loc_404A22
.text:00404A18		       jmp     short loc_404A4A
.text:00404A1A ; ---------------------------------------------------------------------------
.text:00404A1A
.text:00404A1A loc_404A1A:			       ; CODE XREF: sub_4041AA+862j
.text:00404A1A		       lea     eax, [ecx+1]
.text:00404A1D		       cmp     eax, ebx
.text:00404A1F		       cmovl   ecx, eax
.text:00404A22
.text:00404A22 loc_404A22:			       ; CODE XREF: sub_4041AA+77Cj
.text:00404A22					       ; sub_4041AA+86Cj
.text:00404A22		       cmp     ebx, ecx
.text:00404A24		       jl      loc_404943
.text:00404A2A		       mov     esi, [ebp+edi*4+var_FAC]
.text:00404A31		       lea     edx, [ebp+ecx*4+var_FA8]
.text:00404A38		       cmp     [ebp+ecx*4+var_FAC], esi
.text:00404A3F		       jle     loc_404931
.text:00404A45		       jmp     loc_40498E
.text:00404A4A ; ---------------------------------------------------------------------------
.text:00404A4A
.text:00404A4A loc_404A4A:			       ; CODE XREF: sub_4041AA+782j
.text:00404A4A					       ; sub_4041AA+7D3j ...
.text:00404A4A		       mov     edx, ecx
.text:00404A4C		       sub     edx, edi
.text:00404A4E		       cmp     edx, 1
.text:00404A51		       jle     short loc_404ABF
.text:00404A53		       mov     eax, [ebp+var_2748]
.text:00404A59		       sub     eax, ebx
.text:00404A5B		       cmp     eax, 1
.text:00404A5E		       jg      short loc_404A68
.text:00404A60		       mov     [ebp+var_2748], ecx
.text:00404A66		       jmp     short loc_404AC2
.text:00404A68 ; ---------------------------------------------------------------------------
.text:00404A68
.text:00404A68 loc_404A68:			       ; CODE XREF: sub_4041AA+8B4j
.text:00404A68		       sub     eax, 1
.text:00404A6B		       cmp     edx, eax
.text:00404A6D		       jge     short loc_404A9D
.text:00404A6F		       lea     eax, [ebx+1]
.text:00404A72		       mov     edx, [ebp+var_274C]
.text:00404A78		       mov     [ebp+edx*4+var_2318], eax
.text:00404A7F		       mov     esi, [ebp+var_2748]
.text:00404A85		       mov     [ebp+edx*4+var_2718], esi
.text:00404A8C		       add     edx, 1
.text:00404A8F		       mov     [ebp+var_274C], edx
.text:00404A95		       mov     [ebp+var_2748], ecx
.text:00404A9B		       jmp     short loc_404AC2
.text:00404A9D ; ---------------------------------------------------------------------------
.text:00404A9D
.text:00404A9D loc_404A9D:			       ; CODE XREF: sub_4041AA+8C3j
.text:00404A9D		       mov     eax, [ebp+var_274C]
.text:00404AA3		       mov     [ebp+eax*4+var_2318], edi
.text:00404AAA		       mov     [ebp+eax*4+var_2718], ecx
.text:00404AB1		       add     eax, 1
.text:00404AB4		       mov     [ebp+var_274C], eax
.text:00404ABA		       lea     edi, [ebx+1]
.text:00404ABD		       jmp     short loc_404AC2
.text:00404ABF ; ---------------------------------------------------------------------------
.text:00404ABF
.text:00404ABF loc_404ABF:			       ; CODE XREF: sub_4041AA+8A7j
.text:00404ABF		       lea     edi, [ebx+1]
.text:00404AC2
.text:00404AC2 loc_404AC2:			       ; CODE XREF: sub_4041AA+769j
.text:00404AC2					       ; sub_4041AA+8BCj ...
.text:00404AC2		       mov     eax, [ebp+var_2748]
.text:00404AC8		       sub     eax, edi
.text:00404ACA		       cmp     eax, 2
.text:00404ACD		       jg      loc_404918
.text:00404AD3		       mov     ebx, [ebp+var_274C]
.text:00404AD9		       cmp     eax, 2
.text:00404ADC		       jnz     short loc_404B23
.text:00404ADE		       mov     edx, [ebp+edi*4+var_FAC]
.text:00404AE5		       mov     ecx, [ebp+var_2748]
.text:00404AEB		       sub     ecx, 1
.text:00404AEE		       mov     eax, [ebp+ecx*4+var_FAC]
.text:00404AF5		       cmp     edx, eax
.text:00404AF7		       jle     short loc_404B23
.text:00404AF9		       mov     [ebp+edi*4+var_FAC], eax
.text:00404B00		       mov     [ebp+ecx*4+var_FAC], edx
.text:00404B07		       mov     edx, [ebp+edi*4+var_1F4C]
.text:00404B0E		       mov     eax, [ebp+ecx*4+var_1F4C]
.text:00404B15		       mov     [ebp+edi*4+var_1F4C], eax
.text:00404B1C		       mov     [ebp+ecx*4+var_1F4C], edx
.text:00404B23
.text:00404B23 loc_404B23:			       ; CODE XREF: sub_4041AA+932j
.text:00404B23					       ; sub_4041AA+94Dj
.text:00404B23		       test    ebx, ebx
.text:00404B25		       jg      loc_4048F2
.text:00404B2B		       mov     ebx, 0
.text:00404B30		       mov     edi, offset dword_40D060
.text:00404B35
.text:00404B35 loc_404B35:			       ; CODE XREF: sub_4041AA+A28j
.text:00404B35		       mov     eax, [edi+ebx*4]
.text:00404B38		       mov     [ebp+var_1F68], eax
.text:00404B3E		       lea     edx, [ebp+var_1F68]
.text:00404B44		       mov     [esp+0Ch+var_8],	edx
.text:00404B48		       mov     eax, [ebp+var_1F50]
.text:00404B4E		       mov     [esp+0Ch+var_C],	eax
.text:00404B51		       call    sub_402626
.text:00404B56		       test    eax, eax
.text:00404B58		       jnz     short loc_404B7E
.text:00404B5A		       mov     dword ptr [esp+0Ch], offset aSglib_tree_fin ; "sglib_Tree_find_member(tree, &te)!=NULL"...
.text:00404B62		       mov     [esp+0Ch+var_4],	offset aRbtree_test ; "rbtree_test"
.text:00404B6A		       mov     [esp+0Ch+var_8],	425h
.text:00404B72		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00404B79		       call    __assert_func
.text:00404B7E
.text:00404B7E loc_404B7E:			       ; CODE XREF: sub_4041AA+9AEj
.text:00404B7E		       mov     eax, [edi+ebx*4]
.text:00404B81		       not     eax
.text:00404B83		       mov     [ebp+var_1F68], eax
.text:00404B89		       lea     esi, [ebp+var_1F68]
.text:00404B8F		       mov     [esp+0Ch+var_8],	esi
.text:00404B93		       mov     eax, [ebp+var_1F50]
.text:00404B99		       mov     [esp+0Ch+var_C],	eax
.text:00404B9C		       call    sub_402626
.text:00404BA1		       test    eax, eax
.text:00404BA3		       jz      short loc_404BC9
.text:00404BA5		       mov     dword ptr [esp+0Ch], offset aSglib_tree_f_0 ; "sglib_Tree_find_member(tree, &te)==NULL"...
.text:00404BAD		       mov     [esp+0Ch+var_4],	offset aRbtree_test ; "rbtree_test"
.text:00404BB5		       mov     [esp+0Ch+var_8],	427h
.text:00404BBD		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00404BC4		       call    __assert_func
.text:00404BC9
.text:00404BC9 loc_404BC9:			       ; CODE XREF: sub_4041AA+9F9j
.text:00404BC9		       add     ebx, 1
.text:00404BCC		       cmp     ebx, 3E8h
.text:00404BD2		       jnz     loc_404B35
.text:00404BD8		       lea     edi, [ebp+var_1F4C]
.text:00404BDE		       mov     [ebp+var_273C], edi
.text:00404BE4		       mov     [ebp+var_2720], edi
.text:00404BEA		       lea     esi, [ebp+var_1F68]
.text:00404BF0		       lea     edi, [ebp+var_1F50]
.text:00404BF6
.text:00404BF6 loc_404BF6:			       ; CODE XREF: sub_4041AA+AFFj
.text:00404BF6		       mov     edx, [ebp+var_2720]
.text:00404BFC		       mov     eax, [edx]
.text:00404BFE		       mov     eax, [ebp+eax*4+var_FAC]
.text:00404C05		       mov     [ebp+var_1F68], eax
.text:00404C0B		       mov     [esp+0Ch+var_8],	esi
.text:00404C0F		       mov     eax, [ebp+var_1F50]
.text:00404C15		       mov     [esp+0Ch+var_C],	eax
.text:00404C18		       call    sub_402626
.text:00404C1D		       mov     ebx, eax
.text:00404C1F		       test    eax, eax
.text:00404C21		       jnz     short loc_404C47
.text:00404C23		       mov     dword ptr [esp+0Ch], offset aMembNull ; "memb!=NULL"
.text:00404C2B		       mov     [esp+0Ch+var_4],	offset aRbtree_test ; "rbtree_test"
.text:00404C33		       mov     [esp+0Ch+var_8],	42Dh
.text:00404C3B		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00404C42		       call    __assert_func
.text:00404C47
.text:00404C47 loc_404C47:			       ; CODE XREF: sub_4041AA+A77j
.text:00404C47		       cmp     [ebp+var_1F50], 0
.text:00404C4E		       jnz     short loc_404C74
.text:00404C50		       mov     dword ptr [esp+0Ch], offset aTreeNull ; "tree!=NULL"
.text:00404C58		       mov     [esp+0Ch+var_4],	offset aRbtree_test ; "rbtree_test"
.text:00404C60		       mov     [esp+0Ch+var_8],	42Eh
.text:00404C68		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00404C6F		       call    __assert_func
.text:00404C74
.text:00404C74 loc_404C74:			       ; CODE XREF: sub_4041AA+AA4j
.text:00404C74		       mov     [esp+0Ch+var_8],	eax
.text:00404C78		       mov     [esp+0Ch+var_C],	edi
.text:00404C7B		       call    sub_4039E1
.text:00404C80		       mov     [esp+0Ch+var_C],	ebx
.text:00404C83		       call    free
.text:00404C88		       mov     eax, [ebp+var_1F50]
.text:00404C8E		       mov     [esp+0Ch+var_C],	eax
.text:00404C91		       call    sub_402D8D
.text:00404C96		       add     [ebp+var_2720], 4
.text:00404C9D		       lea     eax, [ebp+var_FAC]
.text:00404CA3		       cmp     [ebp+var_2720], eax
.text:00404CA9		       jnz     loc_404BF6
.text:00404CAF		       cmp     [ebp+var_1F50], 0
.text:00404CB6		       jz      short loc_404CDC
.text:00404CB8		       mov     dword ptr [esp+0Ch], offset aTreeNull_0 ; "tree==NULL"
.text:00404CC0		       mov     [esp+0Ch+var_4],	offset aRbtree_test ; "rbtree_test"
.text:00404CC8		       mov     [esp+0Ch+var_8],	433h
.text:00404CD0		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00404CD7		       call    __assert_func
.text:00404CDC
.text:00404CDC loc_404CDC:			       ; CODE XREF: sub_4041AA+B0Cj
.text:00404CDC		       mov     [ebp+var_1F50], 0
.text:00404CE6		       mov     esi, 0
.text:00404CEB		       lea     edi, [ebp+var_1F6C]
.text:00404CF1
.text:00404CF1 loc_404CF1:			       ; CODE XREF: sub_4041AA+B97j
.text:00404CF1		       mov     [esp+0Ch+var_C],	18h
.text:00404CF8		       call    malloc
.text:00404CFD		       mov     ebx, eax
.text:00404CFF		       mov     eax, ds:dword_40D060[esi*4]
.text:00404D06		       mov     [ebx], eax
.text:00404D08		       mov     [esp+0Ch+var_4],	edi
.text:00404D0C		       mov     [esp+0Ch+var_8],	ebx
.text:00404D10		       lea     eax, [ebp+var_1F50]
.text:00404D16		       mov     [esp+0Ch+var_C],	eax
.text:00404D19		       call    sub_402663
.text:00404D1E		       test    eax, eax
.text:00404D20		       jnz     short loc_404D2A
.text:00404D22		       mov     [esp+0Ch+var_C],	ebx
.text:00404D25		       call    free
.text:00404D2A
.text:00404D2A loc_404D2A:			       ; CODE XREF: sub_4041AA+B76j
.text:00404D2A		       mov     eax, [ebp+var_1F50]
.text:00404D30		       mov     [esp+0Ch+var_C],	eax
.text:00404D33		       call    sub_402D8D
.text:00404D38		       add     esi, 1
.text:00404D3B		       cmp     esi, 3E8h
.text:00404D41		       jnz     short loc_404CF1
.text:00404D43		       mov     [ebp+var_1F88], 0
.text:00404D4D		       mov     edx, [ebp+var_1F50]
.text:00404D53		       test    edx, edx
.text:00404D55		       jz      loc_404E74
.text:00404D5B		       mov     si, 0
.text:00404D5F
.text:00404D5F loc_404D5F:			       ; CODE XREF: sub_4041AA+CC5j
.text:00404D5F					       ; sub_4041AA+E74j
.text:00404D5F		       lea     eax, ds:0[esi*4]
.text:00404D66		       lea     ebx, [ebp+eax+var_2518]
.text:00404D6D		       lea     ecx, [ebp+eax+var_2718]
.text:00404D74		       lea     eax, [ebp+esi+var_2318]
.text:00404D7B
.text:00404D7B loc_404D7B:			       ; CODE XREF: sub_4041AA+C25j
.text:00404D7B		       mov     edi, [edx+14h]
.text:00404D7E		       mov     [ebp+var_2760], edi
.text:00404D84		       mov     edi, [edx+10h]
.text:00404D87		       add     esi, 1
.text:00404D8A		       cmp     esi, 7Fh
.text:00404D8D		       jle     short loc_404DB3
.text:00404D8F		       mov     dword ptr [esp+0Ch], offset a0TheBinary_tre ; "0	&& \"the binary_tree is	too deep\""
.text:00404D97		       mov     [esp+0Ch+var_4],	offset aRbtree_test ; "rbtree_test"
.text:00404D9F		       mov     [esp+0Ch+var_8],	444h
.text:00404DA7		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00404DAE		       call    __assert_func
.text:00404DB3
.text:00404DB3 loc_404DB3:			       ; CODE XREF: sub_4041AA+BE3j
.text:00404DB3		       mov     [ebx], edx
.text:00404DB5		       mov     edx, [ebp+var_2760]
.text:00404DBB		       mov     [ecx], edx
.text:00404DBD		       mov     byte ptr	[eax], 0
.text:00404DC0		       add     ebx, 4
.text:00404DC3		       add     ecx, 4
.text:00404DC6		       add     eax, 1
.text:00404DC9		       test    edi, edi
.text:00404DCB		       jz      short loc_404DD1
.text:00404DCD		       mov     edx, edi
.text:00404DCF		       jmp     short loc_404D7B
.text:00404DD1 ; ---------------------------------------------------------------------------
.text:00404DD1
.text:00404DD1 loc_404DD1:			       ; CODE XREF: sub_4041AA+C21j
.text:00404DD1		       lea     eax, [esi-1]
.text:00404DD4		       lea     edi, [ebp+eax+var_2318]
.text:00404DDB		       shl     eax, 2
.text:00404DDE		       lea     edx, [ebp+eax+var_2718]
.text:00404DE5		       mov     [ebp+var_2744], edx
.text:00404DEB		       lea     eax, [ebp+eax+var_2518]
.text:00404DF2		       mov     [ebp+var_2740], eax
.text:00404DF8
.text:00404DF8 loc_404DF8:			       ; CODE XREF: sub_4041AA+CADj
.text:00404DF8		       lea     ebx, [esi-1]
.text:00404DFB		       movzx   eax, byte ptr [edi]
.text:00404DFE		       mov     [ebp+var_2759], al
.text:00404E04		       test    al, al
.text:00404E06		       jnz     short loc_404E22
.text:00404E08		       mov     edx, [ebp+var_2740]
.text:00404E0E		       mov     eax, [edx]
.text:00404E10		       mov     [esp+0Ch+var_8],	eax
.text:00404E14		       lea     eax, [ebp+var_1F88]
.text:00404E1A		       mov     [esp+0Ch+var_C],	eax
.text:00404E1D		       call    sub_401272
.text:00404E22
.text:00404E22 loc_404E22:			       ; CODE XREF: sub_4041AA+C5Cj
.text:00404E22		       movzx   eax, [ebp+var_2759]
.text:00404E29		       add     eax, 1
.text:00404E2C		       mov     [edi], al
.text:00404E2E		       test    ebx, ebx
.text:00404E30		       jle     short loc_404E59
.text:00404E32		       mov     edx, [ebp+var_2744]
.text:00404E38		       mov     eax, [edx]
.text:00404E3A		       sub     edi, 1
.text:00404E3D		       sub     edx, 4
.text:00404E40		       mov     [ebp+var_2744], edx
.text:00404E46		       sub     [ebp+var_2740], 4
.text:00404E4D		       test    eax, eax
.text:00404E4F		       jnz     loc_40500C
.text:00404E55		       mov     esi, ebx
.text:00404E57		       jmp     short loc_404DF8
.text:00404E59 ; ---------------------------------------------------------------------------
.text:00404E59
.text:00404E59 loc_404E59:			       ; CODE XREF: sub_4041AA+C86j
.text:00404E59		       mov     edx, [ebp+ebx*4+var_2718]
.text:00404E60		       test    edx, edx
.text:00404E62		       jz      short loc_404E74
.text:00404E64		       mov     [ebp+ebx*4+var_2718], 0
.text:00404E6F		       jmp     loc_404D5F
.text:00404E74 ; ---------------------------------------------------------------------------
.text:00404E74
.text:00404E74 loc_404E74:			       ; CODE XREF: sub_4041AA+BABj
.text:00404E74					       ; sub_4041AA+CB8j
.text:00404E74		       mov     eax, [ebp+var_1F88]
.text:00404E7A		       mov     [esp+0Ch+var_C],	eax
.text:00404E7D		       call    sub_404029
.text:00404E82		       mov     ebx, 0
.text:00404E87		       mov     esi, offset dword_40D060
.text:00404E8C		       lea     edi, [ebp+var_1F68]
.text:00404E92
.text:00404E92 loc_404E92:			       ; CODE XREF: sub_4041AA+D34j
.text:00404E92		       mov     eax, [esi+ebx*4]
.text:00404E95		       mov     [ebp+var_1F68], eax
.text:00404E9B		       mov     [esp+0Ch+var_8],	edi
.text:00404E9F		       mov     eax, [ebp+var_1F50]
.text:00404EA5		       mov     [esp+0Ch+var_C],	eax
.text:00404EA8		       call    sub_402626
.text:00404EAD		       test    eax, eax
.text:00404EAF		       jnz     short loc_404ED5
.text:00404EB1		       mov     dword ptr [esp+0Ch], offset aSglib_tree_fin ; "sglib_Tree_find_member(tree, &te)!=NULL"...
.text:00404EB9		       mov     [esp+0Ch+var_4],	offset aRbtree_test ; "rbtree_test"
.text:00404EC1		       mov     [esp+0Ch+var_8],	44Bh
.text:00404EC9		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00404ED0		       call    __assert_func
.text:00404ED5
.text:00404ED5 loc_404ED5:			       ; CODE XREF: sub_4041AA+D05j
.text:00404ED5		       add     ebx, 1
.text:00404ED8		       cmp     ebx, 3E8h
.text:00404EDE		       jnz     short loc_404E92
.text:00404EE0		       lea     esi, [ebp+var_1F68]
.text:00404EE6		       lea     edi, [ebp+var_1F6C]
.text:00404EEC
.text:00404EEC loc_404EEC:			       ; CODE XREF: sub_4041AA+DDAj
.text:00404EEC		       mov     edx, [ebp+var_273C]
.text:00404EF2		       mov     eax, [edx]
.text:00404EF4		       mov     eax, [ebp+eax*4+var_FAC]
.text:00404EFB		       mov     [ebp+var_1F68], eax
.text:00404F01		       mov     [esp+0Ch+var_8],	esi
.text:00404F05		       mov     eax, [ebp+var_1F50]
.text:00404F0B		       mov     [esp+0Ch+var_C],	eax
.text:00404F0E		       call    sub_402626
.text:00404F13		       mov     ebx, eax
.text:00404F15		       mov     [esp+0Ch+var_4],	edi
.text:00404F19		       mov     [esp+0Ch+var_8],	esi
.text:00404F1D		       lea     eax, [ebp+var_1F50]
.text:00404F23		       mov     [esp+0Ch+var_C],	eax
.text:00404F26		       call    sub_403A0A
.text:00404F2B		       cmp     ebx, [ebp+var_1F6C]
.text:00404F31		       jz      short loc_404F57
.text:00404F33		       mov     dword ptr [esp+0Ch], offset aMembMemb2 ;	"memb == memb2"
.text:00404F3B		       mov     [esp+0Ch+var_4],	offset aRbtree_test ; "rbtree_test"
.text:00404F43		       mov     [esp+0Ch+var_8],	452h
.text:00404F4B		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00404F52		       call    __assert_func
.text:00404F57
.text:00404F57 loc_404F57:			       ; CODE XREF: sub_4041AA+D87j
.text:00404F57		       test    ebx, ebx
.text:00404F59		       jz      short loc_404F63
.text:00404F5B		       mov     [esp+0Ch+var_C],	ebx
.text:00404F5E		       call    free
.text:00404F63
.text:00404F63 loc_404F63:			       ; CODE XREF: sub_4041AA+DAFj
.text:00404F63		       mov     eax, [ebp+var_1F50]
.text:00404F69		       mov     [esp+0Ch+var_C],	eax
.text:00404F6C		       call    sub_402D8D
.text:00404F71		       add     [ebp+var_273C], 4
.text:00404F78		       mov     eax, [ebp+var_2720]
.text:00404F7E		       cmp     [ebp+var_273C], eax
.text:00404F84		       jnz     loc_404EEC
.text:00404F8A		       cmp     [ebp+var_1F50], 0
.text:00404F91		       jz      loc_405023
.text:00404F97		       mov     dword ptr [esp+0Ch], offset aTreeNull_0 ; "tree==NULL"
.text:00404F9F		       mov     [esp+0Ch+var_4],	offset aRbtree_test ; "rbtree_test"
.text:00404FA7		       mov     [esp+0Ch+var_8],	456h
.text:00404FAF		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00404FB6		       call    __assert_func
.text:00404FBB
.text:00404FBB loc_404FBB:			       ; CODE XREF: sub_4041AA+1C0j
.text:00404FBB		       mov     esi, [ebp+var_2754]
.text:00404FC1		       mov     edx, [ebp+esi*4+var_2518]
.text:00404FC8		       mov     [ebp+esi*4+var_2518], 0
.text:00404FD3		       jmp     loc_40427E
.text:00404FD8 ; ---------------------------------------------------------------------------
.text:00404FD8
.text:00404FD8 loc_404FD8:			       ; CODE XREF: sub_4041AA+335j
.text:00404FD8		       mov     edi, [ebp+var_2724]
.text:00404FDE		       mov     edx, [ebp+edi*4+var_2718]
.text:00404FE5		       mov     [ebp+edi*4+var_2718], 0
.text:00404FF0		       jmp     loc_4043C5
.text:00404FF5 ; ---------------------------------------------------------------------------
.text:00404FF5
.text:00404FF5 loc_404FF5:			       ; CODE XREF: sub_4041AA+575j
.text:00404FF5		       mov     edx, [ebp+esi*4+var_2518]
.text:00404FFC		       mov     [ebp+esi*4+var_2518], 0
.text:00405007		       jmp     loc_404598
.text:0040500C ; ---------------------------------------------------------------------------
.text:0040500C
.text:0040500C loc_40500C:			       ; CODE XREF: sub_4041AA+CA5j
.text:0040500C		       mov     edx, [ebp+ebx*4+var_2718]
.text:00405013		       mov     [ebp+ebx*4+var_2718], 0
.text:0040501E		       jmp     loc_404D5F
.text:00405023 ; ---------------------------------------------------------------------------
.text:00405023
.text:00405023 loc_405023:			       ; CODE XREF: sub_4041AA+DE7j
.text:00405023		       add     esp, 276Ch
.text:00405029		       pop     ebx
.text:0040502A		       pop     esi
.text:0040502B		       pop     edi
.text:0040502C		       pop     ebp
.text:0040502D		       retn
.text:0040502D sub_4041AA      endp ; sp-analysis failed
.text:0040502D
.text:0040502E
.text:0040502E ; =============== S U B R O U T I N E =======================================
.text:0040502E
.text:0040502E ; Attributes: bp-based frame
.text:0040502E
.text:0040502E sub_40502E      proc near	       ; CODE XREF: sub_408128+5Dp
.text:0040502E
.text:0040502E var_219C	       = dword ptr -219Ch
.text:0040502E var_2198	       = dword ptr -2198h
.text:0040502E var_2194	       = dword ptr -2194h
.text:0040502E var_2190	       = dword ptr -2190h
.text:0040502E var_2180	       = dword ptr -2180h
.text:0040502E var_2080	       = dword ptr -2080h
.text:0040502E var_1F80	       = byte ptr -1F80h
.text:0040502E var_1F70	       = dword ptr -1F70h
.text:0040502E var_1F6C	       = dword ptr -1F6Ch
.text:0040502E var_1F54	       = dword ptr -1F54h
.text:0040502E var_1F50	       = dword ptr -1F50h
.text:0040502E var_1F4C	       = dword ptr -1F4Ch
.text:0040502E var_FAC	       = dword ptr -0FACh
.text:0040502E var_FA8	       = byte ptr -0FA8h
.text:0040502E var_C	       = dword ptr -0Ch
.text:0040502E var_8	       = dword ptr -8
.text:0040502E var_4	       = dword ptr -4
.text:0040502E
.text:0040502E		       push    ebp
.text:0040502F		       mov     ebp, esp
.text:00405031		       push    edi
.text:00405032		       push    esi
.text:00405033		       push    ebx
.text:00405034		       mov     eax, 21ACh
.text:00405039		       call    sub_4081C0
.text:0040503E		       call    sub_40415C
.text:00405043		       mov     [ebp+var_1F50], 0
.text:0040504D		       mov     esi, 0
.text:00405052		       mov     edi, offset dword_40D060
.text:00405057
.text:00405057 loc_405057:			       ; CODE XREF: sub_40502E+ACj
.text:00405057		       mov     eax, [ebp+var_1F50]
.text:0040505D		       mov     [esp+0Ch+var_C],	eax
.text:00405060		       call    sub_401EF8
.text:00405065		       mov     ebx, eax
.text:00405067		       cmp     eax, esi
.text:00405069		       jz      short loc_40508F
.text:0040506B		       mov     dword ptr [esp+0Ch], offset aSglib_sorted_0 ; "sglib_SortedList_len(list) == i"
.text:00405073		       mov     [esp+0Ch+var_4],	offset aSorted_list_te ; "sorted_list_test"
.text:0040507B		       mov     [esp+0Ch+var_8],	349h
.text:00405083		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:0040508A		       call    __assert_func
.text:0040508F
.text:0040508F loc_40508F:			       ; CODE XREF: sub_40502E+3Bj
.text:0040508F		       mov     eax, [edi+eax*4]
.text:00405092		       mov     [ebp+ebx*4+var_FAC], eax
.text:00405099		       mov     [ebp+ebx*4+var_1F4C], ebx
.text:004050A0		       mov     [esp+0Ch+var_C],	18h
.text:004050A7		       call    malloc
.text:004050AC		       mov     edx, [edi+ebx*4]
.text:004050AF		       mov     [eax], edx
.text:004050B1		       mov     [esp+0Ch+var_8],	eax
.text:004050B5		       lea     eax, [ebp+var_1F50]
.text:004050BB		       mov     [esp+0Ch+var_C],	eax
.text:004050BE		       call    sub_401E56
.text:004050C3		       mov     eax, [ebp+var_1F50]
.text:004050C9		       mov     [esp+0Ch+var_C],	eax
.text:004050CC		       call    sub_403CD7
.text:004050D1		       lea     esi, [ebx+1]
.text:004050D4		       cmp     esi, 3E7h
.text:004050DA		       jle     loc_405057
.text:004050E0		       mov     eax, [ebp+var_1F50]
.text:004050E6		       mov     [esp+0Ch+var_C],	eax
.text:004050E9		       call    sub_4040BF
.text:004050EE		       mov     [ebp+var_2080], 0
.text:004050F8		       mov     [ebp+var_2180], 3E8h
.text:00405102		       mov     [ebp+var_2198], 1
.text:0040510C
.text:0040510C loc_40510C:			       ; CODE XREF: sub_40502E+311j
.text:0040510C		       sub     [ebp+var_2198], 1
.text:00405113		       mov     edx, [ebp+var_2198]
.text:00405119		       mov     edi, [ebp+edx*4+var_2080]
.text:00405120		       mov     eax, [ebp+edx*4+var_2180]
.text:00405127		       mov     [ebp+var_2194], eax
.text:0040512D		       jmp     loc_4052DC
.text:00405132 ; ---------------------------------------------------------------------------
.text:00405132
.text:00405132 loc_405132:			       ; CODE XREF: sub_40502E+2B9j
.text:00405132		       lea     ecx, [edi+1]
.text:00405135		       mov     ebx, [ebp+var_2194]
.text:0040513B		       sub     ebx, 1
.text:0040513E		       cmp     ecx, ebx
.text:00405140		       jl      loc_40523C
.text:00405146		       jmp     loc_405264
.text:0040514B ; ---------------------------------------------------------------------------
.text:0040514B
.text:0040514B loc_40514B:			       ; CODE XREF: sub_40502E+12Bj
.text:0040514B					       ; sub_40502E+22Bj
.text:0040514B		       add     ecx, 1
.text:0040514E		       cmp     ecx, ebx
.text:00405150		       jg      short loc_40515D
.text:00405152		       mov     eax, [edx]
.text:00405154		       add     edx, 4
.text:00405157		       cmp     eax, esi
.text:00405159		       jle     short loc_40514B
.text:0040515B		       jmp     short loc_4051A8
.text:0040515D ; ---------------------------------------------------------------------------
.text:0040515D
.text:0040515D loc_40515D:			       ; CODE XREF: sub_40502E+122j
.text:0040515D					       ; sub_40502E+210j
.text:0040515D		       mov     edx, [ebp+ebx*4+var_FAC]
.text:00405164		       mov     eax, [ebp+edi*4+var_FAC]
.text:0040516B		       mov     [ebp+ebx*4+var_FAC], eax
.text:00405172		       mov     [ebp+edi*4+var_FAC], edx
.text:00405179		       mov     edx, [ebp+ebx*4+var_1F4C]
.text:00405180		       mov     eax, [ebp+edi*4+var_1F4C]
.text:00405187		       mov     [ebp+ebx*4+var_1F4C], eax
.text:0040518E		       mov     [ebp+edi*4+var_1F4C], edx
.text:00405195		       mov     ecx, ebx
.text:00405197		       jmp     loc_405264
.text:0040519C ; ---------------------------------------------------------------------------
.text:0040519C
.text:0040519C loc_40519C:			       ; CODE XREF: sub_40502E+185j
.text:0040519C		       sub     ebx, 1
.text:0040519F		       sub     eax, 4
.text:004051A2		       cmp     ebx, ecx
.text:004051A4		       jge     short loc_4051AF
.text:004051A6		       jmp     short loc_4051B7
.text:004051A8 ; ---------------------------------------------------------------------------
.text:004051A8
.text:004051A8 loc_4051A8:			       ; CODE XREF: sub_40502E+12Dj
.text:004051A8					       ; sub_40502E+231j
.text:004051A8		       lea     eax, [ebp+ebx*4+var_FAC]
.text:004051AF
.text:004051AF loc_4051AF:			       ; CODE XREF: sub_40502E+176j
.text:004051AF		       mov     edx, [eax]
.text:004051B1		       cmp     edx, esi
.text:004051B3		       jge     short loc_40519C
.text:004051B5		       jmp     short loc_4051EC
.text:004051B7 ; ---------------------------------------------------------------------------
.text:004051B7
.text:004051B7 loc_4051B7:			       ; CODE XREF: sub_40502E+178j
.text:004051B7		       mov     eax, [ebp+ebx*4+var_FAC]
.text:004051BE		       mov     [ebp+ebx*4+var_FAC], esi
.text:004051C5		       mov     [ebp+edi*4+var_FAC], eax
.text:004051CC		       mov     edx, [ebp+ebx*4+var_1F4C]
.text:004051D3		       mov     eax, [ebp+edi*4+var_1F4C]
.text:004051DA		       mov     [ebp+ebx*4+var_1F4C], eax
.text:004051E1		       mov     [ebp+edi*4+var_1F4C], edx
.text:004051E8		       mov     ecx, ebx
.text:004051EA		       jmp     short loc_405264
.text:004051EC ; ---------------------------------------------------------------------------
.text:004051EC
.text:004051EC loc_4051EC:			       ; CODE XREF: sub_40502E+187j
.text:004051EC		       cmp     ebx, ecx
.text:004051EE		       jle     short loc_405264
.text:004051F0		       mov     eax, [ebp+ecx*4+var_FAC]
.text:004051F7		       mov     [ebp+ecx*4+var_FAC], edx
.text:004051FE		       mov     [ebp+ebx*4+var_FAC], eax
.text:00405205		       mov     edx, [ebp+ecx*4+var_1F4C]
.text:0040520C		       mov     eax, [ebp+ebx*4+var_1F4C]
.text:00405213		       mov     [ebp+ecx*4+var_1F4C], eax
.text:0040521A		       mov     [ebp+ebx*4+var_1F4C], edx
.text:00405221		       lea     eax, [ecx+2]
.text:00405224		       cmp     eax, ebx
.text:00405226		       jge     short loc_405234
.text:00405228		       add     ecx, 1
.text:0040522B		       lea     ebx, [ebx-1]
.text:0040522E		       cmp     ecx, ebx
.text:00405230		       jl      short loc_40523C
.text:00405232		       jmp     short loc_405264
.text:00405234 ; ---------------------------------------------------------------------------
.text:00405234
.text:00405234 loc_405234:			       ; CODE XREF: sub_40502E+1F8j
.text:00405234		       lea     eax, [ecx+1]
.text:00405237		       cmp     eax, ebx
.text:00405239		       cmovl   ecx, eax
.text:0040523C
.text:0040523C loc_40523C:			       ; CODE XREF: sub_40502E+112j
.text:0040523C					       ; sub_40502E+202j
.text:0040523C		       cmp     ecx, ebx
.text:0040523E		       jg      loc_40515D
.text:00405244		       mov     esi, [ebp+edi*4+var_FAC]
.text:0040524B		       lea     edx, [ebp+ecx*4+var_FA8]
.text:00405252		       cmp     esi, [ebp+ecx*4+var_FAC]
.text:00405259		       jge     loc_40514B
.text:0040525F		       jmp     loc_4051A8
.text:00405264 ; ---------------------------------------------------------------------------
.text:00405264
.text:00405264 loc_405264:			       ; CODE XREF: sub_40502E+118j
.text:00405264					       ; sub_40502E+169j ...
.text:00405264		       mov     edx, ecx
.text:00405266		       sub     edx, edi
.text:00405268		       cmp     edx, 1
.text:0040526B		       jle     short loc_4052D9
.text:0040526D		       mov     eax, [ebp+var_2194]
.text:00405273		       sub     eax, ebx
.text:00405275		       cmp     eax, 1
.text:00405278		       jg      short loc_405282
.text:0040527A		       mov     [ebp+var_2194], ecx
.text:00405280		       jmp     short loc_4052DC
.text:00405282 ; ---------------------------------------------------------------------------
.text:00405282
.text:00405282 loc_405282:			       ; CODE XREF: sub_40502E+24Aj
.text:00405282		       sub     eax, 1
.text:00405285		       cmp     edx, eax
.text:00405287		       jge     short loc_4052B7
.text:00405289		       lea     eax, [ebx+1]
.text:0040528C		       mov     edx, [ebp+var_2198]
.text:00405292		       mov     [ebp+edx*4+var_2080], eax
.text:00405299		       mov     eax, [ebp+var_2194]
.text:0040529F		       mov     [ebp+edx*4+var_2180], eax
.text:004052A6		       add     edx, 1
.text:004052A9		       mov     [ebp+var_2198], edx
.text:004052AF		       mov     [ebp+var_2194], ecx
.text:004052B5		       jmp     short loc_4052DC
.text:004052B7 ; ---------------------------------------------------------------------------
.text:004052B7
.text:004052B7 loc_4052B7:			       ; CODE XREF: sub_40502E+259j
.text:004052B7		       mov     edx, [ebp+var_2198]
.text:004052BD		       mov     [ebp+edx*4+var_2080], edi
.text:004052C4		       mov     [ebp+edx*4+var_2180], ecx
.text:004052CB		       add     edx, 1
.text:004052CE		       mov     [ebp+var_2198], edx
.text:004052D4		       lea     edi, [ebx+1]
.text:004052D7		       jmp     short loc_4052DC
.text:004052D9 ; ---------------------------------------------------------------------------
.text:004052D9
.text:004052D9 loc_4052D9:			       ; CODE XREF: sub_40502E+23Dj
.text:004052D9		       lea     edi, [ebx+1]
.text:004052DC
.text:004052DC loc_4052DC:			       ; CODE XREF: sub_40502E+FFj
.text:004052DC					       ; sub_40502E+252j ...
.text:004052DC		       mov     eax, [ebp+var_2194]
.text:004052E2		       sub     eax, edi
.text:004052E4		       cmp     eax, 2
.text:004052E7		       jg      loc_405132
.text:004052ED		       mov     ebx, [ebp+var_2198]
.text:004052F3		       cmp     eax, 2
.text:004052F6		       jnz     short loc_40533D
.text:004052F8		       mov     edx, [ebp+edi*4+var_FAC]
.text:004052FF		       mov     ecx, [ebp+var_2194]
.text:00405305		       sub     ecx, 1
.text:00405308		       mov     eax, [ebp+ecx*4+var_FAC]
.text:0040530F		       cmp     edx, eax
.text:00405311		       jle     short loc_40533D
.text:00405313		       mov     [ebp+edi*4+var_FAC], eax
.text:0040531A		       mov     [ebp+ecx*4+var_FAC], edx
.text:00405321		       mov     edx, [ebp+edi*4+var_1F4C]
.text:00405328		       mov     eax, [ebp+ecx*4+var_1F4C]
.text:0040532F		       mov     [ebp+edi*4+var_1F4C], eax
.text:00405336		       mov     [ebp+ecx*4+var_1F4C], edx
.text:0040533D
.text:0040533D loc_40533D:			       ; CODE XREF: sub_40502E+2C8j
.text:0040533D					       ; sub_40502E+2E3j
.text:0040533D		       test    ebx, ebx
.text:0040533F		       jg      loc_40510C
.text:00405345		       mov     ebx, 0
.text:0040534A		       mov     edi, offset dword_40D060
.text:0040534F
.text:0040534F loc_40534F:			       ; CODE XREF: sub_40502E+3BEj
.text:0040534F		       mov     eax, [edi+ebx*4]
.text:00405352		       mov     [ebp+var_1F6C], eax
.text:00405358		       lea     eax, [ebp+var_1F6C]
.text:0040535E		       mov     [esp+0Ch+var_8],	eax
.text:00405362		       mov     eax, [ebp+var_1F50]
.text:00405368		       mov     [esp+0Ch+var_C],	eax
.text:0040536B		       call    sub_401DB1
.text:00405370		       test    eax, eax
.text:00405372		       jnz     short loc_405398
.text:00405374		       mov     dword ptr [esp+0Ch], offset aSglib_sorted_1 ; "sglib_SortedList_find_member(list, &te)"...
.text:0040537C		       mov     [esp+0Ch+var_4],	offset aSorted_list_te ; "sorted_list_test"
.text:00405384		       mov     [esp+0Ch+var_8],	35Bh
.text:0040538C		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00405393		       call    __assert_func
.text:00405398
.text:00405398 loc_405398:			       ; CODE XREF: sub_40502E+344j
.text:00405398		       mov     eax, [edi+ebx*4]
.text:0040539B		       not     eax
.text:0040539D		       mov     [ebp+var_1F6C], eax
.text:004053A3		       lea     edx, [ebp+var_1F6C]
.text:004053A9		       mov     [esp+0Ch+var_8],	edx
.text:004053AD		       mov     eax, [ebp+var_1F50]
.text:004053B3		       mov     [esp+0Ch+var_C],	eax
.text:004053B6		       call    sub_401DB1
.text:004053BB		       test    eax, eax
.text:004053BD		       jz      short loc_4053E3
.text:004053BF		       mov     dword ptr [esp+0Ch], offset aSglib_sorted_2 ; "sglib_SortedList_find_member(list, &te)"...
.text:004053C7		       mov     [esp+0Ch+var_4],	offset aSorted_list_te ; "sorted_list_test"
.text:004053CF		       mov     [esp+0Ch+var_8],	35Dh
.text:004053D7		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:004053DE		       call    __assert_func
.text:004053E3
.text:004053E3 loc_4053E3:			       ; CODE XREF: sub_40502E+38Fj
.text:004053E3		       add     ebx, 1
.text:004053E6		       cmp     ebx, 3E8h
.text:004053EC		       jnz     loc_40534F
.text:004053F2		       mov     eax, [ebp+var_1F50]
.text:004053F8		       test    eax, eax
.text:004053FA		       jz      short loc_405441
.text:004053FC
.text:004053FC loc_4053FC:			       ; CODE XREF: sub_40502E+411j
.text:004053FC		       mov     ebx, [eax+4]
.text:004053FF		       mov     [esp+0Ch+var_8],	eax
.text:00405403		       mov     eax, [ebp+var_1F50]
.text:00405409		       mov     [esp+0Ch+var_C],	eax
.text:0040540C		       call    sub_401D4A
.text:00405411		       test    eax, eax
.text:00405413		       jnz     short loc_405439
.text:00405415		       mov     dword ptr [esp+0Ch], offset aSglib_sorted_3 ; "sglib_SortedList_is_member(list, el)"
.text:0040541D		       mov     [esp+0Ch+var_4],	offset aSorted_list_te ; "sorted_list_test"
.text:00405425		       mov     [esp+0Ch+var_8],	362h
.text:0040542D		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00405434		       call    __assert_func
.text:00405439
.text:00405439 loc_405439:			       ; CODE XREF: sub_40502E+3E5j
.text:00405439		       test    ebx, ebx
.text:0040543B		       jz      short loc_405441
.text:0040543D		       mov     eax, ebx
.text:0040543F		       jmp     short loc_4053FC
.text:00405441 ; ---------------------------------------------------------------------------
.text:00405441
.text:00405441 loc_405441:			       ; CODE XREF: sub_40502E+3CCj
.text:00405441					       ; sub_40502E+40Dj
.text:00405441		       lea     eax, [ebp+var_1F6C]
.text:00405447		       mov     [esp+0Ch+var_8],	eax
.text:0040544B		       mov     eax, [ebp+var_1F50]
.text:00405451		       mov     [esp+0Ch+var_C],	eax
.text:00405454		       call    sub_401D4A
.text:00405459		       test    eax, eax
.text:0040545B		       jz      short loc_405481
.text:0040545D		       mov     dword ptr [esp+0Ch], offset aSglib_sorted_4 ; "!	sglib_SortedList_is_member(list, &te)"...
.text:00405465		       mov     [esp+0Ch+var_4],	offset aSorted_list_te ; "sorted_list_test"
.text:0040546D		       mov     [esp+0Ch+var_8],	363h
.text:00405475		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:0040547C		       call    __assert_func
.text:00405481
.text:00405481 loc_405481:			       ; CODE XREF: sub_40502E+42Dj
.text:00405481		       lea     eax, [ebp+var_1F4C]
.text:00405487		       mov     [ebp+var_2190], eax
.text:0040548D		       mov     edi, eax
.text:0040548F		       lea     esi, [ebp+var_1F6C]
.text:00405495
.text:00405495 loc_405495:			       ; CODE XREF: sub_40502E+4FBj
.text:00405495		       mov     eax, [edi]
.text:00405497		       mov     eax, [ebp+eax*4+var_FAC]
.text:0040549E		       mov     [ebp+var_1F6C], eax
.text:004054A4		       mov     ebx, [ebp+var_1F50]
.text:004054AA		       test    ebx, ebx
.text:004054AC		       jnz     short loc_4054B7
.text:004054AE		       jmp     short loc_4054D2
.text:004054B0 ; ---------------------------------------------------------------------------
.text:004054B0
.text:004054B0 loc_4054B0:			       ; CODE XREF: sub_40502E+497j
.text:004054B0		       mov     ebx, [ebx+4]
.text:004054B3		       test    ebx, ebx
.text:004054B5		       jz      short loc_4054D2
.text:004054B7
.text:004054B7 loc_4054B7:			       ; CODE XREF: sub_40502E+47Ej
.text:004054B7		       mov     [esp+0Ch+var_8],	esi
.text:004054BB		       mov     [esp+0Ch+var_C],	ebx
.text:004054BE		       call    sub_4011A0
.text:004054C3		       test    eax, eax
.text:004054C5		       js      short loc_4054B0
.text:004054C7		       test    eax, eax
.text:004054C9		       jnz     short loc_4054D2
.text:004054CB		       test    ebx, ebx
.text:004054CD		       lea     esi, [esi+0]
.text:004054D0		       jnz     short loc_4054F6
.text:004054D2
.text:004054D2 loc_4054D2:			       ; CODE XREF: sub_40502E+480j
.text:004054D2					       ; sub_40502E+487j ...
.text:004054D2		       mov     dword ptr [esp+0Ch], offset aMembNull ; "memb!=NULL"
.text:004054DA		       mov     [esp+0Ch+var_4],	offset aSorted_list_te ; "sorted_list_test"
.text:004054E2		       mov     [esp+0Ch+var_8],	368h
.text:004054EA		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:004054F1		       call    __assert_func
.text:004054F6
.text:004054F6 loc_4054F6:			       ; CODE XREF: sub_40502E+4A2j
.text:004054F6		       mov     [esp+0Ch+var_8],	ebx
.text:004054FA		       lea     eax, [ebp+var_1F50]
.text:00405500		       mov     [esp+0Ch+var_C],	eax
.text:00405503		       call    sub_403A9F
.text:00405508		       mov     eax, [ebp+var_1F50]
.text:0040550E		       mov     [esp+0Ch+var_C],	eax
.text:00405511		       call    sub_403CD7
.text:00405516		       mov     [esp+0Ch+var_C],	ebx
.text:00405519		       call    free
.text:0040551E		       add     edi, 4
.text:00405521		       lea     eax, [ebp+var_FAC]
.text:00405527		       cmp     edi, eax
.text:00405529		       jnz     loc_405495
.text:0040552F		       cmp     [ebp+var_1F50], 0
.text:00405536		       jz      short loc_40555C
.text:00405538		       mov     dword ptr [esp+0Ch], offset aListNull ; "list==NULL"
.text:00405540		       mov     [esp+0Ch+var_4],	offset aSorted_list_te ; "sorted_list_test"
.text:00405548		       mov     [esp+0Ch+var_8],	36Fh
.text:00405550		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00405557		       call    __assert_func
.text:0040555C
.text:0040555C loc_40555C:			       ; CODE XREF: sub_40502E+508j
.text:0040555C		       mov     [ebp+var_1F50], 0
.text:00405566		       mov     esi, 0
.text:0040556B
.text:0040556B loc_40556B:			       ; CODE XREF: sub_40502E+593j
.text:0040556B		       mov     [esp+0Ch+var_C],	18h
.text:00405572		       call    malloc
.text:00405577		       mov     ebx, eax
.text:00405579		       mov     eax, ds:dword_40D060[esi*4]
.text:00405580		       mov     [ebx], eax
.text:00405582		       lea     edx, [ebp+var_1F70]
.text:00405588		       mov     [esp+0Ch+var_4],	edx
.text:0040558C		       mov     [esp+0Ch+var_8],	ebx
.text:00405590		       lea     eax, [ebp+var_1F50]
.text:00405596		       mov     [esp+0Ch+var_C],	eax
.text:00405599		       call    sub_401DF2
.text:0040559E		       test    eax, eax
.text:004055A0		       jnz     short loc_4055AA
.text:004055A2		       mov     [esp+0Ch+var_C],	ebx
.text:004055A5		       call    free
.text:004055AA
.text:004055AA loc_4055AA:			       ; CODE XREF: sub_40502E+572j
.text:004055AA		       mov     eax, [ebp+var_1F50]
.text:004055B0		       mov     [esp+0Ch+var_C],	eax
.text:004055B3		       call    sub_403CD7
.text:004055B8		       add     esi, 1
.text:004055BB		       cmp     esi, 3E8h
.text:004055C1		       jnz     short loc_40556B
.text:004055C3		       mov     eax, [ebp+var_1F50]
.text:004055C9		       mov     [esp+0Ch+var_C],	eax
.text:004055CC		       call    sub_404029
.text:004055D1		       mov     ebx, 0
.text:004055D6		       mov     esi, offset dword_40D060
.text:004055DB
.text:004055DB loc_4055DB:			       ; CODE XREF: sub_40502E+5FFj
.text:004055DB		       mov     eax, [esi+ebx*4]
.text:004055DE		       mov     [ebp+var_1F6C], eax
.text:004055E4		       lea     edx, [ebp+var_1F6C]
.text:004055EA		       mov     [esp+0Ch+var_8],	edx
.text:004055EE		       mov     eax, [ebp+var_1F50]
.text:004055F4		       mov     [esp+0Ch+var_C],	eax
.text:004055F7		       call    sub_401DB1
.text:004055FC		       test    eax, eax
.text:004055FE		       jnz     short loc_405624
.text:00405600		       mov     dword ptr [esp+0Ch], offset aSglib_sorted_1 ; "sglib_SortedList_find_member(list, &te)"...
.text:00405608		       mov     [esp+0Ch+var_4],	offset aSorted_list_te ; "sorted_list_test"
.text:00405610		       mov     [esp+0Ch+var_8],	380h
.text:00405618		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:0040561F		       call    __assert_func
.text:00405624
.text:00405624 loc_405624:			       ; CODE XREF: sub_40502E+5D0j
.text:00405624		       add     ebx, 1
.text:00405627		       cmp     ebx, 3E8h
.text:0040562D		       jnz     short loc_4055DB
.text:0040562F		       lea     esi, [ebp+var_1F6C]
.text:00405635
.text:00405635 loc_405635:			       ; CODE XREF: sub_40502E+6AEj
.text:00405635		       mov     edx, [ebp+var_2190]
.text:0040563B		       mov     eax, [edx]
.text:0040563D		       mov     eax, [ebp+eax*4+var_FAC]
.text:00405644		       mov     [ebp+var_1F6C], eax
.text:0040564A		       mov     ebx, [ebp+var_1F50]
.text:00405650		       test    ebx, ebx
.text:00405652		       jnz     short loc_40565D
.text:00405654		       jmp     short loc_40566D
.text:00405656 ; ---------------------------------------------------------------------------
.text:00405656
.text:00405656 loc_405656:			       ; CODE XREF: sub_40502E+63Dj
.text:00405656		       mov     ebx, [ebx+4]
.text:00405659		       test    ebx, ebx
.text:0040565B		       jz      short loc_40566D
.text:0040565D
.text:0040565D loc_40565D:			       ; CODE XREF: sub_40502E+624j
.text:0040565D		       mov     [esp+0Ch+var_8],	esi
.text:00405661		       mov     [esp+0Ch+var_C],	ebx
.text:00405664		       call    sub_4011A0
.text:00405669		       test    eax, eax
.text:0040566B		       jnz     short loc_405656
.text:0040566D
.text:0040566D loc_40566D:			       ; CODE XREF: sub_40502E+626j
.text:0040566D					       ; sub_40502E+62Dj
.text:0040566D		       lea     eax, [ebp+var_1F70]
.text:00405673		       mov     [esp+0Ch+var_4],	eax
.text:00405677		       mov     [esp+0Ch+var_8],	esi
.text:0040567B		       lea     eax, [ebp+var_1F50]
.text:00405681		       mov     [esp+0Ch+var_C],	eax
.text:00405684		       call    sub_401E96
.text:00405689		       cmp     ebx, [ebp+var_1F70]
.text:0040568F		       jz      short loc_4056B5
.text:00405691		       mov     dword ptr [esp+0Ch], offset aMembMemb2 ;	"memb == memb2"
.text:00405699		       mov     [esp+0Ch+var_4],	offset aSorted_list_te ; "sorted_list_test"
.text:004056A1		       mov     [esp+0Ch+var_8],	387h
.text:004056A9		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:004056B0		       call    __assert_func
.text:004056B5
.text:004056B5 loc_4056B5:			       ; CODE XREF: sub_40502E+661j
.text:004056B5		       test    ebx, ebx
.text:004056B7		       jz      short loc_4056C1
.text:004056B9		       mov     [esp+0Ch+var_C],	ebx
.text:004056BC		       call    free
.text:004056C1
.text:004056C1 loc_4056C1:			       ; CODE XREF: sub_40502E+689j
.text:004056C1		       mov     eax, [ebp+var_1F50]
.text:004056C7		       mov     [esp+0Ch+var_C],	eax
.text:004056CA		       call    sub_403CD7
.text:004056CF		       add     [ebp+var_2190], 4
.text:004056D6		       cmp     edi, [ebp+var_2190]
.text:004056DC		       jnz     loc_405635
.text:004056E2		       cmp     [ebp+var_1F50], 0
.text:004056E9		       jz      short loc_40570F
.text:004056EB		       mov     dword ptr [esp+0Ch], offset aListNull ; "list==NULL"
.text:004056F3		       mov     [esp+0Ch+var_4],	offset aSorted_list_te ; "sorted_list_test"
.text:004056FB		       mov     [esp+0Ch+var_8],	38Bh
.text:00405703		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:0040570A		       call    __assert_func
.text:0040570F
.text:0040570F loc_40570F:			       ; CODE XREF: sub_40502E+6BBj
.text:0040570F		       mov     [ebp+var_1F50], 0
.text:00405719		       mov     ebx, 0
.text:0040571E		       mov     esi, offset dword_40D060
.text:00405723		       lea     edi, [ebp+var_1F50]
.text:00405729
.text:00405729 loc_405729:			       ; CODE XREF: sub_40502E+721j
.text:00405729		       mov     [esp+0Ch+var_C],	18h
.text:00405730		       call    malloc
.text:00405735		       mov     edx, [esi+ebx*4]
.text:00405738		       mov     [eax], edx
.text:0040573A		       mov     [esp+0Ch+var_8],	eax
.text:0040573E		       mov     [esp+0Ch+var_C],	edi
.text:00405741		       call    sub_401E56
.text:00405746		       add     ebx, 1
.text:00405749		       cmp     ebx, 3E8h
.text:0040574F		       jnz     short loc_405729
.text:00405751		       mov     eax, [ebp+var_1F50]
.text:00405757		       mov     [esp+0Ch+var_C],	eax
.text:0040575A		       call    sub_4040BF
.text:0040575F		       mov     eax, [ebp+var_1F50]
.text:00405765		       mov     [esp+0Ch+var_C],	eax
.text:00405768		       call    sub_403CD7
.text:0040576D		       lea     eax, [ebp+var_1F50]
.text:00405773		       mov     [esp+0Ch+var_C],	eax
.text:00405776		       call    sub_401F13
.text:0040577B		       mov     [ebp+var_1F54], 0
.text:00405785		       mov     esi, [ebp+var_1F50]
.text:0040578B		       test    esi, esi
.text:0040578D		       jz      short loc_4057D2
.text:0040578F		       lea     edi, [ebp+var_1F54]
.text:00405795
.text:00405795 loc_405795:			       ; CODE XREF: sub_40502E+798j
.text:00405795		       mov     ebx, [esi+4]
.text:00405798		       mov     [esp+0Ch+var_C],	18h
.text:0040579F		       call    malloc
.text:004057A4		       mov     edx, [esi]
.text:004057A6		       mov     [eax], edx
.text:004057A8		       mov     [esp+0Ch+var_8],	eax
.text:004057AC		       mov     [esp+0Ch+var_C],	edi
.text:004057AF		       call    sub_401E56
.text:004057B4		       mov     eax, [ebp+var_1F54]
.text:004057BA		       mov     [esp+0Ch+var_C],	eax
.text:004057BD		       call    sub_403CD7
.text:004057C2		       mov     esi, ebx
.text:004057C4		       test    ebx, ebx
.text:004057C6		       jnz     short loc_405795
.text:004057C8		       mov     ebx, [ebp+var_1F50]
.text:004057CE		       test    ebx, ebx
.text:004057D0		       jnz     short loc_4057F6
.text:004057D2
.text:004057D2 loc_4057D2:			       ; CODE XREF: sub_40502E+75Fj
.text:004057D2		       mov     dword ptr [esp+0Ch], offset aListNull_0 ; "list!=NULL"
.text:004057DA		       mov     [esp+0Ch+var_4],	offset aSorted_list_te ; "sorted_list_test"
.text:004057E2		       mov     [esp+0Ch+var_8],	3A3h
.text:004057EA		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:004057F1		       call    __assert_func
.text:004057F6
.text:004057F6 loc_4057F6:			       ; CODE XREF: sub_40502E+7A2j
.text:004057F6		       mov     esi, 0
.text:004057FB		       mov     [ebp+var_219C], 0
.text:00405805		       mov     eax, 0
.text:0040580A
.text:0040580A loc_40580A:			       ; CODE XREF: sub_40502E+84Dj
.text:0040580A		       mov     edi, [ebx+4]
.text:0040580D		       test    esi, esi
.text:0040580F		       jnz     short loc_405829
.text:00405811		       mov     eax, [ebp+var_1F50]
.text:00405817		       mov     [esp+0Ch+var_8],	eax
.text:0040581B		       lea     eax, [ebp+var_1F80]
.text:00405821		       mov     [esp+0Ch+var_C],	eax
.text:00405824		       call    sub_4020E6
.text:00405829
.text:00405829 loc_405829:			       ; CODE XREF: sub_40502E+7E1j
.text:00405829		       cmp     eax, ebx
.text:0040582B		       jz      short loc_405851
.text:0040582D		       mov     dword ptr [esp+0Ch], offset aLl_current_ele ; "ll==_current_element_"
.text:00405835		       mov     [esp+0Ch+var_4],	offset aSorted_list_te ; "sorted_list_test"
.text:0040583D		       mov     [esp+0Ch+var_8],	3ABh
.text:00405845		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:0040584C		       call    __assert_func
.text:00405851
.text:00405851 loc_405851:			       ; CODE XREF: sub_40502E+7FDj
.text:00405851		       test    eax, eax
.text:00405853		       jz      short loc_405864
.text:00405855		       cmp     dword ptr [eax],	5
.text:00405858		       setz    al
.text:0040585B		       movzx   eax, al
.text:0040585E		       add     [ebp+var_219C], eax
.text:00405864
.text:00405864 loc_405864:			       ; CODE XREF: sub_40502E+825j
.text:00405864		       lea     edx, [ebp+var_1F80]
.text:0040586A		       mov     [esp+0Ch+var_C],	edx
.text:0040586D		       call    sub_402056
.text:00405872		       test    edi, edi
.text:00405874		       jz      short loc_40587D
.text:00405876		       add     esi, 1
.text:00405879		       mov     ebx, edi
.text:0040587B		       jmp     short loc_40580A
.text:0040587D ; ---------------------------------------------------------------------------
.text:0040587D
.text:0040587D loc_40587D:			       ; CODE XREF: sub_40502E+846j
.text:0040587D		       test    eax, eax
.text:0040587F		       nop
.text:00405880		       jz      short loc_4058A6
.text:00405882		       mov     dword ptr [esp+0Ch], offset aLlNull ; "ll==NULL"
.text:0040588A		       mov     [esp+0Ch+var_4],	offset aSorted_list_te ; "sorted_list_test"
.text:00405892		       mov     [esp+0Ch+var_8],	3ACh
.text:0040589A		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:004058A1		       call    __assert_func
.text:004058A6
.text:004058A6 loc_4058A6:			       ; CODE XREF: sub_40502E+852j
.text:004058A6		       mov     [ebp+var_1F6C], 5
.text:004058B0		       lea     eax, [ebp+var_1F6C]
.text:004058B6		       mov     [esp+0Ch], eax
.text:004058BA		       mov     [esp+0Ch+var_4],	offset sub_4011A0
.text:004058C2		       mov     eax, [ebp+var_1F50]
.text:004058C8		       mov     [esp+0Ch+var_8],	eax
.text:004058CC		       lea     eax, [ebp+var_1F80]
.text:004058D2		       mov     [esp+0Ch+var_C],	eax
.text:004058D5		       call    sub_4020C1
.text:004058DA		       mov     ebx, 0
.text:004058DF		       test    eax, eax
.text:004058E1		       jz      short loc_405932
.text:004058E3		       mov     ebx, 1
.text:004058E8		       lea     esi, [ebp+var_1F80]
.text:004058EE		       cmp     dword ptr [eax],	5
.text:004058F1		       jz      short loc_405926
.text:004058F3		       jmp     short loc_405902
.text:004058F5 ; ---------------------------------------------------------------------------
.text:004058F5
.text:004058F5 loc_4058F5:			       ; CODE XREF: sub_40502E+902j
.text:004058F5		       cmp     dword ptr [eax],	5
.text:004058F8		       jnz     short loc_405902
.text:004058FA		       add     ebx, 1
.text:004058FD		       lea     esi, [esi+0]
.text:00405900		       jmp     short loc_405926
.text:00405902 ; ---------------------------------------------------------------------------
.text:00405902
.text:00405902 loc_405902:			       ; CODE XREF: sub_40502E+8C5j
.text:00405902					       ; sub_40502E+8CAj
.text:00405902		       mov     dword ptr [esp+0Ch], offset aLlNIterator_eq ; "ll->n == ITERATOR_EQ_CHECK_VALUE"
.text:0040590A		       mov     [esp+0Ch+var_4],	offset aSorted_list_te ; "sorted_list_test"
.text:00405912		       mov     [esp+0Ch+var_8],	3B4h
.text:0040591A		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00405921		       call    __assert_func
.text:00405926
.text:00405926 loc_405926:			       ; CODE XREF: sub_40502E+8C3j
.text:00405926					       ; sub_40502E+8D2j
.text:00405926		       mov     [esp+0Ch+var_C],	esi
.text:00405929		       call    sub_402056
.text:0040592E		       test    eax, eax
.text:00405930		       jnz     short loc_4058F5
.text:00405932
.text:00405932 loc_405932:			       ; CODE XREF: sub_40502E+8B3j
.text:00405932		       cmp     ebx, [ebp+var_219C]
.text:00405938		       jz      short loc_40595E
.text:0040593A		       mov     dword ptr [esp+0Ch], offset aCcCc5 ; "cc	== cc5"
.text:00405942		       mov     [esp+0Ch+var_4],	offset aSorted_list_te ; "sorted_list_test"
.text:0040594A		       mov     [esp+0Ch+var_8],	3B7h
.text:00405952		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00405959		       call    __assert_func
.text:0040595E
.text:0040595E loc_40595E:			       ; CODE XREF: sub_40502E+90Aj
.text:0040595E		       mov     eax, [ebp+var_1F50]
.text:00405964		       test    eax, eax
.text:00405966		       jz      short loc_40597B
.text:00405968
.text:00405968 loc_405968:			       ; CODE XREF: sub_40502E+94Bj
.text:00405968		       mov     ebx, [eax+4]
.text:0040596B		       mov     [esp+0Ch+var_C],	eax
.text:0040596E		       call    free
.text:00405973		       test    ebx, ebx
.text:00405975		       jz      short loc_40597B
.text:00405977		       mov     eax, ebx
.text:00405979		       jmp     short loc_405968
.text:0040597B ; ---------------------------------------------------------------------------
.text:0040597B
.text:0040597B loc_40597B:			       ; CODE XREF: sub_40502E+938j
.text:0040597B					       ; sub_40502E+947j
.text:0040597B		       mov     eax, [ebp+var_1F54]
.text:00405981		       mov     [esp+0Ch+var_8],	eax
.text:00405985		       lea     eax, [ebp+var_1F80]
.text:0040598B		       mov     [esp+0Ch+var_C],	eax
.text:0040598E		       call    sub_4020E6
.text:00405993		       test    eax, eax
.text:00405995		       jz      short loc_4059B1
.text:00405997		       lea     ebx, [ebp+var_1F80]
.text:0040599D
.text:0040599D loc_40599D:			       ; CODE XREF: sub_40502E+981j
.text:0040599D		       mov     [esp+0Ch+var_C],	eax
.text:004059A0		       call    free
.text:004059A5		       mov     [esp+0Ch+var_C],	ebx
.text:004059A8		       call    sub_402056
.text:004059AD		       test    eax, eax
.text:004059AF		       jnz     short loc_40599D
.text:004059B1
.text:004059B1 loc_4059B1:			       ; CODE XREF: sub_40502E+967j
.text:004059B1		       add     esp, 21ACh
.text:004059B7		       pop     ebx
.text:004059B8		       pop     esi
.text:004059B9		       pop     edi
.text:004059BA		       pop     ebp
.text:004059BB		       retn
.text:004059BB sub_40502E      endp ; sp-analysis failed
.text:004059BB
.text:004059BC
.text:004059BC ; =============== S U B R O U T I N E =======================================
.text:004059BC
.text:004059BC ; Attributes: bp-based frame
.text:004059BC
.text:004059BC sub_4059BC      proc near	       ; CODE XREF: sub_408128+58p
.text:004059BC
.text:004059BC var_21B0	       = dword ptr -21B0h
.text:004059BC var_21AC	       = dword ptr -21ACh
.text:004059BC var_21A8	       = dword ptr -21A8h
.text:004059BC var_21A4	       = dword ptr -21A4h
.text:004059BC var_21A0	       = dword ptr -21A0h
.text:004059BC var_219C	       = dword ptr -219Ch
.text:004059BC var_209C	       = dword ptr -209Ch
.text:004059BC var_1F9C	       = byte ptr -1F9Ch
.text:004059BC var_1F88	       = dword ptr -1F88h
.text:004059BC var_1F84	       = dword ptr -1F84h
.text:004059BC var_1F6C	       = dword ptr -1F6Ch
.text:004059BC var_1F68	       = dword ptr -1F68h
.text:004059BC var_1F64	       = dword ptr -1F64h
.text:004059BC var_1F60	       = dword ptr -1F60h
.text:004059BC var_1F5C	       = dword ptr -1F5Ch
.text:004059BC var_1F58	       = dword ptr -1F58h
.text:004059BC var_1F54	       = dword ptr -1F54h
.text:004059BC var_1F50	       = dword ptr -1F50h
.text:004059BC var_1F4C	       = dword ptr -1F4Ch
.text:004059BC var_FAC	       = dword ptr -0FACh
.text:004059BC var_FA8	       = byte ptr -0FA8h
.text:004059BC var_C	       = dword ptr -0Ch
.text:004059BC var_8	       = dword ptr -8
.text:004059BC var_4	       = dword ptr -4
.text:004059BC
.text:004059BC		       push    ebp
.text:004059BD		       mov     ebp, esp
.text:004059BF		       push    edi
.text:004059C0		       push    esi
.text:004059C1		       push    ebx
.text:004059C2		       mov     eax, 21BCh
.text:004059C7		       call    sub_4081C0
.text:004059CC		       call    sub_40415C
.text:004059D1		       mov     [ebp+var_1F50], 0
.text:004059DB		       mov     [ebp+var_1F5C], 0
.text:004059E5		       mov     [ebp+var_1F58], 0
.text:004059EF		       mov     [ebp+var_1F54], 0
.text:004059F9		       mov     ebx, 0
.text:004059FE		       lea     edi, [ebp+var_1F50]
.text:00405A04
.text:00405A04 loc_405A04:			       ; CODE XREF: sub_4059BC+16Bj
.text:00405A04		       mov     eax, [ebp+var_1F50]
.text:00405A0A		       mov     [esp+0Ch+var_C],	eax
.text:00405A0D		       call    sub_401BC5
.text:00405A12		       mov     esi, eax
.text:00405A14		       cmp     eax, ebx
.text:00405A16		       jz      short loc_405A3C
.text:00405A18		       mov     dword ptr [esp+0Ch], offset aSglib_doubleli ; "sglib_DoubleLinkedList_len(list) == i"
.text:00405A20		       mov     [esp+0Ch+var_4],	offset aDouble_linked_ ; "double_linked_list_test"
.text:00405A28		       mov     [esp+0Ch+var_8],	260h
.text:00405A30		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00405A37		       call    __assert_func
.text:00405A3C
.text:00405A3C loc_405A3C:			       ; CODE XREF: sub_4059BC+5Aj
.text:00405A3C		       mov     ebx, offset dword_40D060
.text:00405A41		       mov     eax, [ebx+eax*4]
.text:00405A44		       mov     [ebp+esi*4+var_FAC], eax
.text:00405A4B		       mov     [ebp+esi*4+var_1F4C], esi
.text:00405A52		       mov     [esp+0Ch+var_C],	18h
.text:00405A59		       call    malloc
.text:00405A5E		       mov     edx, [ebx+esi*4]
.text:00405A61		       mov     [eax], edx
.text:00405A63		       mov     [esp+0Ch+var_8],	eax
.text:00405A67		       mov     [esp+0Ch+var_C],	edi
.text:00405A6A		       call    sub_40153D
.text:00405A6F		       mov     eax, [ebp+var_1F50]
.text:00405A75		       mov     [esp+0Ch+var_C],	eax
.text:00405A78		       call    sub_402AD6
.text:00405A7D		       mov     [esp+0Ch+var_C],	18h
.text:00405A84		       call    malloc
.text:00405A89		       mov     edx, [ebx+esi*4]
.text:00405A8C		       mov     [eax], edx
.text:00405A8E		       mov     dword ptr [eax+4], 0
.text:00405A95		       mov     dword ptr [eax+8], 0
.text:00405A9C		       mov     [esp+0Ch+var_8],	eax
.text:00405AA0		       lea     eax, [ebp+var_1F54]
.text:00405AA6		       mov     [esp+0Ch+var_C],	eax
.text:00405AA9		       call    sub_401816
.text:00405AAE		       mov     eax, [ebp+var_1F54]
.text:00405AB4		       mov     [esp+0Ch+var_C],	eax
.text:00405AB7		       call    sub_402AD6
.text:00405ABC		       mov     [esp+0Ch+var_C],	18h
.text:00405AC3		       call    malloc
.text:00405AC8		       mov     edx, [ebx+esi*4]
.text:00405ACB		       mov     [eax], edx
.text:00405ACD		       mov     [esp+0Ch+var_8],	eax
.text:00405AD1		       lea     eax, [ebp+var_1F58]
.text:00405AD7		       mov     [esp+0Ch+var_C],	eax
.text:00405ADA		       call    sub_40157A
.text:00405ADF		       mov     eax, [ebp+var_1F58]
.text:00405AE5		       mov     [esp+0Ch+var_C],	eax
.text:00405AE8		       call    sub_402AD6
.text:00405AED		       mov     [esp+0Ch+var_C],	18h
.text:00405AF4		       call    malloc
.text:00405AF9		       mov     edx, [ebx+esi*4]
.text:00405AFC		       mov     [eax], edx
.text:00405AFE		       mov     [esp+0Ch+var_8],	eax
.text:00405B02		       lea     eax, [ebp+var_1F5C]
.text:00405B08		       mov     [esp+0Ch+var_C],	eax
.text:00405B0B		       call    sub_4015B7
.text:00405B10		       mov     eax, [ebp+var_1F5C]
.text:00405B16		       mov     [esp+0Ch+var_C],	eax
.text:00405B19		       call    sub_402AD6
.text:00405B1E		       lea     ebx, [esi+1]
.text:00405B21		       cmp     ebx, 3E7h
.text:00405B27		       jle     loc_405A04
.text:00405B2D		       mov     eax, [ebp+var_1F50]
.text:00405B33		       mov     [esp+0Ch+var_C],	eax
.text:00405B36		       call    sub_401A21
.text:00405B3B		       mov     [ebp+var_1F60], eax
.text:00405B41		       mov     [esp+0Ch+var_C],	eax
.text:00405B44		       call    sub_4040BF
.text:00405B49		       mov     eax, [ebp+var_1F54]
.text:00405B4F		       mov     [esp+0Ch+var_C],	eax
.text:00405B52		       call    sub_401A21
.text:00405B57		       mov     [ebp+var_1F64], eax
.text:00405B5D		       mov     [esp+0Ch+var_C],	eax
.text:00405B60		       call    sub_4040BF
.text:00405B65		       mov     eax, [ebp+var_1F58]
.text:00405B6B		       mov     [esp+0Ch+var_C],	eax
.text:00405B6E		       call    sub_401A21
.text:00405B73		       mov     [ebp+var_1F68], eax
.text:00405B79		       mov     [esp+0Ch+var_C],	eax
.text:00405B7C		       call    sub_4040BF
.text:00405B81		       mov     eax, [ebp+var_1F5C]
.text:00405B87		       mov     [esp+0Ch+var_C],	eax
.text:00405B8A		       call    sub_401A21
.text:00405B8F		       mov     [ebp+var_1F6C], eax
.text:00405B95		       mov     [esp+0Ch+var_C],	eax
.text:00405B98		       call    sub_4040BF
.text:00405B9D		       lea     eax, [ebp+var_1F60]
.text:00405BA3		       mov     [esp+0Ch+var_C],	eax
.text:00405BA6		       call    sub_401A53
.text:00405BAB		       lea     eax, [ebp+var_1F64]
.text:00405BB1		       mov     [esp+0Ch+var_C],	eax
.text:00405BB4		       call    sub_401A53
.text:00405BB9		       lea     eax, [ebp+var_1F68]
.text:00405BBF		       mov     [esp+0Ch+var_C],	eax
.text:00405BC2		       call    sub_401A53
.text:00405BC7		       lea     eax, [ebp+var_1F6C]
.text:00405BCD		       mov     [esp+0Ch+var_C],	eax
.text:00405BD0		       call    sub_401A53
.text:00405BD5		       mov     eax, [ebp+var_1F64]
.text:00405BDB		       mov     [esp+0Ch+var_8],	eax
.text:00405BDF		       mov     eax, [ebp+var_1F60]
.text:00405BE5		       mov     [esp+0Ch+var_C],	eax
.text:00405BE8		       call    sub_402B0E
.text:00405BED		       mov     eax, [ebp+var_1F68]
.text:00405BF3		       mov     [esp+0Ch+var_8],	eax
.text:00405BF7		       mov     eax, [ebp+var_1F60]
.text:00405BFD		       mov     [esp+0Ch+var_C],	eax
.text:00405C00		       call    sub_402B0E
.text:00405C05		       mov     eax, [ebp+var_1F6C]
.text:00405C0B		       mov     [esp+0Ch+var_8],	eax
.text:00405C0F		       mov     eax, [ebp+var_1F60]
.text:00405C15		       mov     [esp+0Ch+var_C],	eax
.text:00405C18		       call    sub_402B0E
.text:00405C1D		       mov     [ebp+var_209C], 0
.text:00405C27		       mov     [ebp+var_219C], 3E8h
.text:00405C31		       mov     [ebp+var_21AC], 1
.text:00405C3B
.text:00405C3B loc_405C3B:			       ; CODE XREF: sub_4059BC+4B2j
.text:00405C3B		       sub     [ebp+var_21AC], 1
.text:00405C42		       mov     edx, [ebp+var_21AC]
.text:00405C48		       mov     edi, [ebp+edx*4+var_209C]
.text:00405C4F		       mov     eax, [ebp+edx*4+var_219C]
.text:00405C56		       mov     [ebp+var_21A8], eax
.text:00405C5C		       jmp     loc_405E0B
.text:00405C61 ; ---------------------------------------------------------------------------
.text:00405C61
.text:00405C61 loc_405C61:			       ; CODE XREF: sub_4059BC+45Aj
.text:00405C61		       lea     ecx, [edi+1]
.text:00405C64		       mov     ebx, [ebp+var_21A8]
.text:00405C6A		       sub     ebx, 1
.text:00405C6D		       cmp     ecx, ebx
.text:00405C6F		       jl      loc_405D6B
.text:00405C75		       jmp     loc_405D93
.text:00405C7A ; ---------------------------------------------------------------------------
.text:00405C7A
.text:00405C7A loc_405C7A:			       ; CODE XREF: sub_4059BC+2CCj
.text:00405C7A					       ; sub_4059BC+3CCj
.text:00405C7A		       add     ecx, 1
.text:00405C7D		       cmp     ecx, ebx
.text:00405C7F		       jg      short loc_405C8C
.text:00405C81		       mov     eax, [edx]
.text:00405C83		       add     edx, 4
.text:00405C86		       cmp     eax, esi
.text:00405C88		       jle     short loc_405C7A
.text:00405C8A		       jmp     short loc_405CD7
.text:00405C8C ; ---------------------------------------------------------------------------
.text:00405C8C
.text:00405C8C loc_405C8C:			       ; CODE XREF: sub_4059BC+2C3j
.text:00405C8C					       ; sub_4059BC+3B1j
.text:00405C8C		       mov     edx, [ebp+ebx*4+var_FAC]
.text:00405C93		       mov     eax, [ebp+edi*4+var_FAC]
.text:00405C9A		       mov     [ebp+ebx*4+var_FAC], eax
.text:00405CA1		       mov     [ebp+edi*4+var_FAC], edx
.text:00405CA8		       mov     edx, [ebp+ebx*4+var_1F4C]
.text:00405CAF		       mov     eax, [ebp+edi*4+var_1F4C]
.text:00405CB6		       mov     [ebp+ebx*4+var_1F4C], eax
.text:00405CBD		       mov     [ebp+edi*4+var_1F4C], edx
.text:00405CC4		       mov     ecx, ebx
.text:00405CC6		       jmp     loc_405D93
.text:00405CCB ; ---------------------------------------------------------------------------
.text:00405CCB
.text:00405CCB loc_405CCB:			       ; CODE XREF: sub_4059BC+326j
.text:00405CCB		       sub     ebx, 1
.text:00405CCE		       sub     eax, 4
.text:00405CD1		       cmp     ebx, ecx
.text:00405CD3		       jge     short loc_405CDE
.text:00405CD5		       jmp     short loc_405CE6
.text:00405CD7 ; ---------------------------------------------------------------------------
.text:00405CD7
.text:00405CD7 loc_405CD7:			       ; CODE XREF: sub_4059BC+2CEj
.text:00405CD7					       ; sub_4059BC+3D2j
.text:00405CD7		       lea     eax, [ebp+ebx*4+var_FAC]
.text:00405CDE
.text:00405CDE loc_405CDE:			       ; CODE XREF: sub_4059BC+317j
.text:00405CDE		       mov     edx, [eax]
.text:00405CE0		       cmp     edx, esi
.text:00405CE2		       jge     short loc_405CCB
.text:00405CE4		       jmp     short loc_405D1B
.text:00405CE6 ; ---------------------------------------------------------------------------
.text:00405CE6
.text:00405CE6 loc_405CE6:			       ; CODE XREF: sub_4059BC+319j
.text:00405CE6		       mov     eax, [ebp+ebx*4+var_FAC]
.text:00405CED		       mov     [ebp+ebx*4+var_FAC], esi
.text:00405CF4		       mov     [ebp+edi*4+var_FAC], eax
.text:00405CFB		       mov     edx, [ebp+ebx*4+var_1F4C]
.text:00405D02		       mov     eax, [ebp+edi*4+var_1F4C]
.text:00405D09		       mov     [ebp+ebx*4+var_1F4C], eax
.text:00405D10		       mov     [ebp+edi*4+var_1F4C], edx
.text:00405D17		       mov     ecx, ebx
.text:00405D19		       jmp     short loc_405D93
.text:00405D1B ; ---------------------------------------------------------------------------
.text:00405D1B
.text:00405D1B loc_405D1B:			       ; CODE XREF: sub_4059BC+328j
.text:00405D1B		       cmp     ebx, ecx
.text:00405D1D		       jle     short loc_405D93
.text:00405D1F		       mov     eax, [ebp+ecx*4+var_FAC]
.text:00405D26		       mov     [ebp+ecx*4+var_FAC], edx
.text:00405D2D		       mov     [ebp+ebx*4+var_FAC], eax
.text:00405D34		       mov     edx, [ebp+ecx*4+var_1F4C]
.text:00405D3B		       mov     eax, [ebp+ebx*4+var_1F4C]
.text:00405D42		       mov     [ebp+ecx*4+var_1F4C], eax
.text:00405D49		       mov     [ebp+ebx*4+var_1F4C], edx
.text:00405D50		       lea     eax, [ecx+2]
.text:00405D53		       cmp     eax, ebx
.text:00405D55		       jge     short loc_405D63
.text:00405D57		       add     ecx, 1
.text:00405D5A		       lea     ebx, [ebx-1]
.text:00405D5D		       cmp     ecx, ebx
.text:00405D5F		       jl      short loc_405D6B
.text:00405D61		       jmp     short loc_405D93
.text:00405D63 ; ---------------------------------------------------------------------------
.text:00405D63
.text:00405D63 loc_405D63:			       ; CODE XREF: sub_4059BC+399j
.text:00405D63		       lea     eax, [ecx+1]
.text:00405D66		       cmp     eax, ebx
.text:00405D68		       cmovl   ecx, eax
.text:00405D6B
.text:00405D6B loc_405D6B:			       ; CODE XREF: sub_4059BC+2B3j
.text:00405D6B					       ; sub_4059BC+3A3j
.text:00405D6B		       cmp     ecx, ebx
.text:00405D6D		       jg      loc_405C8C
.text:00405D73		       mov     esi, [ebp+edi*4+var_FAC]
.text:00405D7A		       lea     edx, [ebp+ecx*4+var_FA8]
.text:00405D81		       cmp     [ebp+ecx*4+var_FAC], esi
.text:00405D88		       jle     loc_405C7A
.text:00405D8E		       jmp     loc_405CD7
.text:00405D93 ; ---------------------------------------------------------------------------
.text:00405D93
.text:00405D93 loc_405D93:			       ; CODE XREF: sub_4059BC+2B9j
.text:00405D93					       ; sub_4059BC+30Aj ...
.text:00405D93		       mov     edx, ecx
.text:00405D95		       sub     edx, edi
.text:00405D97		       cmp     edx, 1
.text:00405D9A		       jle     short loc_405E08
.text:00405D9C		       mov     eax, [ebp+var_21A8]
.text:00405DA2		       sub     eax, ebx
.text:00405DA4		       cmp     eax, 1
.text:00405DA7		       jg      short loc_405DB1
.text:00405DA9		       mov     [ebp+var_21A8], ecx
.text:00405DAF		       jmp     short loc_405E0B
.text:00405DB1 ; ---------------------------------------------------------------------------
.text:00405DB1
.text:00405DB1 loc_405DB1:			       ; CODE XREF: sub_4059BC+3EBj
.text:00405DB1		       sub     eax, 1
.text:00405DB4		       cmp     edx, eax
.text:00405DB6		       jge     short loc_405DE6
.text:00405DB8		       lea     eax, [ebx+1]
.text:00405DBB		       mov     edx, [ebp+var_21AC]
.text:00405DC1		       mov     [ebp+edx*4+var_209C], eax
.text:00405DC8		       mov     eax, [ebp+var_21A8]
.text:00405DCE		       mov     [ebp+edx*4+var_219C], eax
.text:00405DD5		       add     edx, 1
.text:00405DD8		       mov     [ebp+var_21AC], edx
.text:00405DDE		       mov     [ebp+var_21A8], ecx
.text:00405DE4		       jmp     short loc_405E0B
.text:00405DE6 ; ---------------------------------------------------------------------------
.text:00405DE6
.text:00405DE6 loc_405DE6:			       ; CODE XREF: sub_4059BC+3FAj
.text:00405DE6		       mov     edx, [ebp+var_21AC]
.text:00405DEC		       mov     [ebp+edx*4+var_209C], edi
.text:00405DF3		       mov     [ebp+edx*4+var_219C], ecx
.text:00405DFA		       add     edx, 1
.text:00405DFD		       mov     [ebp+var_21AC], edx
.text:00405E03		       lea     edi, [ebx+1]
.text:00405E06		       jmp     short loc_405E0B
.text:00405E08 ; ---------------------------------------------------------------------------
.text:00405E08
.text:00405E08 loc_405E08:			       ; CODE XREF: sub_4059BC+3DEj
.text:00405E08		       lea     edi, [ebx+1]
.text:00405E0B
.text:00405E0B loc_405E0B:			       ; CODE XREF: sub_4059BC+2A0j
.text:00405E0B					       ; sub_4059BC+3F3j ...
.text:00405E0B		       mov     eax, [ebp+var_21A8]
.text:00405E11		       sub     eax, edi
.text:00405E13		       cmp     eax, 2
.text:00405E16		       jg      loc_405C61
.text:00405E1C		       mov     ebx, [ebp+var_21AC]
.text:00405E22		       cmp     eax, 2
.text:00405E25		       jnz     short loc_405E6C
.text:00405E27		       mov     edx, [ebp+edi*4+var_FAC]
.text:00405E2E		       mov     ecx, [ebp+var_21A8]
.text:00405E34		       sub     ecx, 1
.text:00405E37		       mov     eax, [ebp+ecx*4+var_FAC]
.text:00405E3E		       cmp     edx, eax
.text:00405E40		       jle     short loc_405E6C
.text:00405E42		       mov     [ebp+edi*4+var_FAC], eax
.text:00405E49		       mov     [ebp+ecx*4+var_FAC], edx
.text:00405E50		       mov     edx, [ebp+edi*4+var_1F4C]
.text:00405E57		       mov     eax, [ebp+ecx*4+var_1F4C]
.text:00405E5E		       mov     [ebp+edi*4+var_1F4C], eax
.text:00405E65		       mov     [ebp+ecx*4+var_1F4C], edx
.text:00405E6C
.text:00405E6C loc_405E6C:			       ; CODE XREF: sub_4059BC+469j
.text:00405E6C					       ; sub_4059BC+484j
.text:00405E6C		       test    ebx, ebx
.text:00405E6E		       jg      loc_405C3B
.text:00405E74		       mov     ebx, 0
.text:00405E79		       mov     edi, offset dword_40D060
.text:00405E7E
.text:00405E7E loc_405E7E:			       ; CODE XREF: sub_4059BC+55Fj
.text:00405E7E		       mov     eax, [edi+ebx*4]
.text:00405E81		       mov     [ebp+var_1F84], eax
.text:00405E87		       lea     eax, [ebp+var_1F84]
.text:00405E8D		       mov     [esp+0Ch+var_8],	eax
.text:00405E91		       mov     eax, [ebp+var_1F50]
.text:00405E97		       mov     [esp+0Ch+var_C],	eax
.text:00405E9A		       call    sub_4019BD
.text:00405E9F		       test    eax, eax
.text:00405EA1		       jnz     short loc_405EC7
.text:00405EA3		       mov     dword ptr [esp+0Ch], offset aSglib_double_0 ; "sglib_DoubleLinkedList_find_member(list"...
.text:00405EAB		       mov     [esp+0Ch+var_4],	offset aDouble_linked_ ; "double_linked_list_test"
.text:00405EB3		       mov     [esp+0Ch+var_8],	294h
.text:00405EBB		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00405EC2		       call    __assert_func
.text:00405EC7
.text:00405EC7 loc_405EC7:			       ; CODE XREF: sub_4059BC+4E5j
.text:00405EC7		       mov     eax, [edi+ebx*4]
.text:00405ECA		       not     eax
.text:00405ECC		       mov     [ebp+var_1F84], eax
.text:00405ED2		       lea     edx, [ebp+var_1F84]
.text:00405ED8		       mov     [esp+0Ch+var_8],	edx
.text:00405EDC		       mov     eax, [ebp+var_1F50]
.text:00405EE2		       mov     [esp+0Ch+var_C],	eax
.text:00405EE5		       call    sub_4019BD
.text:00405EEA		       test    eax, eax
.text:00405EEC		       jz      short loc_405F12
.text:00405EEE		       mov     dword ptr [esp+0Ch], offset aSglib_double_1 ; "sglib_DoubleLinkedList_find_member(list"...
.text:00405EF6		       mov     [esp+0Ch+var_4],	offset aDouble_linked_ ; "double_linked_list_test"
.text:00405EFE		       mov     [esp+0Ch+var_8],	296h
.text:00405F06		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00405F0D		       call    __assert_func
.text:00405F12
.text:00405F12 loc_405F12:			       ; CODE XREF: sub_4059BC+530j
.text:00405F12		       add     ebx, 1
.text:00405F15		       cmp     ebx, 3E8h
.text:00405F1B		       jnz     loc_405E7E
.text:00405F21		       mov     eax, [ebp+var_1F50]
.text:00405F27		       test    eax, eax
.text:00405F29		       jz      loc_405FC2
.text:00405F2F		       mov     esi, [eax+4]
.text:00405F32
.text:00405F32 loc_405F32:			       ; CODE XREF: sub_4059BC+5B9j
.text:00405F32		       mov     ebx, [eax+8]
.text:00405F35		       mov     [esp+0Ch+var_8],	eax
.text:00405F39		       mov     eax, [ebp+var_1F50]
.text:00405F3F		       mov     [esp+0Ch+var_C],	eax
.text:00405F42		       call    sub_40195D
.text:00405F47		       test    eax, eax
.text:00405F49		       jnz     short loc_405F6F
.text:00405F4B		       mov     dword ptr [esp+0Ch], offset aSglib_double_2 ; "sglib_DoubleLinkedList_is_member(list, "...
.text:00405F53		       mov     [esp+0Ch+var_4],	offset aDouble_linked_ ; "double_linked_list_test"
.text:00405F5B		       mov     [esp+0Ch+var_8],	29Bh
.text:00405F63		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00405F6A		       call    __assert_func
.text:00405F6F
.text:00405F6F loc_405F6F:			       ; CODE XREF: sub_4059BC+58Dj
.text:00405F6F		       test    ebx, ebx
.text:00405F71		       jz      short loc_405FB6
.text:00405F73		       mov     eax, ebx
.text:00405F75		       jmp     short loc_405F32
.text:00405F77 ; ---------------------------------------------------------------------------
.text:00405F77
.text:00405F77 loc_405F77:			       ; CODE XREF: sub_4059BC+604j
.text:00405F77		       mov     eax, ebx
.text:00405F79
.text:00405F79 loc_405F79:			       ; CODE XREF: sub_4059BC+5FEj
.text:00405F79		       mov     ebx, [eax+4]
.text:00405F7C		       mov     [esp+0Ch+var_8],	eax
.text:00405F80		       mov     eax, [ebp+var_1F50]
.text:00405F86		       mov     [esp+0Ch+var_C],	eax
.text:00405F89		       call    sub_40195D
.text:00405F8E		       test    eax, eax
.text:00405F90		       jnz     short loc_405FBE
.text:00405F92		       mov     dword ptr [esp+0Ch], offset aSglib_double_2 ; "sglib_DoubleLinkedList_is_member(list, "...
.text:00405F9A		       mov     [esp+0Ch+var_4],	offset aDouble_linked_ ; "double_linked_list_test"
.text:00405FA2		       mov     [esp+0Ch+var_8],	29Bh
.text:00405FAA		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00405FB1		       call    __assert_func
.text:00405FB6
.text:00405FB6 loc_405FB6:			       ; CODE XREF: sub_4059BC+5B5j
.text:00405FB6		       mov     eax, esi
.text:00405FB8		       test    esi, esi
.text:00405FBA		       jnz     short loc_405F79
.text:00405FBC		       jmp     short loc_405FC2
.text:00405FBE ; ---------------------------------------------------------------------------
.text:00405FBE
.text:00405FBE loc_405FBE:			       ; CODE XREF: sub_4059BC+5D4j
.text:00405FBE		       test    ebx, ebx
.text:00405FC0		       jnz     short loc_405F77
.text:00405FC2
.text:00405FC2 loc_405FC2:			       ; CODE XREF: sub_4059BC+56Dj
.text:00405FC2					       ; sub_4059BC+600j
.text:00405FC2		       lea     eax, [ebp+var_1F84]
.text:00405FC8		       mov     [esp+0Ch+var_8],	eax
.text:00405FCC		       mov     eax, [ebp+var_1F50]
.text:00405FD2		       mov     [esp+0Ch+var_C],	eax
.text:00405FD5		       call    sub_40195D
.text:00405FDA		       mov     edi, 0
.text:00405FDF		       test    eax, eax
.text:00405FE1		       jz      short loc_406007
.text:00405FE3		       mov     dword ptr [esp+0Ch], offset aSglib_double_3 ; "!	sglib_DoubleLinkedList_is_member(list"...
.text:00405FEB		       mov     [esp+0Ch+var_4],	offset aDouble_linked_ ; "double_linked_list_test"
.text:00405FF3		       mov     [esp+0Ch+var_8],	29Ch
.text:00405FFB		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00406002		       call    __assert_func
.text:00406007
.text:00406007 loc_406007:			       ; CODE XREF: sub_4059BC+625j
.text:00406007					       ; sub_4059BC+6EAj
.text:00406007		       mov     eax, ds:dword_40D060[edi*4]
.text:0040600E		       mov     [ebp+var_1F84], eax
.text:00406014		       mov     esi, [ebp+var_1F50]
.text:0040601A		       test    esi, esi
.text:0040601C		       jz      loc_4069AD
.text:00406022		       mov     ebx, esi
.text:00406024		       jmp     short loc_40602D
.text:00406026 ; ---------------------------------------------------------------------------
.text:00406026
.text:00406026 loc_406026:			       ; CODE XREF: sub_4059BC+685j
.text:00406026		       mov     ebx, [ebx+8]
.text:00406029		       test    ebx, ebx
.text:0040602B		       jz      short loc_406045
.text:0040602D
.text:0040602D loc_40602D:			       ; CODE XREF: sub_4059BC+668j
.text:0040602D		       lea     eax, [ebp+var_1F84]
.text:00406033		       mov     [esp+0Ch+var_8],	eax
.text:00406037		       mov     [esp+0Ch+var_C],	ebx
.text:0040603A		       call    sub_4011A0
.text:0040603F		       test    eax, eax
.text:00406041		       jnz     short loc_406026
.text:00406043		       jmp     short loc_406075
.text:00406045 ; ---------------------------------------------------------------------------
.text:00406045
.text:00406045 loc_406045:			       ; CODE XREF: sub_4059BC+66Fj
.text:00406045		       mov     eax, [esi+4]
.text:00406048		       test    eax, eax
.text:0040604A		       jz      loc_4069AD
.text:00406050		       mov     ebx, eax
.text:00406052		       jmp     short loc_40605F
.text:00406054 ; ---------------------------------------------------------------------------
.text:00406054
.text:00406054 loc_406054:			       ; CODE XREF: sub_4059BC+6B7j
.text:00406054		       mov     ebx, [ebx+4]
.text:00406057		       test    ebx, ebx
.text:00406059		       jz      loc_4069AD
.text:0040605F
.text:0040605F loc_40605F:			       ; CODE XREF: sub_4059BC+696j
.text:0040605F		       lea     edx, [ebp+var_1F84]
.text:00406065		       mov     [esp+0Ch+var_8],	edx
.text:00406069		       mov     [esp+0Ch+var_C],	ebx
.text:0040606C		       call    sub_4011A0
.text:00406071		       test    eax, eax
.text:00406073		       jnz     short loc_406054
.text:00406075
.text:00406075 loc_406075:			       ; CODE XREF: sub_4059BC+687j
.text:00406075		       mov     [esp+0Ch+var_8],	ebx
.text:00406079		       lea     eax, [ebp+var_1F50]
.text:0040607F		       mov     [esp+0Ch+var_C],	eax
.text:00406082		       call    sub_401863
.text:00406087		       mov     [esp+0Ch+var_C],	ebx
.text:0040608A		       call    free
.text:0040608F		       mov     eax, [ebp+var_1F50]
.text:00406095		       mov     [esp+0Ch+var_C],	eax
.text:00406098		       call    sub_402AD6
.text:0040609D		       add     edi, 1
.text:004060A0		       cmp     edi, 3E8h
.text:004060A6		       jnz     loc_406007
.text:004060AC		       cmp     [ebp+var_1F50], 0
.text:004060B3		       jz      short loc_4060D9
.text:004060B5		       mov     dword ptr [esp+0Ch], offset aListNull ; "list==NULL"
.text:004060BD		       mov     [esp+0Ch+var_4],	offset aDouble_linked_ ; "double_linked_list_test"
.text:004060C5		       mov     [esp+0Ch+var_8],	2AAh
.text:004060CD		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:004060D4		       call    __assert_func
.text:004060D9
.text:004060D9 loc_4060D9:			       ; CODE XREF: sub_4059BC+6F7j
.text:004060D9		       mov     eax, [ebp+var_1F54]
.text:004060DF		       test    eax, eax
.text:004060E1		       jz      short loc_406110
.text:004060E3		       mov     esi, [eax+4]
.text:004060E6
.text:004060E6 loc_4060E6:			       ; CODE XREF: sub_4059BC+739j
.text:004060E6		       mov     ebx, [eax+8]
.text:004060E9		       mov     [esp+0Ch+var_C],	eax
.text:004060EC		       call    free
.text:004060F1		       mov     eax, ebx
.text:004060F3		       test    ebx, ebx
.text:004060F5		       jnz     short loc_4060E6
.text:004060F7		       test    esi, esi
.text:004060F9		       jz      short loc_406110
.text:004060FB		       mov     eax, esi
.text:004060FD
.text:004060FD loc_4060FD:			       ; CODE XREF: sub_4059BC+752j
.text:004060FD		       mov     ebx, [eax+4]
.text:00406100		       mov     [esp+0Ch+var_C],	eax
.text:00406103		       call    free
.text:00406108		       test    ebx, ebx
.text:0040610A		       jz      short loc_406110
.text:0040610C		       mov     eax, ebx
.text:0040610E		       jmp     short loc_4060FD
.text:00406110 ; ---------------------------------------------------------------------------
.text:00406110
.text:00406110 loc_406110:			       ; CODE XREF: sub_4059BC+725j
.text:00406110					       ; sub_4059BC+73Dj ...
.text:00406110		       mov     eax, [ebp+var_1F58]
.text:00406116		       test    eax, eax
.text:00406118		       jz      short loc_406147
.text:0040611A		       mov     esi, [eax+4]
.text:0040611D
.text:0040611D loc_40611D:			       ; CODE XREF: sub_4059BC+770j
.text:0040611D		       mov     ebx, [eax+8]
.text:00406120		       mov     [esp+0Ch+var_C],	eax
.text:00406123		       call    free
.text:00406128		       mov     eax, ebx
.text:0040612A		       test    ebx, ebx
.text:0040612C		       jnz     short loc_40611D
.text:0040612E		       test    esi, esi
.text:00406130		       jz      short loc_406147
.text:00406132		       mov     eax, esi
.text:00406134
.text:00406134 loc_406134:			       ; CODE XREF: sub_4059BC+789j
.text:00406134		       mov     ebx, [eax+4]
.text:00406137		       mov     [esp+0Ch+var_C],	eax
.text:0040613A		       call    free
.text:0040613F		       test    ebx, ebx
.text:00406141		       jz      short loc_406147
.text:00406143		       mov     eax, ebx
.text:00406145		       jmp     short loc_406134
.text:00406147 ; ---------------------------------------------------------------------------
.text:00406147
.text:00406147 loc_406147:			       ; CODE XREF: sub_4059BC+75Cj
.text:00406147					       ; sub_4059BC+774j ...
.text:00406147		       mov     eax, [ebp+var_1F5C]
.text:0040614D		       test    eax, eax
.text:0040614F		       jz      short loc_40617E
.text:00406151		       mov     esi, [eax+4]
.text:00406154
.text:00406154 loc_406154:			       ; CODE XREF: sub_4059BC+7A7j
.text:00406154		       mov     ebx, [eax+8]
.text:00406157		       mov     [esp+0Ch+var_C],	eax
.text:0040615A		       call    free
.text:0040615F		       mov     eax, ebx
.text:00406161		       test    ebx, ebx
.text:00406163		       jnz     short loc_406154
.text:00406165		       test    esi, esi
.text:00406167		       jz      short loc_40617E
.text:00406169		       mov     eax, esi
.text:0040616B
.text:0040616B loc_40616B:			       ; CODE XREF: sub_4059BC+7C0j
.text:0040616B		       mov     ebx, [eax+4]
.text:0040616E		       mov     [esp+0Ch+var_C],	eax
.text:00406171		       call    free
.text:00406176		       test    ebx, ebx
.text:00406178		       jz      short loc_40617E
.text:0040617A		       mov     eax, ebx
.text:0040617C		       jmp     short loc_40616B
.text:0040617E ; ---------------------------------------------------------------------------
.text:0040617E
.text:0040617E loc_40617E:			       ; CODE XREF: sub_4059BC+793j
.text:0040617E					       ; sub_4059BC+7ABj ...
.text:0040617E		       mov     [ebp+var_1F5C], 0
.text:00406188		       mov     [ebp+var_1F58], 0
.text:00406192		       mov     [ebp+var_1F54], 0
.text:0040619C		       mov     [ebp+var_1F50], 0
.text:004061A6		       mov     esi, 0
.text:004061AB
.text:004061AB loc_4061AB:			       ; CODE XREF: sub_4059BC+8E1j
.text:004061AB		       mov     [esp+0Ch+var_C],	18h
.text:004061B2		       call    malloc
.text:004061B7		       mov     ebx, eax
.text:004061B9		       mov     edi, esi
.text:004061BB		       mov     eax, ds:dword_40D060[esi*4]
.text:004061C2		       mov     [ebx], eax
.text:004061C4		       lea     eax, [ebp+var_1F88]
.text:004061CA		       mov     [esp+0Ch+var_4],	eax
.text:004061CE		       mov     [esp+0Ch+var_8],	ebx
.text:004061D2		       lea     edx, [ebp+var_1F50]
.text:004061D8		       mov     [esp+0Ch+var_C],	edx
.text:004061DB		       call    sub_4015F4
.text:004061E0		       test    eax, eax
.text:004061E2		       jnz     short loc_4061EC
.text:004061E4		       mov     [esp+0Ch+var_C],	ebx
.text:004061E7		       call    free
.text:004061EC
.text:004061EC loc_4061EC:			       ; CODE XREF: sub_4059BC+826j
.text:004061EC		       mov     eax, [ebp+var_1F50]
.text:004061F2		       mov     [esp+0Ch+var_C],	eax
.text:004061F5		       call    sub_402AD6
.text:004061FA		       mov     [esp+0Ch+var_C],	18h
.text:00406201		       call    malloc
.text:00406206		       mov     ebx, eax
.text:00406208		       mov     eax, ds:dword_40D060[edi*4]
.text:0040620F		       mov     [ebx], eax
.text:00406211		       lea     eax, [ebp+var_1F88]
.text:00406217		       mov     [esp+0Ch+var_4],	eax
.text:0040621B		       mov     [esp+0Ch+var_8],	ebx
.text:0040621F		       lea     eax, [ebp+var_1F54]
.text:00406225		       mov     [esp+0Ch+var_C],	eax
.text:00406228		       call    sub_40175F
.text:0040622D		       test    eax, eax
.text:0040622F		       jnz     short loc_406239
.text:00406231		       mov     [esp+0Ch+var_C],	ebx
.text:00406234		       call    free
.text:00406239
.text:00406239 loc_406239:			       ; CODE XREF: sub_4059BC+873j
.text:00406239		       mov     eax, [ebp+var_1F54]
.text:0040623F		       mov     [esp+0Ch+var_C],	eax
.text:00406242		       call    sub_402AD6
.text:00406247		       mov     [esp+0Ch+var_C],	18h
.text:0040624E		       call    malloc
.text:00406253		       mov     ebx, eax
.text:00406255		       mov     eax, ds:dword_40D060[edi*4]
.text:0040625C		       mov     [ebx], eax
.text:0040625E		       lea     edx, [ebp+var_1F88]
.text:00406264		       mov     [esp+0Ch+var_4],	edx
.text:00406268		       mov     [esp+0Ch+var_8],	ebx
.text:0040626C		       lea     eax, [ebp+var_1F58]
.text:00406272		       mov     [esp+0Ch+var_C],	eax
.text:00406275		       call    sub_4016A8
.text:0040627A		       test    eax, eax
.text:0040627C		       jnz     short loc_406286
.text:0040627E		       mov     [esp+0Ch+var_C],	ebx
.text:00406281		       call    free
.text:00406286
.text:00406286 loc_406286:			       ; CODE XREF: sub_4059BC+8C0j
.text:00406286		       mov     eax, [ebp+var_1F58]
.text:0040628C		       mov     [esp+0Ch+var_C],	eax
.text:0040628F		       call    sub_402AD6
.text:00406294		       add     esi, 1
.text:00406297		       cmp     esi, 3E8h
.text:0040629D		       jnz     loc_4061AB
.text:004062A3		       mov     ebx, 0
.text:004062A8		       mov     esi, offset dword_40D060
.text:004062AD		       lea     edi, [ebp+var_1F84]
.text:004062B3
.text:004062B3 loc_4062B3:			       ; CODE XREF: sub_4059BC+943j
.text:004062B3		       mov     eax, [esi+ebx*4]
.text:004062B6		       mov     [ebp+var_1F84], eax
.text:004062BC		       mov     [esp+0Ch+var_8],	edi
.text:004062C0		       mov     eax, [ebp+var_1F50]
.text:004062C6		       mov     [esp+0Ch+var_C],	eax
.text:004062C9		       call    sub_4019BD
.text:004062CE		       test    eax, eax
.text:004062D0		       jnz     short loc_4062F6
.text:004062D2		       mov     dword ptr [esp+0Ch], offset aSglib_double_4 ; "sglib_DoubleLinkedList_find_member(list"...
.text:004062DA		       mov     [esp+0Ch+var_4],	offset aDouble_linked_ ; "double_linked_list_test"
.text:004062E2		       mov     [esp+0Ch+var_8],	2CDh
.text:004062EA		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:004062F1		       call    __assert_func
.text:004062F6
.text:004062F6 loc_4062F6:			       ; CODE XREF: sub_4059BC+914j
.text:004062F6		       add     ebx, 1
.text:004062F9		       cmp     ebx, 3E8h
.text:004062FF		       jnz     short loc_4062B3
.text:00406301		       mov     eax, [ebp+var_1F50]
.text:00406307		       mov     [esp+0Ch+var_C],	eax
.text:0040630A		       call    sub_401A21
.text:0040630F		       mov     [ebp+var_1F60], eax
.text:00406315		       mov     [esp+0Ch+var_C],	eax
.text:00406318		       call    sub_404029
.text:0040631D		       mov     eax, [ebp+var_1F54]
.text:00406323		       mov     [esp+0Ch+var_C],	eax
.text:00406326		       call    sub_401A21
.text:0040632B		       mov     [ebp+var_1F64], eax
.text:00406331		       mov     [esp+0Ch+var_C],	eax
.text:00406334		       call    sub_404029
.text:00406339		       mov     eax, [ebp+var_1F58]
.text:0040633F		       mov     [esp+0Ch+var_C],	eax
.text:00406342		       call    sub_401A21
.text:00406347		       mov     [ebp+var_1F68], eax
.text:0040634D		       mov     [esp+0Ch+var_C],	eax
.text:00406350		       call    sub_404029
.text:00406355		       lea     eax, [ebp+var_1F60]
.text:0040635B		       mov     [esp+0Ch+var_C],	eax
.text:0040635E		       call    sub_401A53
.text:00406363		       lea     eax, [ebp+var_1F64]
.text:00406369		       mov     [esp+0Ch+var_C],	eax
.text:0040636C		       call    sub_401A53
.text:00406371		       lea     eax, [ebp+var_1F68]
.text:00406377		       mov     [esp+0Ch+var_C],	eax
.text:0040637A		       call    sub_401A53
.text:0040637F		       mov     eax, [ebp+var_1F64]
.text:00406385		       mov     [esp+0Ch+var_8],	eax
.text:00406389		       mov     eax, [ebp+var_1F60]
.text:0040638F		       mov     [esp+0Ch+var_C],	eax
.text:00406392		       call    sub_402B0E
.text:00406397		       mov     eax, [ebp+var_1F68]
.text:0040639D		       mov     [esp+0Ch+var_8],	eax
.text:004063A1		       mov     eax, [ebp+var_1F60]
.text:004063A7		       mov     [esp+0Ch+var_C],	eax
.text:004063AA		       call    sub_402B0E
.text:004063AF		       lea     eax, [ebp+var_1F4C]
.text:004063B5		       mov     [ebp+var_21A0], eax
.text:004063BB
.text:004063BB loc_4063BB:			       ; CODE XREF: sub_4059BC+AECj
.text:004063BB		       mov     edx, [ebp+var_21A0]
.text:004063C1		       mov     eax, [edx]
.text:004063C3		       mov     eax, [ebp+eax*4+var_FAC]
.text:004063CA		       mov     [ebp+var_1F84], eax
.text:004063D0		       mov     edi, [ebp+var_1F50]
.text:004063D6		       mov     ebx, edi
.text:004063D8		       mov     esi, edi
.text:004063DA		       test    edi, edi
.text:004063DC		       jnz     short loc_4063E7
.text:004063DE		       jmp     short loc_40642D
.text:004063E0 ; ---------------------------------------------------------------------------
.text:004063E0
.text:004063E0 loc_4063E0:			       ; CODE XREF: sub_4059BC+A3Fj
.text:004063E0		       mov     ebx, [ebx+8]
.text:004063E3		       test    ebx, ebx
.text:004063E5		       jz      short loc_406401
.text:004063E7
.text:004063E7 loc_4063E7:			       ; CODE XREF: sub_4059BC+A20j
.text:004063E7		       lea     eax, [ebp+var_1F84]
.text:004063ED		       mov     [esp+0Ch+var_8],	eax
.text:004063F1		       mov     [esp+0Ch+var_C],	ebx
.text:004063F4		       call    sub_4011A0
.text:004063F9		       test    eax, eax
.text:004063FB		       jnz     short loc_4063E0
.text:004063FD		       mov     esi, ebx
.text:004063FF		       jmp     short loc_40642D
.text:00406401 ; ---------------------------------------------------------------------------
.text:00406401
.text:00406401 loc_406401:			       ; CODE XREF: sub_4059BC+A29j
.text:00406401		       mov     eax, [edi+4]
.text:00406404		       mov     ebx, eax
.text:00406406		       mov     esi, eax
.text:00406408		       test    eax, eax
.text:0040640A		       jnz     short loc_406415
.text:0040640C		       jmp     short loc_40642D
.text:0040640E ; ---------------------------------------------------------------------------
.text:0040640E
.text:0040640E loc_40640E:			       ; CODE XREF: sub_4059BC+A6Dj
.text:0040640E		       mov     ebx, [ebx+4]
.text:00406411		       test    ebx, ebx
.text:00406413		       jz      short loc_40642B
.text:00406415
.text:00406415 loc_406415:			       ; CODE XREF: sub_4059BC+A4Ej
.text:00406415		       lea     edx, [ebp+var_1F84]
.text:0040641B		       mov     [esp+0Ch+var_8],	edx
.text:0040641F		       mov     [esp+0Ch+var_C],	ebx
.text:00406422		       call    sub_4011A0
.text:00406427		       test    eax, eax
.text:00406429		       jnz     short loc_40640E
.text:0040642B
.text:0040642B loc_40642B:			       ; CODE XREF: sub_4059BC+A57j
.text:0040642B		       mov     esi, ebx
.text:0040642D
.text:0040642D loc_40642D:			       ; CODE XREF: sub_4059BC+A22j
.text:0040642D					       ; sub_4059BC+A43j ...
.text:0040642D		       lea     eax, [ebp+var_1F88]
.text:00406433		       mov     [esp+0Ch+var_4],	eax
.text:00406437		       lea     eax, [ebp+var_1F84]
.text:0040643D		       mov     [esp+0Ch+var_8],	eax
.text:00406441		       lea     eax, [ebp+var_1F50]
.text:00406447		       mov     [esp+0Ch+var_C],	eax
.text:0040644A		       call    sub_4018AF
.text:0040644F		       cmp     esi, [ebp+var_1F88]
.text:00406455		       jz      short loc_40647B
.text:00406457		       mov     dword ptr [esp+0Ch], offset aMembMemb2 ;	"memb == memb2"
.text:0040645F		       mov     [esp+0Ch+var_4],	offset aDouble_linked_ ; "double_linked_list_test"
.text:00406467		       mov     [esp+0Ch+var_8],	2E3h
.text:0040646F		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00406476		       call    __assert_func
.text:0040647B
.text:0040647B loc_40647B:			       ; CODE XREF: sub_4059BC+A99j
.text:0040647B		       test    esi, esi
.text:0040647D		       jz      short loc_406487
.text:0040647F		       mov     [esp+0Ch+var_C],	esi
.text:00406482		       call    free
.text:00406487
.text:00406487 loc_406487:			       ; CODE XREF: sub_4059BC+AC1j
.text:00406487		       mov     eax, [ebp+var_1F50]
.text:0040648D		       mov     [esp+0Ch+var_C],	eax
.text:00406490		       call    sub_402AD6
.text:00406495		       add     [ebp+var_21A0], 4
.text:0040649C		       lea     eax, [ebp+var_FAC]
.text:004064A2		       cmp     [ebp+var_21A0], eax
.text:004064A8		       jnz     loc_4063BB
.text:004064AE		       cmp     [ebp+var_1F50], 0
.text:004064B5		       jz      short loc_4064DB
.text:004064B7		       mov     dword ptr [esp+0Ch], offset aListNull ; "list==NULL"
.text:004064BF		       mov     [esp+0Ch+var_4],	offset aDouble_linked_ ; "double_linked_list_test"
.text:004064C7		       mov     [esp+0Ch+var_8],	2E7h
.text:004064CF		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:004064D6		       call    __assert_func
.text:004064DB
.text:004064DB loc_4064DB:			       ; CODE XREF: sub_4059BC+AF9j
.text:004064DB		       mov     [ebp+var_1F50], 0
.text:004064E5		       mov     ebx, 0
.text:004064EA		       mov     esi, offset dword_40D060
.text:004064EF		       lea     edi, [ebp+var_1F50]
.text:004064F5
.text:004064F5 loc_4064F5:			       ; CODE XREF: sub_4059BC+B6Dj
.text:004064F5		       mov     [esp+0Ch+var_C],	18h
.text:004064FC		       call    malloc
.text:00406501		       mov     edx, [esi+ebx*4]
.text:00406504		       mov     [eax], edx
.text:00406506		       mov     [esp+0Ch+var_8],	eax
.text:0040650A		       mov     [esp+0Ch+var_C],	edi
.text:0040650D		       call    sub_40153D
.text:00406512		       mov     eax, [ebp+var_1F50]
.text:00406518		       mov     [esp+0Ch+var_C],	eax
.text:0040651B		       call    sub_402AD6
.text:00406520		       add     ebx, 1
.text:00406523		       cmp     ebx, 3E8h
.text:00406529		       jnz     short loc_4064F5
.text:0040652B		       mov     eax, [ebp+var_1F50]
.text:00406531		       mov     [ebp+var_1F60], eax
.text:00406537		       test    eax, eax
.text:00406539		       jz      short loc_406555
.text:0040653B		       mov     edx, [eax+8]
.text:0040653E		       test    edx, edx
.text:00406540		       jz      short loc_406555
.text:00406542		       mov     [ebp+var_1F60], edx
.text:00406548
.text:00406548 loc_406548:			       ; CODE XREF: sub_4059BC+1037j
.text:00406548		       mov     eax, [edx+8]
.text:0040654B		       test    eax, eax
.text:0040654D		       jnz     loc_4069EB
.text:00406553		       jmp     short loc_406557
.text:00406555 ; ---------------------------------------------------------------------------
.text:00406555
.text:00406555 loc_406555:			       ; CODE XREF: sub_4059BC+B7Dj
.text:00406555					       ; sub_4059BC+B84j
.text:00406555		       mov     edx, eax
.text:00406557
.text:00406557 loc_406557:			       ; CODE XREF: sub_4059BC+B97j
.text:00406557		       mov     [esp+0Ch+var_C],	edx
.text:0040655A		       call    sub_4040BF
.text:0040655F		       lea     eax, [ebp+var_1F50]
.text:00406565		       mov     [esp+0Ch+var_C],	eax
.text:00406568		       call    sub_401A53
.text:0040656D		       mov     eax, [ebp+var_1F50]
.text:00406573		       mov     [esp+0Ch+var_C],	eax
.text:00406576		       call    sub_402AD6
.text:0040657B		       mov     eax, [ebp+var_1F50]
.text:00406581		       mov     [ebp+var_1F60], eax
.text:00406587		       test    eax, eax
.text:00406589		       jz      short loc_4065A5
.text:0040658B		       mov     edx, [eax+8]
.text:0040658E		       test    edx, edx
.text:00406590		       jz      short loc_4065A5
.text:00406592		       mov     [ebp+var_1F60], edx
.text:00406598
.text:00406598 loc_406598:			       ; CODE XREF: sub_4059BC+102Aj
.text:00406598		       mov     eax, [edx+8]
.text:0040659B		       test    eax, eax
.text:0040659D		       jnz     loc_4069DE
.text:004065A3		       jmp     short loc_4065A7
.text:004065A5 ; ---------------------------------------------------------------------------
.text:004065A5
.text:004065A5 loc_4065A5:			       ; CODE XREF: sub_4059BC+BCDj
.text:004065A5					       ; sub_4059BC+BD4j
.text:004065A5		       mov     edx, eax
.text:004065A7
.text:004065A7 loc_4065A7:			       ; CODE XREF: sub_4059BC+BE7j
.text:004065A7		       mov     [esp+0Ch+var_C],	edx
.text:004065AA		       call    sub_403CD7
.text:004065AF		       mov     eax, [ebp+var_1F60]
.text:004065B5		       mov     [esp+0Ch+var_C],	eax
.text:004065B8		       call    sub_4040BF
.text:004065BD		       lea     eax, [ebp+var_1F50]
.text:004065C3		       mov     [esp+0Ch+var_C],	eax
.text:004065C6		       call    sub_401C05
.text:004065CB		       mov     eax, [ebp+var_1F50]
.text:004065D1		       mov     [esp+0Ch+var_C],	eax
.text:004065D4		       call    sub_402AD6
.text:004065D9		       mov     eax, [ebp+var_1F50]
.text:004065DF		       mov     [ebp+var_1F60], eax
.text:004065E5		       test    eax, eax
.text:004065E7		       jz      short loc_406603
.text:004065E9		       mov     edx, [eax+8]
.text:004065EC		       test    edx, edx
.text:004065EE		       jz      short loc_406603
.text:004065F0		       mov     [ebp+var_1F60], edx
.text:004065F6
.text:004065F6 loc_4065F6:			       ; CODE XREF: sub_4059BC+101Dj
.text:004065F6		       mov     eax, [edx+8]
.text:004065F9		       test    eax, eax
.text:004065FB		       jnz     loc_4069D1
.text:00406601		       jmp     short loc_406605
.text:00406603 ; ---------------------------------------------------------------------------
.text:00406603
.text:00406603 loc_406603:			       ; CODE XREF: sub_4059BC+C2Bj
.text:00406603					       ; sub_4059BC+C32j
.text:00406603		       mov     edx, eax
.text:00406605
.text:00406605 loc_406605:			       ; CODE XREF: sub_4059BC+C45j
.text:00406605		       mov     [esp+0Ch+var_C],	edx
.text:00406608		       call    sub_4040BF
.text:0040660D		       mov     eax, [ebp+var_1F60]
.text:00406613		       mov     [esp+0Ch+var_C],	eax
.text:00406616		       call    sub_403C6A
.text:0040661B		       mov     eax, [ebp+var_1F54]
.text:00406621		       test    eax, eax
.text:00406623		       jz      short loc_406652
.text:00406625		       mov     esi, [eax+4]
.text:00406628
.text:00406628 loc_406628:			       ; CODE XREF: sub_4059BC+C7Bj
.text:00406628		       mov     ebx, [eax+8]
.text:0040662B		       mov     [esp+0Ch+var_C],	eax
.text:0040662E		       call    free
.text:00406633		       mov     eax, ebx
.text:00406635		       test    ebx, ebx
.text:00406637		       jnz     short loc_406628
.text:00406639		       test    esi, esi
.text:0040663B		       jz      short loc_406652
.text:0040663D		       mov     eax, esi
.text:0040663F
.text:0040663F loc_40663F:			       ; CODE XREF: sub_4059BC+C94j
.text:0040663F		       mov     ebx, [eax+4]
.text:00406642		       mov     [esp+0Ch+var_C],	eax
.text:00406645		       call    free
.text:0040664A		       test    ebx, ebx
.text:0040664C		       jz      short loc_406652
.text:0040664E		       mov     eax, ebx
.text:00406650		       jmp     short loc_40663F
.text:00406652 ; ---------------------------------------------------------------------------
.text:00406652
.text:00406652 loc_406652:			       ; CODE XREF: sub_4059BC+C67j
.text:00406652					       ; sub_4059BC+C7Fj ...
.text:00406652		       mov     eax, [ebp+var_1F58]
.text:00406658		       test    eax, eax
.text:0040665A		       jz      short loc_406689
.text:0040665C		       mov     esi, [eax+4]
.text:0040665F
.text:0040665F loc_40665F:			       ; CODE XREF: sub_4059BC+CB2j
.text:0040665F		       mov     ebx, [eax+8]
.text:00406662		       mov     [esp+0Ch+var_C],	eax
.text:00406665		       call    free
.text:0040666A		       mov     eax, ebx
.text:0040666C		       test    ebx, ebx
.text:0040666E		       jnz     short loc_40665F
.text:00406670		       test    esi, esi
.text:00406672		       jz      short loc_406689
.text:00406674		       mov     eax, esi
.text:00406676
.text:00406676 loc_406676:			       ; CODE XREF: sub_4059BC+CCBj
.text:00406676		       mov     ebx, [eax+4]
.text:00406679		       mov     [esp+0Ch+var_C],	eax
.text:0040667C		       call    free
.text:00406681		       test    ebx, ebx
.text:00406683		       jz      short loc_406689
.text:00406685		       mov     eax, ebx
.text:00406687		       jmp     short loc_406676
.text:00406689 ; ---------------------------------------------------------------------------
.text:00406689
.text:00406689 loc_406689:			       ; CODE XREF: sub_4059BC+C9Ej
.text:00406689					       ; sub_4059BC+CB6j ...
.text:00406689		       mov     [ebp+var_1F54], 0
.text:00406693		       mov     esi, [ebp+var_1F50]
.text:00406699		       test    esi, esi
.text:0040669B		       jz      loc_406728
.text:004066A1		       mov     edi, [esi+4]
.text:004066A4
.text:004066A4 loc_4066A4:			       ; CODE XREF: sub_4059BC+D1Fj
.text:004066A4		       mov     ebx, [esi+8]
.text:004066A7		       mov     [esp+0Ch+var_C],	18h
.text:004066AE		       call    malloc
.text:004066B3		       mov     edx, [esi]
.text:004066B5		       mov     [eax], edx
.text:004066B7		       mov     [esp+0Ch+var_8],	eax
.text:004066BB		       lea     edx, [ebp+var_1F54]
.text:004066C1		       mov     [esp+0Ch+var_C],	edx
.text:004066C4		       call    sub_40153D
.text:004066C9		       mov     eax, [ebp+var_1F54]
.text:004066CF		       mov     [esp+0Ch+var_C],	eax
.text:004066D2		       call    sub_402AD6
.text:004066D7		       mov     esi, ebx
.text:004066D9		       test    ebx, ebx
.text:004066DB		       jnz     short loc_4066A4
.text:004066DD		       test    edi, edi
.text:004066DF		       jz      short loc_40671E
.text:004066E1		       mov     ebx, edi
.text:004066E3		       lea     edi, [ebp+var_1F54]
.text:004066E9
.text:004066E9 loc_4066E9:			       ; CODE XREF: sub_4059BC+D60j
.text:004066E9		       mov     esi, [ebx+4]
.text:004066EC		       mov     [esp+0Ch+var_C],	18h
.text:004066F3		       call    malloc
.text:004066F8		       mov     edx, [ebx]
.text:004066FA		       mov     [eax], edx
.text:004066FC		       mov     [esp+0Ch+var_8],	eax
.text:00406700		       mov     [esp+0Ch+var_C],	edi
.text:00406703		       call    sub_40153D
.text:00406708		       mov     eax, [ebp+var_1F54]
.text:0040670E		       mov     [esp+0Ch+var_C],	eax
.text:00406711		       call    sub_402AD6
.text:00406716		       test    esi, esi
.text:00406718		       jz      short loc_40671E
.text:0040671A		       mov     ebx, esi
.text:0040671C		       jmp     short loc_4066E9
.text:0040671E ; ---------------------------------------------------------------------------
.text:0040671E
.text:0040671E loc_40671E:			       ; CODE XREF: sub_4059BC+D23j
.text:0040671E					       ; sub_4059BC+D5Cj
.text:0040671E		       mov     ebx, [ebp+var_1F50]
.text:00406724		       test    ebx, ebx
.text:00406726		       jnz     short loc_40674C
.text:00406728
.text:00406728 loc_406728:			       ; CODE XREF: sub_4059BC+CDFj
.text:00406728		       mov     dword ptr [esp+0Ch], offset aListNull_0 ; "list!=NULL"
.text:00406730		       mov     [esp+0Ch+var_4],	offset aDouble_linked_ ; "double_linked_list_test"
.text:00406738		       mov     [esp+0Ch+var_8],	314h
.text:00406740		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00406747		       call    __assert_func
.text:0040674C
.text:0040674C loc_40674C:			       ; CODE XREF: sub_4059BC+D6Aj
.text:0040674C		       mov     eax, [ebx+4]
.text:0040674F		       mov     [ebp+var_21A4], eax
.text:00406755		       mov     eax, 0
.text:0040675A		       mov     esi, 0
.text:0040675F		       mov     [ebp+var_21B0], 0
.text:00406769
.text:00406769 loc_406769:			       ; CODE XREF: sub_4059BC+E1Ej
.text:00406769		       mov     edi, [ebx+8]
.text:0040676C		       test    esi, esi
.text:0040676E		       jnz     short loc_406788
.text:00406770		       mov     eax, [ebp+var_1F50]
.text:00406776		       mov     [esp+0Ch+var_8],	eax
.text:0040677A		       lea     edx, [ebp+var_1F9C]
.text:00406780		       mov     [esp+0Ch+var_C],	edx
.text:00406783		       call    sub_401D20
.text:00406788
.text:00406788 loc_406788:			       ; CODE XREF: sub_4059BC+DB2j
.text:00406788		       cmp     eax, ebx
.text:0040678A		       jz      short loc_4067B0
.text:0040678C		       mov     dword ptr [esp+0Ch], offset aLl_current_ele ; "ll==_current_element_"
.text:00406794		       mov     [esp+0Ch+var_4],	offset aDouble_linked_ ; "double_linked_list_test"
.text:0040679C		       mov     [esp+0Ch+var_8],	31Ch
.text:004067A4		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:004067AB		       call    __assert_func
.text:004067B0
.text:004067B0 loc_4067B0:			       ; CODE XREF: sub_4059BC+DCEj
.text:004067B0		       add     esi, 1
.text:004067B3		       test    eax, eax
.text:004067B5		       jz      short loc_4067C6
.text:004067B7		       cmp     dword ptr [eax],	5
.text:004067BA		       setz    al
.text:004067BD		       movzx   eax, al
.text:004067C0		       add     [ebp+var_21B0], eax
.text:004067C6
.text:004067C6 loc_4067C6:			       ; CODE XREF: sub_4059BC+DF9j
.text:004067C6		       lea     eax, [ebp+var_1F9C]
.text:004067CC		       mov     [esp+0Ch+var_C],	eax
.text:004067CF		       call    sub_401C4C
.text:004067D4		       test    edi, edi
.text:004067D6		       jz      short loc_4067DC
.text:004067D8		       mov     ebx, edi
.text:004067DA		       jmp     short loc_406769
.text:004067DC ; ---------------------------------------------------------------------------
.text:004067DC
.text:004067DC loc_4067DC:			       ; CODE XREF: sub_4059BC+E1Aj
.text:004067DC		       cmp     [ebp+var_21A4], 0
.text:004067E3		       jz      short loc_40685E
.text:004067E5		       mov     ebx, [ebp+var_21A4]
.text:004067EB
.text:004067EB loc_4067EB:			       ; CODE XREF: sub_4059BC+EA0j
.text:004067EB		       mov     edi, [ebx+4]
.text:004067EE		       test    esi, esi
.text:004067F0		       jnz     short loc_40680A
.text:004067F2		       mov     eax, [ebp+var_1F50]
.text:004067F8		       mov     [esp+0Ch+var_8],	eax
.text:004067FC		       lea     edx, [ebp+var_1F9C]
.text:00406802		       mov     [esp+0Ch+var_C],	edx
.text:00406805		       call    sub_401D20
.text:0040680A
.text:0040680A loc_40680A:			       ; CODE XREF: sub_4059BC+E34j
.text:0040680A		       cmp     eax, ebx
.text:0040680C		       jz      short loc_406832
.text:0040680E		       mov     dword ptr [esp+0Ch], offset aLl_current_ele ; "ll==_current_element_"
.text:00406816		       mov     [esp+0Ch+var_4],	offset aDouble_linked_ ; "double_linked_list_test"
.text:0040681E		       mov     [esp+0Ch+var_8],	31Ch
.text:00406826		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:0040682D		       call    __assert_func
.text:00406832
.text:00406832 loc_406832:			       ; CODE XREF: sub_4059BC+E50j
.text:00406832		       test    eax, eax
.text:00406834		       jz      short loc_406845
.text:00406836		       cmp     dword ptr [eax],	5
.text:00406839		       setz    al
.text:0040683C		       movzx   eax, al
.text:0040683F		       add     [ebp+var_21B0], eax
.text:00406845
.text:00406845 loc_406845:			       ; CODE XREF: sub_4059BC+E78j
.text:00406845		       lea     eax, [ebp+var_1F9C]
.text:0040684B		       mov     [esp+0Ch+var_C],	eax
.text:0040684E		       call    sub_401C4C
.text:00406853		       test    edi, edi
.text:00406855		       jz      short loc_40685E
.text:00406857		       add     esi, 1
.text:0040685A		       mov     ebx, edi
.text:0040685C		       jmp     short loc_4067EB
.text:0040685E ; ---------------------------------------------------------------------------
.text:0040685E
.text:0040685E loc_40685E:			       ; CODE XREF: sub_4059BC+E27j
.text:0040685E					       ; sub_4059BC+E99j
.text:0040685E		       test    eax, eax
.text:00406860		       jz      short loc_406886
.text:00406862		       mov     dword ptr [esp+0Ch], offset aLlNull ; "ll==NULL"
.text:0040686A		       mov     [esp+0Ch+var_4],	offset aDouble_linked_ ; "double_linked_list_test"
.text:00406872		       mov     [esp+0Ch+var_8],	31Dh
.text:0040687A		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00406881		       call    __assert_func
.text:00406886
.text:00406886 loc_406886:			       ; CODE XREF: sub_4059BC+EA4j
.text:00406886		       mov     [ebp+var_1F84], 5
.text:00406890		       lea     eax, [ebp+var_1F84]
.text:00406896		       mov     [esp+0Ch], eax
.text:0040689A		       mov     [esp+0Ch+var_4],	offset sub_4011A0
.text:004068A2		       mov     eax, [ebp+var_1F50]
.text:004068A8		       mov     [esp+0Ch+var_8],	eax
.text:004068AC		       lea     eax, [ebp+var_1F9C]
.text:004068B2		       mov     [esp+0Ch+var_C],	eax
.text:004068B5		       call    sub_401CEE
.text:004068BA		       mov     ebx, 0
.text:004068BF		       test    eax, eax
.text:004068C1		       jz      short loc_406912
.text:004068C3		       mov     ebx, 1
.text:004068C8		       lea     esi, [ebp+var_1F9C]
.text:004068CE		       cmp     dword ptr [eax],	5
.text:004068D1		       jz      short loc_406906
.text:004068D3		       jmp     short loc_4068E2
.text:004068D5 ; ---------------------------------------------------------------------------
.text:004068D5
.text:004068D5 loc_4068D5:			       ; CODE XREF: sub_4059BC+F54j
.text:004068D5		       cmp     dword ptr [eax],	5
.text:004068D8		       jnz     short loc_4068E2
.text:004068DA		       add     ebx, 1
.text:004068DD		       lea     esi, [esi+0]
.text:004068E0		       jmp     short loc_406906
.text:004068E2 ; ---------------------------------------------------------------------------
.text:004068E2
.text:004068E2 loc_4068E2:			       ; CODE XREF: sub_4059BC+F17j
.text:004068E2					       ; sub_4059BC+F1Cj
.text:004068E2		       mov     dword ptr [esp+0Ch], offset aLlNIterator_eq ; "ll->n == ITERATOR_EQ_CHECK_VALUE"
.text:004068EA		       mov     [esp+0Ch+var_4],	offset aDouble_linked_ ; "double_linked_list_test"
.text:004068F2		       mov     [esp+0Ch+var_8],	325h
.text:004068FA		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00406901		       call    __assert_func
.text:00406906
.text:00406906 loc_406906:			       ; CODE XREF: sub_4059BC+F15j
.text:00406906					       ; sub_4059BC+F24j
.text:00406906		       mov     [esp+0Ch+var_C],	esi
.text:00406909		       call    sub_401C4C
.text:0040690E		       test    eax, eax
.text:00406910		       jnz     short loc_4068D5
.text:00406912
.text:00406912 loc_406912:			       ; CODE XREF: sub_4059BC+F05j
.text:00406912		       cmp     ebx, [ebp+var_21B0]
.text:00406918		       jz      short loc_40693E
.text:0040691A		       mov     dword ptr [esp+0Ch], offset aCcCc5 ; "cc	== cc5"
.text:00406922		       mov     [esp+0Ch+var_4],	offset aDouble_linked_ ; "double_linked_list_test"
.text:0040692A		       mov     [esp+0Ch+var_8],	327h
.text:00406932		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00406939		       call    __assert_func
.text:0040693E
.text:0040693E loc_40693E:			       ; CODE XREF: sub_4059BC+F5Cj
.text:0040693E		       mov     eax, [ebp+var_1F50]
.text:00406944		       test    eax, eax
.text:00406946		       jz      short loc_406975
.text:00406948		       mov     esi, [eax+4]
.text:0040694B
.text:0040694B loc_40694B:			       ; CODE XREF: sub_4059BC+F9Ej
.text:0040694B		       mov     ebx, [eax+8]
.text:0040694E		       mov     [esp+0Ch+var_C],	eax
.text:00406951		       call    free
.text:00406956		       mov     eax, ebx
.text:00406958		       test    ebx, ebx
.text:0040695A		       jnz     short loc_40694B
.text:0040695C		       test    esi, esi
.text:0040695E		       jz      short loc_406975
.text:00406960		       mov     eax, esi
.text:00406962
.text:00406962 loc_406962:			       ; CODE XREF: sub_4059BC+FB7j
.text:00406962		       mov     ebx, [eax+4]
.text:00406965		       mov     [esp+0Ch+var_C],	eax
.text:00406968		       call    free
.text:0040696D		       test    ebx, ebx
.text:0040696F		       jz      short loc_406975
.text:00406971		       mov     eax, ebx
.text:00406973		       jmp     short loc_406962
.text:00406975 ; ---------------------------------------------------------------------------
.text:00406975
.text:00406975 loc_406975:			       ; CODE XREF: sub_4059BC+F8Aj
.text:00406975					       ; sub_4059BC+FA2j ...
.text:00406975		       mov     eax, [ebp+var_1F54]
.text:0040697B		       mov     [esp+0Ch+var_8],	eax
.text:0040697F		       lea     eax, [ebp+var_1F9C]
.text:00406985		       mov     [esp+0Ch+var_C],	eax
.text:00406988		       call    sub_401D20
.text:0040698D		       test    eax, eax
.text:0040698F		       jz      short loc_4069F8
.text:00406991		       lea     ebx, [ebp+var_1F9C]
.text:00406997
.text:00406997 loc_406997:			       ; CODE XREF: sub_4059BC+FEDj
.text:00406997		       mov     [esp+0Ch+var_C],	eax
.text:0040699A		       call    free
.text:0040699F		       mov     [esp+0Ch+var_C],	ebx
.text:004069A2		       call    sub_401C4C
.text:004069A7		       test    eax, eax
.text:004069A9		       jnz     short loc_406997
.text:004069AB		       jmp     short loc_4069F8
.text:004069AD ; ---------------------------------------------------------------------------
.text:004069AD
.text:004069AD loc_4069AD:			       ; CODE XREF: sub_4059BC+660j
.text:004069AD					       ; sub_4059BC+68Ej ...
.text:004069AD		       mov     dword ptr [esp+0Ch], offset aMembNull ; "memb!=NULL"
.text:004069B5		       mov     [esp+0Ch+var_4],	offset aDouble_linked_ ; "double_linked_list_test"
.text:004069BD		       mov     [esp+0Ch+var_8],	2A1h
.text:004069C5		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:004069CC		       call    __assert_func
.text:004069D1
.text:004069D1 loc_4069D1:			       ; CODE XREF: sub_4059BC+C3Fj
.text:004069D1		       mov     [ebp+var_1F60], eax
.text:004069D7		       mov     edx, eax
.text:004069D9		       jmp     loc_4065F6
.text:004069DE ; ---------------------------------------------------------------------------
.text:004069DE
.text:004069DE loc_4069DE:			       ; CODE XREF: sub_4059BC+BE1j
.text:004069DE		       mov     [ebp+var_1F60], eax
.text:004069E4		       mov     edx, eax
.text:004069E6		       jmp     loc_406598
.text:004069EB ; ---------------------------------------------------------------------------
.text:004069EB
.text:004069EB loc_4069EB:			       ; CODE XREF: sub_4059BC+B91j
.text:004069EB		       mov     [ebp+var_1F60], eax
.text:004069F1		       mov     edx, eax
.text:004069F3		       jmp     loc_406548
.text:004069F8 ; ---------------------------------------------------------------------------
.text:004069F8
.text:004069F8 loc_4069F8:			       ; CODE XREF: sub_4059BC+FD3j
.text:004069F8					       ; sub_4059BC+FEFj
.text:004069F8		       add     esp, 21BCh
.text:004069FE		       pop     ebx
.text:004069FF		       pop     esi
.text:00406A00		       pop     edi
.text:00406A01		       pop     ebp
.text:00406A02		       retn
.text:00406A02 sub_4059BC      endp ; sp-analysis failed
.text:00406A02
.text:00406A03
.text:00406A03 ; =============== S U B R O U T I N E =======================================
.text:00406A03
.text:00406A03 ; Attributes: bp-based frame
.text:00406A03
.text:00406A03 sub_406A03      proc near	       ; CODE XREF: sub_408128+50p
.text:00406A03
.text:00406A03 var_2330	       = dword ptr -2330h
.text:00406A03 var_232C	       = dword ptr -232Ch
.text:00406A03 var_2328	       = dword ptr -2328h
.text:00406A03 var_2324	       = dword ptr -2324h
.text:00406A03 var_2320	       = dword ptr -2320h
.text:00406A03 var_2318	       = dword ptr -2318h
.text:00406A03 var_2218	       = dword ptr -2218h
.text:00406A03 var_2118	       = byte ptr -2118h
.text:00406A03 var_20F8	       = dword ptr -20F8h
.text:00406A03 var_20F4	       = dword ptr -20F4h
.text:00406A03 var_20DC	       = byte ptr -20DCh
.text:00406A03 var_1F4C	       = dword ptr -1F4Ch
.text:00406A03 var_FAC	       = dword ptr -0FACh
.text:00406A03 var_FA8	       = byte ptr -0FA8h
.text:00406A03 var_C	       = dword ptr -0Ch
.text:00406A03 var_8	       = dword ptr -8
.text:00406A03 var_4	       = dword ptr -4
.text:00406A03
.text:00406A03		       push    ebp
.text:00406A04		       mov     ebp, esp
.text:00406A06		       push    edi
.text:00406A07		       push    esi
.text:00406A08		       push    ebx
.text:00406A09		       mov     eax, 233Ch
.text:00406A0E		       call    sub_4081C0
.text:00406A13		       call    sub_40415C
.text:00406A18		       lea     eax, [ebp+var_20DC]
.text:00406A1E		       mov     [esp+0Ch+var_C],	eax
.text:00406A21		       call    sub_40281E
.text:00406A26		       mov     esi, 0
.text:00406A2B		       lea     edi, [ebp+var_FAC]
.text:00406A31
.text:00406A31 loc_406A31:			       ; CODE XREF: sub_406A03+6Cj
.text:00406A31		       mov     ebx, offset dword_40D060
.text:00406A36		       mov     eax, [ebx+esi*4]
.text:00406A39		       mov     [edi+esi*4], eax
.text:00406A3C		       mov     [ebp+esi*4+var_1F4C], esi
.text:00406A43		       mov     [esp+0Ch+var_C],	18h
.text:00406A4A		       call    malloc
.text:00406A4F		       mov     edx, [ebx+esi*4]
.text:00406A52		       mov     [eax], edx
.text:00406A54		       mov     [esp+0Ch+var_8],	eax
.text:00406A58		       lea     eax, [ebp+var_20DC]
.text:00406A5E		       mov     [esp+0Ch+var_C],	eax
.text:00406A61		       call    sub_40283A
.text:00406A66		       add     esi, 1
.text:00406A69		       cmp     esi, 3E8h
.text:00406A6F		       jnz     short loc_406A31
.text:00406A71		       lea     eax, [ebp+var_20DC]
.text:00406A77		       mov     [esp+0Ch+var_C],	eax
.text:00406A7A		       call    sub_404074
.text:00406A7F		       mov     [ebp+var_2218], 0
.text:00406A89		       mov     [ebp+var_2318], 3E8h
.text:00406A93		       mov     [ebp+var_2328], 1
.text:00406A9D
.text:00406A9D loc_406A9D:			       ; CODE XREF: sub_406A03+2CDj
.text:00406A9D		       sub     [ebp+var_2328], 1
.text:00406AA4		       mov     eax, [ebp+var_2328]
.text:00406AAA		       mov     edi, [ebp+eax*4+var_2218]
.text:00406AB1		       mov     edx, [ebp+eax*4+var_2318]
.text:00406AB8		       mov     [ebp+var_2324], edx
.text:00406ABE		       jmp     loc_406C6D
.text:00406AC3 ; ---------------------------------------------------------------------------
.text:00406AC3
.text:00406AC3 loc_406AC3:			       ; CODE XREF: sub_406A03+275j
.text:00406AC3		       lea     ecx, [edi+1]
.text:00406AC6		       mov     ebx, [ebp+var_2324]
.text:00406ACC		       sub     ebx, 1
.text:00406ACF		       cmp     ecx, ebx
.text:00406AD1		       jl      loc_406BCD
.text:00406AD7		       jmp     loc_406BF5
.text:00406ADC ; ---------------------------------------------------------------------------
.text:00406ADC
.text:00406ADC loc_406ADC:			       ; CODE XREF: sub_406A03+E7j
.text:00406ADC					       ; sub_406A03+1E7j
.text:00406ADC		       add     ecx, 1
.text:00406ADF		       cmp     ecx, ebx
.text:00406AE1		       jg      short loc_406AEE
.text:00406AE3		       mov     eax, [edx]
.text:00406AE5		       add     edx, 4
.text:00406AE8		       cmp     eax, esi
.text:00406AEA		       jle     short loc_406ADC
.text:00406AEC		       jmp     short loc_406B39
.text:00406AEE ; ---------------------------------------------------------------------------
.text:00406AEE
.text:00406AEE loc_406AEE:			       ; CODE XREF: sub_406A03+DEj
.text:00406AEE					       ; sub_406A03+1CCj
.text:00406AEE		       mov     edx, [ebp+ebx*4+var_FAC]
.text:00406AF5		       mov     eax, [ebp+edi*4+var_FAC]
.text:00406AFC		       mov     [ebp+ebx*4+var_FAC], eax
.text:00406B03		       mov     [ebp+edi*4+var_FAC], edx
.text:00406B0A		       mov     edx, [ebp+ebx*4+var_1F4C]
.text:00406B11		       mov     eax, [ebp+edi*4+var_1F4C]
.text:00406B18		       mov     [ebp+ebx*4+var_1F4C], eax
.text:00406B1F		       mov     [ebp+edi*4+var_1F4C], edx
.text:00406B26		       mov     ecx, ebx
.text:00406B28		       jmp     loc_406BF5
.text:00406B2D ; ---------------------------------------------------------------------------
.text:00406B2D
.text:00406B2D loc_406B2D:			       ; CODE XREF: sub_406A03+141j
.text:00406B2D		       sub     ebx, 1
.text:00406B30		       sub     eax, 4
.text:00406B33		       cmp     ebx, ecx
.text:00406B35		       jge     short loc_406B40
.text:00406B37		       jmp     short loc_406B48
.text:00406B39 ; ---------------------------------------------------------------------------
.text:00406B39
.text:00406B39 loc_406B39:			       ; CODE XREF: sub_406A03+E9j
.text:00406B39					       ; sub_406A03+1EDj
.text:00406B39		       lea     eax, [ebp+ebx*4+var_FAC]
.text:00406B40
.text:00406B40 loc_406B40:			       ; CODE XREF: sub_406A03+132j
.text:00406B40		       mov     edx, [eax]
.text:00406B42		       cmp     edx, esi
.text:00406B44		       jge     short loc_406B2D
.text:00406B46		       jmp     short loc_406B7D
.text:00406B48 ; ---------------------------------------------------------------------------
.text:00406B48
.text:00406B48 loc_406B48:			       ; CODE XREF: sub_406A03+134j
.text:00406B48		       mov     eax, [ebp+ebx*4+var_FAC]
.text:00406B4F		       mov     [ebp+ebx*4+var_FAC], esi
.text:00406B56		       mov     [ebp+edi*4+var_FAC], eax
.text:00406B5D		       mov     edx, [ebp+ebx*4+var_1F4C]
.text:00406B64		       mov     eax, [ebp+edi*4+var_1F4C]
.text:00406B6B		       mov     [ebp+ebx*4+var_1F4C], eax
.text:00406B72		       mov     [ebp+edi*4+var_1F4C], edx
.text:00406B79		       mov     ecx, ebx
.text:00406B7B		       jmp     short loc_406BF5
.text:00406B7D ; ---------------------------------------------------------------------------
.text:00406B7D
.text:00406B7D loc_406B7D:			       ; CODE XREF: sub_406A03+143j
.text:00406B7D		       cmp     ebx, ecx
.text:00406B7F		       jle     short loc_406BF5
.text:00406B81		       mov     eax, [ebp+ecx*4+var_FAC]
.text:00406B88		       mov     [ebp+ecx*4+var_FAC], edx
.text:00406B8F		       mov     [ebp+ebx*4+var_FAC], eax
.text:00406B96		       mov     edx, [ebp+ecx*4+var_1F4C]
.text:00406B9D		       mov     eax, [ebp+ebx*4+var_1F4C]
.text:00406BA4		       mov     [ebp+ecx*4+var_1F4C], eax
.text:00406BAB		       mov     [ebp+ebx*4+var_1F4C], edx
.text:00406BB2		       lea     eax, [ecx+2]
.text:00406BB5		       cmp     ebx, eax
.text:00406BB7		       jle     short loc_406BC5
.text:00406BB9		       add     ecx, 1
.text:00406BBC		       lea     ebx, [ebx-1]
.text:00406BBF		       cmp     ecx, ebx
.text:00406BC1		       jl      short loc_406BCD
.text:00406BC3		       jmp     short loc_406BF5
.text:00406BC5 ; ---------------------------------------------------------------------------
.text:00406BC5
.text:00406BC5 loc_406BC5:			       ; CODE XREF: sub_406A03+1B4j
.text:00406BC5		       lea     eax, [ecx+1]
.text:00406BC8		       cmp     ebx, eax
.text:00406BCA		       cmovg   ecx, eax
.text:00406BCD
.text:00406BCD loc_406BCD:			       ; CODE XREF: sub_406A03+CEj
.text:00406BCD					       ; sub_406A03+1BEj
.text:00406BCD		       cmp     ebx, ecx
.text:00406BCF		       jl      loc_406AEE
.text:00406BD5		       mov     esi, [ebp+edi*4+var_FAC]
.text:00406BDC		       lea     edx, [ebp+ecx*4+var_FA8]
.text:00406BE3		       cmp     [ebp+ecx*4+var_FAC], esi
.text:00406BEA		       jle     loc_406ADC
.text:00406BF0		       jmp     loc_406B39
.text:00406BF5 ; ---------------------------------------------------------------------------
.text:00406BF5
.text:00406BF5 loc_406BF5:			       ; CODE XREF: sub_406A03+D4j
.text:00406BF5					       ; sub_406A03+125j ...
.text:00406BF5		       mov     edx, ecx
.text:00406BF7		       sub     edx, edi
.text:00406BF9		       cmp     edx, 1
.text:00406BFC		       jle     short loc_406C6A
.text:00406BFE		       mov     eax, [ebp+var_2324]
.text:00406C04		       sub     eax, ebx
.text:00406C06		       cmp     eax, 1
.text:00406C09		       jg      short loc_406C13
.text:00406C0B		       mov     [ebp+var_2324], ecx
.text:00406C11		       jmp     short loc_406C6D
.text:00406C13 ; ---------------------------------------------------------------------------
.text:00406C13
.text:00406C13 loc_406C13:			       ; CODE XREF: sub_406A03+206j
.text:00406C13		       sub     eax, 1
.text:00406C16		       cmp     edx, eax
.text:00406C18		       jge     short loc_406C48
.text:00406C1A		       lea     eax, [ebx+1]
.text:00406C1D		       mov     edx, [ebp+var_2328]
.text:00406C23		       mov     [ebp+edx*4+var_2218], eax
.text:00406C2A		       mov     eax, [ebp+var_2324]
.text:00406C30		       mov     [ebp+edx*4+var_2318], eax
.text:00406C37		       add     edx, 1
.text:00406C3A		       mov     [ebp+var_2328], edx
.text:00406C40		       mov     [ebp+var_2324], ecx
.text:00406C46		       jmp     short loc_406C6D
.text:00406C48 ; ---------------------------------------------------------------------------
.text:00406C48
.text:00406C48 loc_406C48:			       ; CODE XREF: sub_406A03+215j
.text:00406C48		       mov     edx, [ebp+var_2328]
.text:00406C4E		       mov     [ebp+edx*4+var_2218], edi
.text:00406C55		       mov     [ebp+edx*4+var_2318], ecx
.text:00406C5C		       add     edx, 1
.text:00406C5F		       mov     [ebp+var_2328], edx
.text:00406C65		       lea     edi, [ebx+1]
.text:00406C68		       jmp     short loc_406C6D
.text:00406C6A ; ---------------------------------------------------------------------------
.text:00406C6A
.text:00406C6A loc_406C6A:			       ; CODE XREF: sub_406A03+1F9j
.text:00406C6A		       lea     edi, [ebx+1]
.text:00406C6D
.text:00406C6D loc_406C6D:			       ; CODE XREF: sub_406A03+BBj
.text:00406C6D					       ; sub_406A03+20Ej ...
.text:00406C6D		       mov     eax, [ebp+var_2324]
.text:00406C73		       sub     eax, edi
.text:00406C75		       cmp     eax, 2
.text:00406C78		       jg      loc_406AC3
.text:00406C7E		       mov     ebx, [ebp+var_2328]
.text:00406C84		       cmp     eax, 2
.text:00406C87		       jnz     short loc_406CCE
.text:00406C89		       mov     edx, [ebp+edi*4+var_FAC]
.text:00406C90		       mov     ecx, [ebp+var_2324]
.text:00406C96		       sub     ecx, 1
.text:00406C99		       mov     eax, [ebp+ecx*4+var_FAC]
.text:00406CA0		       cmp     edx, eax
.text:00406CA2		       jle     short loc_406CCE
.text:00406CA4		       mov     [ebp+edi*4+var_FAC], eax
.text:00406CAB		       mov     [ebp+ecx*4+var_FAC], edx
.text:00406CB2		       mov     edx, [ebp+edi*4+var_1F4C]
.text:00406CB9		       mov     eax, [ebp+ecx*4+var_1F4C]
.text:00406CC0		       mov     [ebp+edi*4+var_1F4C], eax
.text:00406CC7		       mov     [ebp+ecx*4+var_1F4C], edx
.text:00406CCE
.text:00406CCE loc_406CCE:			       ; CODE XREF: sub_406A03+284j
.text:00406CCE					       ; sub_406A03+29Fj
.text:00406CCE		       test    ebx, ebx
.text:00406CD0		       jg      loc_406A9D
.text:00406CD6		       mov     ebx, 0
.text:00406CDB		       lea     edi, [ebp+var_20F4]
.text:00406CE1
.text:00406CE1 loc_406CE1:			       ; CODE XREF: sub_406A03+3EBj
.text:00406CE1		       mov     eax, ds:dword_40D060[ebx*4]
.text:00406CE8		       mov     [ebp+var_20F4], eax
.text:00406CEE		       mov     [esp+0Ch+var_8],	edi
.text:00406CF2		       lea     eax, [ebp+var_20DC]
.text:00406CF8		       mov     [esp+0Ch+var_C],	eax
.text:00406CFB		       call    sub_40293C
.text:00406D00		       test    eax, eax
.text:00406D02		       jnz     short loc_406D28
.text:00406D04		       mov     dword ptr [esp+0Ch], offset aMembNull_0 ; "memb != NULL"
.text:00406D0C		       mov     [esp+0Ch+var_4],	offset aHashed_list_te ; "hashed_list_test"
.text:00406D14		       mov     [esp+0Ch+var_8],	203h
.text:00406D1C		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00406D23		       call    __assert_func
.text:00406D28
.text:00406D28 loc_406D28:			       ; CODE XREF: sub_406A03+2FFj
.text:00406D28		       mov     [esp+0Ch+var_8],	eax
.text:00406D2C		       lea     edx, [ebp+var_20DC]
.text:00406D32		       mov     [esp+0Ch+var_C],	edx
.text:00406D35		       call    sub_4028FF
.text:00406D3A		       test    eax, eax
.text:00406D3C		       jnz     short loc_406D62
.text:00406D3E		       mov     dword ptr [esp+0Ch], offset aSglib_hashed_s ; "sglib_hashed_SimpleList_is_member(htab,"...
.text:00406D46		       mov     [esp+0Ch+var_4],	offset aHashed_list_te ; "hashed_list_test"
.text:00406D4E		       mov     [esp+0Ch+var_8],	204h
.text:00406D56		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00406D5D		       call    __assert_func
.text:00406D62
.text:00406D62 loc_406D62:			       ; CODE XREF: sub_406A03+339j
.text:00406D62		       mov     eax, ds:dword_40D060[ebx*4]
.text:00406D69		       not     eax
.text:00406D6B		       mov     [ebp+var_20F4], eax
.text:00406D71		       mov     [esp+0Ch+var_8],	edi
.text:00406D75		       lea     eax, [ebp+var_20DC]
.text:00406D7B		       mov     [esp+0Ch+var_C],	eax
.text:00406D7E		       call    sub_40293C
.text:00406D83		       test    eax, eax
.text:00406D85		       jz      short loc_406DAB
.text:00406D87		       mov     dword ptr [esp+0Ch], offset aSglib_hashed_0 ; "sglib_hashed_SimpleList_find_member(hta"...
.text:00406D8F		       mov     [esp+0Ch+var_4],	offset aHashed_list_te ; "hashed_list_test"
.text:00406D97		       mov     [esp+0Ch+var_8],	206h
.text:00406D9F		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00406DA6		       call    __assert_func
.text:00406DAB
.text:00406DAB loc_406DAB:			       ; CODE XREF: sub_406A03+382j
.text:00406DAB		       mov     [esp+0Ch+var_8],	edi
.text:00406DAF		       lea     edx, [ebp+var_20DC]
.text:00406DB5		       mov     [esp+0Ch+var_C],	edx
.text:00406DB8		       call    sub_4028FF
.text:00406DBD		       test    eax, eax
.text:00406DBF		       jz      short loc_406DE5
.text:00406DC1		       mov     dword ptr [esp+0Ch], offset aSglib_hashed_1 ; "sglib_hashed_SimpleList_is_member(htab,"...
.text:00406DC9		       mov     [esp+0Ch+var_4],	offset aHashed_list_te ; "hashed_list_test"
.text:00406DD1		       mov     [esp+0Ch+var_8],	207h
.text:00406DD9		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00406DE0		       call    __assert_func
.text:00406DE5
.text:00406DE5 loc_406DE5:			       ; CODE XREF: sub_406A03+3BCj
.text:00406DE5		       add     ebx, 1
.text:00406DE8		       cmp     ebx, 3E8h
.text:00406DEE		       jnz     loc_406CE1
.text:00406DF4		       lea     edi, [ebp+var_1F4C]
.text:00406DFA		       mov     esi, edi
.text:00406DFC
.text:00406DFC loc_406DFC:			       ; CODE XREF: sub_406A03+475j
.text:00406DFC		       mov     eax, [esi]
.text:00406DFE		       mov     eax, [ebp+eax*4+var_FAC]
.text:00406E05		       mov     [ebp+var_20F4], eax
.text:00406E0B		       lea     eax, [ebp+var_20F4]
.text:00406E11		       mov     [esp+0Ch+var_8],	eax
.text:00406E15		       lea     edx, [ebp+var_20DC]
.text:00406E1B		       mov     [esp+0Ch+var_C],	edx
.text:00406E1E		       call    sub_40293C
.text:00406E23		       mov     ebx, eax
.text:00406E25		       test    eax, eax
.text:00406E27		       jnz     short loc_406E4D
.text:00406E29		       mov     dword ptr [esp+0Ch], offset aMembNull ; "memb!=NULL"
.text:00406E31		       mov     [esp+0Ch+var_4],	offset aHashed_list_te ; "hashed_list_test"
.text:00406E39		       mov     [esp+0Ch+var_8],	20Dh
.text:00406E41		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00406E48		       call    __assert_func
.text:00406E4D
.text:00406E4D loc_406E4D:			       ; CODE XREF: sub_406A03+424j
.text:00406E4D		       mov     [esp+0Ch+var_8],	eax
.text:00406E51		       lea     eax, [ebp+var_20DC]
.text:00406E57		       mov     [esp+0Ch+var_C],	eax
.text:00406E5A		       call    sub_403B45
.text:00406E5F		       mov     [esp+0Ch+var_C],	ebx
.text:00406E62		       call    free
.text:00406E67		       add     esi, 4
.text:00406E6A		       lea     edx, [ebp+var_FAC]
.text:00406E70		       mov     [ebp+var_2330], edx
.text:00406E76		       cmp     esi, edx
.text:00406E78		       jnz     short loc_406DFC
.text:00406E7A		       mov     esi, 0
.text:00406E7F
.text:00406E7F loc_406E7F:			       ; CODE XREF: sub_406A03+4C4j
.text:00406E7F		       mov     [esp+0Ch+var_C],	18h
.text:00406E86		       call    malloc
.text:00406E8B		       mov     ebx, eax
.text:00406E8D		       mov     eax, ds:dword_40D060[esi*4]
.text:00406E94		       mov     [ebx], eax
.text:00406E96		       lea     eax, [ebp+var_20F8]
.text:00406E9C		       mov     [esp+0Ch+var_4],	eax
.text:00406EA0		       mov     [esp+0Ch+var_8],	ebx
.text:00406EA4		       lea     edx, [ebp+var_20DC]
.text:00406EAA		       mov     [esp+0Ch+var_C],	edx
.text:00406EAD		       call    sub_402877
.text:00406EB2		       test    eax, eax
.text:00406EB4		       jnz     short loc_406EBE
.text:00406EB6		       mov     [esp+0Ch+var_C],	ebx
.text:00406EB9		       call    free
.text:00406EBE
.text:00406EBE loc_406EBE:			       ; CODE XREF: sub_406A03+4B1j
.text:00406EBE		       add     esi, 1
.text:00406EC1		       cmp     esi, 3E8h
.text:00406EC7		       jnz     short loc_406E7F
.text:00406EC9		       lea     eax, [ebp+var_20DC]
.text:00406ECF		       mov     [esp+0Ch+var_C],	eax
.text:00406ED2		       call    sub_403FDE
.text:00406ED7		       mov     ebx, 0
.text:00406EDC		       lea     esi, [ebp+var_20F4]
.text:00406EE2
.text:00406EE2 loc_406EE2:			       ; CODE XREF: sub_406A03+52Fj
.text:00406EE2		       mov     eax, ds:dword_40D060[ebx*4]
.text:00406EE9		       mov     [ebp+var_20F4], eax
.text:00406EEF		       mov     [esp+0Ch+var_8],	esi
.text:00406EF3		       lea     eax, [ebp+var_20DC]
.text:00406EF9		       mov     [esp+0Ch+var_C],	eax
.text:00406EFC		       call    sub_40293C
.text:00406F01		       test    eax, eax
.text:00406F03		       jnz     short loc_406F29
.text:00406F05		       mov     dword ptr [esp+0Ch], offset aSglib_hashed_2 ; "sglib_hashed_SimpleList_find_member(hta"...
.text:00406F0D		       mov     [esp+0Ch+var_4],	offset aHashed_list_te ; "hashed_list_test"
.text:00406F15		       mov     [esp+0Ch+var_8],	222h
.text:00406F1D		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00406F24		       call    __assert_func
.text:00406F29
.text:00406F29 loc_406F29:			       ; CODE XREF: sub_406A03+500j
.text:00406F29		       add     ebx, 1
.text:00406F2C		       cmp     ebx, 3E8h
.text:00406F32		       jnz     short loc_406EE2
.text:00406F34		       lea     esi, [ebp+var_20F4]
.text:00406F3A
.text:00406F3A loc_406F3A:			       ; CODE XREF: sub_406A03+5B7j
.text:00406F3A		       mov     eax, [edi]
.text:00406F3C		       mov     eax, [ebp+eax*4+var_FAC]
.text:00406F43		       mov     [ebp+var_20F4], eax
.text:00406F49		       mov     [esp+0Ch+var_8],	esi
.text:00406F4D		       lea     edx, [ebp+var_20DC]
.text:00406F53		       mov     [esp+0Ch+var_C],	edx
.text:00406F56		       call    sub_40293C
.text:00406F5B		       mov     ebx, eax
.text:00406F5D		       lea     eax, [ebp+var_20F8]
.text:00406F63		       mov     [esp+0Ch+var_4],	eax
.text:00406F67		       mov     [esp+0Ch+var_8],	esi
.text:00406F6B		       lea     eax, [ebp+var_20DC]
.text:00406F71		       mov     [esp+0Ch+var_C],	eax
.text:00406F74		       call    sub_4028BB
.text:00406F79		       cmp     ebx, [ebp+var_20F8]
.text:00406F7F		       jz      short loc_406FA5
.text:00406F81		       mov     dword ptr [esp+0Ch], offset aMembMemb2 ;	"memb == memb2"
.text:00406F89		       mov     [esp+0Ch+var_4],	offset aHashed_list_te ; "hashed_list_test"
.text:00406F91		       mov     [esp+0Ch+var_8],	229h
.text:00406F99		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00406FA0		       call    __assert_func
.text:00406FA5
.text:00406FA5 loc_406FA5:			       ; CODE XREF: sub_406A03+57Cj
.text:00406FA5		       test    ebx, ebx
.text:00406FA7		       jz      short loc_406FB1
.text:00406FA9		       mov     [esp+0Ch+var_C],	ebx
.text:00406FAC		       call    free
.text:00406FB1
.text:00406FB1 loc_406FB1:			       ; CODE XREF: sub_406A03+5A4j
.text:00406FB1		       add     edi, 4
.text:00406FB4		       cmp     [ebp+var_2330], edi
.text:00406FBA		       jnz     loc_406F3A
.text:00406FC0		       lea     edi, [ebp+var_20DC]
.text:00406FC6		       mov     esi, 0
.text:00406FCB		       mov     [ebp+var_232C], 0
.text:00406FD5		       mov     edx, 0
.text:00406FDA
.text:00406FDA loc_406FDA:			       ; CODE XREF: sub_406A03+69Dj
.text:00406FDA		       mov     ebx, [edi]
.text:00406FDC		       test    ebx, ebx
.text:00406FDE		       jz      loc_40706D
.text:00406FE4
.text:00406FE4 loc_406FE4:			       ; CODE XREF: sub_406A03+665j
.text:00406FE4		       mov     eax, [ebx+4]
.text:00406FE7		       mov     [ebp+var_2320], eax
.text:00406FED		       test    esi, esi
.text:00406FEF		       jnz     short loc_40700B
.text:00406FF1		       lea     edx, [ebp+var_20DC]
.text:00406FF7		       mov     [esp+0Ch+var_8],	edx
.text:00406FFB		       lea     eax, [ebp+var_2118]
.text:00407001		       mov     [esp+0Ch+var_C],	eax
.text:00407004		       call    sub_402A3D
.text:00407009		       mov     edx, eax
.text:0040700B
.text:0040700B loc_40700B:			       ; CODE XREF: sub_406A03+5ECj
.text:0040700B		       cmp     edx, ebx
.text:0040700D		       jz      short loc_407033
.text:0040700F		       mov     dword ptr [esp+0Ch], offset aLl_current_ele ; "ll==_current_element_"
.text:00407017		       mov     [esp+0Ch+var_4],	offset aHashed_list_te ; "hashed_list_test"
.text:0040701F		       mov     [esp+0Ch+var_8],	236h
.text:00407027		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:0040702E		       call    __assert_func
.text:00407033
.text:00407033 loc_407033:			       ; CODE XREF: sub_406A03+60Aj
.text:00407033		       add     esi, 1
.text:00407036		       test    edx, edx
.text:00407038		       jz      short loc_407049
.text:0040703A		       cmp     dword ptr [edx],	5
.text:0040703D		       setz    al
.text:00407040		       movzx   eax, al
.text:00407043		       add     [ebp+var_232C], eax
.text:00407049
.text:00407049 loc_407049:			       ; CODE XREF: sub_406A03+635j
.text:00407049		       lea     edx, [ebp+var_2118]
.text:0040704F		       mov     [esp+0Ch+var_C],	edx
.text:00407052		       call    sub_40298C
.text:00407057		       mov     edx, eax
.text:00407059		       cmp     [ebp+var_2320], 0
.text:00407060		       jz      short loc_40706D
.text:00407062		       mov     ebx, [ebp+var_2320]
.text:00407068		       jmp     loc_406FE4
.text:0040706D ; ---------------------------------------------------------------------------
.text:0040706D
.text:0040706D loc_40706D:			       ; CODE XREF: sub_406A03+5DBj
.text:0040706D					       ; sub_406A03+65Dj
.text:0040706D		       test    edx, edx
.text:0040706F		       jz      short loc_407095
.text:00407071		       mov     dword ptr [esp+0Ch], offset aLlNull ; "ll==NULL"
.text:00407079		       mov     [esp+0Ch+var_4],	offset aHashed_list_te ; "hashed_list_test"
.text:00407081		       mov     [esp+0Ch+var_8],	237h
.text:00407089		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00407090		       call    __assert_func
.text:00407095
.text:00407095 loc_407095:			       ; CODE XREF: sub_406A03+66Cj
.text:00407095		       add     edi, 4
.text:00407098		       lea     eax, [ebp+var_1F4C]
.text:0040709E		       cmp     edi, eax
.text:004070A0		       jnz     loc_406FDA
.text:004070A6		       mov     [ebp+var_20F4], 5
.text:004070B0		       lea     eax, [ebp+var_20F4]
.text:004070B6		       mov     [esp+0Ch], eax
.text:004070BA		       mov     [esp+0Ch+var_4],	offset sub_4011A0
.text:004070C2		       lea     eax, [ebp+var_20DC]
.text:004070C8		       mov     [esp+0Ch+var_8],	eax
.text:004070CC		       lea     eax, [ebp+var_2118]
.text:004070D2		       mov     [esp+0Ch+var_C],	eax
.text:004070D5		       call    sub_4029F2
.text:004070DA		       mov     ebx, 0
.text:004070DF		       test    eax, eax
.text:004070E1		       jz      short loc_407132
.text:004070E3		       mov     ebx, 1
.text:004070E8		       lea     esi, [ebp+var_2118]
.text:004070EE		       cmp     dword ptr [eax],	5
.text:004070F1		       jz      short loc_407126
.text:004070F3		       jmp     short loc_407102
.text:004070F5 ; ---------------------------------------------------------------------------
.text:004070F5
.text:004070F5 loc_4070F5:			       ; CODE XREF: sub_406A03+72Dj
.text:004070F5		       cmp     dword ptr [eax],	5
.text:004070F8		       jnz     short loc_407102
.text:004070FA		       add     ebx, 1
.text:004070FD		       lea     esi, [esi+0]
.text:00407100		       jmp     short loc_407126
.text:00407102 ; ---------------------------------------------------------------------------
.text:00407102
.text:00407102 loc_407102:			       ; CODE XREF: sub_406A03+6F0j
.text:00407102					       ; sub_406A03+6F5j
.text:00407102		       mov     dword ptr [esp+0Ch], offset aLlNIterator_eq ; "ll->n == ITERATOR_EQ_CHECK_VALUE"
.text:0040710A		       mov     [esp+0Ch+var_4],	offset aHashed_list_te ; "hashed_list_test"
.text:00407112		       mov     [esp+0Ch+var_8],	240h
.text:0040711A		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00407121		       call    __assert_func
.text:00407126
.text:00407126 loc_407126:			       ; CODE XREF: sub_406A03+6EEj
.text:00407126					       ; sub_406A03+6FDj
.text:00407126		       mov     [esp+0Ch+var_C],	esi
.text:00407129		       call    sub_40298C
.text:0040712E		       test    eax, eax
.text:00407130		       jnz     short loc_4070F5
.text:00407132
.text:00407132 loc_407132:			       ; CODE XREF: sub_406A03+6DEj
.text:00407132		       cmp     ebx, [ebp+var_232C]
.text:00407138		       jz      short loc_40715E
.text:0040713A		       mov     dword ptr [esp+0Ch], offset aCcCc5 ; "cc	== cc5"
.text:00407142		       mov     [esp+0Ch+var_4],	offset aHashed_list_te ; "hashed_list_test"
.text:0040714A		       mov     [esp+0Ch+var_8],	242h
.text:00407152		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00407159		       call    __assert_func
.text:0040715E
.text:0040715E loc_40715E:			       ; CODE XREF: sub_406A03+735j
.text:0040715E		       lea     eax, [ebp+var_20DC]
.text:00407164		       mov     [esp+0Ch+var_8],	eax
.text:00407168		       lea     eax, [ebp+var_2118]
.text:0040716E		       mov     [esp+0Ch+var_C],	eax
.text:00407171		       call    sub_402A3D
.text:00407176		       test    eax, eax
.text:00407178		       jz      short loc_407194
.text:0040717A		       lea     ebx, [ebp+var_2118]
.text:00407180
.text:00407180 loc_407180:			       ; CODE XREF: sub_406A03+78Fj
.text:00407180		       mov     [esp+0Ch+var_C],	eax
.text:00407183		       call    free
.text:00407188		       mov     [esp+0Ch+var_C],	ebx
.text:0040718B		       call    sub_40298C
.text:00407190		       test    eax, eax
.text:00407192		       jnz     short loc_407180
.text:00407194
.text:00407194 loc_407194:			       ; CODE XREF: sub_406A03+775j
.text:00407194		       add     esp, 233Ch
.text:0040719A		       pop     ebx
.text:0040719B		       pop     esi
.text:0040719C		       pop     edi
.text:0040719D		       pop     ebp
.text:0040719E		       retn
.text:0040719E sub_406A03      endp ; sp-analysis failed
.text:0040719E
.text:0040719F
.text:0040719F ; =============== S U B R O U T I N E =======================================
.text:0040719F
.text:0040719F ; Attributes: bp-based frame
.text:0040719F
.text:0040719F sub_40719F      proc near	       ; CODE XREF: sub_408128+4Bp
.text:0040719F
.text:0040719F var_219C	       = dword ptr -219Ch
.text:0040719F var_2198	       = dword ptr -2198h
.text:0040719F var_2194	       = dword ptr -2194h
.text:0040719F var_2190	       = dword ptr -2190h
.text:0040719F var_2180	       = dword ptr -2180h
.text:0040719F var_2080	       = dword ptr -2080h
.text:0040719F var_1F80	       = byte ptr -1F80h
.text:0040719F var_1F70	       = dword ptr -1F70h
.text:0040719F var_1F6C	       = dword ptr -1F6Ch
.text:0040719F var_1F54	       = dword ptr -1F54h
.text:0040719F var_1F50	       = dword ptr -1F50h
.text:0040719F var_1F4C	       = dword ptr -1F4Ch
.text:0040719F var_FAC	       = dword ptr -0FACh
.text:0040719F var_FA8	       = byte ptr -0FA8h
.text:0040719F var_C	       = dword ptr -0Ch
.text:0040719F var_8	       = dword ptr -8
.text:0040719F var_4	       = dword ptr -4
.text:0040719F
.text:0040719F		       push    ebp
.text:004071A0		       mov     ebp, esp
.text:004071A2		       push    edi
.text:004071A3		       push    esi
.text:004071A4		       push    ebx
.text:004071A5		       mov     eax, 21ACh
.text:004071AA		       call    sub_4081C0
.text:004071AF		       call    sub_40415C
.text:004071B4		       mov     [ebp+var_1F50], 0
.text:004071BE		       mov     [ebp+var_1F54], 0
.text:004071C8		       mov     ebx, 0
.text:004071CD		       lea     edi, [ebp+var_1F50]
.text:004071D3
.text:004071D3 loc_4071D3:			       ; CODE XREF: sub_40719F+D2j
.text:004071D3		       mov     eax, [ebp+var_1F50]
.text:004071D9		       mov     [esp+0Ch+var_C],	eax
.text:004071DC		       call    sub_401435
.text:004071E1		       mov     esi, eax
.text:004071E3		       cmp     eax, ebx
.text:004071E5		       jz      short loc_40720B
.text:004071E7		       mov     dword ptr [esp+0Ch], offset aSglib_simple_0 ; "sglib_SimpleList_len(list) == i"
.text:004071EF		       mov     [esp+0Ch+var_4],	offset aList_test ; "list_test"
.text:004071F7		       mov     [esp+0Ch+var_8],	157h
.text:004071FF		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00407206		       call    __assert_func
.text:0040720B
.text:0040720B loc_40720B:			       ; CODE XREF: sub_40719F+46j
.text:0040720B		       mov     ebx, offset dword_40D060
.text:00407210		       mov     eax, [ebx+eax*4]
.text:00407213		       mov     [ebp+esi*4+var_FAC], eax
.text:0040721A		       mov     [ebp+esi*4+var_1F4C], esi
.text:00407221		       mov     [esp+0Ch+var_C],	18h
.text:00407228		       call    malloc
.text:0040722D		       mov     edx, [ebx+esi*4]
.text:00407230		       mov     [eax], edx
.text:00407232		       mov     [esp+0Ch+var_8],	eax
.text:00407236		       mov     [esp+0Ch+var_C],	edi
.text:00407239		       call    sub_401272
.text:0040723E		       mov     [esp+0Ch+var_C],	18h
.text:00407245		       call    malloc
.text:0040724A		       mov     edx, [ebx+esi*4]
.text:0040724D		       mov     [eax], edx
.text:0040724F		       mov     dword ptr [eax+4], 0
.text:00407256		       mov     [esp+0Ch+var_8],	eax
.text:0040725A		       lea     eax, [ebp+var_1F54]
.text:00407260		       mov     [esp+0Ch+var_C],	eax
.text:00407263		       call    sub_401284
.text:00407268		       lea     ebx, [esi+1]
.text:0040726B		       cmp     ebx, 3E7h
.text:00407271		       jle     loc_4071D3
.text:00407277		       mov     eax, [ebp+var_1F50]
.text:0040727D		       mov     [esp+0Ch+var_C],	eax
.text:00407280		       call    sub_4040BF
.text:00407285		       mov     eax, [ebp+var_1F54]
.text:0040728B		       mov     [esp+0Ch+var_C],	eax
.text:0040728E		       call    sub_4040BF
.text:00407293		       mov     edx, [ebp+var_1F54]
.text:00407299		       mov     ecx, 0
.text:0040729E		       mov     eax, 0
.text:004072A3		       test    edx, edx
.text:004072A5		       jz      short loc_4072B9
.text:004072A7
.text:004072A7 loc_4072A7:			       ; CODE XREF: sub_40719F+116j
.text:004072A7		       mov     eax, [edx+4]
.text:004072AA		       mov     [edx+4],	ecx
.text:004072AD		       test    eax, eax
.text:004072AF		       jz      short loc_4072B7
.text:004072B1		       mov     ecx, edx
.text:004072B3		       mov     edx, eax
.text:004072B5		       jmp     short loc_4072A7
.text:004072B7 ; ---------------------------------------------------------------------------
.text:004072B7
.text:004072B7 loc_4072B7:			       ; CODE XREF: sub_40719F+110j
.text:004072B7		       mov     eax, edx
.text:004072B9
.text:004072B9 loc_4072B9:			       ; CODE XREF: sub_40719F+106j
.text:004072B9		       mov     [ebp+var_1F54], eax
.text:004072BF		       mov     [esp+0Ch+var_8],	eax
.text:004072C3		       mov     eax, [ebp+var_1F50]
.text:004072C9		       mov     [esp+0Ch+var_C],	eax
.text:004072CC		       call    sub_402B0E
.text:004072D1		       mov     eax, [ebp+var_1F54]
.text:004072D7		       test    eax, eax
.text:004072D9		       jz      short loc_4072EE
.text:004072DB
.text:004072DB loc_4072DB:			       ; CODE XREF: sub_40719F+14Dj
.text:004072DB		       mov     ebx, [eax+4]
.text:004072DE		       mov     [esp+0Ch+var_C],	eax
.text:004072E1		       call    free
.text:004072E6		       test    ebx, ebx
.text:004072E8		       jz      short loc_4072EE
.text:004072EA		       mov     eax, ebx
.text:004072EC		       jmp     short loc_4072DB
.text:004072EE ; ---------------------------------------------------------------------------
.text:004072EE
.text:004072EE loc_4072EE:			       ; CODE XREF: sub_40719F+13Aj
.text:004072EE					       ; sub_40719F+149j
.text:004072EE		       mov     [ebp+var_2080], 0
.text:004072F8		       mov     [ebp+var_2180], 3E8h
.text:00407302		       mov     [ebp+var_2198], 1
.text:0040730C
.text:0040730C loc_40730C:			       ; CODE XREF: sub_40719F+3A0j
.text:0040730C		       sub     [ebp+var_2198], 1
.text:00407313		       mov     edx, [ebp+var_2198]
.text:00407319		       mov     edi, [ebp+edx*4+var_2080]
.text:00407320		       mov     eax, [ebp+edx*4+var_2180]
.text:00407327		       mov     [ebp+var_2194], eax
.text:0040732D		       jmp     loc_4074DC
.text:00407332 ; ---------------------------------------------------------------------------
.text:00407332
.text:00407332 loc_407332:			       ; CODE XREF: sub_40719F+348j
.text:00407332		       lea     ecx, [edi+1]
.text:00407335		       mov     ebx, [ebp+var_2194]
.text:0040733B		       sub     ebx, 1
.text:0040733E		       cmp     ecx, ebx
.text:00407340		       jl      loc_40743C
.text:00407346		       jmp     loc_407464
.text:0040734B ; ---------------------------------------------------------------------------
.text:0040734B
.text:0040734B loc_40734B:			       ; CODE XREF: sub_40719F+1BAj
.text:0040734B					       ; sub_40719F+2BAj
.text:0040734B		       add     ecx, 1
.text:0040734E		       cmp     ecx, ebx
.text:00407350		       jg      short loc_40735D
.text:00407352		       mov     eax, [edx]
.text:00407354		       add     edx, 4
.text:00407357		       cmp     eax, esi
.text:00407359		       jle     short loc_40734B
.text:0040735B		       jmp     short loc_4073A8
.text:0040735D ; ---------------------------------------------------------------------------
.text:0040735D
.text:0040735D loc_40735D:			       ; CODE XREF: sub_40719F+1B1j
.text:0040735D					       ; sub_40719F+29Fj
.text:0040735D		       mov     edx, [ebp+ebx*4+var_FAC]
.text:00407364		       mov     eax, [ebp+edi*4+var_FAC]
.text:0040736B		       mov     [ebp+ebx*4+var_FAC], eax
.text:00407372		       mov     [ebp+edi*4+var_FAC], edx
.text:00407379		       mov     edx, [ebp+ebx*4+var_1F4C]
.text:00407380		       mov     eax, [ebp+edi*4+var_1F4C]
.text:00407387		       mov     [ebp+ebx*4+var_1F4C], eax
.text:0040738E		       mov     [ebp+edi*4+var_1F4C], edx
.text:00407395		       mov     ecx, ebx
.text:00407397		       jmp     loc_407464
.text:0040739C ; ---------------------------------------------------------------------------
.text:0040739C
.text:0040739C loc_40739C:			       ; CODE XREF: sub_40719F+214j
.text:0040739C		       sub     ebx, 1
.text:0040739F		       sub     eax, 4
.text:004073A2		       cmp     ebx, ecx
.text:004073A4		       jge     short loc_4073AF
.text:004073A6		       jmp     short loc_4073B7
.text:004073A8 ; ---------------------------------------------------------------------------
.text:004073A8
.text:004073A8 loc_4073A8:			       ; CODE XREF: sub_40719F+1BCj
.text:004073A8					       ; sub_40719F+2C0j
.text:004073A8		       lea     eax, [ebp+ebx*4+var_FAC]
.text:004073AF
.text:004073AF loc_4073AF:			       ; CODE XREF: sub_40719F+205j
.text:004073AF		       mov     edx, [eax]
.text:004073B1		       cmp     edx, esi
.text:004073B3		       jge     short loc_40739C
.text:004073B5		       jmp     short loc_4073EC
.text:004073B7 ; ---------------------------------------------------------------------------
.text:004073B7
.text:004073B7 loc_4073B7:			       ; CODE XREF: sub_40719F+207j
.text:004073B7		       mov     eax, [ebp+ebx*4+var_FAC]
.text:004073BE		       mov     [ebp+ebx*4+var_FAC], esi
.text:004073C5		       mov     [ebp+edi*4+var_FAC], eax
.text:004073CC		       mov     edx, [ebp+ebx*4+var_1F4C]
.text:004073D3		       mov     eax, [ebp+edi*4+var_1F4C]
.text:004073DA		       mov     [ebp+ebx*4+var_1F4C], eax
.text:004073E1		       mov     [ebp+edi*4+var_1F4C], edx
.text:004073E8		       mov     ecx, ebx
.text:004073EA		       jmp     short loc_407464
.text:004073EC ; ---------------------------------------------------------------------------
.text:004073EC
.text:004073EC loc_4073EC:			       ; CODE XREF: sub_40719F+216j
.text:004073EC		       cmp     ebx, ecx
.text:004073EE		       jle     short loc_407464
.text:004073F0		       mov     eax, [ebp+ecx*4+var_FAC]
.text:004073F7		       mov     [ebp+ecx*4+var_FAC], edx
.text:004073FE		       mov     [ebp+ebx*4+var_FAC], eax
.text:00407405		       mov     edx, [ebp+ecx*4+var_1F4C]
.text:0040740C		       mov     eax, [ebp+ebx*4+var_1F4C]
.text:00407413		       mov     [ebp+ecx*4+var_1F4C], eax
.text:0040741A		       mov     [ebp+ebx*4+var_1F4C], edx
.text:00407421		       lea     eax, [ecx+2]
.text:00407424		       cmp     eax, ebx
.text:00407426		       jge     short loc_407434
.text:00407428		       add     ecx, 1
.text:0040742B		       lea     ebx, [ebx-1]
.text:0040742E		       cmp     ecx, ebx
.text:00407430		       jl      short loc_40743C
.text:00407432		       jmp     short loc_407464
.text:00407434 ; ---------------------------------------------------------------------------
.text:00407434
.text:00407434 loc_407434:			       ; CODE XREF: sub_40719F+287j
.text:00407434		       lea     eax, [ecx+1]
.text:00407437		       cmp     eax, ebx
.text:00407439		       cmovl   ecx, eax
.text:0040743C
.text:0040743C loc_40743C:			       ; CODE XREF: sub_40719F+1A1j
.text:0040743C					       ; sub_40719F+291j
.text:0040743C		       cmp     ebx, ecx
.text:0040743E		       jl      loc_40735D
.text:00407444		       mov     esi, [ebp+edi*4+var_FAC]
.text:0040744B		       lea     edx, [ebp+ecx*4+var_FA8]
.text:00407452		       cmp     [ebp+ecx*4+var_FAC], esi
.text:00407459		       jle     loc_40734B
.text:0040745F		       jmp     loc_4073A8
.text:00407464 ; ---------------------------------------------------------------------------
.text:00407464
.text:00407464 loc_407464:			       ; CODE XREF: sub_40719F+1A7j
.text:00407464					       ; sub_40719F+1F8j ...
.text:00407464		       mov     edx, ecx
.text:00407466		       sub     edx, edi
.text:00407468		       cmp     edx, 1
.text:0040746B		       jle     short loc_4074D9
.text:0040746D		       mov     eax, [ebp+var_2194]
.text:00407473		       sub     eax, ebx
.text:00407475		       cmp     eax, 1
.text:00407478		       jg      short loc_407482
.text:0040747A		       mov     [ebp+var_2194], ecx
.text:00407480		       jmp     short loc_4074DC
.text:00407482 ; ---------------------------------------------------------------------------
.text:00407482
.text:00407482 loc_407482:			       ; CODE XREF: sub_40719F+2D9j
.text:00407482		       sub     eax, 1
.text:00407485		       cmp     edx, eax
.text:00407487		       jge     short loc_4074B7
.text:00407489		       lea     eax, [ebx+1]
.text:0040748C		       mov     edx, [ebp+var_2198]
.text:00407492		       mov     [ebp+edx*4+var_2080], eax
.text:00407499		       mov     eax, [ebp+var_2194]
.text:0040749F		       mov     [ebp+edx*4+var_2180], eax
.text:004074A6		       add     edx, 1
.text:004074A9		       mov     [ebp+var_2198], edx
.text:004074AF		       mov     [ebp+var_2194], ecx
.text:004074B5		       jmp     short loc_4074DC
.text:004074B7 ; ---------------------------------------------------------------------------
.text:004074B7
.text:004074B7 loc_4074B7:			       ; CODE XREF: sub_40719F+2E8j
.text:004074B7		       mov     edx, [ebp+var_2198]
.text:004074BD		       mov     [ebp+edx*4+var_2080], edi
.text:004074C4		       mov     [ebp+edx*4+var_2180], ecx
.text:004074CB		       add     edx, 1
.text:004074CE		       mov     [ebp+var_2198], edx
.text:004074D4		       lea     edi, [ebx+1]
.text:004074D7		       jmp     short loc_4074DC
.text:004074D9 ; ---------------------------------------------------------------------------
.text:004074D9
.text:004074D9 loc_4074D9:			       ; CODE XREF: sub_40719F+2CCj
.text:004074D9		       lea     edi, [ebx+1]
.text:004074DC
.text:004074DC loc_4074DC:			       ; CODE XREF: sub_40719F+18Ej
.text:004074DC					       ; sub_40719F+2E1j ...
.text:004074DC		       mov     eax, [ebp+var_2194]
.text:004074E2		       sub     eax, edi
.text:004074E4		       cmp     eax, 2
.text:004074E7		       jg      loc_407332
.text:004074ED		       mov     ebx, [ebp+var_2198]
.text:004074F3		       cmp     eax, 2
.text:004074F6		       jnz     short loc_40753D
.text:004074F8		       mov     edx, [ebp+edi*4+var_FAC]
.text:004074FF		       mov     ecx, [ebp+var_2194]
.text:00407505		       sub     ecx, 1
.text:00407508		       mov     eax, [ebp+ecx*4+var_FAC]
.text:0040750F		       cmp     edx, eax
.text:00407511		       jle     short loc_40753D
.text:00407513		       mov     [ebp+edi*4+var_FAC], eax
.text:0040751A		       mov     [ebp+ecx*4+var_FAC], edx
.text:00407521		       mov     edx, [ebp+edi*4+var_1F4C]
.text:00407528		       mov     eax, [ebp+ecx*4+var_1F4C]
.text:0040752F		       mov     [ebp+edi*4+var_1F4C], eax
.text:00407536		       mov     [ebp+ecx*4+var_1F4C], edx
.text:0040753D
.text:0040753D loc_40753D:			       ; CODE XREF: sub_40719F+357j
.text:0040753D					       ; sub_40719F+372j
.text:0040753D		       test    ebx, ebx
.text:0040753F		       jg      loc_40730C
.text:00407545		       mov     ebx, 0
.text:0040754A		       mov     edi, offset dword_40D060
.text:0040754F
.text:0040754F loc_40754F:			       ; CODE XREF: sub_40719F+44Dj
.text:0040754F		       mov     eax, [edi+ebx*4]
.text:00407552		       mov     [ebp+var_1F6C], eax
.text:00407558		       lea     eax, [ebp+var_1F6C]
.text:0040755E		       mov     [esp+0Ch+var_8],	eax
.text:00407562		       mov     eax, [ebp+var_1F50]
.text:00407568		       mov     [esp+0Ch+var_C],	eax
.text:0040756B		       call    sub_4011E5
.text:00407570		       test    eax, eax
.text:00407572		       jnz     short loc_407598
.text:00407574		       mov     dword ptr [esp+0Ch], offset aSglib_simple_1 ; "sglib_SimpleList_find_member(list, &te)"...
.text:0040757C		       mov     [esp+0Ch+var_4],	offset aList_test ; "list_test"
.text:00407584		       mov     [esp+0Ch+var_8],	176h
.text:0040758C		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00407593		       call    __assert_func
.text:00407598
.text:00407598 loc_407598:			       ; CODE XREF: sub_40719F+3D3j
.text:00407598		       mov     eax, [edi+ebx*4]
.text:0040759B		       not     eax
.text:0040759D		       mov     [ebp+var_1F6C], eax
.text:004075A3		       lea     edx, [ebp+var_1F6C]
.text:004075A9		       mov     [esp+0Ch+var_8],	edx
.text:004075AD		       mov     eax, [ebp+var_1F50]
.text:004075B3		       mov     [esp+0Ch+var_C],	eax
.text:004075B6		       call    sub_4011E5
.text:004075BB		       test    eax, eax
.text:004075BD		       jz      short loc_4075E3
.text:004075BF		       mov     dword ptr [esp+0Ch], offset aSglib_simple_2 ; "sglib_SimpleList_find_member(list, &te)"...
.text:004075C7		       mov     [esp+0Ch+var_4],	offset aList_test ; "list_test"
.text:004075CF		       mov     [esp+0Ch+var_8],	178h
.text:004075D7		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:004075DE		       call    __assert_func
.text:004075E3
.text:004075E3 loc_4075E3:			       ; CODE XREF: sub_40719F+41Ej
.text:004075E3		       add     ebx, 1
.text:004075E6		       cmp     ebx, 3E8h
.text:004075EC		       jnz     loc_40754F
.text:004075F2		       mov     eax, [ebp+var_1F50]
.text:004075F8		       test    eax, eax
.text:004075FA		       jz      short loc_407641
.text:004075FC
.text:004075FC loc_4075FC:			       ; CODE XREF: sub_40719F+4A0j
.text:004075FC		       mov     ebx, [eax+4]
.text:004075FF		       mov     [esp+0Ch+var_8],	eax
.text:00407603		       mov     eax, [ebp+var_1F50]
.text:00407609		       mov     [esp+0Ch+var_C],	eax
.text:0040760C		       call    sub_4011B9
.text:00407611		       test    eax, eax
.text:00407613		       jnz     short loc_407639
.text:00407615		       mov     dword ptr [esp+0Ch], offset aSglib_simple_3 ; "sglib_SimpleList_is_member(list, _curre"...
.text:0040761D		       mov     [esp+0Ch+var_4],	offset aList_test ; "list_test"
.text:00407625		       mov     [esp+0Ch+var_8],	17Dh
.text:0040762D		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00407634		       call    __assert_func
.text:00407639
.text:00407639 loc_407639:			       ; CODE XREF: sub_40719F+474j
.text:00407639		       test    ebx, ebx
.text:0040763B		       jz      short loc_407641
.text:0040763D		       mov     eax, ebx
.text:0040763F		       jmp     short loc_4075FC
.text:00407641 ; ---------------------------------------------------------------------------
.text:00407641
.text:00407641 loc_407641:			       ; CODE XREF: sub_40719F+45Bj
.text:00407641					       ; sub_40719F+49Cj
.text:00407641		       lea     eax, [ebp+var_1F6C]
.text:00407647		       mov     [esp+0Ch+var_8],	eax
.text:0040764B		       mov     eax, [ebp+var_1F50]
.text:00407651		       mov     [esp+0Ch+var_C],	eax
.text:00407654		       call    sub_4011B9
.text:00407659		       test    eax, eax
.text:0040765B		       jz      short loc_407681
.text:0040765D		       mov     dword ptr [esp+0Ch], offset aSglib_simple_4 ; "!	sglib_SimpleList_is_member(list, &te)"...
.text:00407665		       mov     [esp+0Ch+var_4],	offset aList_test ; "list_test"
.text:0040766D		       mov     [esp+0Ch+var_8],	17Eh
.text:00407675		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:0040767C		       call    __assert_func
.text:00407681
.text:00407681 loc_407681:			       ; CODE XREF: sub_40719F+4BCj
.text:00407681		       lea     edi, [ebp+var_1F4C]
.text:00407687		       mov     [ebp+var_2190], edi
.text:0040768D		       lea     esi, [ebp+var_1F6C]
.text:00407693
.text:00407693 loc_407693:			       ; CODE XREF: sub_40719F+57Fj
.text:00407693		       mov     edx, [ebp+var_2190]
.text:00407699		       mov     eax, [edx]
.text:0040769B		       mov     eax, [ebp+eax*4+var_FAC]
.text:004076A2		       mov     [ebp+var_1F6C], eax
.text:004076A8		       mov     ebx, [ebp+var_1F50]
.text:004076AE		       test    ebx, ebx
.text:004076B0		       jnz     short loc_4076BB
.text:004076B2		       jmp     short loc_4076CD
.text:004076B4 ; ---------------------------------------------------------------------------
.text:004076B4
.text:004076B4 loc_4076B4:			       ; CODE XREF: sub_40719F+52Aj
.text:004076B4		       mov     ebx, [ebx+4]
.text:004076B7		       test    ebx, ebx
.text:004076B9		       jz      short loc_4076CD
.text:004076BB
.text:004076BB loc_4076BB:			       ; CODE XREF: sub_40719F+511j
.text:004076BB		       mov     [esp+0Ch+var_8],	esi
.text:004076BF		       mov     [esp+0Ch+var_C],	ebx
.text:004076C2		       call    sub_4011A0
.text:004076C7		       test    eax, eax
.text:004076C9		       jnz     short loc_4076B4
.text:004076CB		       jmp     short loc_4076F1
.text:004076CD ; ---------------------------------------------------------------------------
.text:004076CD
.text:004076CD loc_4076CD:			       ; CODE XREF: sub_40719F+513j
.text:004076CD					       ; sub_40719F+51Aj
.text:004076CD		       mov     dword ptr [esp+0Ch], offset aMembNull ; "memb!=NULL"
.text:004076D5		       mov     [esp+0Ch+var_4],	offset aList_test ; "list_test"
.text:004076DD		       mov     [esp+0Ch+var_8],	183h
.text:004076E5		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:004076EC		       call    __assert_func
.text:004076F1
.text:004076F1 loc_4076F1:			       ; CODE XREF: sub_40719F+52Cj
.text:004076F1		       mov     [esp+0Ch+var_8],	ebx
.text:004076F5		       lea     eax, [ebp+var_1F50]
.text:004076FB		       mov     [esp+0Ch+var_C],	eax
.text:004076FE		       call    sub_403AF2
.text:00407703		       mov     [esp+0Ch+var_C],	ebx
.text:00407706		       call    free
.text:0040770B		       add     [ebp+var_2190], 4
.text:00407712		       lea     eax, [ebp+var_FAC]
.text:00407718		       cmp     [ebp+var_2190], eax
.text:0040771E		       jnz     loc_407693
.text:00407724		       cmp     [ebp+var_1F50], 0
.text:0040772B		       jz      short loc_407751
.text:0040772D		       mov     dword ptr [esp+0Ch], offset aListNull ; "list==NULL"
.text:00407735		       mov     [esp+0Ch+var_4],	offset aList_test ; "list_test"
.text:0040773D		       mov     [esp+0Ch+var_8],	18Ah
.text:00407745		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:0040774C		       call    __assert_func
.text:00407751
.text:00407751 loc_407751:			       ; CODE XREF: sub_40719F+58Cj
.text:00407751		       mov     [ebp+var_1F50], 0
.text:0040775B		       mov     esi, 0
.text:00407760
.text:00407760 loc_407760:			       ; CODE XREF: sub_40719F+609j
.text:00407760		       mov     [esp+0Ch+var_C],	18h
.text:00407767		       call    malloc
.text:0040776C		       mov     ebx, eax
.text:0040776E		       mov     eax, ds:dword_40D060[esi*4]
.text:00407775		       mov     [ebx], eax
.text:00407777		       lea     eax, [ebp+var_1F70]
.text:0040777D		       mov     [esp+0Ch+var_4],	eax
.text:00407781		       mov     [esp+0Ch+var_8],	ebx
.text:00407785		       lea     edx, [ebp+var_1F50]
.text:0040778B		       mov     [esp+0Ch+var_C],	edx
.text:0040778E		       call    sub_40121B
.text:00407793		       test    eax, eax
.text:00407795		       jnz     short loc_40779F
.text:00407797		       mov     [esp+0Ch+var_C],	ebx
.text:0040779A		       call    free
.text:0040779F
.text:0040779F loc_40779F:			       ; CODE XREF: sub_40719F+5F6j
.text:0040779F		       add     esi, 1
.text:004077A2		       cmp     esi, 3E8h
.text:004077A8		       jnz     short loc_407760
.text:004077AA		       mov     eax, [ebp+var_1F50]
.text:004077B0		       mov     [esp+0Ch+var_C],	eax
.text:004077B3		       call    sub_404029
.text:004077B8		       mov     ebx, 0
.text:004077BD		       mov     esi, offset dword_40D060
.text:004077C2
.text:004077C2 loc_4077C2:			       ; CODE XREF: sub_40719F+675j
.text:004077C2		       mov     eax, [esi+ebx*4]
.text:004077C5		       mov     [ebp+var_1F6C], eax
.text:004077CB		       lea     eax, [ebp+var_1F6C]
.text:004077D1		       mov     [esp+0Ch+var_8],	eax
.text:004077D5		       mov     eax, [ebp+var_1F50]
.text:004077DB		       mov     [esp+0Ch+var_C],	eax
.text:004077DE		       call    sub_4011E5
.text:004077E3		       test    eax, eax
.text:004077E5		       jnz     short loc_40780B
.text:004077E7		       mov     dword ptr [esp+0Ch], offset aSglib_simple_5 ; "sglib_SimpleList_find_member(list, &te)"...
.text:004077EF		       mov     [esp+0Ch+var_4],	offset aList_test ; "list_test"
.text:004077F7		       mov     [esp+0Ch+var_8],	19Ch
.text:004077FF		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00407806		       call    __assert_func
.text:0040780B
.text:0040780B loc_40780B:			       ; CODE XREF: sub_40719F+646j
.text:0040780B		       add     ebx, 1
.text:0040780E		       cmp     ebx, 3E8h
.text:00407814		       jnz     short loc_4077C2
.text:00407816		       lea     esi, [ebp+var_1F6C]
.text:0040781C
.text:0040781C loc_40781C:			       ; CODE XREF: sub_40719F+70Cj
.text:0040781C		       mov     eax, [edi]
.text:0040781E		       mov     eax, [ebp+eax*4+var_FAC]
.text:00407825		       mov     [ebp+var_1F6C], eax
.text:0040782B		       mov     ebx, [ebp+var_1F50]
.text:00407831		       test    ebx, ebx
.text:00407833		       jnz     short loc_40783E
.text:00407835		       jmp     short loc_40784E
.text:00407837 ; ---------------------------------------------------------------------------
.text:00407837
.text:00407837 loc_407837:			       ; CODE XREF: sub_40719F+6ADj
.text:00407837		       mov     ebx, [ebx+4]
.text:0040783A		       test    ebx, ebx
.text:0040783C		       jz      short loc_40784E
.text:0040783E
.text:0040783E loc_40783E:			       ; CODE XREF: sub_40719F+694j
.text:0040783E		       mov     [esp+0Ch+var_8],	esi
.text:00407842		       mov     [esp+0Ch+var_C],	ebx
.text:00407845		       call    sub_4011A0
.text:0040784A		       test    eax, eax
.text:0040784C		       jnz     short loc_407837
.text:0040784E
.text:0040784E loc_40784E:			       ; CODE XREF: sub_40719F+696j
.text:0040784E					       ; sub_40719F+69Dj
.text:0040784E		       lea     eax, [ebp+var_1F70]
.text:00407854		       mov     [esp+0Ch+var_4],	eax
.text:00407858		       mov     [esp+0Ch+var_8],	esi
.text:0040785C		       lea     eax, [ebp+var_1F50]
.text:00407862		       mov     [esp+0Ch+var_C],	eax
.text:00407865		       call    sub_4012A5
.text:0040786A		       cmp     ebx, [ebp+var_1F70]
.text:00407870		       jz      short loc_407896
.text:00407872		       mov     dword ptr [esp+0Ch], offset aMembMemb2 ;	"memb == memb2"
.text:0040787A		       mov     [esp+0Ch+var_4],	offset aList_test ; "list_test"
.text:00407882		       mov     [esp+0Ch+var_8],	1A3h
.text:0040788A		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00407891		       call    __assert_func
.text:00407896
.text:00407896 loc_407896:			       ; CODE XREF: sub_40719F+6D1j
.text:00407896		       test    ebx, ebx
.text:00407898		       jz      short loc_4078A2
.text:0040789A		       mov     [esp+0Ch+var_C],	ebx
.text:0040789D		       call    free
.text:004078A2
.text:004078A2 loc_4078A2:			       ; CODE XREF: sub_40719F+6F9j
.text:004078A2		       add     edi, 4
.text:004078A5		       cmp     [ebp+var_2190], edi
.text:004078AB		       jnz     loc_40781C
.text:004078B1		       cmp     [ebp+var_1F50], 0
.text:004078B8		       jz      short loc_4078DE
.text:004078BA		       mov     dword ptr [esp+0Ch], offset aListNull ; "list==NULL"
.text:004078C2		       mov     [esp+0Ch+var_4],	offset aList_test ; "list_test"
.text:004078CA		       mov     [esp+0Ch+var_8],	1A6h
.text:004078D2		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:004078D9		       call    __assert_func
.text:004078DE
.text:004078DE loc_4078DE:			       ; CODE XREF: sub_40719F+719j
.text:004078DE		       mov     [ebp+var_1F50], 0
.text:004078E8		       mov     ebx, 0
.text:004078ED		       mov     esi, offset dword_40D060
.text:004078F2		       lea     edi, [ebp+var_1F50]
.text:004078F8
.text:004078F8 loc_4078F8:			       ; CODE XREF: sub_40719F+77Fj
.text:004078F8		       mov     [esp+0Ch+var_C],	18h
.text:004078FF		       call    malloc
.text:00407904		       mov     edx, [esi+ebx*4]
.text:00407907		       mov     [eax], edx
.text:00407909		       mov     [esp+0Ch+var_8],	eax
.text:0040790D		       mov     [esp+0Ch+var_C],	edi
.text:00407910		       call    sub_401272
.text:00407915		       add     ebx, 1
.text:00407918		       cmp     ebx, 3E8h
.text:0040791E		       jnz     short loc_4078F8
.text:00407920		       mov     eax, [ebp+var_1F50]
.text:00407926		       mov     [esp+0Ch+var_C],	eax
.text:00407929		       call    sub_4040BF
.text:0040792E		       lea     ebx, [ebp+var_1F50]
.text:00407934		       mov     [esp+0Ch+var_C],	ebx
.text:00407937		       call    sub_4012FC
.text:0040793C		       mov     eax, [ebp+var_1F50]
.text:00407942		       mov     [esp+0Ch+var_C],	eax
.text:00407945		       call    sub_403CD7
.text:0040794A		       mov     eax, [ebp+var_1F50]
.text:00407950		       mov     [esp+0Ch+var_C],	eax
.text:00407953		       call    sub_4040BF
.text:00407958		       mov     [esp+0Ch+var_C],	ebx
.text:0040795B		       call    sub_401450
.text:00407960		       mov     eax, [ebp+var_1F50]
.text:00407966		       mov     [esp+0Ch+var_C],	eax
.text:00407969		       call    sub_4040BF
.text:0040796E		       mov     eax, [ebp+var_1F50]
.text:00407974		       mov     [esp+0Ch+var_C],	eax
.text:00407977		       call    sub_403C6A
.text:0040797C		       mov     [ebp+var_1F54], 0
.text:00407986		       mov     esi, [ebp+var_1F50]
.text:0040798C		       test    esi, esi
.text:0040798E		       jz      short loc_4079C5
.text:00407990		       lea     edi, [ebp+var_1F54]
.text:00407996
.text:00407996 loc_407996:			       ; CODE XREF: sub_40719F+81Aj
.text:00407996		       mov     ebx, [esi+4]
.text:00407999		       mov     [esp+0Ch+var_C],	18h
.text:004079A0		       call    malloc
.text:004079A5		       mov     edx, [esi]
.text:004079A7		       mov     [eax], edx
.text:004079A9		       mov     [esp+0Ch+var_8],	eax
.text:004079AD		       mov     [esp+0Ch+var_C],	edi
.text:004079B0		       call    sub_401272
.text:004079B5		       mov     esi, ebx
.text:004079B7		       test    ebx, ebx
.text:004079B9		       jnz     short loc_407996
.text:004079BB		       mov     ebx, [ebp+var_1F50]
.text:004079C1		       test    ebx, ebx
.text:004079C3		       jnz     short loc_4079E9
.text:004079C5
.text:004079C5 loc_4079C5:			       ; CODE XREF: sub_40719F+7EFj
.text:004079C5		       mov     dword ptr [esp+0Ch], offset aListNull_0 ; "list!=NULL"
.text:004079CD		       mov     [esp+0Ch+var_4],	offset aList_test ; "list_test"
.text:004079D5		       mov     [esp+0Ch+var_8],	1C0h
.text:004079DD		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:004079E4		       call    __assert_func
.text:004079E9
.text:004079E9 loc_4079E9:			       ; CODE XREF: sub_40719F+824j
.text:004079E9		       mov     esi, 0
.text:004079EE		       mov     [ebp+var_219C], 0
.text:004079F8		       mov     eax, 0
.text:004079FD
.text:004079FD loc_4079FD:			       ; CODE XREF: sub_40719F+8CFj
.text:004079FD		       mov     edi, [ebx+4]
.text:00407A00		       test    esi, esi
.text:00407A02		       jnz     short loc_407A1C
.text:00407A04		       mov     eax, [ebp+var_1F50]
.text:00407A0A		       mov     [esp+0Ch+var_8],	eax
.text:00407A0E		       lea     edx, [ebp+var_1F80]
.text:00407A14		       mov     [esp+0Ch+var_C],	edx
.text:00407A17		       call    sub_401513
.text:00407A1C
.text:00407A1C loc_407A1C:			       ; CODE XREF: sub_40719F+863j
.text:00407A1C		       cmp     eax, ebx
.text:00407A1E		       jz      short loc_407A44
.text:00407A20		       mov     dword ptr [esp+0Ch], offset aLl_current_ele ; "ll==_current_element_"
.text:00407A28		       mov     [esp+0Ch+var_4],	offset aList_test ; "list_test"
.text:00407A30		       mov     [esp+0Ch+var_8],	1C8h
.text:00407A38		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00407A3F		       call    __assert_func
.text:00407A44
.text:00407A44 loc_407A44:			       ; CODE XREF: sub_40719F+87Fj
.text:00407A44		       test    eax, eax
.text:00407A46		       jz      short loc_407A57
.text:00407A48		       cmp     dword ptr [eax],	5
.text:00407A4B		       setz    al
.text:00407A4E		       movzx   eax, al
.text:00407A51		       add     [ebp+var_219C], eax
.text:00407A57
.text:00407A57 loc_407A57:			       ; CODE XREF: sub_40719F+8A7j
.text:00407A57		       lea     eax, [ebp+var_1F80]
.text:00407A5D		       mov     [esp+0Ch+var_C],	eax
.text:00407A60		       call    sub_401488
.text:00407A65		       test    edi, edi
.text:00407A67		       jz      short loc_407A70
.text:00407A69		       add     esi, 1
.text:00407A6C		       mov     ebx, edi
.text:00407A6E		       jmp     short loc_4079FD
.text:00407A70 ; ---------------------------------------------------------------------------
.text:00407A70
.text:00407A70 loc_407A70:			       ; CODE XREF: sub_40719F+8C8j
.text:00407A70		       test    eax, eax
.text:00407A72		       jz      short loc_407A98
.text:00407A74		       mov     dword ptr [esp+0Ch], offset aLlNull ; "ll==NULL"
.text:00407A7C		       mov     [esp+0Ch+var_4],	offset aList_test ; "list_test"
.text:00407A84		       mov     [esp+0Ch+var_8],	1C9h
.text:00407A8C		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00407A93		       call    __assert_func
.text:00407A98
.text:00407A98 loc_407A98:			       ; CODE XREF: sub_40719F+8D3j
.text:00407A98		       mov     [ebp+var_1F6C], 5
.text:00407AA2		       lea     eax, [ebp+var_1F6C]
.text:00407AA8		       mov     [esp+0Ch], eax
.text:00407AAC		       mov     [esp+0Ch+var_4],	offset sub_4011A0
.text:00407AB4		       mov     eax, [ebp+var_1F50]
.text:00407ABA		       mov     [esp+0Ch+var_8],	eax
.text:00407ABE		       lea     eax, [ebp+var_1F80]
.text:00407AC4		       mov     [esp+0Ch+var_C],	eax
.text:00407AC7		       call    sub_4014EE
.text:00407ACC		       mov     ebx, 0
.text:00407AD1		       test    eax, eax
.text:00407AD3		       jz      short loc_407B22
.text:00407AD5		       mov     ebx, 1
.text:00407ADA		       lea     esi, [ebp+var_1F80]
.text:00407AE0		       cmp     dword ptr [eax],	5
.text:00407AE3		       jz      short loc_407B16
.text:00407AE5		       jmp     short loc_407AF2
.text:00407AE7 ; ---------------------------------------------------------------------------
.text:00407AE7
.text:00407AE7 loc_407AE7:			       ; CODE XREF: sub_40719F+981j
.text:00407AE7		       cmp     dword ptr [eax],	5
.text:00407AEA		       jnz     short loc_407AF2
.text:00407AEC		       add     ebx, 1
.text:00407AEF		       nop
.text:00407AF0		       jmp     short loc_407B16
.text:00407AF2 ; ---------------------------------------------------------------------------
.text:00407AF2
.text:00407AF2 loc_407AF2:			       ; CODE XREF: sub_40719F+946j
.text:00407AF2					       ; sub_40719F+94Bj
.text:00407AF2		       mov     dword ptr [esp+0Ch], offset aLlNIterator_eq ; "ll->n == ITERATOR_EQ_CHECK_VALUE"
.text:00407AFA		       mov     [esp+0Ch+var_4],	offset aList_test ; "list_test"
.text:00407B02		       mov     [esp+0Ch+var_8],	1D1h
.text:00407B0A		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00407B11		       call    __assert_func
.text:00407B16
.text:00407B16 loc_407B16:			       ; CODE XREF: sub_40719F+944j
.text:00407B16					       ; sub_40719F+951j
.text:00407B16		       mov     [esp+0Ch+var_C],	esi
.text:00407B19		       call    sub_401488
.text:00407B1E		       test    eax, eax
.text:00407B20		       jnz     short loc_407AE7
.text:00407B22
.text:00407B22 loc_407B22:			       ; CODE XREF: sub_40719F+934j
.text:00407B22		       cmp     ebx, [ebp+var_219C]
.text:00407B28		       jz      short loc_407B4E
.text:00407B2A		       mov     dword ptr [esp+0Ch], offset aCcCc5 ; "cc	== cc5"
.text:00407B32		       mov     [esp+0Ch+var_4],	offset aList_test ; "list_test"
.text:00407B3A		       mov     [esp+0Ch+var_8],	1D3h
.text:00407B42		       mov     [esp+0Ch+var_C],	offset aSelftest_c ; "selftest.c"
.text:00407B49		       call    __assert_func
.text:00407B4E
.text:00407B4E loc_407B4E:			       ; CODE XREF: sub_40719F+989j
.text:00407B4E		       mov     eax, [ebp+var_1F50]
.text:00407B54		       test    eax, eax
.text:00407B56		       jz      short loc_407B6B
.text:00407B58
.text:00407B58 loc_407B58:			       ; CODE XREF: sub_40719F+9CAj
.text:00407B58		       mov     ebx, [eax+4]
.text:00407B5B		       mov     [esp+0Ch+var_C],	eax
.text:00407B5E		       call    free
.text:00407B63		       test    ebx, ebx
.text:00407B65		       jz      short loc_407B6B
.text:00407B67		       mov     eax, ebx
.text:00407B69		       jmp     short loc_407B58
.text:00407B6B ; ---------------------------------------------------------------------------
.text:00407B6B
.text:00407B6B loc_407B6B:			       ; CODE XREF: sub_40719F+9B7j
.text:00407B6B					       ; sub_40719F+9C6j
.text:00407B6B		       mov     eax, [ebp+var_1F54]
.text:00407B71		       mov     [esp+0Ch+var_8],	eax
.text:00407B75		       lea     eax, [ebp+var_1F80]
.text:00407B7B		       mov     [esp+0Ch+var_C],	eax
.text:00407B7E		       call    sub_401513
.text:00407B83		       test    eax, eax
.text:00407B85		       jz      short loc_407BA1
.text:00407B87		       lea     ebx, [ebp+var_1F80]
.text:00407B8D
.text:00407B8D loc_407B8D:			       ; CODE XREF: sub_40719F+A00j
.text:00407B8D		       mov     [esp+0Ch+var_C],	eax
.text:00407B90		       call    free
.text:00407B95		       mov     [esp+0Ch+var_C],	ebx
.text:00407B98		       call    sub_401488
.text:00407B9D		       test    eax, eax
.text:00407B9F		       jnz     short loc_407B8D
.text:00407BA1
.text:00407BA1 loc_407BA1:			       ; CODE XREF: sub_40719F+9E6j
.text:00407BA1		       add     esp, 21ACh
.text:00407BA7		       pop     ebx
.text:00407BA8		       pop     esi
.text:00407BA9		       pop     edi
.text:00407BAA		       pop     ebp
.text:00407BAB		       retn
.text:00407BAB sub_40719F      endp ; sp-analysis failed
.text:00407BAB
.text:00407BAC
.text:00407BAC ; =============== S U B R O U T I N E =======================================
.text:00407BAC
.text:00407BAC ; Attributes: bp-based frame
.text:00407BAC
.text:00407BAC sub_407BAC      proc near	       ; CODE XREF: sub_408128+46p
.text:00407BAC
.text:00407BAC var_28	       = dword ptr -28h
.text:00407BAC var_C	       = dword ptr -0Ch
.text:00407BAC
.text:00407BAC		       push    ebp
.text:00407BAD		       mov     ebp, esp
.text:00407BAF		       push    esi
.text:00407BB0		       push    ebx
.text:00407BB1		       sub     esp, 20h
.text:00407BB4		       call    sub_40415C
.text:00407BB9		       mov     [ebp+var_C], 0
.text:00407BC0		       mov     ebx, 0
.text:00407BC5		       mov     esi, offset dword_40D060
.text:00407BCA
.text:00407BCA loc_407BCA:			       ; CODE XREF: sub_407BAC+41j
.text:00407BCA		       mov     [esp+28h+var_28], 18h
.text:00407BD1		       call    malloc
.text:00407BD6		       mov     edx, [esi+ebx*4]
.text:00407BD9		       mov     [eax], edx
.text:00407BDB		       mov     edx, [ebp+var_C]
.text:00407BDE		       mov     [eax+4],	edx
.text:00407BE1		       mov     [ebp+var_C], eax
.text:00407BE4		       add     ebx, 1
.text:00407BE7		       cmp     ebx, 3E8h
.text:00407BED		       jnz     short loc_407BCA
.text:00407BEF		       lea     eax, [ebp+var_C]
.text:00407BF2		       mov     [esp+28h+var_28], eax
.text:00407BF5		       call    sub_4012FC
.text:00407BFA		       mov     eax, [ebp+var_C]
.text:00407BFD		       mov     [esp+28h+var_28], eax
.text:00407C00		       call    sub_403CD7
.text:00407C05		       mov     eax, [ebp+var_C]
.text:00407C08		       mov     [esp+28h+var_28], eax
.text:00407C0B		       call    sub_4040BF
.text:00407C10		       mov     eax, [ebp+var_C]
.text:00407C13		       test    eax, eax
.text:00407C15		       jz      short loc_407C2A
.text:00407C17
.text:00407C17 loc_407C17:			       ; CODE XREF: sub_407BAC+7Cj
.text:00407C17		       mov     ebx, [eax+4]
.text:00407C1A		       mov     [esp+28h+var_28], eax
.text:00407C1D		       call    free
.text:00407C22		       test    ebx, ebx
.text:00407C24		       jz      short loc_407C2A
.text:00407C26		       mov     eax, ebx
.text:00407C28		       jmp     short loc_407C17
.text:00407C2A ; ---------------------------------------------------------------------------
.text:00407C2A
.text:00407C2A loc_407C2A:			       ; CODE XREF: sub_407BAC+69j
.text:00407C2A					       ; sub_407BAC+78j
.text:00407C2A		       add     esp, 20h
.text:00407C2D		       pop     ebx
.text:00407C2E		       pop     esi
.text:00407C2F		       pop     ebp
.text:00407C30		       retn
.text:00407C30 sub_407BAC      endp
.text:00407C30
.text:00407C31
.text:00407C31 ; =============== S U B R O U T I N E =======================================
.text:00407C31
.text:00407C31 ; Attributes: bp-based frame
.text:00407C31
.text:00407C31 sub_407C31      proc near	       ; CODE XREF: sub_408128+41p
.text:00407C31
.text:00407C31 var_1F54	       = dword ptr -1F54h
.text:00407C31 var_1F50	       = dword ptr -1F50h
.text:00407C31 var_1F4C	       = dword ptr -1F4Ch
.text:00407C31 var_FAC	       = dword ptr -0FACh
.text:00407C31 var_C	       = dword ptr -0Ch
.text:00407C31 var_8	       = dword ptr -8
.text:00407C31
.text:00407C31		       push    ebp
.text:00407C32		       mov     ebp, esp
.text:00407C34		       push    edi
.text:00407C35		       push    esi
.text:00407C36		       push    ebx
.text:00407C37		       mov     eax, 1F5Ch
.text:00407C3C		       call    sub_4081C0
.text:00407C41		       call    sub_40415C
.text:00407C46		       mov     ecx, 0
.text:00407C4B		       lea     esi, [ebp+var_FAC]
.text:00407C51		       lea     ebx, [ebp+var_1F4C]
.text:00407C57
.text:00407C57 loc_407C57:			       ; CODE XREF: sub_407C31+45j
.text:00407C57		       mov     eax, ds:dword_40D060[ecx*4]
.text:00407C5E		       mov     [esi+ecx*4], eax
.text:00407C61		       mov     edx, eax
.text:00407C63		       sar     edx, 1
.text:00407C65		       shl     eax, 2
.text:00407C68		       xor     edx, eax
.text:00407C6A		       mov     [ebx+ecx*4], edx
.text:00407C6D		       add     ecx, 1
.text:00407C70		       cmp     ecx, 3E8h
.text:00407C76		       jnz     short loc_407C57
.text:00407C78		       mov     ebx, 1F4h
.text:00407C7D		       mov     [ebp+var_1F54], 1F4h
.text:00407C87		       jmp     short loc_407C91
.text:00407C89 ; ---------------------------------------------------------------------------
.text:00407C89
.text:00407C89 loc_407C89:			       ; CODE XREF: sub_407C31+E0j
.text:00407C89		       mov     ecx, [ebp+var_1F54]
.text:00407C8F
.text:00407C8F loc_407C8F:			       ; CODE XREF: sub_407C31+D7j
.text:00407C8F		       mov     ebx, ecx
.text:00407C91
.text:00407C91 loc_407C91:			       ; CODE XREF: sub_407C31+56j
.text:00407C91		       lea     eax, [ebx+ebx+1]
.text:00407C95		       cmp     eax, 3E7h
.text:00407C9A		       jg      short loc_407D0A
.text:00407C9C		       mov     esi, [ebp+ebx*4+var_FAC]
.text:00407CA3		       mov     edx, [ebp+eax*4+var_FAC]
.text:00407CAA		       cmp     esi, edx
.text:00407CAC		       jg      short loc_407CB2
.text:00407CAE		       mov     ecx, eax
.text:00407CB0		       jl      short loc_407CB4
.text:00407CB2
.text:00407CB2 loc_407CB2:			       ; CODE XREF: sub_407C31+7Bj
.text:00407CB2		       mov     ecx, ebx
.text:00407CB4
.text:00407CB4 loc_407CB4:			       ; CODE XREF: sub_407C31+7Fj
.text:00407CB4		       add     eax, 1
.text:00407CB7		       cmp     eax, 3E7h
.text:00407CBC		       jg      short loc_407CD3
.text:00407CBE		       mov     edi, [ebp+ecx*4+var_FAC]
.text:00407CC5		       mov     edx, [ebp+eax*4+var_FAC]
.text:00407CCC		       cmp     edi, edx
.text:00407CCE		       jg      short loc_407CD3
.text:00407CD0		       cmovl   ecx, eax
.text:00407CD3
.text:00407CD3 loc_407CD3:			       ; CODE XREF: sub_407C31+8Bj
.text:00407CD3					       ; sub_407C31+9Dj
.text:00407CD3		       cmp     ebx, ecx
.text:00407CD5		       jz      short loc_407D0A
.text:00407CD7		       mov     eax, [ebp+ecx*4+var_FAC]
.text:00407CDE		       mov     [ebp+ebx*4+var_FAC], eax
.text:00407CE5		       mov     [ebp+ecx*4+var_FAC], esi
.text:00407CEC		       mov     edx, [ebp+ebx*4+var_1F4C]
.text:00407CF3		       mov     eax, [ebp+ecx*4+var_1F4C]
.text:00407CFA		       mov     [ebp+ebx*4+var_1F4C], eax
.text:00407D01		       mov     [ebp+ecx*4+var_1F4C], edx
.text:00407D08		       jmp     short loc_407C8F
.text:00407D0A ; ---------------------------------------------------------------------------
.text:00407D0A
.text:00407D0A loc_407D0A:			       ; CODE XREF: sub_407C31+69j
.text:00407D0A					       ; sub_407C31+A4j
.text:00407D0A		       sub     [ebp+var_1F54], 1
.text:00407D11		       jns     loc_407C89
.text:00407D17		       mov     [ebp+var_1F50], 3E7h
.text:00407D21
.text:00407D21 loc_407D21:			       ; CODE XREF: sub_407C31+1CDj
.text:00407D21		       mov     edx, [ebp+var_FAC]
.text:00407D27		       mov     ecx, [ebp+var_1F50]
.text:00407D2D		       mov     eax, [ebp+ecx*4+var_FAC]
.text:00407D34		       mov     [ebp+var_FAC], eax
.text:00407D3A		       mov     [ebp+ecx*4+var_FAC], edx
.text:00407D41		       mov     edx, [ebp+var_1F4C]
.text:00407D47		       mov     eax, [ebp+ecx*4+var_1F4C]
.text:00407D4E		       mov     [ebp+var_1F4C], eax
.text:00407D54		       mov     [ebp+ecx*4+var_1F4C], edx
.text:00407D5B		       cmp     ecx, 1
.text:00407D5E		       jle     loc_407DF0
.text:00407D64		       mov     ebx, 0
.text:00407D69		       mov     eax, 1
.text:00407D6E		       mov     edi, 2
.text:00407D73
.text:00407D73 loc_407D73:			       ; CODE XREF: sub_407C31+1BDj
.text:00407D73		       mov     esi, [ebp+ebx*4+var_FAC]
.text:00407D7A		       mov     edx, [ebp+eax*4+var_FAC]
.text:00407D81		       cmp     esi, edx
.text:00407D83		       jg      short loc_407D89
.text:00407D85		       mov     ecx, eax
.text:00407D87		       jl      short loc_407D8B
.text:00407D89
.text:00407D89 loc_407D89:			       ; CODE XREF: sub_407C31+152j
.text:00407D89		       mov     ecx, ebx
.text:00407D8B
.text:00407D8B loc_407D8B:			       ; CODE XREF: sub_407C31+156j
.text:00407D8B		       cmp     edi, [ebp+var_1F50]
.text:00407D91		       jge     short loc_407DA8
.text:00407D93		       mov     edx, [ebp+ecx*4+var_FAC]
.text:00407D9A		       mov     eax, [ebp+edi*4+var_FAC]
.text:00407DA1		       cmp     edx, eax
.text:00407DA3		       jg      short loc_407DA8
.text:00407DA5		       cmovl   ecx, edi
.text:00407DA8
.text:00407DA8 loc_407DA8:			       ; CODE XREF: sub_407C31+160j
.text:00407DA8					       ; sub_407C31+172j
.text:00407DA8		       cmp     ebx, ecx
.text:00407DAA		       jz      short loc_407DF0
.text:00407DAC		       mov     eax, [ebp+ecx*4+var_FAC]
.text:00407DB3		       mov     [ebp+ebx*4+var_FAC], eax
.text:00407DBA		       mov     [ebp+ecx*4+var_FAC], esi
.text:00407DC1		       mov     edx, [ebp+ebx*4+var_1F4C]
.text:00407DC8		       mov     eax, [ebp+ecx*4+var_1F4C]
.text:00407DCF		       mov     [ebp+ebx*4+var_1F4C], eax
.text:00407DD6		       mov     [ebp+ecx*4+var_1F4C], edx
.text:00407DDD		       lea     eax, [ecx+ecx+1]
.text:00407DE1		       cmp     eax, [ebp+var_1F50]
.text:00407DE7		       jge     short loc_407DF0
.text:00407DE9		       lea     edi, [eax+1]
.text:00407DEC		       mov     ebx, ecx
.text:00407DEE		       jmp     short loc_407D73
.text:00407DF0 ; ---------------------------------------------------------------------------
.text:00407DF0
.text:00407DF0 loc_407DF0:			       ; CODE XREF: sub_407C31+12Dj
.text:00407DF0					       ; sub_407C31+179j ...
.text:00407DF0		       sub     [ebp+var_1F50], 1
.text:00407DF7		       cmp     [ebp+var_1F50], 0FFFFFFFFh
.text:00407DFE		       jnz     loc_407D21
.text:00407E04		       mov     [esp+0Ch+var_8],	3E8h
.text:00407E0C		       lea     ebx, [ebp+var_FAC]
.text:00407E12		       mov     [esp+0Ch+var_C],	ebx
.text:00407E15		       call    sub_403D47
.text:00407E1A		       mov     [esp+0Ch+var_8],	3E8h
.text:00407E22		       mov     [esp+0Ch+var_C],	ebx
.text:00407E25		       call    sub_40410A
.text:00407E2A		       lea     eax, [ebp+var_1F4C]
.text:00407E30		       mov     [esp+0Ch+var_8],	eax
.text:00407E34		       mov     [esp+0Ch+var_C],	ebx
.text:00407E37		       call    sub_403DBF
.text:00407E3C		       add     esp, 1F5Ch
.text:00407E42		       pop     ebx
.text:00407E43		       pop     esi
.text:00407E44		       pop     edi
.text:00407E45		       pop     ebp
.text:00407E46		       retn
.text:00407E46 sub_407C31      endp ; sp-analysis failed
.text:00407E46
.text:00407E47
.text:00407E47 ; =============== S U B R O U T I N E =======================================
.text:00407E47
.text:00407E47 ; Attributes: bp-based frame
.text:00407E47
.text:00407E47 sub_407E47      proc near	       ; CODE XREF: sub_408128:loc_408164p
.text:00407E47
.text:00407E47 var_2154	       = dword ptr -2154h
.text:00407E47 var_2150	       = dword ptr -2150h
.text:00407E47 var_214C	       = dword ptr -214Ch
.text:00407E47 var_204C	       = dword ptr -204Ch
.text:00407E47 var_1F4C	       = dword ptr -1F4Ch
.text:00407E47 var_FAC	       = dword ptr -0FACh
.text:00407E47 var_FA8	       = byte ptr -0FA8h
.text:00407E47 var_C	       = dword ptr -0Ch
.text:00407E47 var_8	       = dword ptr -8
.text:00407E47
.text:00407E47		       push    ebp
.text:00407E48		       mov     ebp, esp
.text:00407E4A		       push    edi
.text:00407E4B		       push    esi
.text:00407E4C		       push    ebx
.text:00407E4D		       mov     eax, 215Ch
.text:00407E52		       call    sub_4081C0
.text:00407E57		       call    sub_40415C
.text:00407E5C		       mov     ecx, 0
.text:00407E61		       lea     ebx, [ebp+var_FAC]
.text:00407E67		       lea     esi, [ebp+var_1F4C]
.text:00407E6D
.text:00407E6D loc_407E6D:			       ; CODE XREF: sub_407E47+45j
.text:00407E6D		       mov     eax, ds:dword_40D060[ecx*4]
.text:00407E74		       mov     [ebx+ecx*4], eax
.text:00407E77		       mov     edx, eax
.text:00407E79		       sar     edx, 1
.text:00407E7B		       shl     eax, 2
.text:00407E7E		       xor     edx, eax
.text:00407E80		       mov     [esi+ecx*4], edx
.text:00407E83		       add     ecx, 1
.text:00407E86		       cmp     ecx, 3E8h
.text:00407E8C		       jnz     short loc_407E6D
.text:00407E8E		       mov     [ebp+var_204C], 0
.text:00407E98		       mov     [ebp+var_214C], 3E8h
.text:00407EA2		       mov     [ebp+var_2154], 1
.text:00407EAC
.text:00407EAC loc_407EAC:			       ; CODE XREF: sub_407E47+298j
.text:00407EAC		       sub     [ebp+var_2154], 1
.text:00407EB3		       mov     eax, [ebp+var_2154]
.text:00407EB9		       mov     edi, [ebp+eax*4+var_204C]
.text:00407EC0		       mov     edx, [ebp+eax*4+var_214C]
.text:00407EC7		       mov     [ebp+var_2150], edx
.text:00407ECD		       jmp     loc_40807C
.text:00407ED2 ; ---------------------------------------------------------------------------
.text:00407ED2
.text:00407ED2 loc_407ED2:			       ; CODE XREF: sub_407E47+240j
.text:00407ED2		       lea     ecx, [edi+1]
.text:00407ED5		       mov     ebx, [ebp+var_2150]
.text:00407EDB		       sub     ebx, 1
.text:00407EDE		       cmp     ecx, ebx
.text:00407EE0		       jl      loc_407FDC
.text:00407EE6		       jmp     loc_408004
.text:00407EEB ; ---------------------------------------------------------------------------
.text:00407EEB
.text:00407EEB loc_407EEB:			       ; CODE XREF: sub_407E47+B2j
.text:00407EEB					       ; sub_407E47+1B2j
.text:00407EEB		       add     ecx, 1
.text:00407EEE		       cmp     ecx, ebx
.text:00407EF0		       jg      short loc_407EFD
.text:00407EF2		       mov     eax, [edx]
.text:00407EF4		       add     edx, 4
.text:00407EF7		       cmp     eax, esi
.text:00407EF9		       jle     short loc_407EEB
.text:00407EFB		       jmp     short loc_407F48
.text:00407EFD ; ---------------------------------------------------------------------------
.text:00407EFD
.text:00407EFD loc_407EFD:			       ; CODE XREF: sub_407E47+A9j
.text:00407EFD					       ; sub_407E47+197j
.text:00407EFD		       mov     edx, [ebp+ebx*4+var_FAC]
.text:00407F04		       mov     eax, [ebp+edi*4+var_FAC]
.text:00407F0B		       mov     [ebp+ebx*4+var_FAC], eax
.text:00407F12		       mov     [ebp+edi*4+var_FAC], edx
.text:00407F19		       mov     edx, [ebp+ebx*4+var_1F4C]
.text:00407F20		       mov     eax, [ebp+edi*4+var_1F4C]
.text:00407F27		       mov     [ebp+ebx*4+var_1F4C], eax
.text:00407F2E		       mov     [ebp+edi*4+var_1F4C], edx
.text:00407F35		       mov     ecx, ebx
.text:00407F37		       jmp     loc_408004
.text:00407F3C ; ---------------------------------------------------------------------------
.text:00407F3C
.text:00407F3C loc_407F3C:			       ; CODE XREF: sub_407E47+10Cj
.text:00407F3C		       sub     ebx, 1
.text:00407F3F		       sub     eax, 4
.text:00407F42		       cmp     ecx, ebx
.text:00407F44		       jle     short loc_407F4F
.text:00407F46		       jmp     short loc_407F57
.text:00407F48 ; ---------------------------------------------------------------------------
.text:00407F48
.text:00407F48 loc_407F48:			       ; CODE XREF: sub_407E47+B4j
.text:00407F48					       ; sub_407E47+1B8j
.text:00407F48		       lea     eax, [ebp+ebx*4+var_FAC]
.text:00407F4F
.text:00407F4F loc_407F4F:			       ; CODE XREF: sub_407E47+FDj
.text:00407F4F		       mov     edx, [eax]
.text:00407F51		       cmp     edx, esi
.text:00407F53		       jge     short loc_407F3C
.text:00407F55		       jmp     short loc_407F8C
.text:00407F57 ; ---------------------------------------------------------------------------
.text:00407F57
.text:00407F57 loc_407F57:			       ; CODE XREF: sub_407E47+FFj
.text:00407F57		       mov     eax, [ebp+ebx*4+var_FAC]
.text:00407F5E		       mov     [ebp+ebx*4+var_FAC], esi
.text:00407F65		       mov     [ebp+edi*4+var_FAC], eax
.text:00407F6C		       mov     edx, [ebp+ebx*4+var_1F4C]
.text:00407F73		       mov     eax, [ebp+edi*4+var_1F4C]
.text:00407F7A		       mov     [ebp+ebx*4+var_1F4C], eax
.text:00407F81		       mov     [ebp+edi*4+var_1F4C], edx
.text:00407F88		       mov     ecx, ebx
.text:00407F8A		       jmp     short loc_408004
.text:00407F8C ; ---------------------------------------------------------------------------
.text:00407F8C
.text:00407F8C loc_407F8C:			       ; CODE XREF: sub_407E47+10Ej
.text:00407F8C		       cmp     ecx, ebx
.text:00407F8E		       jge     short loc_408004
.text:00407F90		       mov     eax, [ebp+ecx*4+var_FAC]
.text:00407F97		       mov     [ebp+ecx*4+var_FAC], edx
.text:00407F9E		       mov     [ebp+ebx*4+var_FAC], eax
.text:00407FA5		       mov     edx, [ebp+ecx*4+var_1F4C]
.text:00407FAC		       mov     eax, [ebp+ebx*4+var_1F4C]
.text:00407FB3		       mov     [ebp+ecx*4+var_1F4C], eax
.text:00407FBA		       mov     [ebp+ebx*4+var_1F4C], edx
.text:00407FC1		       lea     eax, [ecx+2]
.text:00407FC4		       cmp     eax, ebx
.text:00407FC6		       jge     short loc_407FD4
.text:00407FC8		       add     ecx, 1
.text:00407FCB		       lea     ebx, [ebx-1]
.text:00407FCE		       cmp     ecx, ebx
.text:00407FD0		       jl      short loc_407FDC
.text:00407FD2		       jmp     short loc_408004
.text:00407FD4 ; ---------------------------------------------------------------------------
.text:00407FD4
.text:00407FD4 loc_407FD4:			       ; CODE XREF: sub_407E47+17Fj
.text:00407FD4		       lea     eax, [ecx+1]
.text:00407FD7		       cmp     eax, ebx
.text:00407FD9		       cmovl   ecx, eax
.text:00407FDC
.text:00407FDC loc_407FDC:			       ; CODE XREF: sub_407E47+99j
.text:00407FDC					       ; sub_407E47+189j
.text:00407FDC		       cmp     ebx, ecx
.text:00407FDE		       jl      loc_407EFD
.text:00407FE4		       mov     esi, [ebp+edi*4+var_FAC]
.text:00407FEB		       lea     edx, [ebp+ecx*4+var_FA8]
.text:00407FF2		       cmp     esi, [ebp+ecx*4+var_FAC]
.text:00407FF9		       jge     loc_407EEB
.text:00407FFF		       jmp     loc_407F48
.text:00408004 ; ---------------------------------------------------------------------------
.text:00408004
.text:00408004 loc_408004:			       ; CODE XREF: sub_407E47+9Fj
.text:00408004					       ; sub_407E47+F0j ...
.text:00408004		       mov     edx, ecx
.text:00408006		       sub     edx, edi
.text:00408008		       cmp     edx, 1
.text:0040800B		       jle     short loc_408079
.text:0040800D		       mov     eax, [ebp+var_2150]
.text:00408013		       sub     eax, ebx
.text:00408015		       cmp     eax, 1
.text:00408018		       jg      short loc_408022
.text:0040801A		       mov     [ebp+var_2150], ecx
.text:00408020		       jmp     short loc_40807C
.text:00408022 ; ---------------------------------------------------------------------------
.text:00408022
.text:00408022 loc_408022:			       ; CODE XREF: sub_407E47+1D1j
.text:00408022		       sub     eax, 1
.text:00408025		       cmp     edx, eax
.text:00408027		       jge     short loc_408057
.text:00408029		       lea     eax, [ebx+1]
.text:0040802C		       mov     edx, [ebp+var_2154]
.text:00408032		       mov     [ebp+edx*4+var_204C], eax
.text:00408039		       mov     eax, [ebp+var_2150]
.text:0040803F		       mov     [ebp+edx*4+var_214C], eax
.text:00408046		       add     edx, 1
.text:00408049		       mov     [ebp+var_2154], edx
.text:0040804F		       mov     [ebp+var_2150], ecx
.text:00408055		       jmp     short loc_40807C
.text:00408057 ; ---------------------------------------------------------------------------
.text:00408057
.text:00408057 loc_408057:			       ; CODE XREF: sub_407E47+1E0j
.text:00408057		       mov     edx, [ebp+var_2154]
.text:0040805D		       mov     [ebp+edx*4+var_204C], edi
.text:00408064		       mov     [ebp+edx*4+var_214C], ecx
.text:0040806B		       add     edx, 1
.text:0040806E		       mov     [ebp+var_2154], edx
.text:00408074		       lea     edi, [ebx+1]
.text:00408077		       jmp     short loc_40807C
.text:00408079 ; ---------------------------------------------------------------------------
.text:00408079
.text:00408079 loc_408079:			       ; CODE XREF: sub_407E47+1C4j
.text:00408079		       lea     edi, [ebx+1]
.text:0040807C
.text:0040807C loc_40807C:			       ; CODE XREF: sub_407E47+86j
.text:0040807C					       ; sub_407E47+1D9j ...
.text:0040807C		       mov     eax, [ebp+var_2150]
.text:00408082		       sub     eax, edi
.text:00408084		       cmp     eax, 2
.text:00408087		       jg      loc_407ED2
.text:0040808D		       mov     ebx, [ebp+var_2154]
.text:00408093		       cmp     eax, 2
.text:00408096		       jnz     short loc_4080DD
.text:00408098		       mov     edx, [ebp+edi*4+var_FAC]
.text:0040809F		       mov     ecx, [ebp+var_2150]
.text:004080A5		       sub     ecx, 1
.text:004080A8		       mov     eax, [ebp+ecx*4+var_FAC]
.text:004080AF		       cmp     edx, eax
.text:004080B1		       jle     short loc_4080DD
.text:004080B3		       mov     [ebp+edi*4+var_FAC], eax
.text:004080BA		       mov     [ebp+ecx*4+var_FAC], edx
.text:004080C1		       mov     edx, [ebp+edi*4+var_1F4C]
.text:004080C8		       mov     eax, [ebp+ecx*4+var_1F4C]
.text:004080CF		       mov     [ebp+edi*4+var_1F4C], eax
.text:004080D6		       mov     [ebp+ecx*4+var_1F4C], edx
.text:004080DD
.text:004080DD loc_4080DD:			       ; CODE XREF: sub_407E47+24Fj
.text:004080DD					       ; sub_407E47+26Aj
.text:004080DD		       test    ebx, ebx
.text:004080DF		       jg      loc_407EAC
.text:004080E5		       mov     [esp+0Ch+var_8],	3E8h
.text:004080ED		       lea     ebx, [ebp+var_FAC]
.text:004080F3		       mov     [esp+0Ch+var_C],	ebx
.text:004080F6		       call    sub_403D47
.text:004080FB		       mov     [esp+0Ch+var_8],	3E8h
.text:00408103		       mov     [esp+0Ch+var_C],	ebx
.text:00408106		       call    sub_40410A
.text:0040810B		       lea     eax, [ebp+var_1F4C]
.text:00408111		       mov     [esp+0Ch+var_8],	eax
.text:00408115		       mov     [esp+0Ch+var_C],	ebx
.text:00408118		       call    sub_403DBF
.text:0040811D		       add     esp, 215Ch
.text:00408123		       pop     ebx
.text:00408124		       pop     esi
.text:00408125		       pop     edi
.text:00408126		       pop     ebp
.text:00408127		       retn
.text:00408127 sub_407E47      endp ; sp-analysis failed
.text:00408127
.text:00408128
.text:00408128 ; =============== S U B R O U T I N E =======================================
.text:00408128
.text:00408128
.text:00408128 sub_408128      proc near	       ; DATA XREF: start+27o
.text:00408128
.text:00408128 var_1C	       = dword ptr -1Ch
.text:00408128 arg_0	       = byte ptr  4
.text:00408128
.text:00408128		       lea     ecx, [esp+arg_0]
.text:0040812C		       and     esp, 0FFFFFFF0h
.text:0040812F		       push    dword ptr [ecx-4]
.text:00408132		       push    ebp
.text:00408133		       mov     ebp, esp
.text:00408135		       push    ebx
.text:00408136		       push    ecx
.text:00408137		       sub     esp, 10h
.text:0040813A		       call    __main
.text:0040813F		       mov     [esp+1Ch+var_1C], 0
.text:00408146		       call    srandom
.text:0040814B		       mov     [esp+1Ch+var_1C], 0
.text:00408152		       call    time
.text:00408157		       mov     [esp+1Ch+var_1C], eax
.text:0040815A		       call    srandom
.text:0040815F		       mov     ebx, 0
.text:00408164
.text:00408164 loc_408164:			       ; CODE XREF: sub_408128+6Dj
.text:00408164		       call    sub_407E47
.text:00408169		       call    sub_407C31
.text:0040816E		       call    sub_407BAC
.text:00408173		       call    sub_40719F
.text:00408178		       call    sub_406A03
.text:0040817D		       lea     esi, [esi+0]
.text:00408180		       call    sub_4059BC
.text:00408185		       call    sub_40502E
.text:0040818A		       call    sub_4041AA
.text:0040818F		       add     ebx, 1
.text:00408192		       cmp     ebx, 0Ah
.text:00408195		       jnz     short loc_408164
.text:00408197		       mov     eax, 0
.text:0040819C		       add     esp, 10h
.text:0040819F		       pop     ecx
.text:004081A0		       pop     ebx
.text:004081A1		       pop     ebp
.text:004081A2		       lea     esp, [ecx-4]
.text:004081A5		       retn
.text:004081A5 sub_408128      endp
.text:004081A5
.text:004081A5 ; ---------------------------------------------------------------------------
.text:004081A6		       align 10h
.text:004081B0 ; [00000006 BYTES: COLLAPSED FUNCTION __deregister_frame_info. PRESS KEYPAD "+" TO EXPAND]
.text:004081B6		       align 4
.text:004081B8 ; [00000006 BYTES: COLLAPSED FUNCTION __register_frame_info. PRESS KEYPAD "+" TO	EXPAND]
.text:004081BE		       align 10h
.text:004081C0
.text:004081C0 ; =============== S U B R O U T I N E =======================================
.text:004081C0
.text:004081C0
.text:004081C0 sub_4081C0      proc near	       ; CODE XREF: sub_4041AA+Bp
.text:004081C0					       ; sub_40502E+Bp	...
.text:004081C0
.text:004081C0 arg_0	       = byte ptr  4
.text:004081C0
.text:004081C0		       push    ecx
.text:004081C1		       lea     ecx, [esp+4+arg_0]
.text:004081C5		       cmp     eax, 1000h
.text:004081CA		       jb      short loc_4081E1
.text:004081CC
.text:004081CC loc_4081CC:			       ; CODE XREF: sub_4081C0+1Fj
.text:004081CC		       sub     ecx, 1000h
.text:004081D2		       or      dword ptr [ecx],	0
.text:004081D5		       sub     eax, 1000h
.text:004081DA		       cmp     eax, 1000h
.text:004081DF		       ja      short loc_4081CC
.text:004081E1
.text:004081E1 loc_4081E1:			       ; CODE XREF: sub_4081C0+Aj
.text:004081E1		       sub     ecx, eax
.text:004081E3		       or      dword ptr [ecx],	0
.text:004081E6		       mov     eax, esp
.text:004081E8		       mov     esp, ecx
.text:004081EA		       mov     ecx, [eax]
.text:004081EC		       mov     eax, [eax+4]
.text:004081EF		       push    eax
.text:004081F0		       retn
.text:004081F0 sub_4081C0      endp
.text:004081F0
.text:004081F0 ; ---------------------------------------------------------------------------
.text:004081F1		       align 10h
.text:00408200
.text:00408200 ; =============== S U B R O U T I N E =======================================
.text:00408200
.text:00408200 ; Attributes: bp-based frame
.text:00408200
.text:00408200 sub_408200      proc near	       ; CODE XREF: start+2Ep
.text:00408200
.text:00408200 var_8	       = dword ptr -8
.text:00408200 var_4	       = dword ptr -4
.text:00408200 arg_0	       = dword ptr  8
.text:00408200
.text:00408200		       push    ebp
.text:00408201		       mov     ebp, esp
.text:00408203		       sub     esp, 8
.text:00408206		       mov     eax, [ebp+arg_0]
.text:00408209		       mov     [esp+8+var_4], 0
.text:00408211		       mov     [esp+8+var_8], eax
.text:00408214		       call    sub_4082E0
.text:00408219		       sub     esp, 8
.text:0040821C		       call    ds:_dll_crt0@0  ; dll_crt0()
.text:00408222		       nop
.text:00408223		       nop
.text:00408224		       nop
.text:00408225		       nop
.text:00408226		       nop
.text:00408227		       nop
.text:00408228		       nop
.text:00408229		       nop
.text:0040822A		       nop
.text:0040822B		       nop
.text:0040822C		       nop
.text:0040822D		       nop
.text:0040822E		       nop
.text:0040822F		       nop
.text:0040822F sub_408200      endp ; sp-analysis failed
.text:0040822F
.text:00408230
.text:00408230 ; =============== S U B R O U T I N E =======================================
.text:00408230
.text:00408230 ; Attributes: bp-based frame
.text:00408230
.text:00408230 sub_408230      proc near	       ; CODE XREF: start+4Ap
.text:00408230					       ; DATA XREF: sub_4082E0+72o ...
.text:00408230		       push    ebp
.text:00408231		       mov     ebp, esp
.text:00408233		       pop     ebp
.text:00408234		       retn
.text:00408234 sub_408230      endp
.text:00408234
.text:00408234 ; ---------------------------------------------------------------------------
.text:00408235		       align 10h
.text:00408240
.text:00408240 ; =============== S U B R O U T I N E =======================================
.text:00408240
.text:00408240 ; Attributes: bp-based frame
.text:00408240
.text:00408240 sub_408240      proc near	       ; CODE XREF: start+66p
.text:00408240					       ; DATA XREF: sub_4082E0+79o ...
.text:00408240		       push    ebp
.text:00408241		       mov     ebp, esp
.text:00408243		       pop     ebp
.text:00408244		       retn
.text:00408244 sub_408240      endp
.text:00408244
.text:00408244 ; ---------------------------------------------------------------------------
.text:00408245		       align 10h
.text:00408250
.text:00408250 ; =============== S U B R O U T I N E =======================================
.text:00408250
.text:00408250 ; Attributes: bp-based frame
.text:00408250
.text:00408250 sub_408250      proc near	       ; CODE XREF: start+82p
.text:00408250					       ; DATA XREF: sub_4082E0+80o ...
.text:00408250		       push    ebp
.text:00408251		       mov     ebp, esp
.text:00408253		       pop     ebp
.text:00408254		       retn
.text:00408254 sub_408250      endp
.text:00408254
.text:00408254 ; ---------------------------------------------------------------------------
.text:00408255		       align 10h
.text:00408260
.text:00408260 ; =============== S U B R O U T I N E =======================================
.text:00408260
.text:00408260 ; Attributes: bp-based frame
.text:00408260
.text:00408260 sub_408260      proc near	       ; CODE XREF: start+9Ep
.text:00408260					       ; DATA XREF: sub_4082E0+87o ...
.text:00408260		       push    ebp
.text:00408261		       mov     ebp, esp
.text:00408263		       pop     ebp
.text:00408264		       retn
.text:00408264 sub_408260      endp
.text:00408264
.text:00408264 ; ---------------------------------------------------------------------------
.text:00408265		       align 10h
.text:00408270 ; [00000006 BYTES: COLLAPSED FUNCTION __main. PRESS KEYPAD "+" TO EXPAND]
.text:00408276		       align 4
.text:00408278 ; [00000006 BYTES: COLLAPSED FUNCTION random. PRESS KEYPAD "+" TO EXPAND]
.text:0040827E		       align 10h
.text:00408280 ; [00000006 BYTES: COLLAPSED FUNCTION fprintf. PRESS KEYPAD "+" TO EXPAND]
.text:00408286		       align 4
.text:00408288 ; [00000006 BYTES: COLLAPSED FUNCTION printf. PRESS KEYPAD "+" TO EXPAND]
.text:0040828E		       align 10h
.text:00408290 ; [00000006 BYTES: COLLAPSED FUNCTION fflush. PRESS KEYPAD "+" TO EXPAND]
.text:00408296		       align 4
.text:00408298 ; [00000006 BYTES: COLLAPSED FUNCTION __getreent. PRESS KEYPAD "+" TO EXPAND]
.text:0040829E		       align 10h
.text:004082A0 ; [00000006 BYTES: COLLAPSED FUNCTION malloc. PRESS KEYPAD "+" TO EXPAND]
.text:004082A6		       align 4
.text:004082A8 ; [00000006 BYTES: COLLAPSED FUNCTION free. PRESS KEYPAD	"+" TO EXPAND]
.text:004082AE		       align 10h
.text:004082B0 ; [00000006 BYTES: COLLAPSED FUNCTION __assert_func. PRESS KEYPAD "+" TO	EXPAND]
.text:004082B6		       align 4
.text:004082B8 ; [00000006 BYTES: COLLAPSED FUNCTION srandom. PRESS KEYPAD "+" TO EXPAND]
.text:004082BE		       align 10h
.text:004082C0 ; [00000006 BYTES: COLLAPSED FUNCTION time. PRESS KEYPAD	"+" TO EXPAND]
.text:004082C6		       align 4
.text:004082C8 ; [00000006 BYTES: COLLAPSED FUNCTION putchar. PRESS KEYPAD "+" TO EXPAND]
.text:004082CE		       align 10h
.text:004082D0 ; [00000006 BYTES: COLLAPSED FUNCTION fwrite. PRESS KEYPAD "+" TO EXPAND]
.text:004082D6		       align 10h
.text:004082E0
.text:004082E0 ; =============== S U B R O U T I N E =======================================
.text:004082E0
.text:004082E0 ; Attributes: bp-based frame
.text:004082E0
.text:004082E0 sub_4082E0      proc near	       ; CODE XREF: sub_408200+14p
.text:004082E0					       ; sub_408740+18p
.text:004082E0
.text:004082E0 var_18	       = dword ptr -18h
.text:004082E0 arg_0	       = dword ptr  8
.text:004082E0 arg_4	       = dword ptr  0Ch
.text:004082E0
.text:004082E0		       push    ebp
.text:004082E1		       mov     ebp, esp
.text:004082E3		       push    esi
.text:004082E4		       push    ebx
.text:004082E5		       sub     esp, 10h
.text:004082E8		       mov     ebx, [ebp+arg_4]
.text:004082EB		       mov     esi, [ebp+arg_0]
.text:004082EE		       mov     [esp+18h+var_18], 8
.text:004082F5		       call    cygwin_internal
.text:004082FA		       test    ebx, ebx
.text:004082FC		       mov     ecx, eax
.text:004082FE		       jz      loc_4084C0
.text:00408304		       mov     eax, ds:_impure_ptr
.text:00408309		       test    ecx, ecx
.text:0040830B		       mov     dword ptr [ebx+4], 0A8h
.text:00408312		       mov     dword ptr [ebx+8], 3EFh
.text:00408319		       mov     dword ptr [ebx+0Ch], 7
.text:00408320		       mov     [ebx+10h], eax
.text:00408323		       mov     eax, [ebp+0]
.text:00408326		       mov     dword ptr [ebx+80h], 0
.text:00408330		       mov     dword ptr [ebx+84h], 0E6h
.text:0040833A		       mov     dword ptr [ebx+2Ch], offset dword_4087E0
.text:00408341		       mov     dword ptr [ebx+30h], offset dword_4087EC
.text:00408348		       mov     dword ptr [ebx+14h], offset dword_40B020
.text:0040834F		       mov     [ebx+28h], esi
.text:00408352		       mov     dword ptr [ebx+48h], offset sub_408230
.text:00408359		       mov     dword ptr [ebx+4Ch], offset sub_408240
.text:00408360		       mov     dword ptr [ebx+50h], offset sub_408250
.text:00408367		       mov     dword ptr [ebx+54h], offset sub_408260
.text:0040836E		       mov     dword ptr [ebx+24h], offset dword_40B024
.text:00408375		       mov     [ebx], eax
.text:00408377		       mov     dword ptr [ebx+18h], offset malloc
.text:0040837E		       mov     dword ptr [ebx+1Ch], offset free
.text:00408385		       mov     dword ptr [ebx+20h], offset loc_408730
.text:0040838C		       mov     dword ptr [ebx+44h], offset loc_408738
.text:00408393		       jz      loc_40845A
.text:00408399
.text:00408399 loc_408399:			       ; CODE XREF: sub_4082E0+277j
.text:00408399		       mov     edx, [ecx+78h]
.text:0040839C		       test    edx, edx
.text:0040839E		       jz      loc_40845A
.text:004083A4		       mov     eax, ds:dword_40B028
.text:004083A9		       test    eax, eax
.text:004083AB		       jnz     loc_40845A
.text:004083B1		       mov     eax, dword_409020
.text:004083B6		       test    eax, eax
.text:004083B8		       jz      loc_4085D0
.text:004083BE
.text:004083BE loc_4083BE:			       ; CODE XREF: sub_4082E0+2F7j
.text:004083BE		       mov     eax, dword_409024
.text:004083C3		       test    eax, eax
.text:004083C5		       jz      loc_4085C0
.text:004083CB
.text:004083CB loc_4083CB:			       ; CODE XREF: sub_4082E0+2E8j
.text:004083CB		       mov     eax, dword_409028
.text:004083D0		       test    eax, eax
.text:004083D2		       jz      loc_4085B0
.text:004083D8
.text:004083D8 loc_4083D8:			       ; CODE XREF: sub_4082E0+2D8j
.text:004083D8		       mov     eax, dword_40902C
.text:004083DD		       test    eax, eax
.text:004083DF		       jz      loc_4085A0
.text:004083E5
.text:004083E5 loc_4083E5:			       ; CODE XREF: sub_4082E0+2C8j
.text:004083E5		       mov     eax, dword_409030
.text:004083EA		       test    eax, eax
.text:004083EC		       jz      loc_408590
.text:004083F2
.text:004083F2 loc_4083F2:			       ; CODE XREF: sub_4082E0+2B8j
.text:004083F2		       mov     esi, dword_409034
.text:004083F8		       test    esi, esi
.text:004083FA		       jz      loc_408580
.text:00408400
.text:00408400 loc_408400:			       ; CODE XREF: sub_4082E0+2A8j
.text:00408400		       mov     ecx, dword_409038
.text:00408406		       test    ecx, ecx
.text:00408408		       jz      loc_408570
.text:0040840E
.text:0040840E loc_40840E:			       ; CODE XREF: sub_4082E0+298j
.text:0040840E		       mov     eax, dword_40903C
.text:00408413		       test    eax, eax
.text:00408415		       jz      loc_408562
.text:0040841B
.text:0040841B loc_40841B:			       ; CODE XREF: sub_4082E0+28Aj
.text:0040841B		       mov     eax, dword_409020
.text:00408420		       mov     [edx], eax
.text:00408422		       mov     eax, dword_409024
.text:00408427		       mov     [edx+4],	eax
.text:0040842A		       mov     eax, dword_409028
.text:0040842F		       mov     [edx+8],	eax
.text:00408432		       mov     eax, dword_40902C
.text:00408437		       mov     [edx+0Ch], eax
.text:0040843A		       mov     eax, dword_409030
.text:0040843F		       mov     [edx+10h], eax
.text:00408442		       mov     eax, dword_409034
.text:00408447		       mov     [edx+14h], eax
.text:0040844A		       mov     eax, dword_409038
.text:0040844F		       mov     [edx+18h], eax
.text:00408452		       mov     eax, dword_40903C
.text:00408457		       mov     [edx+1Ch], eax
.text:0040845A
.text:0040845A loc_40845A:			       ; CODE XREF: sub_4082E0+B3j
.text:0040845A					       ; sub_4082E0+BEj ...
.text:0040845A		       mov     [esp+18h+var_18], 0
.text:00408461		       call    GetModuleHandleA
.text:00408466		       mov     dword ptr [ebx+34h], offset off_409000
.text:0040846D		       mov     dword ptr [ebx+38h], offset dword_409E04
.text:00408474		       mov     dword ptr [ebx+3Ch], offset dword_40B000
.text:0040847B		       mov     dword ptr [ebx+40h], offset dword_40E010
.text:00408482		       mov     dword ptr [ebx+94h], offset dword_40A000
.text:0040848C		       mov     [ebx+7Ch], eax
.text:0040848F		       sub     esp, 4
.text:00408492		       mov     dword ptr [ebx+98h], offset dword_40A000
.text:0040849C		       mov     dword ptr [ebx+9Ch], 400000h
.text:004084A6		       call    sub_408720
.text:004084AB		       lea     esp, [ebp-8]
.text:004084AE		       mov     eax, 1
.text:004084B3		       pop     ebx
.text:004084B4		       pop     esi
.text:004084B5		       pop     ebp
.text:004084B6		       retn    8
.text:004084B6 ; ---------------------------------------------------------------------------
.text:004084B9		       align 10h
.text:004084C0
.text:004084C0 loc_4084C0:			       ; CODE XREF: sub_4082E0+1Ej
.text:004084C0		       mov     dword ptr [eax+4], 0A8h
.text:004084C7		       mov     edx, ds:_impure_ptr
.text:004084CD		       test    ecx, ecx
.text:004084CF		       mov     dword ptr [eax+8], 3EFh
.text:004084D6		       mov     ebx, ecx
.text:004084D8		       mov     dword ptr [eax+0Ch], 7
.text:004084DF		       mov     dword ptr [eax+80h], 0
.text:004084E9		       mov     dword ptr [eax+84h], 0E6h
.text:004084F3		       mov     dword ptr [eax+2Ch], offset dword_4087E0
.text:004084FA		       mov     dword ptr [eax+30h], offset dword_4087EC
.text:00408501		       mov     dword ptr [eax+14h], offset dword_40B020
.text:00408508		       mov     eax, [eax+0A4h]
.text:0040850E		       mov     [ecx+28h], esi
.text:00408511		       mov     dword ptr [ecx+48h], offset sub_408230
.text:00408518		       mov     dword ptr [ecx+4Ch], offset sub_408240
.text:0040851F		       mov     [edx], eax
.text:00408521		       mov     eax, [ebp+0]
.text:00408524		       mov     dword ptr [ecx+50h], offset sub_408250
.text:0040852B		       mov     dword ptr [ecx+54h], offset sub_408260
.text:00408532		       mov     dword ptr [ecx+24h], offset dword_40B024
.text:00408539		       mov     [ecx], eax
.text:0040853B		       mov     dword ptr [ecx+18h], offset malloc
.text:00408542		       mov     dword ptr [ecx+1Ch], offset free
.text:00408549		       mov     dword ptr [ecx+20h], offset loc_408730
.text:00408550		       mov     dword ptr [ecx+44h], offset loc_408738
.text:00408557		       jnz     loc_408399
.text:0040855D		       jmp     loc_40845A
.text:00408562 ; ---------------------------------------------------------------------------
.text:00408562
.text:00408562 loc_408562:			       ; CODE XREF: sub_4082E0+135j
.text:00408562		       mov     eax, [edx+1Ch]
.text:00408565		       mov     dword_40903C, eax
.text:0040856A		       jmp     loc_40841B
.text:0040856A ; ---------------------------------------------------------------------------
.text:0040856F		       align 10h
.text:00408570
.text:00408570 loc_408570:			       ; CODE XREF: sub_4082E0+128j
.text:00408570		       mov     eax, [edx+18h]
.text:00408573		       mov     dword_409038, eax
.text:00408578		       jmp     loc_40840E
.text:00408578 ; ---------------------------------------------------------------------------
.text:0040857D		       align 10h
.text:00408580
.text:00408580 loc_408580:			       ; CODE XREF: sub_4082E0+11Aj
.text:00408580		       mov     eax, [edx+14h]
.text:00408583		       mov     dword_409034, eax
.text:00408588		       jmp     loc_408400
.text:00408588 ; ---------------------------------------------------------------------------
.text:0040858D		       align 10h
.text:00408590
.text:00408590 loc_408590:			       ; CODE XREF: sub_4082E0+10Cj
.text:00408590		       mov     eax, [edx+10h]
.text:00408593		       mov     dword_409030, eax
.text:00408598		       jmp     loc_4083F2
.text:00408598 ; ---------------------------------------------------------------------------
.text:0040859D		       align 10h
.text:004085A0
.text:004085A0 loc_4085A0:			       ; CODE XREF: sub_4082E0+FFj
.text:004085A0		       mov     eax, [edx+0Ch]
.text:004085A3		       mov     dword_40902C, eax
.text:004085A8		       jmp     loc_4083E5
.text:004085A8 ; ---------------------------------------------------------------------------
.text:004085AD		       align 10h
.text:004085B0
.text:004085B0 loc_4085B0:			       ; CODE XREF: sub_4082E0+F2j
.text:004085B0		       mov     eax, [edx+8]
.text:004085B3		       mov     dword_409028, eax
.text:004085B8		       jmp     loc_4083D8
.text:004085B8 ; ---------------------------------------------------------------------------
.text:004085BD		       align 10h
.text:004085C0
.text:004085C0 loc_4085C0:			       ; CODE XREF: sub_4082E0+E5j
.text:004085C0		       mov     eax, [edx+4]
.text:004085C3		       mov     dword_409024, eax
.text:004085C8		       jmp     loc_4083CB
.text:004085C8 ; ---------------------------------------------------------------------------
.text:004085CD		       align 10h
.text:004085D0
.text:004085D0 loc_4085D0:			       ; CODE XREF: sub_4082E0+D8j
.text:004085D0		       mov     eax, [edx]
.text:004085D2		       mov     dword_409020, eax
.text:004085D7		       jmp     loc_4083BE
.text:004085D7 sub_4082E0      endp
.text:004085D7
.text:004085D7 ; ---------------------------------------------------------------------------
.text:004085DC		       align 10h
.text:004085E0
.text:004085E0 ; =============== S U B R O U T I N E =======================================
.text:004085E0
.text:004085E0 ; Attributes: bp-based frame
.text:004085E0
.text:004085E0 sub_4085E0      proc near	       ; DATA XREF: .text:004086D4o
.text:004085E0
.text:004085E0 var_18	       = dword ptr -18h
.text:004085E0 var_14	       = dword ptr -14h
.text:004085E0 var_10	       = dword ptr -10h
.text:004085E0
.text:004085E0		       push    ebp
.text:004085E1		       mov     ebp, esp
.text:004085E3		       sub     esp, 18h
.text:004085E6		       mov     eax, ds:dword_40B050
.text:004085EB		       mov     [esp+18h+var_10], eax
.text:004085EF		       mov     eax, ds:dword_40B040
.text:004085F4		       mov     [esp+18h+var_14], eax
.text:004085F8		       mov     eax, ds:dword_40B030
.text:004085FD		       mov     [esp+18h+var_18], eax
.text:00408600		       call    sub_408790
.text:00408605		       sub     esp, 0Ch
.text:00408608		       leave
.text:00408609		       retn
.text:00408609 sub_4085E0      endp
.text:00408609
.text:00408609 ; ---------------------------------------------------------------------------
.text:0040860A		       align 10h
.text:00408610
.text:00408610 loc_408610:			       ; CODE XREF: .text:00408704j
.text:00408610		       push    ebp
.text:00408611		       mov     ebp, esp
.text:00408613		       push    ebx
.text:00408614		       sub     esp, 14h
.text:00408617		       mov     eax, [ebp+0Ch]
.text:0040861A		       mov     ecx, [ebp+8]
.text:0040861D		       mov     edx, [ebp+10h]
.text:00408620		       cmp     eax, 1
.text:00408623		       jz      loc_4086B0
.text:00408629		       jb      short loc_408643
.text:0040862B		       cmp     eax, 2
.text:0040862E		       jz      short loc_408696
.text:00408630		       cmp     eax, 3
.text:00408633		       mov     ebx, 1
.text:00408638		       jz      short loc_408680
.text:0040863A
.text:0040863A loc_40863A:			       ; CODE XREF: .text:0040865Ej
.text:0040863A					       ; .text:00408677j
.text:0040863A		       mov     eax, ebx
.text:0040863C		       mov     ebx, [ebp-4]
.text:0040863F		       leave
.text:00408640		       retn    0Ch
.text:00408643 ; ---------------------------------------------------------------------------
.text:00408643
.text:00408643 loc_408643:			       ; CODE XREF: .text:00408629j
.text:00408643		       mov     [esp+8],	edx
.text:00408647		       mov     dword ptr [esp+4], 0
.text:0040864F		       mov     [esp], ecx
.text:00408652		       call    sub_408790
.text:00408657		       sub     esp, 0Ch
.text:0040865A		       test    eax, eax
.text:0040865C		       mov     ebx, eax
.text:0040865E		       jz      short loc_40863A
.text:00408660		       mov     eax, ds:dword_40B060
.text:00408665		       mov     [esp], eax
.text:00408668		       call    cygwin_detach_dll
.text:0040866D		       mov     ds:dword_40B060,	0FFFFFFFFh
.text:00408677		       jmp     short loc_40863A
.text:00408677 ; ---------------------------------------------------------------------------
.text:00408679		       align 10h
.text:00408680
.text:00408680 loc_408680:			       ; CODE XREF: .text:00408638j
.text:00408680		       mov     [ebp+10h], edx
.text:00408683		       mov     ebx, [ebp-4]
.text:00408686		       mov     dword ptr [ebp+0Ch], 3
.text:0040868D		       mov     [ebp+8],	ecx
.text:00408690		       leave
.text:00408691		       jmp     sub_408790
.text:00408696 ; ---------------------------------------------------------------------------
.text:00408696
.text:00408696 loc_408696:			       ; CODE XREF: .text:0040862Ej
.text:00408696		       mov     [ebp+10h], edx
.text:00408699		       mov     ebx, [ebp-4]
.text:0040869C		       mov     dword ptr [ebp+0Ch], 2
.text:004086A3		       mov     [ebp+8],	ecx
.text:004086A6		       leave
.text:004086A7		       jmp     sub_408790
.text:004086A7 ; ---------------------------------------------------------------------------
.text:004086AC		       align 10h
.text:004086B0
.text:004086B0 loc_4086B0:			       ; CODE XREF: .text:00408623j
.text:004086B0		       xor     eax, eax
.text:004086B2		       test    edx, edx
.text:004086B4		       setz    al
.text:004086B7		       xor     ebx, ebx
.text:004086B9		       mov     ds:dword_40B030,	ecx
.text:004086BF		       mov     ds:dword_40B040,	1
.text:004086C9		       mov     ds:dword_40B050,	edx
.text:004086CF		       mov     ds:dword_40B028,	eax
.text:004086D4		       mov     dword ptr [esp+4], offset sub_4085E0
.text:004086DC		       mov     [esp], ecx
.text:004086DF		       call    sub_408740
.text:004086E4		       cmp     eax, 0FFFFFFFFh
.text:004086E7		       setnz   bl
.text:004086EA		       mov     ds:dword_40B060,	eax
.text:004086EF		       mov     eax, ebx
.text:004086F1		       mov     ebx, [ebp-4]
.text:004086F4		       leave
.text:004086F5		       retn    0Ch
.text:004086F5 ; ---------------------------------------------------------------------------
.text:004086F8		       align 10h
.text:00408700		       push    ebp
.text:00408701		       mov     ebp, esp
.text:00408703		       leave
.text:00408704		       jmp     loc_408610
.text:00408704 ; ---------------------------------------------------------------------------
.text:00408709		       align 10h
.text:00408710 ; [00000006 BYTES: COLLAPSED FUNCTION cygwin_internal. PRESS KEYPAD "+" TO EXPAND]
.text:00408716		       align 10h
.text:00408720
.text:00408720 ; =============== S U B R O U T I N E =======================================
.text:00408720
.text:00408720 ; Attributes: bp-based frame
.text:00408720
.text:00408720 sub_408720      proc near	       ; CODE XREF: sub_4082E0+1C6p
.text:00408720		       push    ebp
.text:00408721		       mov     ebp, esp
.text:00408723		       pop     ebp
.text:00408724		       retn
.text:00408724 sub_408720      endp
.text:00408724
.text:00408724 ; ---------------------------------------------------------------------------
.text:00408725		       align 10h
.text:00408730
.text:00408730 loc_408730:			       ; DATA XREF: sub_4082E0+A5o
.text:00408730					       ; sub_4082E0+269o
.text:00408730		       jmp     ds:realloc
.text:00408730 ; ---------------------------------------------------------------------------
.text:00408736		       align 4
.text:00408738
.text:00408738 loc_408738:			       ; DATA XREF: sub_4082E0+ACo
.text:00408738					       ; sub_4082E0+270o
.text:00408738		       jmp     ds:calloc
.text:00408738 ; ---------------------------------------------------------------------------
.text:0040873E		       align 10h
.text:00408740
.text:00408740 ; =============== S U B R O U T I N E =======================================
.text:00408740
.text:00408740 ; Attributes: bp-based frame
.text:00408740
.text:00408740 sub_408740      proc near	       ; CODE XREF: .text:004086DFp
.text:00408740
.text:00408740 var_18	       = dword ptr -18h
.text:00408740 var_14	       = dword ptr -14h
.text:00408740 var_4	       = dword ptr -4
.text:00408740 arg_0	       = dword ptr  8
.text:00408740 arg_4	       = dword ptr  0Ch
.text:00408740
.text:00408740 ; FUNCTION CHUNK	AT .text:004087A0 SIZE 00000006	BYTES
.text:00408740
.text:00408740		       push    ebp
.text:00408741		       mov     ebp, esp
.text:00408743		       push    ebx
.text:00408744		       sub     esp, 14h
.text:00408747		       mov     ebx, [ebp+arg_0]
.text:0040874A		       mov     [esp+18h+var_14], offset	dword_40B070
.text:00408752		       mov     eax, [ebp+arg_4]
.text:00408755		       mov     [esp+18h+var_18], eax
.text:00408758		       call    sub_4082E0
.text:0040875D		       mov     [ebp+arg_0], ebx
.text:00408760		       mov     ebx, [ebp+var_4]
.text:00408763		       mov     [ebp+arg_4], offset dword_40B070
.text:0040876A		       sub     esp, 8
.text:0040876D		       leave
.text:0040876E		       jmp     loc_4087A0
.text:0040876E sub_408740      endp
.text:0040876E
.text:0040876E ; ---------------------------------------------------------------------------
.text:00408773		       align 10h
.text:00408780 ; [00000006 BYTES: COLLAPSED FUNCTION cygwin_detach_dll.	PRESS KEYPAD "+" TO EXPAND]
.text:00408786		       align 10h
.text:00408790
.text:00408790 ; =============== S U B R O U T I N E =======================================
.text:00408790
.text:00408790 ; Attributes: bp-based frame
.text:00408790
.text:00408790 sub_408790      proc near	       ; CODE XREF: sub_4085E0+20p
.text:00408790					       ; .text:00408652p ...
.text:00408790		       push    ebp
.text:00408791		       mov     eax, 1
.text:00408796		       mov     ebp, esp
.text:00408798		       pop     ebp
.text:00408799		       retn    0Ch
.text:00408799 sub_408790      endp
.text:00408799
.text:00408799 ; ---------------------------------------------------------------------------
.text:0040879C		       align 10h
.text:004087A0 ; START OF FUNCTION CHUNK FOR sub_408740
.text:004087A0
.text:004087A0 loc_4087A0:			       ; CODE XREF: sub_408740+2Ej
.text:004087A0		       jmp     ds:dll_dllcrt0
.text:004087A0 ; END OF	FUNCTION CHUNK FOR sub_408740
.text:004087A0 ; ---------------------------------------------------------------------------
.text:004087A6		       align 4
.text:004087A8 ; [00000006 BYTES: COLLAPSED FUNCTION GetModuleHandleA. PRESS KEYPAD "+"	TO EXPAND]
.text:004087AE		       align 10h
.text:004087B0 ; [00000006 BYTES: COLLAPSED FUNCTION GetProcAddress. PRESS KEYPAD "+" TO EXPAND]
.text:004087B6		       align 10h
.text:004087C0		       push    ebp
.text:004087C1		       mov     ebp, esp
.text:004087C3		       pop     ebp
.text:004087C4		       jmp     loc_4010B0
.text:004087C4 ; ---------------------------------------------------------------------------
.text:004087C9		       align 10h
.text:004087D0		       push    ebp
.text:004087D1		       mov     ebp, esp
.text:004087D3		       pop     ebp
.text:004087D4		       jmp     loc_401150
.text:004087D4 ; ---------------------------------------------------------------------------
.text:004087D9		       align 10h
.text:004087E0 dword_4087E0    dd 0FFFFFFFFh, 4087C0h, 0 ; DATA	XREF: sub_4082E0+5Ao
.text:004087E0					       ; sub_4082E0+213o
.text:004087EC dword_4087EC    dd 0FFFFFFFFh, 4087D0h, 3 dup(0)	; DATA XREF: sub_4082E0+61o
.text:004087EC					       ; sub_4082E0+21Ao
.text:00408800		       dd 200h dup(?)
.text:00408800 _text	       ends
.text:00408800
.data:00409000 ; Section 2. (virtual address 00009000)
.data:00409000 ; Virtual size		       : 00000E04 (   3588.)
.data:00409000 ; Section size in file	       : 00001000 (   4096.)
.data:00409000 ; Offset	to raw data for	section: 00007C00
.data:00409000 ; Flags C0600040: Data Readable Writable
.data:00409000 ; Alignment     : 32 bytes
.data:00409000 ; ===========================================================================
.data:00409000
.data:00409000 ; Segment type: Pure data
.data:00409000 ; Segment permissions: Read/Write
.data:00409000 ; Segment alignment '32byte' can not be represented in assembly
.data:00409000 _data	       segment para public 'DATA' use32
.data:00409000		       assume cs:_data
.data:00409000		       ;org 409000h
.data:00409000 off_409000      dd offset __register_frame_info
.data:00409000					       ; DATA XREF: .text:loc_401130r
.data:00409000					       ; sub_4082E0+186o
.data:00409004 off_409004      dd offset __deregister_frame_info
.data:00409004					       ; DATA XREF: .text:loc_401190r
.data:00409008 dword_409008    dd 0		       ; DATA XREF: .text:loc_401140r
.data:0040900C		       align 20h
.data:00409020 dword_409020    dd 0		       ; DATA XREF: sub_4082E0+D1r
.data:00409020					       ; sub_4082E0:loc_40841Br ...
.data:00409024 dword_409024    dd 0		       ; DATA XREF: sub_4082E0:loc_4083BEr
.data:00409024					       ; sub_4082E0+142r ...
.data:00409028 dword_409028    dd 0		       ; DATA XREF: sub_4082E0:loc_4083CBr
.data:00409028					       ; sub_4082E0+14Ar ...
.data:0040902C dword_40902C    dd 0		       ; DATA XREF: sub_4082E0:loc_4083D8r
.data:0040902C					       ; sub_4082E0+152r ...
.data:00409030 dword_409030    dd 0		       ; DATA XREF: sub_4082E0:loc_4083E5r
.data:00409030					       ; sub_4082E0+15Ar ...
.data:00409034 dword_409034    dd 0		       ; DATA XREF: sub_4082E0:loc_4083F2r
.data:00409034					       ; sub_4082E0+162r ...
.data:00409038 dword_409038    dd 0		       ; DATA XREF: sub_4082E0:loc_408400r
.data:00409038					       ; sub_4082E0+16Ar ...
.data:0040903C dword_40903C    dd 0		       ; DATA XREF: sub_4082E0:loc_40840Er
.data:0040903C					       ; sub_4082E0+172r ...
.data:00409040 aCyggcc_s1_dll  db 'cyggcc_s-1.dll',0   ; DATA XREF: .text:004010B6o
.data:00409040					       ; .text:00401156o
.data:0040904F a__register_fra db '__register_frame_info',0 ; DATA XREF: .text:004010C9o
.data:00409065 aCyggcj9_dll    db 'cyggcj-9.dll',0     ; DATA XREF: .text:004010FAo
.data:00409072 a_jv_registercl db '_Jv_RegisterClasses',0 ; DATA XREF: .text:0040110Do
.data:00409086 a__deregister_f db '__deregister_frame_info',0 ; DATA XREF: .text:00401169o
.data:0040909E		       align 10h
.data:004090A0 aLPreviousNextL db 'l->previous->next == l',0 ; DATA XREF: sub_402A67+19o
.data:004090B7 aSelftest_c     db 'selftest.c',0       ; DATA XREF: sub_402A67+31o
.data:004090B7					       ; sub_402A67+61o ...
.data:004090C2 aLNextPreviousL db 'l->next->previous == l',0 ; DATA XREF: sub_402A67+49o
.data:004090D9 aL2NullL1NL2N   db 'l2!=NULL && l1->n == l2->n',0
.data:004090D9					       ; DATA XREF: sub_402B0E:loc_402B3Co
.data:004090F4 aL2Null	       db 'l2 == NULL',0       ; DATA XREF: sub_402B0E+60o
.data:004090FF aCheck_countsI0 db 'check_counts[i]==0',0 ; DATA XREF: sub_402B98+1Eo
.data:00409112 aCheck_countsI1 db 'check_counts[i]==1',0 ; DATA XREF: sub_402B98+48o
.data:00409125 aPathdeepCdeep  db '*pathdeep == cdeep',0 ; DATA XREF: sub_402C14+32o
.data:00409138 aMylistcmpTLeft db 'myListCmp(t->left_ptr, t) <= 0',0
.data:00409138					       ; DATA XREF: sub_402C14+6Do
.data:00409157		       align 4
.data:00409158 aMylistcmpTTRig db 'myListCmp(t, t->right_ptr) <= 0',0
.data:00409158					       ; DATA XREF: sub_402C14+A8o
.data:00409178 aTLeft_ptrNullS db 't->left_ptr == NULL || SGLIB___GET_VALUE(t->left_ptr->color)==0',0
.data:00409178					       ; DATA XREF: sub_402C14+DEo
.data:004091B8 aTRight_ptrNull db 't->right_ptr == NULL || SGLIB___GET_VALUE(t->right_ptr->color)==0'
.data:004091B8					       ; DATA XREF: sub_402C14+10Co
.data:004091B8		       db 0
.data:004091FA		       align 4
.data:004091FC aTNullSglib___g db 't==NULL || SGLIB___GET_VALUE(t->color) == 0',0
.data:004091FC					       ; DATA XREF: sub_402D8D+13o
.data:00409228 aItNull	       db 'it!=NULL',0         ; DATA XREF: sub_402DDA+18o
.data:00409231		       align 4
.data:00409234 a0TheBinary_tre db '0 && "the binary_tree is too deep"',0
.data:00409234					       ; DATA XREF: sub_402FE2+40o
.data:00409234					       ; sub_4041AA+10Eo ...
.data:00409257 aTElem	       db 't == elem',0        ; DATA XREF: sub_4030CF+53o
.data:00409261 aTNull	       db 't!=NULL',0          ; DATA XREF: sub_403156+17o
.data:00409261					       ; sub_403497+14o ...
.data:00409269		       align 4
.data:0040926C aSglib___get_va db 'SGLIB___GET_VALUE(t->color)==1',0
.data:0040926C					       ; DATA XREF: sub_403156+48o
.data:0040926C					       ; sub_403536+48o
.data:0040928B		       align 4
.data:0040928C aCNullSglib___g db 'c!=NULL && SGLIB___GET_VALUE(c->color)==0',0
.data:0040928C					       ; DATA XREF: sub_403156+AEo
.data:0040928C					       ; sub_403536+AEo
.data:004092B6		       align 4
.data:004092B8 aClNullSglib___ db 'cl==NULL || SGLIB___GET_VALUE(cl->color)==0',0
.data:004092B8					       ; DATA XREF: sub_403156+1A5o
.data:004092B8					       ; sub_403536+1A5o
.data:004092E4 a0:				       ; DATA XREF: sub_403156:loc_403350o
.data:004092E4					       ; sub_403536:loc_403730o ...
.data:004092E4		       unicode 0, <0>,0
.data:004092E8 aSglib___get__0 db 'SGLIB___GET_VALUE(br->color)==1',0
.data:004092E8					       ; DATA XREF: sub_403156+28Co
.data:004092E8					       ; sub_403536+28Co
.data:00409308 aBrNullSglib___ db 'br!=NULL && SGLIB___GET_VALUE(br->color)==1',0
.data:00409308					       ; DATA XREF: sub_403156:loc_40343Co
.data:00409308					       ; sub_403536:loc_40381Co
.data:00409334 a0TheElementToD db '0 && "The element to delete not found in the tree,  use ',27h,'delet'
.data:00409334					       ; DATA XREF: sub_403877+1Bo
.data:00409334		       db 'e_if_member',27h,'"!=NULL',0
.data:00409386		       align 4
.data:00409388 aElemTDeletingA db 'elem==t && "Deleting an element which is non member of the tree, '
.data:00409388					       ; DATA XREF: sub_403877+B8o
.data:00409388		       db 'use ',27h,'delete_if_member',27h,'"!=NULL',0
.data:004093E7		       align 4
.data:004093E8 a_p_NullElement db '*_p_!=NULL && "element is not member of the container, use DELETE'
.data:004093E8					       ; DATA XREF: .text:loc_403A74o
.data:004093E8					       ; sub_403A9F:loc_403AC7o ...
.data:004093E8		       db '_IF_MEMBER instead"!=NULL',0
.data:00409443 aB	       db 'b',0                ; DATA XREF: sub_403B82+3Fo
.data:00409445 aR	       db 'r',0                ; DATA XREF: sub_403B82+44o
.data:00409447 aSD	       db '%s%d ',0            ; DATA XREF: sub_403B82+54o
.data:0040944D		       align 10h
.data:00409450 aErrorListUnsor db '[ERROR] LIST UNSORTED !!!!!!!!!!!!!!!',0Ah,0
.data:00409450					       ; DATA XREF: sub_403C6A+32o
.data:00409450					       ; sub_403CD7+35o
.data:00409477		       align 4
.data:00409478 aErrorArrayUnso db '[ERROR] ARRAY UNSORTED AT INDEX %d !!!!!!!!!!!!!!!',0Ah,0
.data:00409478					       ; DATA XREF: sub_403D47+34o
.data:004094AC aErrorArrayCorr db '[ERROR] ARRAY CORRESPONDENCE PROBLEM AT INDEX %d !!!!!!!!!!!!!!!',0Ah
.data:004094AC					       ; DATA XREF: sub_403DBF+2Do
.data:004094AC		       db 0
.data:004094EE		       align 10h
.data:004094F0 aErrorDifferent db '[ERROR] DIFFERENT NUMBERS IN TEST STRUCTURE !!!!!!!!!!!!!!!',0Ah,0
.data:004094F0					       ; DATA XREF: sub_403E35+3Eo
.data:0040952D aErrorD	       db '[ERROR] %d ',0      ; DATA XREF: sub_403E35+53o
.data:00409539 aIsMissing      db 'IS MISSING',0Ah,0   ; DATA XREF: sub_403E35+88o
.data:00409545 aAppeared       db 'APPEARED',0Ah,0     ; DATA XREF: sub_403E35+B2o
.data:0040954F aSglib_tree_l_0 db 'sglib_Tree_len(tree) == i',0 ; DATA XREF: sub_4041AA+3Do
.data:00409569		       align 4
.data:0040956C aSglib_tree_i_0 db 'sglib_Tree_is_member(tree, me)',0
.data:0040956C					       ; DATA XREF: sub_4041AA+2F2o
.data:0040958B		       align 4
.data:0040958C aSglib_tree_i_1 db '! sglib_Tree_is_member(tree, &te)',0
.data:0040958C					       ; DATA XREF: sub_4041AA+394o
.data:004095AE aTMe	       db 't==me',0            ; DATA XREF: sub_4041AA+4E2o
.data:004095B4 aTSglib_tree_it db 't==sglib_Tree_it_current(&it)',0
.data:004095B4					       ; DATA XREF: sub_4041AA+530o
.data:004095D2 aLNI	       db 'l->n == i',0        ; DATA XREF: sub_4041AA:loc_4047B2o
.data:004095D2					       ; sub_4041AA:loc_40485Ao
.data:004095DC aNCheck_countsI db 'n == check_counts[i]',0 ; DATA XREF: sub_4041AA+64Fo
.data:004095DC					       ; sub_4041AA+6F7o
.data:004095F1		       align 4
.data:004095F4 aSglib_tree_fin db 'sglib_Tree_find_member(tree, &te)!=NULL',0
.data:004095F4					       ; DATA XREF: sub_4041AA+9B0o
.data:004095F4					       ; sub_4041AA+D07o
.data:0040961C aSglib_tree_f_0 db 'sglib_Tree_find_member(tree, &te)==NULL',0
.data:0040961C					       ; DATA XREF: sub_4041AA+9FBo
.data:00409644 aMembNull       db 'memb!=NULL',0       ; DATA XREF: sub_4041AA+A79o
.data:00409644					       ; sub_40502E:loc_4054D2o ...
.data:0040964F aTreeNull       db 'tree!=NULL',0       ; DATA XREF: sub_4041AA+AA6o
.data:0040965A aTreeNull_0     db 'tree==NULL',0       ; DATA XREF: sub_4041AA+B0Eo
.data:0040965A					       ; sub_4041AA+DEDo
.data:00409665 aMembMemb2      db 'memb == memb2',0    ; DATA XREF: sub_4041AA+D89o
.data:00409665					       ; sub_40502E+663o ...
.data:00409673		       align 4
.data:00409674 aSglib_sorted_0 db 'sglib_SortedList_len(list) == i',0
.data:00409674					       ; DATA XREF: sub_40502E+3Do
.data:00409694 aSglib_sorted_1 db 'sglib_SortedList_find_member(list, &te)!=NULL',0
.data:00409694					       ; DATA XREF: sub_40502E+346o
.data:00409694					       ; sub_40502E+5D2o
.data:004096C2		       align 4
.data:004096C4 aSglib_sorted_2 db 'sglib_SortedList_find_member(list, &te)==NULL',0
.data:004096C4					       ; DATA XREF: sub_40502E+391o
.data:004096F2		       align 4
.data:004096F4 aSglib_sorted_3 db 'sglib_SortedList_is_member(list, el)',0
.data:004096F4					       ; DATA XREF: sub_40502E+3E7o
.data:00409719		       align 4
.data:0040971C aSglib_sorted_4 db '! sglib_SortedList_is_member(list, &te)',0
.data:0040971C					       ; DATA XREF: sub_40502E+42Fo
.data:00409744 aListNull       db 'list==NULL',0       ; DATA XREF: sub_40502E+50Ao
.data:00409744					       ; sub_40502E+6BDo ...
.data:0040974F aListNull_0     db 'list!=NULL',0       ; DATA XREF: sub_40502E:loc_4057D2o
.data:0040974F					       ; sub_4059BC:loc_406728o ...
.data:0040975A aLl_current_ele db 'll==_current_element_',0 ; DATA XREF: sub_40502E+7FFo
.data:0040975A					       ; sub_4059BC+DD0o ...
.data:00409770 aLlNull	       db 'll==NULL',0         ; DATA XREF: sub_40502E+854o
.data:00409770					       ; sub_4059BC+EA6o ...
.data:00409779		       align 4
.data:0040977C aLlNIterator_eq db 'll->n == ITERATOR_EQ_CHECK_VALUE',0
.data:0040977C					       ; DATA XREF: sub_40502E:loc_405902o
.data:0040977C					       ; sub_4059BC:loc_4068E2o ...
.data:0040979D aCcCc5	       db 'cc == cc5',0        ; DATA XREF: sub_40502E+90Co
.data:0040979D					       ; sub_4059BC+F5Eo ...
.data:004097A7		       align 4
.data:004097A8 aSglib_doubleli db 'sglib_DoubleLinkedList_len(list) == i',0
.data:004097A8					       ; DATA XREF: sub_4059BC+5Co
.data:004097CE		       align 10h
.data:004097D0 aSglib_double_0 db 'sglib_DoubleLinkedList_find_member(list, &te) != NULL',0
.data:004097D0					       ; DATA XREF: sub_4059BC+4E7o
.data:00409806		       align 4
.data:00409808 aSglib_double_1 db 'sglib_DoubleLinkedList_find_member(list, &te) == NULL',0
.data:00409808					       ; DATA XREF: sub_4059BC+532o
.data:0040983E		       align 10h
.data:00409840 aSglib_double_2 db 'sglib_DoubleLinkedList_is_member(list, _current_element_)',0
.data:00409840					       ; DATA XREF: sub_4059BC+58Fo
.data:00409840					       ; sub_4059BC+5D6o
.data:0040987A		       align 4
.data:0040987C aSglib_double_3 db '! sglib_DoubleLinkedList_is_member(list, &te)',0
.data:0040987C					       ; DATA XREF: sub_4059BC+627o
.data:004098AA		       align 4
.data:004098AC aSglib_double_4 db 'sglib_DoubleLinkedList_find_member(list, &te)!=NULL',0
.data:004098AC					       ; DATA XREF: sub_4059BC+916o
.data:004098E0 aMembNull_0     db 'memb != NULL',0     ; DATA XREF: sub_406A03+301o
.data:004098ED		       align 10h
.data:004098F0 aSglib_hashed_s db 'sglib_hashed_SimpleList_is_member(htab, memb) != 0',0
.data:004098F0					       ; DATA XREF: sub_406A03+33Bo
.data:00409923		       align 4
.data:00409924 aSglib_hashed_0 db 'sglib_hashed_SimpleList_find_member(htab, &te) == NULL',0
.data:00409924					       ; DATA XREF: sub_406A03+384o
.data:0040995B		       align 4
.data:0040995C aSglib_hashed_1 db 'sglib_hashed_SimpleList_is_member(htab, &te) == 0',0
.data:0040995C					       ; DATA XREF: sub_406A03+3BEo
.data:0040998E		       align 10h
.data:00409990 aSglib_hashed_2 db 'sglib_hashed_SimpleList_find_member(htab, &te)!=NULL',0
.data:00409990					       ; DATA XREF: sub_406A03+502o
.data:004099C5		       align 4
.data:004099C8 aSglib_simple_0 db 'sglib_SimpleList_len(list) == i',0
.data:004099C8					       ; DATA XREF: sub_40719F+48o
.data:004099E8 aSglib_simple_1 db 'sglib_SimpleList_find_member(list, &te) != NULL',0
.data:004099E8					       ; DATA XREF: sub_40719F+3D5o
.data:00409A18 aSglib_simple_2 db 'sglib_SimpleList_find_member(list, &te) == NULL',0
.data:00409A18					       ; DATA XREF: sub_40719F+420o
.data:00409A48 aSglib_simple_3 db 'sglib_SimpleList_is_member(list, _current_element_)',0
.data:00409A48					       ; DATA XREF: sub_40719F+476o
.data:00409A7C aSglib_simple_4 db '! sglib_SimpleList_is_member(list, &te)',0
.data:00409A7C					       ; DATA XREF: sub_40719F+4BEo
.data:00409AA4 aSglib_simple_5 db 'sglib_SimpleList_find_member(list, &te)!=NULL',0
.data:00409AA4					       ; DATA XREF: sub_40719F+648o
.data:00409AD2 aRbtree_test    db 'rbtree_test',0      ; DATA XREF: sub_4041AA+45o
.data:00409AD2					       ; sub_4041AA+116o ...
.data:00409ADE aSorted_list_te db 'sorted_list_test',0 ; DATA XREF: sub_40502E+45o
.data:00409ADE					       ; sub_40502E+34Eo ...
.data:00409AEF aDouble_linked_ db 'double_linked_list_test',0 ; DATA XREF: sub_4059BC+64o
.data:00409AEF					       ; sub_4059BC+4EFo ...
.data:00409B07 aHashed_list_te db 'hashed_list_test',0 ; DATA XREF: sub_406A03+309o
.data:00409B07					       ; sub_406A03+343o ...
.data:00409B18 aList_test      db 'list_test',0        ; DATA XREF: sub_40719F+50o
.data:00409B18					       ; sub_40719F+3DDo ...
.data:00409B22		       align 20h
.data:00409B40 aCheck_double_l db 'check_double_linked_list_element',0
.data:00409B40					       ; DATA XREF: sub_402A67+21o
.data:00409B40					       ; sub_402A67+51o
.data:00409B61		       align 20h
.data:00409B80 aCheck_that_int db 'check_that_int_list_is_reverse_sorted',0
.data:00409B80					       ; DATA XREF: sub_403C6A+46o
.data:00409BA6 aCheck_that_i_0 db 'check_that_int_list_is_sorted',0
.data:00409BA6					       ; DATA XREF: sub_403CD7+49o
.data:00409BC4 aCheck_that_i_1 db 'check_that_int_array_is_sorted',0
.data:00409BC4					       ; DATA XREF: sub_403D47+4Fo
.data:00409BE3		       align 20h
.data:00409C00 aCheck_multiple db 'check_multiple_array_correspondence',0
.data:00409C00					       ; DATA XREF: sub_403DBF+48o
.data:00409C24 aCheck_list_equ db 'check_list_equality',0 ; DATA XREF: sub_402B0E+36o
.data:00409C24					       ; sub_402B0E+68o
.data:00409C38 aCompare_unique db 'compare_unique_counts',0 ; DATA XREF: sub_402B98+26o
.data:00409C38					       ; sub_402B98+50o
.data:00409C4E aCompare_counts db 'compare_counts',0   ; DATA XREF: sub_403E35+C6o
.data:00409C5D		       align 10h
.data:00409C60 aSglib___tree_0 db 'sglib___Tree_consistency_check',0
.data:00409C60					       ; DATA XREF: sub_402D8D+1Bo
.data:00409C7F		       align 10h
.data:00409C80 aSglib___tree_c db 'sglib___Tree_consistency_check_recursive',0
.data:00409C80					       ; DATA XREF: sub_402C14+3Ao
.data:00409C80					       ; sub_402C14+75o ...
.data:00409CA9 aSglib__tree_it db 'sglib__Tree_it_init',0 ; DATA XREF: sub_402DDA+20o
.data:00409CBD aSglib_tree_len db 'sglib_Tree_len',0   ; DATA XREF: sub_402FE2+48o
.data:00409CCC aSglib_tree_is_ db 'sglib_Tree_is_member',0 ; DATA XREF: sub_4030CF+5Bo
.data:00409CE1 aSglib___tree_2 db 'sglib___Tree_delete_recursive',0
.data:00409CE1					       ; DATA XREF: sub_403877+23o
.data:00409CE1					       ; sub_403877+C0o
.data:00409CFF		       align 10h
.data:00409D00 aSglib___tree_f db 'sglib___Tree_fix_right_deletion_discrepancy',0
.data:00409D00					       ; DATA XREF: sub_403156+1Fo
.data:00409D00					       ; sub_403156+50o ...
.data:00409D2C		       align 20h
.data:00409D40 aSglib___tree_d db 'sglib___Tree_delete_rightmost_leaf',0
.data:00409D40					       ; DATA XREF: sub_403497+1Co
.data:00409D63		       align 20h
.data:00409D80 aSglib___tree_1 db 'sglib___Tree_fix_left_deletion_discrepancy',0
.data:00409D80					       ; DATA XREF: sub_403536+1Fo
.data:00409D80					       ; sub_403536+50o ...
.data:00409DAB		       align 4
.data:00409DAC aSglib_reverses db 'sglib_ReverseSortedList_delete',0
.data:00409DAC					       ; DATA XREF: .text:00403A7Co
.data:00409DCB aSglib_sortedli db 'sglib_SortedList_delete',0 ; DATA XREF: sub_403A9F+30o
.data:00409DE3 aSglib_simpleli db 'sglib_SimpleList_delete',0 ; DATA XREF: sub_403AF2+30o
.data:00409DFB		       align 10h
.data:00409E00 dword_409E00    dd 0		       ; DATA XREF: .text:loc_4010F1r
.data:00409E00					       ; .text:loc_401124o
.data:00409E04 dword_409E04    dd 7Fh dup(0)	       ; DATA XREF: sub_4082E0+18Do
.data:00409E04 _data	       ends
.data:00409E04
.eh_frame:0040A000 ; Section 3.	(virtual address 0000A000)
.eh_frame:0040A000 ; Virtual size		   : 00000004 (	     4.)
.eh_frame:0040A000 ; Section size in file	   : 00000200 (	   512.)
.eh_frame:0040A000 ; Offset to raw data	for section: 00008C00
.eh_frame:0040A000 ; Flags C0300040: Data Readable Writable
.eh_frame:0040A000 ; Alignment	   : 4 bytes
.eh_frame:0040A000 ; ===========================================================================
.eh_frame:0040A000
.eh_frame:0040A000 ; Segment type: Pure	data
.eh_frame:0040A000 ; Segment permissions: Read/Write
.eh_frame:0040A000 _eh_frame	   segment dword public	'DATA' use32
.eh_frame:0040A000		   assume cs:_eh_frame
.eh_frame:0040A000		   ;org	40A000h
.eh_frame:0040A000 dword_40A000	   dd 80h dup(0)	   ; DATA XREF:	.text:004010E8o
.eh_frame:0040A000					   ; .text:loc_401180o	...
.eh_frame:0040A200		   align 1000h
.eh_frame:0040A200 _eh_frame	   ends
.eh_frame:0040A200
.bss:0040B000 ;	Section	4. (virtual address 0000B000)
.bss:0040B000 ;	Virtual	size		      :	00003010 (  12304.)
.bss:0040B000 ;	Section	size in	file	      :	00000000 (	0.)
.bss:0040B000 ;	Offset to raw data for section:	00000000
.bss:0040B000 ;	Flags C0600080:	Bss Readable Writable
.bss:0040B000 ;	Alignment     :	32 bytes
.bss:0040B000 ;	===========================================================================
.bss:0040B000
.bss:0040B000 ;	Segment	type: Uninitialized
.bss:0040B000 ;	Segment	permissions: Read/Write
.bss:0040B000 ;	Segment	alignment '32byte' can not be represented in assembly
.bss:0040B000 _bss	      segment para public 'BSS' use32
.bss:0040B000		      assume cs:_bss
.bss:0040B000		      ;org 40B000h
.bss:0040B000		      assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0040B000 dword_40B000    dd 8 dup(?)	      ;	DATA XREF: .text:loc_4010E0o
.bss:0040B000					      ;	sub_4082E0+194o
.bss:0040B020 dword_40B020    dd ?		      ;	DATA XREF: sub_4082E0+68o
.bss:0040B020					      ;	sub_4082E0+221o
.bss:0040B024 dword_40B024    dd ?		      ;	DATA XREF: sub_4082E0+8Eo
.bss:0040B024					      ;	sub_4082E0+252o
.bss:0040B028 dword_40B028    dd ?		      ;	DATA XREF: sub_4082E0+C4r
.bss:0040B028					      ;	.text:004086CFw
.bss:0040B02C		      align 10h
.bss:0040B030 dword_40B030    dd ?		      ;	DATA XREF: sub_4085E0+18r
.bss:0040B030					      ;	.text:004086B9w
.bss:0040B034		      align 10h
.bss:0040B040 dword_40B040    dd ?		      ;	DATA XREF: sub_4085E0+Fr
.bss:0040B040					      ;	.text:004086BFw
.bss:0040B044		      align 10h
.bss:0040B050 dword_40B050    dd ?		      ;	DATA XREF: sub_4085E0+6r
.bss:0040B050					      ;	.text:004086C9w
.bss:0040B054		      align 10h
.bss:0040B060 dword_40B060    dd ?		      ;	DATA XREF: .text:00408660r
.bss:0040B060					      ;	.text:0040866Dw ...
.bss:0040B064		      align 10h
.bss:0040B070 dword_40B070    dd 2Ch dup(?)	      ;	DATA XREF: sub_408740+Ao
.bss:0040B070					      ;	sub_408740+23o
.bss:0040B120 dword_40B120    dd ?		      ;	DATA XREF: sub_403FDE+22o
.bss:0040B120					      ;	sub_403FDE+35o	...
.bss:0040B124		      dd 3E7h dup(?)
.bss:0040C0C0 dword_40C0C0    dd 3E8h dup(?)	      ;	DATA XREF: sub_403FDE+Eo
.bss:0040C0C0					      ;	sub_403FDE+3Do	...
.bss:0040D060 dword_40D060    dd ?		      ;	DATA XREF: sub_403FDE+16o
.bss:0040D060					      ;	sub_404029+16o	...
.bss:0040D064		      dd 3EBh dup(?)
.bss:0040E010 dword_40E010    dd 3FCh dup(?)	      ;	DATA XREF: sub_4082E0+19Bo
.bss:0040E010 _bss	      ends
.bss:0040E010
.idata:0040F000	; Section 5. (virtual address 0000F000)
.idata:0040F000	; Virtual size			: 0000031C (	796.)
.idata:0040F000	; Section size in file		: 00000400 (   1024.)
.idata:0040F000	; Offset to raw	data for section: 00008E00
.idata:0040F000	; Flags	C0300040: Data Readable	Writable
.idata:0040F000	; Alignment	: 4 bytes
.idata:0040F000	; ===========================================================================
.idata:0040F000
.idata:0040F000	; Segment type:	Externs
.idata:0040F000	; _idata
.idata:0040F000
.idata:0040F001
.idata:0040F0BC	;
.idata:0040F0BC	; Imports from cygwin1.dll
.idata:0040F0BC	;
.idata:0040F0BC			extrn __imp___assert_func:dword	; DATA XREF: __assert_funcr
.idata:0040F0C0			extrn __imp___getreent:dword ; DATA XREF: __getreentr
.idata:0040F0C4			extrn __imp___main:dword ; DATA	XREF: __mainr
.idata:0040F0C8	; __stdcall dll_crt0()
.idata:0040F0C8			extrn _dll_crt0@0:dword	; CODE XREF: sub_408200+1Cp
.idata:0040F0C8						; DATA XREF: sub_408200+1Cr
.idata:0040F0CC			extrn _impure_ptr:dword	; DATA XREF: sub_4082E0+24r
.idata:0040F0CC						; sub_4082E0+1E7r
.idata:0040F0D0	; void *__cdecl	calloc(size_t NumOfElements, size_t SizeOfElements)
.idata:0040F0D0			extrn calloc:dword	; DATA XREF: .text:loc_408738r
.idata:0040F0D4			extrn __imp_cygwin_detach_dll:dword
.idata:0040F0D4						; DATA XREF: cygwin_detach_dllr
.idata:0040F0D8			extrn __imp_cygwin_internal:dword
.idata:0040F0D8						; DATA XREF: cygwin_internalr
.idata:0040F0DC			extrn dll_dllcrt0:dword	; DATA XREF: sub_408740:loc_4087A0r
.idata:0040F0E0	; int __cdecl fflush(FILE *File)
.idata:0040F0E0			extrn __imp_fflush:dword ; DATA	XREF: fflushr
.idata:0040F0E4	; int fprintf(FILE *File, const	char *Format, ...)
.idata:0040F0E4			extrn __imp_fprintf:dword ; DATA XREF: fprintfr
.idata:0040F0E8	; void __cdecl free(void *Memory)
.idata:0040F0E8			extrn __imp_free:dword	; DATA XREF: freer
.idata:0040F0EC	; size_t __cdecl fwrite(const void *Str, size_t	Size, size_t Count, FILE *File)
.idata:0040F0EC			extrn __imp_fwrite:dword ; DATA	XREF: fwriter
.idata:0040F0F0	; void *__cdecl	malloc(size_t Size)
.idata:0040F0F0			extrn __imp_malloc:dword ; DATA	XREF: mallocr
.idata:0040F0F4	; int printf(const char	*Format, ...)
.idata:0040F0F4			extrn __imp_printf:dword ; DATA	XREF: printfr
.idata:0040F0F8	; int __cdecl putchar(int Ch)
.idata:0040F0F8			extrn __imp_putchar:dword ; DATA XREF: putcharr
.idata:0040F0FC			extrn __imp_random:dword ; DATA	XREF: randomr
.idata:0040F100	; void *__cdecl	realloc(void *Memory, size_t NewSize)
.idata:0040F100			extrn realloc:dword	; DATA XREF: .text:loc_408730r
.idata:0040F104			extrn __imp_srandom:dword ; DATA XREF: srandomr
.idata:0040F108	; time_t __cdecl time(time_t *Time)
.idata:0040F108			extrn __imp_time:dword	; DATA XREF: timer
.idata:0040F10C
.idata:0040F110	;
.idata:0040F110	; Imports from cyggcc_s-1.dll
.idata:0040F110	;
.idata:0040F110			extrn __imp___deregister_frame_info:dword
.idata:0040F110						; DATA XREF: __deregister_frame_infor
.idata:0040F114			extrn __imp___register_frame_info:dword
.idata:0040F114						; DATA XREF: __register_frame_infor
.idata:0040F118
.idata:0040F11C	;
.idata:0040F11C	; Imports from KERNEL32.dll
.idata:0040F11C	;
.idata:0040F11C	; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
.idata:0040F11C			extrn __imp_GetModuleHandleA:dword
.idata:0040F11C						; DATA XREF: GetModuleHandleAr
.idata:0040F120	; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
.idata:0040F120			extrn __imp_GetProcAddress:dword
.idata:0040F120						; DATA XREF: GetProcAddressr
.idata:0040F124
.idata:0040F124
.idata:0040F124
.idata:0040F124			end start
