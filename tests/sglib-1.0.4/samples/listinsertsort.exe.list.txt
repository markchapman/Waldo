;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	   Copyright (c) 2009 by Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-313D-7374-F1			    |
; |   Aditya Thakur, University	of Wisconsin/Computer Sciences Department   |
; +-------------------------------------------------------------------------+
;
.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |   This file has been	generated by The Interactive Disassembler (IDA)	   |
.text:00401000 ; |	  Copyright (c)	2009 by	Hex-Rays, <support@hex-rays.com>	   |
.text:00401000 ; |			License	info: 48-313D-7374-F1			   |
.text:00401000 ; |   Aditya Thakur, University of Wisconsin/Computer Sciences Department   |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input MD5   : 64B15262774FB9705B213824EA8718DC
.text:00401000
.text:00401000 ; File Name   : C:\aditya\work\waldo\tests\sglib-1.0.4\samples\listinsertsort.exe
.text:00401000 ; Format	     : Portable	executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size		       : 000008A8 (   2216.)
.text:00401000 ; Section size in file	       : 00000A00 (   2560.)
.text:00401000 ; Offset	to raw data for	section: 00000400
.text:00401000 ; Flags 60500060: Text Data Executable Readable
.text:00401000 ; Alignment     : 16 bytes
.text:00401000
.text:00401000		       .686p
.text:00401000		       .mmx
.text:00401000		       .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text	       segment para public 'CODE' use32
.text:00401000		       assume cs:_text
.text:00401000		       ;org 401000h
.text:00401000		       assume es:nothing, ss:nothing, ds:_data,	fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: bp-based frame
.text:00401000
.text:00401000		       public start
.text:00401000 start	       proc near
.text:00401000
.text:00401000 var_28	       = dword ptr -28h
.text:00401000 var_24	       = dword ptr -24h
.text:00401000 var_20	       = dword ptr -20h
.text:00401000 var_2	       = word ptr -2
.text:00401000
.text:00401000		       push    ebp
.text:00401001		       mov     ebp, esp
.text:00401003		       sub     esp, 28h
.text:00401006		       and     esp, 0FFFFFFF0h
.text:00401009		       fnstcw  [ebp+var_2]
.text:0040100C		       movzx   eax, [ebp+var_2]
.text:00401010		       and     ax, 0F0C0h
.text:00401014		       mov     [ebp+var_2], ax
.text:00401018		       movzx   eax, [ebp+var_2]
.text:0040101C		       or      ax, 33Fh
.text:00401020		       mov     [ebp+var_2], ax
.text:00401024		       fldcw   [ebp+var_2]
.text:00401027		       mov     [esp+28h+var_28], offset	loc_4011A0
.text:0040102E		       call    sub_4012F0
.text:00401033		       mov     [esp+28h+var_20], 0
.text:0040103B		       mov     [esp+28h+var_24], 0
.text:00401043		       mov     [esp+28h+var_28], 0
.text:0040104A		       call    sub_401320
.text:0040104F		       mov     [esp+28h+var_20], 0
.text:00401057		       mov     [esp+28h+var_24], 0
.text:0040105F		       mov     [esp+28h+var_28], 0
.text:00401066		       call    sub_401330
.text:0040106B		       mov     [esp+28h+var_20], 0
.text:00401073		       mov     [esp+28h+var_24], 0
.text:0040107B		       mov     [esp+28h+var_28], 0
.text:00401082		       call    sub_401340
.text:00401087		       mov     [esp+28h+var_20], 0
.text:0040108F		       mov     [esp+28h+var_24], 0
.text:00401097		       mov     [esp+28h+var_28], 0
.text:0040109E		       call    sub_401350
.text:004010A3		       leave
.text:004010A4		       retn
.text:004010A4 start	       endp
.text:004010A4
.text:004010A4 ; ---------------------------------------------------------------------------
.text:004010A5		       align 10h
.text:004010B0
.text:004010B0 loc_4010B0:			       ; CODE XREF: .text:00401874j
.text:004010B0		       push    ebp
.text:004010B1		       mov     ebp, esp
.text:004010B3		       sub     esp, 8
.text:004010B6		       mov     dword ptr [esp],	offset aCyggcc_s1_dll ;	"cyggcc_s-1.dll"
.text:004010BD		       call    GetModuleHandleA
.text:004010C2		       sub     esp, 4
.text:004010C5		       test    eax, eax
.text:004010C7		       jz      short loc_401130
.text:004010C9		       mov     dword ptr [esp+4], offset a__register_fra ; "__register_frame_info"
.text:004010D1		       mov     [esp], eax
.text:004010D4		       call    GetProcAddress
.text:004010D9		       sub     esp, 8
.text:004010DC		       test    eax, eax
.text:004010DE		       jz      short loc_401130
.text:004010E0
.text:004010E0 loc_4010E0:			       ; CODE XREF: .text:00401139j
.text:004010E0		       mov     dword ptr [esp+4], offset dword_404000
.text:004010E8		       mov     dword ptr [esp],	offset dword_403000
.text:004010EF		       call    eax
.text:004010F1
.text:004010F1 loc_4010F1:			       ; CODE XREF: .text:00401137j
.text:004010F1		       mov     eax, dword_4020A8
.text:004010F6		       test    eax, eax
.text:004010F8		       jz      short locret_40112D
.text:004010FA		       mov     dword ptr [esp],	offset aCyggcj9_dll ; "cyggcj-9.dll"
.text:00401101		       call    GetModuleHandleA
.text:00401106		       sub     esp, 4
.text:00401109		       test    eax, eax
.text:0040110B		       jz      short loc_401140
.text:0040110D		       mov     dword ptr [esp+4], offset a_jv_registercl ; "_Jv_RegisterClasses"
.text:00401115		       mov     [esp], eax
.text:00401118		       call    GetProcAddress
.text:0040111D		       sub     esp, 8
.text:00401120		       test    eax, eax
.text:00401122		       jz      short loc_401140
.text:00401124
.text:00401124 loc_401124:			       ; CODE XREF: .text:00401147j
.text:00401124		       mov     dword ptr [esp],	offset dword_4020A8
.text:0040112B		       call    eax
.text:0040112D
.text:0040112D locret_40112D:			       ; CODE XREF: .text:004010F8j
.text:0040112D		       leave
.text:0040112E		       retn
.text:0040112E ; ---------------------------------------------------------------------------
.text:0040112F		       align 10h
.text:00401130
.text:00401130 loc_401130:			       ; CODE XREF: .text:004010C7j
.text:00401130					       ; .text:004010DEj
.text:00401130		       mov     eax, off_402000
.text:00401135		       test    eax, eax
.text:00401137		       jz      short loc_4010F1
.text:00401139		       jmp     short loc_4010E0
.text:00401139 ; ---------------------------------------------------------------------------
.text:0040113B		       align 10h
.text:00401140
.text:00401140 loc_401140:			       ; CODE XREF: .text:0040110Bj
.text:00401140					       ; .text:00401122j
.text:00401140		       mov     eax, dword_402008
.text:00401145		       test    eax, eax
.text:00401147		       jnz     short loc_401124
.text:00401149		       leave
.text:0040114A		       retn
.text:0040114A ; ---------------------------------------------------------------------------
.text:0040114B		       align 10h
.text:00401150
.text:00401150 loc_401150:			       ; CODE XREF: .text:00401884j
.text:00401150		       push    ebp
.text:00401151		       mov     ebp, esp
.text:00401153		       sub     esp, 8
.text:00401156		       mov     dword ptr [esp],	offset aCyggcc_s1_dll ;	"cyggcc_s-1.dll"
.text:0040115D		       call    GetModuleHandleA
.text:00401162		       sub     esp, 4
.text:00401165		       test    eax, eax
.text:00401167		       jz      short loc_401190
.text:00401169		       mov     dword ptr [esp+4], offset a__deregister_f ; "__deregister_frame_info"
.text:00401171		       mov     [esp], eax
.text:00401174		       call    GetProcAddress
.text:00401179		       sub     esp, 8
.text:0040117C		       test    eax, eax
.text:0040117E		       jz      short loc_401190
.text:00401180
.text:00401180 loc_401180:			       ; CODE XREF: .text:00401197j
.text:00401180		       mov     dword ptr [esp],	offset dword_403000
.text:00401187		       call    eax
.text:00401189		       leave
.text:0040118A		       retn
.text:0040118A ; ---------------------------------------------------------------------------
.text:0040118B		       align 10h
.text:00401190
.text:00401190 loc_401190:			       ; CODE XREF: .text:00401167j
.text:00401190					       ; .text:0040117Ej
.text:00401190		       mov     eax, off_402004
.text:00401195		       test    eax, eax
.text:00401197		       jnz     short loc_401180
.text:00401199		       leave
.text:0040119A		       retn
.text:0040119A ; ---------------------------------------------------------------------------
.text:0040119B		       align 10h
.text:004011A0
.text:004011A0 loc_4011A0:			       ; DATA XREF: start+27o
.text:004011A0		       lea     ecx, [esp+4]
.text:004011A4		       and     esp, 0FFFFFFF0h
.text:004011A7		       push    dword ptr [ecx-4]
.text:004011AA		       push    ebp
.text:004011AB		       mov     ebp, esp
.text:004011AD		       push    ecx
.text:004011AE		       sub     esp, 44h
.text:004011B1		       mov     [ebp-38h], ecx
.text:004011B4		       call    __main
.text:004011B9		       mov     dword ptr [ebp-30h], 0
.text:004011C0		       mov     dword ptr [ebp-28h], 1
.text:004011C7		       jmp     loc_40125D
.text:004011CC ; ---------------------------------------------------------------------------
.text:004011CC
.text:004011CC loc_4011CC:			       ; CODE XREF: .text:00401265j
.text:004011CC		       mov     eax, [ebp-28h]
.text:004011CF		       shl     eax, 2
.text:004011D2		       mov     edx, [ebp-38h]
.text:004011D5		       add     eax, [edx+4]
.text:004011D8		       mov     edx, [eax]
.text:004011DA		       lea     eax, [ebp-2Ch]
.text:004011DD		       mov     [esp+8],	eax
.text:004011E1		       mov     dword ptr [esp+4], offset aD ; "%d"
.text:004011E9		       mov     [esp], edx
.text:004011EC		       call    sscanf
.text:004011F1		       mov     dword ptr [esp],	8
.text:004011F8		       call    malloc
.text:004011FD		       mov     [ebp-24h], eax
.text:00401200		       mov     edx, [ebp-2Ch]
.text:00401203		       mov     eax, [ebp-24h]
.text:00401206		       mov     [eax], edx
.text:00401208		       mov     dword ptr [ebp-18h], 0FFFFFFFFh
.text:0040120F		       lea     eax, [ebp-30h]
.text:00401212		       mov     [ebp-1Ch], eax
.text:00401215		       jmp     short loc_401222
.text:00401217 ; ---------------------------------------------------------------------------
.text:00401217
.text:00401217 loc_401217:			       ; CODE XREF: .text:00401244j
.text:00401217		       mov     eax, [ebp-1Ch]
.text:0040121A		       mov     eax, [eax]
.text:0040121C		       add     eax, 4
.text:0040121F		       mov     [ebp-1Ch], eax
.text:00401222
.text:00401222 loc_401222:			       ; CODE XREF: .text:00401215j
.text:00401222		       mov     eax, [ebp-1Ch]
.text:00401225		       mov     eax, [eax]
.text:00401227		       test    eax, eax
.text:00401229		       jz      short loc_401246
.text:0040122B		       mov     eax, [ebp-1Ch]
.text:0040122E		       mov     eax, [eax]
.text:00401230		       mov     edx, [eax]
.text:00401232		       mov     eax, [ebp-24h]
.text:00401235		       mov     eax, [eax]
.text:00401237		       mov     ecx, edx
.text:00401239		       sub     ecx, eax
.text:0040123B		       mov     eax, ecx
.text:0040123D		       mov     [ebp-18h], eax
.text:00401240		       cmp     dword ptr [ebp-18h], 0
.text:00401244		       js      short loc_401217
.text:00401246
.text:00401246 loc_401246:			       ; CODE XREF: .text:00401229j
.text:00401246		       mov     eax, [ebp-1Ch]
.text:00401249		       mov     edx, [eax]
.text:0040124B		       mov     eax, [ebp-24h]
.text:0040124E		       mov     [eax+4],	edx
.text:00401251		       mov     edx, [ebp-1Ch]
.text:00401254		       mov     eax, [ebp-24h]
.text:00401257		       mov     [edx], eax
.text:00401259		       add     dword ptr [ebp-28h], 1
.text:0040125D
.text:0040125D loc_40125D:			       ; CODE XREF: .text:004011C7j
.text:0040125D		       mov     eax, [ebp-28h]
.text:00401260		       mov     edx, [ebp-38h]
.text:00401263		       cmp     eax, [edx]
.text:00401265		       jl      loc_4011CC
.text:0040126B		       mov     eax, [ebp-30h]
.text:0040126E		       mov     [ebp-10h], eax
.text:00401271		       jmp     short loc_401297
.text:00401273 ; ---------------------------------------------------------------------------
.text:00401273
.text:00401273 loc_401273:			       ; CODE XREF: .text:0040129Bj
.text:00401273		       mov     eax, [ebp-10h]
.text:00401276		       mov     eax, [eax+4]
.text:00401279		       mov     [ebp-14h], eax
.text:0040127C		       mov     eax, [ebp-10h]
.text:0040127F		       mov     eax, [eax]
.text:00401281		       mov     [esp+4],	eax
.text:00401285		       mov     dword ptr [esp],	offset aD_0 ; "%d "
.text:0040128C		       call    printf
.text:00401291		       mov     eax, [ebp-14h]
.text:00401294		       mov     [ebp-10h], eax
.text:00401297
.text:00401297 loc_401297:			       ; CODE XREF: .text:00401271j
.text:00401297		       cmp     dword ptr [ebp-10h], 0
.text:0040129B		       jnz     short loc_401273
.text:0040129D		       mov     dword ptr [esp],	0Ah
.text:004012A4		       call    putchar
.text:004012A9		       mov     eax, [ebp-30h]
.text:004012AC		       mov     [ebp-8],	eax
.text:004012AF		       jmp     short loc_4012CB
.text:004012B1 ; ---------------------------------------------------------------------------
.text:004012B1
.text:004012B1 loc_4012B1:			       ; CODE XREF: .text:004012CFj
.text:004012B1		       mov     eax, [ebp-8]
.text:004012B4		       mov     eax, [eax+4]
.text:004012B7		       mov     [ebp-0Ch], eax
.text:004012BA		       mov     eax, [ebp-8]
.text:004012BD		       mov     [esp], eax
.text:004012C0		       call    free
.text:004012C5		       mov     eax, [ebp-0Ch]
.text:004012C8		       mov     [ebp-8],	eax
.text:004012CB
.text:004012CB loc_4012CB:			       ; CODE XREF: .text:004012AFj
.text:004012CB		       cmp     dword ptr [ebp-8], 0
.text:004012CF		       jnz     short loc_4012B1
.text:004012D1		       mov     eax, 0
.text:004012D6		       add     esp, 44h
.text:004012D9		       pop     ecx
.text:004012DA		       pop     ebp
.text:004012DB		       lea     esp, [ecx-4]
.text:004012DE		       retn
.text:004012DE ; ---------------------------------------------------------------------------
.text:004012DF		       align 10h
.text:004012E0 ; [00000006 BYTES: COLLAPSED FUNCTION __deregister_frame_info. PRESS KEYPAD "+" TO EXPAND]
.text:004012E6		       align 4
.text:004012E8 ; [00000006 BYTES: COLLAPSED FUNCTION __register_frame_info. PRESS KEYPAD "+" TO	EXPAND]
.text:004012EE		       align 10h
.text:004012F0
.text:004012F0 ; =============== S U B R O U T I N E =======================================
.text:004012F0
.text:004012F0 ; Attributes: bp-based frame
.text:004012F0
.text:004012F0 sub_4012F0      proc near	       ; CODE XREF: start+2Ep
.text:004012F0
.text:004012F0 var_8	       = dword ptr -8
.text:004012F0 var_4	       = dword ptr -4
.text:004012F0 arg_0	       = dword ptr  8
.text:004012F0
.text:004012F0		       push    ebp
.text:004012F1		       mov     ebp, esp
.text:004012F3		       sub     esp, 8
.text:004012F6		       mov     eax, [ebp+arg_0]
.text:004012F9		       mov     [esp+8+var_4], 0
.text:00401301		       mov     [esp+8+var_8], eax
.text:00401304		       call    sub_401390
.text:00401309		       sub     esp, 8
.text:0040130C		       call    ds:_dll_crt0@0  ; dll_crt0()
.text:00401312		       nop
.text:00401313		       nop
.text:00401314		       nop
.text:00401315		       nop
.text:00401316		       nop
.text:00401317		       nop
.text:00401318		       nop
.text:00401319		       nop
.text:0040131A		       nop
.text:0040131B		       nop
.text:0040131C		       nop
.text:0040131D		       nop
.text:0040131E		       nop
.text:0040131F		       nop
.text:0040131F sub_4012F0      endp ; sp-analysis failed
.text:0040131F
.text:00401320
.text:00401320 ; =============== S U B R O U T I N E =======================================
.text:00401320
.text:00401320 ; Attributes: bp-based frame
.text:00401320
.text:00401320 sub_401320      proc near	       ; CODE XREF: start+4Ap
.text:00401320					       ; DATA XREF: sub_401390+72o ...
.text:00401320		       push    ebp
.text:00401321		       mov     ebp, esp
.text:00401323		       pop     ebp
.text:00401324		       retn
.text:00401324 sub_401320      endp
.text:00401324
.text:00401324 ; ---------------------------------------------------------------------------
.text:00401325		       align 10h
.text:00401330
.text:00401330 ; =============== S U B R O U T I N E =======================================
.text:00401330
.text:00401330 ; Attributes: bp-based frame
.text:00401330
.text:00401330 sub_401330      proc near	       ; CODE XREF: start+66p
.text:00401330					       ; DATA XREF: sub_401390+79o ...
.text:00401330		       push    ebp
.text:00401331		       mov     ebp, esp
.text:00401333		       pop     ebp
.text:00401334		       retn
.text:00401334 sub_401330      endp
.text:00401334
.text:00401334 ; ---------------------------------------------------------------------------
.text:00401335		       align 10h
.text:00401340
.text:00401340 ; =============== S U B R O U T I N E =======================================
.text:00401340
.text:00401340 ; Attributes: bp-based frame
.text:00401340
.text:00401340 sub_401340      proc near	       ; CODE XREF: start+82p
.text:00401340					       ; DATA XREF: sub_401390+80o ...
.text:00401340		       push    ebp
.text:00401341		       mov     ebp, esp
.text:00401343		       pop     ebp
.text:00401344		       retn
.text:00401344 sub_401340      endp
.text:00401344
.text:00401344 ; ---------------------------------------------------------------------------
.text:00401345		       align 10h
.text:00401350
.text:00401350 ; =============== S U B R O U T I N E =======================================
.text:00401350
.text:00401350 ; Attributes: bp-based frame
.text:00401350
.text:00401350 sub_401350      proc near	       ; CODE XREF: start+9Ep
.text:00401350					       ; DATA XREF: sub_401390+87o ...
.text:00401350		       push    ebp
.text:00401351		       mov     ebp, esp
.text:00401353		       pop     ebp
.text:00401354		       retn
.text:00401354 sub_401350      endp
.text:00401354
.text:00401354 ; ---------------------------------------------------------------------------
.text:00401355		       align 10h
.text:00401360 ; [00000006 BYTES: COLLAPSED FUNCTION __main. PRESS KEYPAD "+" TO EXPAND]
.text:00401366		       align 4
.text:00401368 ; [00000006 BYTES: COLLAPSED FUNCTION sscanf. PRESS KEYPAD "+" TO EXPAND]
.text:0040136E		       align 10h
.text:00401370 ; [00000006 BYTES: COLLAPSED FUNCTION malloc. PRESS KEYPAD "+" TO EXPAND]
.text:00401376		       align 4
.text:00401378 ; [00000006 BYTES: COLLAPSED FUNCTION printf. PRESS KEYPAD "+" TO EXPAND]
.text:0040137E		       align 10h
.text:00401380 ; [00000006 BYTES: COLLAPSED FUNCTION free. PRESS KEYPAD	"+" TO EXPAND]
.text:00401386		       align 4
.text:00401388 ; [00000006 BYTES: COLLAPSED FUNCTION putchar. PRESS KEYPAD "+" TO EXPAND]
.text:0040138E		       align 10h
.text:00401390
.text:00401390 ; =============== S U B R O U T I N E =======================================
.text:00401390
.text:00401390 ; Attributes: bp-based frame
.text:00401390
.text:00401390 sub_401390      proc near	       ; CODE XREF: sub_4012F0+14p
.text:00401390					       ; sub_4017F0+18p
.text:00401390
.text:00401390 var_18	       = dword ptr -18h
.text:00401390 arg_0	       = dword ptr  8
.text:00401390 arg_4	       = dword ptr  0Ch
.text:00401390
.text:00401390		       push    ebp
.text:00401391		       mov     ebp, esp
.text:00401393		       push    esi
.text:00401394		       push    ebx
.text:00401395		       sub     esp, 10h
.text:00401398		       mov     ebx, [ebp+arg_4]
.text:0040139B		       mov     esi, [ebp+arg_0]
.text:0040139E		       mov     [esp+18h+var_18], 8
.text:004013A5		       call    cygwin_internal
.text:004013AA		       test    ebx, ebx
.text:004013AC		       mov     ecx, eax
.text:004013AE		       jz      loc_401570
.text:004013B4		       mov     eax, ds:_impure_ptr
.text:004013B9		       test    ecx, ecx
.text:004013BB		       mov     dword ptr [ebx+4], 0A8h
.text:004013C2		       mov     dword ptr [ebx+8], 3EFh
.text:004013C9		       mov     dword ptr [ebx+0Ch], 7
.text:004013D0		       mov     [ebx+10h], eax
.text:004013D3		       mov     eax, [ebp+0]
.text:004013D6		       mov     dword ptr [ebx+80h], 0
.text:004013E0		       mov     dword ptr [ebx+84h], 0E6h
.text:004013EA		       mov     dword ptr [ebx+2Ch], offset dword_401890
.text:004013F1		       mov     dword ptr [ebx+30h], offset dword_40189C
.text:004013F8		       mov     dword ptr [ebx+14h], offset dword_404020
.text:004013FF		       mov     [ebx+28h], esi
.text:00401402		       mov     dword ptr [ebx+48h], offset sub_401320
.text:00401409		       mov     dword ptr [ebx+4Ch], offset sub_401330
.text:00401410		       mov     dword ptr [ebx+50h], offset sub_401340
.text:00401417		       mov     dword ptr [ebx+54h], offset sub_401350
.text:0040141E		       mov     dword ptr [ebx+24h], offset dword_404024
.text:00401425		       mov     [ebx], eax
.text:00401427		       mov     dword ptr [ebx+18h], offset malloc
.text:0040142E		       mov     dword ptr [ebx+1Ch], offset free
.text:00401435		       mov     dword ptr [ebx+20h], offset loc_4017E0
.text:0040143C		       mov     dword ptr [ebx+44h], offset loc_4017E8
.text:00401443		       jz      loc_40150A
.text:00401449
.text:00401449 loc_401449:			       ; CODE XREF: sub_401390+277j
.text:00401449		       mov     edx, [ecx+78h]
.text:0040144C		       test    edx, edx
.text:0040144E		       jz      loc_40150A
.text:00401454		       mov     eax, ds:dword_404028
.text:00401459		       test    eax, eax
.text:0040145B		       jnz     loc_40150A
.text:00401461		       mov     eax, dword_402020
.text:00401466		       test    eax, eax
.text:00401468		       jz      loc_401680
.text:0040146E
.text:0040146E loc_40146E:			       ; CODE XREF: sub_401390+2F7j
.text:0040146E		       mov     eax, dword_402024
.text:00401473		       test    eax, eax
.text:00401475		       jz      loc_401670
.text:0040147B
.text:0040147B loc_40147B:			       ; CODE XREF: sub_401390+2E8j
.text:0040147B		       mov     eax, dword_402028
.text:00401480		       test    eax, eax
.text:00401482		       jz      loc_401660
.text:00401488
.text:00401488 loc_401488:			       ; CODE XREF: sub_401390+2D8j
.text:00401488		       mov     eax, dword_40202C
.text:0040148D		       test    eax, eax
.text:0040148F		       jz      loc_401650
.text:00401495
.text:00401495 loc_401495:			       ; CODE XREF: sub_401390+2C8j
.text:00401495		       mov     eax, dword_402030
.text:0040149A		       test    eax, eax
.text:0040149C		       jz      loc_401640
.text:004014A2
.text:004014A2 loc_4014A2:			       ; CODE XREF: sub_401390+2B8j
.text:004014A2		       mov     esi, dword_402034
.text:004014A8		       test    esi, esi
.text:004014AA		       jz      loc_401630
.text:004014B0
.text:004014B0 loc_4014B0:			       ; CODE XREF: sub_401390+2A8j
.text:004014B0		       mov     ecx, dword_402038
.text:004014B6		       test    ecx, ecx
.text:004014B8		       jz      loc_401620
.text:004014BE
.text:004014BE loc_4014BE:			       ; CODE XREF: sub_401390+298j
.text:004014BE		       mov     eax, dword_40203C
.text:004014C3		       test    eax, eax
.text:004014C5		       jz      loc_401612
.text:004014CB
.text:004014CB loc_4014CB:			       ; CODE XREF: sub_401390+28Aj
.text:004014CB		       mov     eax, dword_402020
.text:004014D0		       mov     [edx], eax
.text:004014D2		       mov     eax, dword_402024
.text:004014D7		       mov     [edx+4],	eax
.text:004014DA		       mov     eax, dword_402028
.text:004014DF		       mov     [edx+8],	eax
.text:004014E2		       mov     eax, dword_40202C
.text:004014E7		       mov     [edx+0Ch], eax
.text:004014EA		       mov     eax, dword_402030
.text:004014EF		       mov     [edx+10h], eax
.text:004014F2		       mov     eax, dword_402034
.text:004014F7		       mov     [edx+14h], eax
.text:004014FA		       mov     eax, dword_402038
.text:004014FF		       mov     [edx+18h], eax
.text:00401502		       mov     eax, dword_40203C
.text:00401507		       mov     [edx+1Ch], eax
.text:0040150A
.text:0040150A loc_40150A:			       ; CODE XREF: sub_401390+B3j
.text:0040150A					       ; sub_401390+BEj ...
.text:0040150A		       mov     [esp+18h+var_18], 0
.text:00401511		       call    GetModuleHandleA
.text:00401516		       mov     dword ptr [ebx+34h], offset off_402000
.text:0040151D		       mov     dword ptr [ebx+38h], offset dword_4020AC
.text:00401524		       mov     dword ptr [ebx+3Ch], offset dword_404000
.text:0040152B		       mov     dword ptr [ebx+40h], offset dword_404130
.text:00401532		       mov     dword ptr [ebx+94h], offset dword_403000
.text:0040153C		       mov     [ebx+7Ch], eax
.text:0040153F		       sub     esp, 4
.text:00401542		       mov     dword ptr [ebx+98h], offset dword_403000
.text:0040154C		       mov     dword ptr [ebx+9Ch], 400000h
.text:00401556		       call    sub_4017D0
.text:0040155B		       lea     esp, [ebp-8]
.text:0040155E		       mov     eax, 1
.text:00401563		       pop     ebx
.text:00401564		       pop     esi
.text:00401565		       pop     ebp
.text:00401566		       retn    8
.text:00401566 ; ---------------------------------------------------------------------------
.text:00401569		       align 10h
.text:00401570
.text:00401570 loc_401570:			       ; CODE XREF: sub_401390+1Ej
.text:00401570		       mov     dword ptr [eax+4], 0A8h
.text:00401577		       mov     edx, ds:_impure_ptr
.text:0040157D		       test    ecx, ecx
.text:0040157F		       mov     dword ptr [eax+8], 3EFh
.text:00401586		       mov     ebx, ecx
.text:00401588		       mov     dword ptr [eax+0Ch], 7
.text:0040158F		       mov     dword ptr [eax+80h], 0
.text:00401599		       mov     dword ptr [eax+84h], 0E6h
.text:004015A3		       mov     dword ptr [eax+2Ch], offset dword_401890
.text:004015AA		       mov     dword ptr [eax+30h], offset dword_40189C
.text:004015B1		       mov     dword ptr [eax+14h], offset dword_404020
.text:004015B8		       mov     eax, [eax+0A4h]
.text:004015BE		       mov     [ecx+28h], esi
.text:004015C1		       mov     dword ptr [ecx+48h], offset sub_401320
.text:004015C8		       mov     dword ptr [ecx+4Ch], offset sub_401330
.text:004015CF		       mov     [edx], eax
.text:004015D1		       mov     eax, [ebp+0]
.text:004015D4		       mov     dword ptr [ecx+50h], offset sub_401340
.text:004015DB		       mov     dword ptr [ecx+54h], offset sub_401350
.text:004015E2		       mov     dword ptr [ecx+24h], offset dword_404024
.text:004015E9		       mov     [ecx], eax
.text:004015EB		       mov     dword ptr [ecx+18h], offset malloc
.text:004015F2		       mov     dword ptr [ecx+1Ch], offset free
.text:004015F9		       mov     dword ptr [ecx+20h], offset loc_4017E0
.text:00401600		       mov     dword ptr [ecx+44h], offset loc_4017E8
.text:00401607		       jnz     loc_401449
.text:0040160D		       jmp     loc_40150A
.text:00401612 ; ---------------------------------------------------------------------------
.text:00401612
.text:00401612 loc_401612:			       ; CODE XREF: sub_401390+135j
.text:00401612		       mov     eax, [edx+1Ch]
.text:00401615		       mov     dword_40203C, eax
.text:0040161A		       jmp     loc_4014CB
.text:0040161A ; ---------------------------------------------------------------------------
.text:0040161F		       align 10h
.text:00401620
.text:00401620 loc_401620:			       ; CODE XREF: sub_401390+128j
.text:00401620		       mov     eax, [edx+18h]
.text:00401623		       mov     dword_402038, eax
.text:00401628		       jmp     loc_4014BE
.text:00401628 ; ---------------------------------------------------------------------------
.text:0040162D		       align 10h
.text:00401630
.text:00401630 loc_401630:			       ; CODE XREF: sub_401390+11Aj
.text:00401630		       mov     eax, [edx+14h]
.text:00401633		       mov     dword_402034, eax
.text:00401638		       jmp     loc_4014B0
.text:00401638 ; ---------------------------------------------------------------------------
.text:0040163D		       align 10h
.text:00401640
.text:00401640 loc_401640:			       ; CODE XREF: sub_401390+10Cj
.text:00401640		       mov     eax, [edx+10h]
.text:00401643		       mov     dword_402030, eax
.text:00401648		       jmp     loc_4014A2
.text:00401648 ; ---------------------------------------------------------------------------
.text:0040164D		       align 10h
.text:00401650
.text:00401650 loc_401650:			       ; CODE XREF: sub_401390+FFj
.text:00401650		       mov     eax, [edx+0Ch]
.text:00401653		       mov     dword_40202C, eax
.text:00401658		       jmp     loc_401495
.text:00401658 ; ---------------------------------------------------------------------------
.text:0040165D		       align 10h
.text:00401660
.text:00401660 loc_401660:			       ; CODE XREF: sub_401390+F2j
.text:00401660		       mov     eax, [edx+8]
.text:00401663		       mov     dword_402028, eax
.text:00401668		       jmp     loc_401488
.text:00401668 ; ---------------------------------------------------------------------------
.text:0040166D		       align 10h
.text:00401670
.text:00401670 loc_401670:			       ; CODE XREF: sub_401390+E5j
.text:00401670		       mov     eax, [edx+4]
.text:00401673		       mov     dword_402024, eax
.text:00401678		       jmp     loc_40147B
.text:00401678 ; ---------------------------------------------------------------------------
.text:0040167D		       align 10h
.text:00401680
.text:00401680 loc_401680:			       ; CODE XREF: sub_401390+D8j
.text:00401680		       mov     eax, [edx]
.text:00401682		       mov     dword_402020, eax
.text:00401687		       jmp     loc_40146E
.text:00401687 sub_401390      endp
.text:00401687
.text:00401687 ; ---------------------------------------------------------------------------
.text:0040168C		       align 10h
.text:00401690
.text:00401690 ; =============== S U B R O U T I N E =======================================
.text:00401690
.text:00401690 ; Attributes: bp-based frame
.text:00401690
.text:00401690 sub_401690      proc near	       ; DATA XREF: .text:00401784o
.text:00401690
.text:00401690 var_18	       = dword ptr -18h
.text:00401690 var_14	       = dword ptr -14h
.text:00401690 var_10	       = dword ptr -10h
.text:00401690
.text:00401690		       push    ebp
.text:00401691		       mov     ebp, esp
.text:00401693		       sub     esp, 18h
.text:00401696		       mov     eax, ds:dword_404050
.text:0040169B		       mov     [esp+18h+var_10], eax
.text:0040169F		       mov     eax, ds:dword_404040
.text:004016A4		       mov     [esp+18h+var_14], eax
.text:004016A8		       mov     eax, ds:dword_404030
.text:004016AD		       mov     [esp+18h+var_18], eax
.text:004016B0		       call    sub_401840
.text:004016B5		       sub     esp, 0Ch
.text:004016B8		       leave
.text:004016B9		       retn
.text:004016B9 sub_401690      endp
.text:004016B9
.text:004016B9 ; ---------------------------------------------------------------------------
.text:004016BA		       align 10h
.text:004016C0
.text:004016C0 loc_4016C0:			       ; CODE XREF: .text:004017B4j
.text:004016C0		       push    ebp
.text:004016C1		       mov     ebp, esp
.text:004016C3		       push    ebx
.text:004016C4		       sub     esp, 14h
.text:004016C7		       mov     eax, [ebp+0Ch]
.text:004016CA		       mov     ecx, [ebp+8]
.text:004016CD		       mov     edx, [ebp+10h]
.text:004016D0		       cmp     eax, 1
.text:004016D3		       jz      loc_401760
.text:004016D9		       jb      short loc_4016F3
.text:004016DB		       cmp     eax, 2
.text:004016DE		       jz      short loc_401746
.text:004016E0		       cmp     eax, 3
.text:004016E3		       mov     ebx, 1
.text:004016E8		       jz      short loc_401730
.text:004016EA
.text:004016EA loc_4016EA:			       ; CODE XREF: .text:0040170Ej
.text:004016EA					       ; .text:00401727j
.text:004016EA		       mov     eax, ebx
.text:004016EC		       mov     ebx, [ebp-4]
.text:004016EF		       leave
.text:004016F0		       retn    0Ch
.text:004016F3 ; ---------------------------------------------------------------------------
.text:004016F3
.text:004016F3 loc_4016F3:			       ; CODE XREF: .text:004016D9j
.text:004016F3		       mov     [esp+8],	edx
.text:004016F7		       mov     dword ptr [esp+4], 0
.text:004016FF		       mov     [esp], ecx
.text:00401702		       call    sub_401840
.text:00401707		       sub     esp, 0Ch
.text:0040170A		       test    eax, eax
.text:0040170C		       mov     ebx, eax
.text:0040170E		       jz      short loc_4016EA
.text:00401710		       mov     eax, ds:dword_404060
.text:00401715		       mov     [esp], eax
.text:00401718		       call    cygwin_detach_dll
.text:0040171D		       mov     ds:dword_404060,	0FFFFFFFFh
.text:00401727		       jmp     short loc_4016EA
.text:00401727 ; ---------------------------------------------------------------------------
.text:00401729		       align 10h
.text:00401730
.text:00401730 loc_401730:			       ; CODE XREF: .text:004016E8j
.text:00401730		       mov     [ebp+10h], edx
.text:00401733		       mov     ebx, [ebp-4]
.text:00401736		       mov     dword ptr [ebp+0Ch], 3
.text:0040173D		       mov     [ebp+8],	ecx
.text:00401740		       leave
.text:00401741		       jmp     sub_401840
.text:00401746 ; ---------------------------------------------------------------------------
.text:00401746
.text:00401746 loc_401746:			       ; CODE XREF: .text:004016DEj
.text:00401746		       mov     [ebp+10h], edx
.text:00401749		       mov     ebx, [ebp-4]
.text:0040174C		       mov     dword ptr [ebp+0Ch], 2
.text:00401753		       mov     [ebp+8],	ecx
.text:00401756		       leave
.text:00401757		       jmp     sub_401840
.text:00401757 ; ---------------------------------------------------------------------------
.text:0040175C		       align 10h
.text:00401760
.text:00401760 loc_401760:			       ; CODE XREF: .text:004016D3j
.text:00401760		       xor     eax, eax
.text:00401762		       test    edx, edx
.text:00401764		       setz    al
.text:00401767		       xor     ebx, ebx
.text:00401769		       mov     ds:dword_404030,	ecx
.text:0040176F		       mov     ds:dword_404040,	1
.text:00401779		       mov     ds:dword_404050,	edx
.text:0040177F		       mov     ds:dword_404028,	eax
.text:00401784		       mov     dword ptr [esp+4], offset sub_401690
.text:0040178C		       mov     [esp], ecx
.text:0040178F		       call    sub_4017F0
.text:00401794		       cmp     eax, 0FFFFFFFFh
.text:00401797		       setnz   bl
.text:0040179A		       mov     ds:dword_404060,	eax
.text:0040179F		       mov     eax, ebx
.text:004017A1		       mov     ebx, [ebp-4]
.text:004017A4		       leave
.text:004017A5		       retn    0Ch
.text:004017A5 ; ---------------------------------------------------------------------------
.text:004017A8		       align 10h
.text:004017B0		       push    ebp
.text:004017B1		       mov     ebp, esp
.text:004017B3		       leave
.text:004017B4		       jmp     loc_4016C0
.text:004017B4 ; ---------------------------------------------------------------------------
.text:004017B9		       align 10h
.text:004017C0 ; [00000006 BYTES: COLLAPSED FUNCTION cygwin_internal. PRESS KEYPAD "+" TO EXPAND]
.text:004017C6		       align 10h
.text:004017D0
.text:004017D0 ; =============== S U B R O U T I N E =======================================
.text:004017D0
.text:004017D0 ; Attributes: bp-based frame
.text:004017D0
.text:004017D0 sub_4017D0      proc near	       ; CODE XREF: sub_401390+1C6p
.text:004017D0		       push    ebp
.text:004017D1		       mov     ebp, esp
.text:004017D3		       pop     ebp
.text:004017D4		       retn
.text:004017D4 sub_4017D0      endp
.text:004017D4
.text:004017D4 ; ---------------------------------------------------------------------------
.text:004017D5		       align 10h
.text:004017E0
.text:004017E0 loc_4017E0:			       ; DATA XREF: sub_401390+A5o
.text:004017E0					       ; sub_401390+269o
.text:004017E0		       jmp     ds:realloc
.text:004017E0 ; ---------------------------------------------------------------------------
.text:004017E6		       align 4
.text:004017E8
.text:004017E8 loc_4017E8:			       ; DATA XREF: sub_401390+ACo
.text:004017E8					       ; sub_401390+270o
.text:004017E8		       jmp     ds:calloc
.text:004017E8 ; ---------------------------------------------------------------------------
.text:004017EE		       align 10h
.text:004017F0
.text:004017F0 ; =============== S U B R O U T I N E =======================================
.text:004017F0
.text:004017F0 ; Attributes: bp-based frame
.text:004017F0
.text:004017F0 sub_4017F0      proc near	       ; CODE XREF: .text:0040178Fp
.text:004017F0
.text:004017F0 var_18	       = dword ptr -18h
.text:004017F0 var_14	       = dword ptr -14h
.text:004017F0 var_4	       = dword ptr -4
.text:004017F0 arg_0	       = dword ptr  8
.text:004017F0 arg_4	       = dword ptr  0Ch
.text:004017F0
.text:004017F0 ; FUNCTION CHUNK	AT .text:00401850 SIZE 00000006	BYTES
.text:004017F0
.text:004017F0		       push    ebp
.text:004017F1		       mov     ebp, esp
.text:004017F3		       push    ebx
.text:004017F4		       sub     esp, 14h
.text:004017F7		       mov     ebx, [ebp+arg_0]
.text:004017FA		       mov     [esp+18h+var_14], offset	dword_404070
.text:00401802		       mov     eax, [ebp+arg_4]
.text:00401805		       mov     [esp+18h+var_18], eax
.text:00401808		       call    sub_401390
.text:0040180D		       mov     [ebp+arg_0], ebx
.text:00401810		       mov     ebx, [ebp+var_4]
.text:00401813		       mov     [ebp+arg_4], offset dword_404070
.text:0040181A		       sub     esp, 8
.text:0040181D		       leave
.text:0040181E		       jmp     loc_401850
.text:0040181E sub_4017F0      endp
.text:0040181E
.text:0040181E ; ---------------------------------------------------------------------------
.text:00401823		       align 10h
.text:00401830 ; [00000006 BYTES: COLLAPSED FUNCTION cygwin_detach_dll.	PRESS KEYPAD "+" TO EXPAND]
.text:00401836		       align 10h
.text:00401840
.text:00401840 ; =============== S U B R O U T I N E =======================================
.text:00401840
.text:00401840 ; Attributes: bp-based frame
.text:00401840
.text:00401840 sub_401840      proc near	       ; CODE XREF: sub_401690+20p
.text:00401840					       ; .text:00401702p ...
.text:00401840		       push    ebp
.text:00401841		       mov     eax, 1
.text:00401846		       mov     ebp, esp
.text:00401848		       pop     ebp
.text:00401849		       retn    0Ch
.text:00401849 sub_401840      endp
.text:00401849
.text:00401849 ; ---------------------------------------------------------------------------
.text:0040184C		       align 10h
.text:00401850 ; START OF FUNCTION CHUNK FOR sub_4017F0
.text:00401850
.text:00401850 loc_401850:			       ; CODE XREF: sub_4017F0+2Ej
.text:00401850		       jmp     ds:dll_dllcrt0
.text:00401850 ; END OF	FUNCTION CHUNK FOR sub_4017F0
.text:00401850 ; ---------------------------------------------------------------------------
.text:00401856		       align 4
.text:00401858 ; [00000006 BYTES: COLLAPSED FUNCTION GetModuleHandleA. PRESS KEYPAD "+"	TO EXPAND]
.text:0040185E		       align 10h
.text:00401860 ; [00000006 BYTES: COLLAPSED FUNCTION GetProcAddress. PRESS KEYPAD "+" TO EXPAND]
.text:00401866		       align 10h
.text:00401870		       push    ebp
.text:00401871		       mov     ebp, esp
.text:00401873		       pop     ebp
.text:00401874		       jmp     loc_4010B0
.text:00401874 ; ---------------------------------------------------------------------------
.text:00401879		       align 10h
.text:00401880		       push    ebp
.text:00401881		       mov     ebp, esp
.text:00401883		       pop     ebp
.text:00401884		       jmp     loc_401150
.text:00401884 ; ---------------------------------------------------------------------------
.text:00401889		       align 10h
.text:00401890 dword_401890    dd 0FFFFFFFFh, 401870h, 0 ; DATA	XREF: sub_401390+5Ao
.text:00401890					       ; sub_401390+213o
.text:0040189C dword_40189C    dd 0FFFFFFFFh, 401880h, 57h dup(0)
.text:0040189C					       ; DATA XREF: sub_401390+61o
.text:0040189C					       ; sub_401390+21Ao
.text:00401A00		       dd 180h dup(?)
.text:00401A00 _text	       ends
.text:00401A00
.data:00402000 ; Section 2. (virtual address 00002000)
.data:00402000 ; Virtual size		       : 000000AC (    172.)
.data:00402000 ; Section size in file	       : 00000200 (    512.)
.data:00402000 ; Offset	to raw data for	section: 00000E00
.data:00402000 ; Flags C0600040: Data Readable Writable
.data:00402000 ; Alignment     : 32 bytes
.data:00402000 ; ===========================================================================
.data:00402000
.data:00402000 ; Segment type: Pure data
.data:00402000 ; Segment permissions: Read/Write
.data:00402000 ; Segment alignment '32byte' can not be represented in assembly
.data:00402000 _data	       segment para public 'DATA' use32
.data:00402000		       assume cs:_data
.data:00402000		       ;org 402000h
.data:00402000 off_402000      dd offset __register_frame_info
.data:00402000					       ; DATA XREF: .text:loc_401130r
.data:00402000					       ; sub_401390+186o
.data:00402004 off_402004      dd offset __deregister_frame_info
.data:00402004					       ; DATA XREF: .text:loc_401190r
.data:00402008 dword_402008    dd 0		       ; DATA XREF: .text:loc_401140r
.data:0040200C		       align 20h
.data:00402020 dword_402020    dd 0		       ; DATA XREF: sub_401390+D1r
.data:00402020					       ; sub_401390:loc_4014CBr ...
.data:00402024 dword_402024    dd 0		       ; DATA XREF: sub_401390:loc_40146Er
.data:00402024					       ; sub_401390+142r ...
.data:00402028 dword_402028    dd 0		       ; DATA XREF: sub_401390:loc_40147Br
.data:00402028					       ; sub_401390+14Ar ...
.data:0040202C dword_40202C    dd 0		       ; DATA XREF: sub_401390:loc_401488r
.data:0040202C					       ; sub_401390+152r ...
.data:00402030 dword_402030    dd 0		       ; DATA XREF: sub_401390:loc_401495r
.data:00402030					       ; sub_401390+15Ar ...
.data:00402034 dword_402034    dd 0		       ; DATA XREF: sub_401390:loc_4014A2r
.data:00402034					       ; sub_401390+162r ...
.data:00402038 dword_402038    dd 0		       ; DATA XREF: sub_401390:loc_4014B0r
.data:00402038					       ; sub_401390+16Ar ...
.data:0040203C dword_40203C    dd 0		       ; DATA XREF: sub_401390:loc_4014BEr
.data:0040203C					       ; sub_401390+172r ...
.data:00402040 aCyggcc_s1_dll  db 'cyggcc_s-1.dll',0   ; DATA XREF: .text:004010B6o
.data:00402040					       ; .text:00401156o
.data:0040204F a__register_fra db '__register_frame_info',0 ; DATA XREF: .text:004010C9o
.data:00402065 aCyggcj9_dll    db 'cyggcj-9.dll',0     ; DATA XREF: .text:004010FAo
.data:00402072 a_jv_registercl db '_Jv_RegisterClasses',0 ; DATA XREF: .text:0040110Do
.data:00402086 a__deregister_f db '__deregister_frame_info',0 ; DATA XREF: .text:00401169o
.data:0040209E		       align 10h
.data:004020A0 aD	       db '%d',0               ; DATA XREF: .text:004011E1o
.data:004020A3 aD_0	       db '%d ',0              ; DATA XREF: .text:00401285o
.data:004020A7		       align 4
.data:004020A8 dword_4020A8    dd 0		       ; DATA XREF: .text:loc_4010F1r
.data:004020A8					       ; .text:loc_401124o
.data:004020AC dword_4020AC    dd 55h dup(0)	       ; DATA XREF: sub_401390+18Do
.data:00402200		       align 1000h
.data:00402200 _data	       ends
.data:00402200
.eh_frame:00403000 ; Section 3.	(virtual address 00003000)
.eh_frame:00403000 ; Virtual size		   : 00000004 (	     4.)
.eh_frame:00403000 ; Section size in file	   : 00000200 (	   512.)
.eh_frame:00403000 ; Offset to raw data	for section: 00001000
.eh_frame:00403000 ; Flags C0300040: Data Readable Writable
.eh_frame:00403000 ; Alignment	   : 4 bytes
.eh_frame:00403000 ; ===========================================================================
.eh_frame:00403000
.eh_frame:00403000 ; Segment type: Pure	data
.eh_frame:00403000 ; Segment permissions: Read/Write
.eh_frame:00403000 _eh_frame	   segment dword public	'DATA' use32
.eh_frame:00403000		   assume cs:_eh_frame
.eh_frame:00403000		   ;org	403000h
.eh_frame:00403000 dword_403000	   dd 80h dup(0)	   ; DATA XREF:	.text:004010E8o
.eh_frame:00403000					   ; .text:loc_401180o	...
.eh_frame:00403200		   align 1000h
.eh_frame:00403200 _eh_frame	   ends
.eh_frame:00403200
.bss:00404000 ;	Section	4. (virtual address 00004000)
.bss:00404000 ;	Virtual	size		      :	00000130 (    304.)
.bss:00404000 ;	Section	size in	file	      :	00000000 (	0.)
.bss:00404000 ;	Offset to raw data for section:	00000000
.bss:00404000 ;	Flags C0400080:	Bss Readable Writable
.bss:00404000 ;	Alignment     :	8 bytes
.bss:00404000 ;	===========================================================================
.bss:00404000
.bss:00404000 ;	Segment	type: Uninitialized
.bss:00404000 ;	Segment	permissions: Read/Write
.bss:00404000 ;	Segment	alignment 'qword' can not be represented in assembly
.bss:00404000 _bss	      segment para public 'BSS' use32
.bss:00404000		      assume cs:_bss
.bss:00404000		      ;org 404000h
.bss:00404000		      assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00404000 dword_404000    dd 8 dup(?)	      ;	DATA XREF: .text:loc_4010E0o
.bss:00404000					      ;	sub_401390+194o
.bss:00404020 dword_404020    dd ?		      ;	DATA XREF: sub_401390+68o
.bss:00404020					      ;	sub_401390+221o
.bss:00404024 dword_404024    dd ?		      ;	DATA XREF: sub_401390+8Eo
.bss:00404024					      ;	sub_401390+252o
.bss:00404028 dword_404028    dd ?		      ;	DATA XREF: sub_401390+C4r
.bss:00404028					      ;	.text:0040177Fw
.bss:0040402C		      align 10h
.bss:00404030 dword_404030    dd ?		      ;	DATA XREF: sub_401690+18r
.bss:00404030					      ;	.text:00401769w
.bss:00404034		      align 10h
.bss:00404040 dword_404040    dd ?		      ;	DATA XREF: sub_401690+Fr
.bss:00404040					      ;	.text:0040176Fw
.bss:00404044		      align 10h
.bss:00404050 dword_404050    dd ?		      ;	DATA XREF: sub_401690+6r
.bss:00404050					      ;	.text:00401779w
.bss:00404054		      align 10h
.bss:00404060 dword_404060    dd ?		      ;	DATA XREF: .text:00401710r
.bss:00404060					      ;	.text:0040171Dw ...
.bss:00404064		      align 10h
.bss:00404070 dword_404070    dd 30h dup(?)	      ;	DATA XREF: sub_4017F0+Ao
.bss:00404070					      ;	sub_4017F0+23o
.bss:00404130 dword_404130    dd 3B4h dup(?)	      ;	DATA XREF: sub_401390+19Bo
.bss:00404130 _bss	      ends
.bss:00404130
.idata:00405000	; Section 5. (virtual address 00005000)
.idata:00405000	; Virtual size			: 00000270 (	624.)
.idata:00405000	; Section size in file		: 00000400 (   1024.)
.idata:00405000	; Offset to raw	data for section: 00001200
.idata:00405000	; Flags	C0300040: Data Readable	Writable
.idata:00405000	; Alignment	: 4 bytes
.idata:00405000	; ===========================================================================
.idata:00405000
.idata:00405000	; Segment type:	Externs
.idata:00405000	; _idata
.idata:00405000
.idata:00405001
.idata:004050A0	;
.idata:004050A0	; Imports from cygwin1.dll
.idata:004050A0	;
.idata:004050A0			extrn __imp___main:dword ; DATA	XREF: __mainr
.idata:004050A4	; __stdcall dll_crt0()
.idata:004050A4			extrn _dll_crt0@0:dword	; CODE XREF: sub_4012F0+1Cp
.idata:004050A4						; DATA XREF: sub_4012F0+1Cr
.idata:004050A8			extrn _impure_ptr:dword	; DATA XREF: sub_401390+24r
.idata:004050A8						; sub_401390+1E7r
.idata:004050AC	; void *__cdecl	calloc(size_t NumOfElements, size_t SizeOfElements)
.idata:004050AC			extrn calloc:dword	; DATA XREF: .text:loc_4017E8r
.idata:004050B0			extrn __imp_cygwin_detach_dll:dword
.idata:004050B0						; DATA XREF: cygwin_detach_dllr
.idata:004050B4			extrn __imp_cygwin_internal:dword
.idata:004050B4						; DATA XREF: cygwin_internalr
.idata:004050B8			extrn dll_dllcrt0:dword	; DATA XREF: sub_4017F0:loc_401850r
.idata:004050BC	; void __cdecl free(void *Memory)
.idata:004050BC			extrn __imp_free:dword	; DATA XREF: freer
.idata:004050C0	; void *__cdecl	malloc(size_t Size)
.idata:004050C0			extrn __imp_malloc:dword ; DATA	XREF: mallocr
.idata:004050C4	; int printf(const char	*Format, ...)
.idata:004050C4			extrn __imp_printf:dword ; DATA	XREF: printfr
.idata:004050C8	; int __cdecl putchar(int Ch)
.idata:004050C8			extrn __imp_putchar:dword ; DATA XREF: putcharr
.idata:004050CC	; void *__cdecl	realloc(void *Memory, size_t NewSize)
.idata:004050CC			extrn realloc:dword	; DATA XREF: .text:loc_4017E0r
.idata:004050D0	; int sscanf(const char	*Src, const char *Format, ...)
.idata:004050D0			extrn __imp_sscanf:dword ; DATA	XREF: sscanfr
.idata:004050D4
.idata:004050D8	;
.idata:004050D8	; Imports from cyggcc_s-1.dll
.idata:004050D8	;
.idata:004050D8			extrn __imp___deregister_frame_info:dword
.idata:004050D8						; DATA XREF: __deregister_frame_infor
.idata:004050DC			extrn __imp___register_frame_info:dword
.idata:004050DC						; DATA XREF: __register_frame_infor
.idata:004050E0
.idata:004050E4	;
.idata:004050E4	; Imports from KERNEL32.dll
.idata:004050E4	;
.idata:004050E4	; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
.idata:004050E4			extrn __imp_GetModuleHandleA:dword
.idata:004050E4						; DATA XREF: GetModuleHandleAr
.idata:004050E8	; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
.idata:004050E8			extrn __imp_GetProcAddress:dword
.idata:004050E8						; DATA XREF: GetProcAddressr
.idata:004050EC
.idata:004050EC
.idata:004050EC
.idata:004050EC			end start
