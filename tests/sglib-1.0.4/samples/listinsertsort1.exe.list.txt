;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	   Copyright (c) 2009 by Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-313D-7374-F1			    |
; |   Aditya Thakur, University	of Wisconsin/Computer Sciences Department   |
; +-------------------------------------------------------------------------+
;
.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |   This file has been	generated by The Interactive Disassembler (IDA)	   |
.text:00401000 ; |	  Copyright (c)	2009 by	Hex-Rays, <support@hex-rays.com>	   |
.text:00401000 ; |			License	info: 48-313D-7374-F1			   |
.text:00401000 ; |   Aditya Thakur, University of Wisconsin/Computer Sciences Department   |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input MD5   : 1AB2D7FE4AEA1A7341C55942D86BE048
.text:00401000
.text:00401000 ; File Name   : C:\aditya\work\waldo\tests\sglib-1.0.4\samples\listinsertsort1.exe
.text:00401000 ; Format	     : Portable	executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size		       : 00000DB8 (   3512.)
.text:00401000 ; Section size in file	       : 00000E00 (   3584.)
.text:00401000 ; Offset	to raw data for	section: 00000400
.text:00401000 ; Flags 60500060: Text Data Executable Readable
.text:00401000 ; Alignment     : 16 bytes
.text:00401000
.text:00401000		       .686p
.text:00401000		       .mmx
.text:00401000		       .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text	       segment para public 'CODE' use32
.text:00401000		       assume cs:_text
.text:00401000		       ;org 401000h
.text:00401000		       assume es:nothing, ss:nothing, ds:_data,	fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: bp-based frame
.text:00401000
.text:00401000		       public start
.text:00401000 start	       proc near
.text:00401000
.text:00401000 var_28	       = dword ptr -28h
.text:00401000 var_24	       = dword ptr -24h
.text:00401000 var_20	       = dword ptr -20h
.text:00401000 var_2	       = word ptr -2
.text:00401000
.text:00401000		       push    ebp
.text:00401001		       mov     ebp, esp
.text:00401003		       sub     esp, 28h
.text:00401006		       and     esp, 0FFFFFFF0h
.text:00401009		       fnstcw  [ebp+var_2]
.text:0040100C		       movzx   eax, [ebp+var_2]
.text:00401010		       and     ax, 0F0C0h
.text:00401014		       mov     [ebp+var_2], ax
.text:00401018		       movzx   eax, [ebp+var_2]
.text:0040101C		       or      ax, 33Fh
.text:00401020		       mov     [ebp+var_2], ax
.text:00401024		       fldcw   [ebp+var_2]
.text:00401027		       mov     [esp+28h+var_28], offset	sub_4016DD
.text:0040102E		       call    sub_4017F0
.text:00401033		       mov     [esp+28h+var_20], 0
.text:0040103B		       mov     [esp+28h+var_24], 0
.text:00401043		       mov     [esp+28h+var_28], 0
.text:0040104A		       call    sub_401820
.text:0040104F		       mov     [esp+28h+var_20], 0
.text:00401057		       mov     [esp+28h+var_24], 0
.text:0040105F		       mov     [esp+28h+var_28], 0
.text:00401066		       call    sub_401830
.text:0040106B		       mov     [esp+28h+var_20], 0
.text:00401073		       mov     [esp+28h+var_24], 0
.text:0040107B		       mov     [esp+28h+var_28], 0
.text:00401082		       call    sub_401840
.text:00401087		       mov     [esp+28h+var_20], 0
.text:0040108F		       mov     [esp+28h+var_24], 0
.text:00401097		       mov     [esp+28h+var_28], 0
.text:0040109E		       call    sub_401850
.text:004010A3		       leave
.text:004010A4		       retn
.text:004010A4 start	       endp
.text:004010A4
.text:004010A4 ; ---------------------------------------------------------------------------
.text:004010A5		       align 10h
.text:004010B0
.text:004010B0 loc_4010B0:			       ; CODE XREF: .text:00401D84j
.text:004010B0		       push    ebp
.text:004010B1		       mov     ebp, esp
.text:004010B3		       sub     esp, 8
.text:004010B6		       mov     dword ptr [esp],	offset aCyggcc_s1_dll ;	"cyggcc_s-1.dll"
.text:004010BD		       call    GetModuleHandleA
.text:004010C2		       sub     esp, 4
.text:004010C5		       test    eax, eax
.text:004010C7		       jz      short loc_401130
.text:004010C9		       mov     dword ptr [esp+4], offset a__register_fra ; "__register_frame_info"
.text:004010D1		       mov     [esp], eax
.text:004010D4		       call    GetProcAddress
.text:004010D9		       sub     esp, 8
.text:004010DC		       test    eax, eax
.text:004010DE		       jz      short loc_401130
.text:004010E0
.text:004010E0 loc_4010E0:			       ; CODE XREF: .text:00401139j
.text:004010E0		       mov     dword ptr [esp+4], offset dword_404000
.text:004010E8		       mov     dword ptr [esp],	offset dword_403000
.text:004010EF		       call    eax
.text:004010F1
.text:004010F1 loc_4010F1:			       ; CODE XREF: .text:00401137j
.text:004010F1		       mov     eax, dword_40212C
.text:004010F6		       test    eax, eax
.text:004010F8		       jz      short locret_40112D
.text:004010FA		       mov     dword ptr [esp],	offset aCyggcj9_dll ; "cyggcj-9.dll"
.text:00401101		       call    GetModuleHandleA
.text:00401106		       sub     esp, 4
.text:00401109		       test    eax, eax
.text:0040110B		       jz      short loc_401140
.text:0040110D		       mov     dword ptr [esp+4], offset a_jv_registercl ; "_Jv_RegisterClasses"
.text:00401115		       mov     [esp], eax
.text:00401118		       call    GetProcAddress
.text:0040111D		       sub     esp, 8
.text:00401120		       test    eax, eax
.text:00401122		       jz      short loc_401140
.text:00401124
.text:00401124 loc_401124:			       ; CODE XREF: .text:00401147j
.text:00401124		       mov     dword ptr [esp],	offset dword_40212C
.text:0040112B		       call    eax
.text:0040112D
.text:0040112D locret_40112D:			       ; CODE XREF: .text:004010F8j
.text:0040112D		       leave
.text:0040112E		       retn
.text:0040112E ; ---------------------------------------------------------------------------
.text:0040112F		       align 10h
.text:00401130
.text:00401130 loc_401130:			       ; CODE XREF: .text:004010C7j
.text:00401130					       ; .text:004010DEj
.text:00401130		       mov     eax, off_402000
.text:00401135		       test    eax, eax
.text:00401137		       jz      short loc_4010F1
.text:00401139		       jmp     short loc_4010E0
.text:00401139 ; ---------------------------------------------------------------------------
.text:0040113B		       align 10h
.text:00401140
.text:00401140 loc_401140:			       ; CODE XREF: .text:0040110Bj
.text:00401140					       ; .text:00401122j
.text:00401140		       mov     eax, dword_402008
.text:00401145		       test    eax, eax
.text:00401147		       jnz     short loc_401124
.text:00401149		       leave
.text:0040114A		       retn
.text:0040114A ; ---------------------------------------------------------------------------
.text:0040114B		       align 10h
.text:00401150
.text:00401150 loc_401150:			       ; CODE XREF: .text:00401D94j
.text:00401150		       push    ebp
.text:00401151		       mov     ebp, esp
.text:00401153		       sub     esp, 8
.text:00401156		       mov     dword ptr [esp],	offset aCyggcc_s1_dll ;	"cyggcc_s-1.dll"
.text:0040115D		       call    GetModuleHandleA
.text:00401162		       sub     esp, 4
.text:00401165		       test    eax, eax
.text:00401167		       jz      short loc_401190
.text:00401169		       mov     dword ptr [esp+4], offset a__deregister_f ; "__deregister_frame_info"
.text:00401171		       mov     [esp], eax
.text:00401174		       call    GetProcAddress
.text:00401179		       sub     esp, 8
.text:0040117C		       test    eax, eax
.text:0040117E		       jz      short loc_401190
.text:00401180
.text:00401180 loc_401180:			       ; CODE XREF: .text:00401197j
.text:00401180		       mov     dword ptr [esp],	offset dword_403000
.text:00401187		       call    eax
.text:00401189		       leave
.text:0040118A		       retn
.text:0040118A ; ---------------------------------------------------------------------------
.text:0040118B		       align 10h
.text:00401190
.text:00401190 loc_401190:			       ; CODE XREF: .text:00401167j
.text:00401190					       ; .text:0040117Ej
.text:00401190		       mov     eax, off_402004
.text:00401195		       test    eax, eax
.text:00401197		       jnz     short loc_401180
.text:00401199		       leave
.text:0040119A		       retn
.text:0040119A ; ---------------------------------------------------------------------------
.text:0040119B		       align 10h
.text:004011A0		       push    ebp
.text:004011A1		       mov     ebp, esp
.text:004011A3		       sub     esp, 10h
.text:004011A6		       mov     eax, [ebp+8]
.text:004011A9		       mov     [ebp-4],	eax
.text:004011AC		       jmp     short loc_4011B7
.text:004011AE ; ---------------------------------------------------------------------------
.text:004011AE
.text:004011AE loc_4011AE:			       ; CODE XREF: .text:004011CFj
.text:004011AE		       mov     eax, [ebp-4]
.text:004011B1		       mov     eax, [eax+4]
.text:004011B4		       mov     [ebp-4],	eax
.text:004011B7
.text:004011B7 loc_4011B7:			       ; CODE XREF: .text:004011ACj
.text:004011B7		       cmp     dword ptr [ebp-4], 0
.text:004011BB		       jz      short loc_4011DC
.text:004011BD		       mov     eax, [ebp-4]
.text:004011C0		       mov     edx, [eax]
.text:004011C2		       mov     eax, [ebp+0Ch]
.text:004011C5		       mov     eax, [eax]
.text:004011C7		       mov     ecx, edx
.text:004011C9		       sub     ecx, eax
.text:004011CB		       mov     eax, ecx
.text:004011CD		       test    eax, eax
.text:004011CF		       js      short loc_4011AE
.text:004011D1		       jmp     short loc_4011DC
.text:004011D3 ; ---------------------------------------------------------------------------
.text:004011D3
.text:004011D3 loc_4011D3:			       ; CODE XREF: .text:004011F6j
.text:004011D3		       mov     eax, [ebp-4]
.text:004011D6		       mov     eax, [eax+4]
.text:004011D9		       mov     [ebp-4],	eax
.text:004011DC
.text:004011DC loc_4011DC:			       ; CODE XREF: .text:004011BBj
.text:004011DC					       ; .text:004011D1j
.text:004011DC		       cmp     dword ptr [ebp-4], 0
.text:004011E0		       jz      short loc_4011F8
.text:004011E2		       mov     eax, [ebp-4]
.text:004011E5		       cmp     eax, [ebp+0Ch]
.text:004011E8		       jz      short loc_4011F8
.text:004011EA		       mov     eax, [ebp-4]
.text:004011ED		       mov     edx, [eax]
.text:004011EF		       mov     eax, [ebp+0Ch]
.text:004011F2		       mov     eax, [eax]
.text:004011F4		       cmp     edx, eax
.text:004011F6		       jz      short loc_4011D3
.text:004011F8
.text:004011F8 loc_4011F8:			       ; CODE XREF: .text:004011E0j
.text:004011F8					       ; .text:004011E8j
.text:004011F8		       mov     eax, [ebp-4]
.text:004011FB		       cmp     eax, [ebp+0Ch]
.text:004011FE		       setz    al
.text:00401201		       movzx   eax, al
.text:00401204		       mov     [ebp-8],	eax
.text:00401207		       mov     eax, [ebp-8]
.text:0040120A		       leave
.text:0040120B		       retn
.text:0040120C ; ---------------------------------------------------------------------------
.text:0040120C		       push    ebp
.text:0040120D		       mov     ebp, esp
.text:0040120F		       sub     esp, 10h
.text:00401212		       mov     dword ptr [ebp-4], 1
.text:00401219		       mov     eax, [ebp+8]
.text:0040121C		       mov     [ebp-8],	eax
.text:0040121F		       jmp     short loc_40122A
.text:00401221 ; ---------------------------------------------------------------------------
.text:00401221
.text:00401221 loc_401221:			       ; CODE XREF: .text:00401247j
.text:00401221		       mov     eax, [ebp-8]
.text:00401224		       mov     eax, [eax+4]
.text:00401227		       mov     [ebp-8],	eax
.text:0040122A
.text:0040122A loc_40122A:			       ; CODE XREF: .text:0040121Fj
.text:0040122A		       cmp     dword ptr [ebp-8], 0
.text:0040122E		       jz      short loc_401249
.text:00401230		       mov     eax, [ebp-8]
.text:00401233		       mov     edx, [eax]
.text:00401235		       mov     eax, [ebp+0Ch]
.text:00401238		       mov     eax, [eax]
.text:0040123A		       mov     ecx, edx
.text:0040123C		       sub     ecx, eax
.text:0040123E		       mov     eax, ecx
.text:00401240		       mov     [ebp-4],	eax
.text:00401243		       cmp     dword ptr [ebp-4], 0
.text:00401247		       js      short loc_401221
.text:00401249
.text:00401249 loc_401249:			       ; CODE XREF: .text:0040122Ej
.text:00401249		       cmp     dword ptr [ebp-4], 0
.text:0040124D		       jz      short loc_401258
.text:0040124F		       mov     dword ptr [ebp-0Ch], 0
.text:00401256		       jmp     short loc_40125E
.text:00401258 ; ---------------------------------------------------------------------------
.text:00401258
.text:00401258 loc_401258:			       ; CODE XREF: .text:0040124Dj
.text:00401258		       mov     eax, [ebp-8]
.text:0040125B		       mov     [ebp-0Ch], eax
.text:0040125E
.text:0040125E loc_40125E:			       ; CODE XREF: .text:00401256j
.text:0040125E		       mov     eax, [ebp-0Ch]
.text:00401261		       leave
.text:00401262		       retn
.text:00401263 ; ---------------------------------------------------------------------------
.text:00401263		       push    ebp
.text:00401264		       mov     ebp, esp
.text:00401266		       sub     esp, 10h
.text:00401269		       mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00401270		       mov     eax, [ebp+8]
.text:00401273		       mov     [ebp-8],	eax
.text:00401276		       jmp     short loc_401283
.text:00401278 ; ---------------------------------------------------------------------------
.text:00401278
.text:00401278 loc_401278:			       ; CODE XREF: .text:004012A5j
.text:00401278		       mov     eax, [ebp-8]
.text:0040127B		       mov     eax, [eax]
.text:0040127D		       add     eax, 4
.text:00401280		       mov     [ebp-8],	eax
.text:00401283
.text:00401283 loc_401283:			       ; CODE XREF: .text:00401276j
.text:00401283		       mov     eax, [ebp-8]
.text:00401286		       mov     eax, [eax]
.text:00401288		       test    eax, eax
.text:0040128A		       jz      short loc_4012A7
.text:0040128C		       mov     eax, [ebp-8]
.text:0040128F		       mov     eax, [eax]
.text:00401291		       mov     edx, [eax]
.text:00401293		       mov     eax, [ebp+0Ch]
.text:00401296		       mov     eax, [eax]
.text:00401298		       mov     ecx, edx
.text:0040129A		       sub     ecx, eax
.text:0040129C		       mov     eax, ecx
.text:0040129E		       mov     [ebp-4],	eax
.text:004012A1		       cmp     dword ptr [ebp-4], 0
.text:004012A5		       js      short loc_401278
.text:004012A7
.text:004012A7 loc_4012A7:			       ; CODE XREF: .text:0040128Aj
.text:004012A7		       cmp     dword ptr [ebp-4], 0
.text:004012AB		       jz      short loc_4012CB
.text:004012AD		       mov     eax, [ebp-8]
.text:004012B0		       mov     edx, [eax]
.text:004012B2		       mov     eax, [ebp+0Ch]
.text:004012B5		       mov     [eax+4],	edx
.text:004012B8		       mov     edx, [ebp-8]
.text:004012BB		       mov     eax, [ebp+0Ch]
.text:004012BE		       mov     [edx], eax
.text:004012C0		       mov     eax, [ebp+10h]
.text:004012C3		       mov     dword ptr [eax],	0
.text:004012C9		       jmp     short loc_4012D5
.text:004012CB ; ---------------------------------------------------------------------------
.text:004012CB
.text:004012CB loc_4012CB:			       ; CODE XREF: .text:004012ABj
.text:004012CB		       mov     eax, [ebp-8]
.text:004012CE		       mov     edx, [eax]
.text:004012D0		       mov     eax, [ebp+10h]
.text:004012D3		       mov     [eax], edx
.text:004012D5
.text:004012D5 loc_4012D5:			       ; CODE XREF: .text:004012C9j
.text:004012D5		       mov     eax, [ebp+10h]
.text:004012D8		       mov     eax, [eax]
.text:004012DA		       test    eax, eax
.text:004012DC		       setz    al
.text:004012DF		       movzx   eax, al
.text:004012E2		       leave
.text:004012E3		       retn
.text:004012E4
.text:004012E4 ; =============== S U B R O U T I N E =======================================
.text:004012E4
.text:004012E4 ; Attributes: bp-based frame
.text:004012E4
.text:004012E4 sub_4012E4      proc near	       ; CODE XREF: sub_4016DD+72p
.text:004012E4
.text:004012E4 var_8	       = dword ptr -8
.text:004012E4 var_4	       = dword ptr -4
.text:004012E4 arg_0	       = dword ptr  8
.text:004012E4 arg_4	       = dword ptr  0Ch
.text:004012E4
.text:004012E4		       push    ebp
.text:004012E5		       mov     ebp, esp
.text:004012E7		       sub     esp, 10h
.text:004012EA		       mov     [ebp+var_4], 0FFFFFFFFh
.text:004012F1		       mov     eax, [ebp+arg_0]
.text:004012F4		       mov     [ebp+var_8], eax
.text:004012F7		       jmp     short loc_401304
.text:004012F9 ; ---------------------------------------------------------------------------
.text:004012F9
.text:004012F9 loc_4012F9:			       ; CODE XREF: sub_4012E4+42j
.text:004012F9		       mov     eax, [ebp+var_8]
.text:004012FC		       mov     eax, [eax]
.text:004012FE		       add     eax, 4
.text:00401301		       mov     [ebp+var_8], eax
.text:00401304
.text:00401304 loc_401304:			       ; CODE XREF: sub_4012E4+13j
.text:00401304		       mov     eax, [ebp+var_8]
.text:00401307		       mov     eax, [eax]
.text:00401309		       test    eax, eax
.text:0040130B		       jz      short loc_401328
.text:0040130D		       mov     eax, [ebp+var_8]
.text:00401310		       mov     eax, [eax]
.text:00401312		       mov     edx, [eax]
.text:00401314		       mov     eax, [ebp+arg_4]
.text:00401317		       mov     eax, [eax]
.text:00401319		       mov     ecx, edx
.text:0040131B		       sub     ecx, eax
.text:0040131D		       mov     eax, ecx
.text:0040131F		       mov     [ebp+var_4], eax
.text:00401322		       cmp     [ebp+var_4], 0
.text:00401326		       js      short loc_4012F9
.text:00401328
.text:00401328 loc_401328:			       ; CODE XREF: sub_4012E4+27j
.text:00401328		       mov     eax, [ebp+var_8]
.text:0040132B		       mov     edx, [eax]
.text:0040132D		       mov     eax, [ebp+arg_4]
.text:00401330		       mov     [eax+4],	edx
.text:00401333		       mov     edx, [ebp+var_8]
.text:00401336		       mov     eax, [ebp+arg_4]
.text:00401339		       mov     [edx], eax
.text:0040133B		       leave
.text:0040133C		       retn
.text:0040133C sub_4012E4      endp
.text:0040133C
.text:0040133D ; ---------------------------------------------------------------------------
.text:0040133D		       push    ebp
.text:0040133E		       mov     ebp, esp
.text:00401340		       sub     esp, 28h
.text:00401343		       mov     eax, [ebp+8]
.text:00401346		       mov     [ebp-4],	eax
.text:00401349		       jmp     short loc_401356
.text:0040134B ; ---------------------------------------------------------------------------
.text:0040134B
.text:0040134B loc_40134B:			       ; CODE XREF: .text:00401367j
.text:0040134B		       mov     eax, [ebp-4]
.text:0040134E		       mov     eax, [eax]
.text:00401350		       add     eax, 4
.text:00401353		       mov     [ebp-4],	eax
.text:00401356
.text:00401356 loc_401356:			       ; CODE XREF: .text:00401349j
.text:00401356		       mov     eax, [ebp-4]
.text:00401359		       mov     eax, [eax]
.text:0040135B		       test    eax, eax
.text:0040135D		       jz      short loc_401369
.text:0040135F		       mov     eax, [ebp-4]
.text:00401362		       mov     eax, [eax]
.text:00401364		       cmp     eax, [ebp+0Ch]
.text:00401367		       jnz     short loc_40134B
.text:00401369
.text:00401369 loc_401369:			       ; CODE XREF: .text:0040135Dj
.text:00401369		       mov     eax, [ebp-4]
.text:0040136C		       mov     eax, [eax]
.text:0040136E		       test    eax, eax
.text:00401370		       jnz     short loc_401396
.text:00401372		       mov     dword ptr [esp+0Ch], offset a_p_NullElement ; "*_p_!=NULL && \"element is not member of"...
.text:0040137A		       mov     dword ptr [esp+8], offset aSglib_ilisttyp ; "sglib_iListType_delete"
.text:00401382		       mov     dword ptr [esp+4], 16h
.text:0040138A		       mov     dword ptr [esp],	offset aListinsertsort ; "listinsertsort1.c"
.text:00401391		       call    __assert_func
.text:00401396
.text:00401396 loc_401396:			       ; CODE XREF: .text:00401370j
.text:00401396		       mov     eax, [ebp-4]
.text:00401399		       mov     eax, [eax]
.text:0040139B		       mov     edx, [eax+4]
.text:0040139E		       mov     eax, [ebp-4]
.text:004013A1		       mov     [eax], edx
.text:004013A3		       leave
.text:004013A4		       retn
.text:004013A5 ; ---------------------------------------------------------------------------
.text:004013A5		       push    ebp
.text:004013A6		       mov     ebp, esp
.text:004013A8		       sub     esp, 10h
.text:004013AB		       mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:004013B2		       mov     eax, [ebp+8]
.text:004013B5		       mov     [ebp-8],	eax
.text:004013B8		       jmp     short loc_4013C5
.text:004013BA ; ---------------------------------------------------------------------------
.text:004013BA
.text:004013BA loc_4013BA:			       ; CODE XREF: .text:004013E7j
.text:004013BA		       mov     eax, [ebp-8]
.text:004013BD		       mov     eax, [eax]
.text:004013BF		       add     eax, 4
.text:004013C2		       mov     [ebp-8],	eax
.text:004013C5
.text:004013C5 loc_4013C5:			       ; CODE XREF: .text:004013B8j
.text:004013C5		       mov     eax, [ebp-8]
.text:004013C8		       mov     eax, [eax]
.text:004013CA		       test    eax, eax
.text:004013CC		       jz      short loc_4013E9
.text:004013CE		       mov     eax, [ebp-8]
.text:004013D1		       mov     eax, [eax]
.text:004013D3		       mov     edx, [eax]
.text:004013D5		       mov     eax, [ebp+0Ch]
.text:004013D8		       mov     eax, [eax]
.text:004013DA		       mov     ecx, edx
.text:004013DC		       sub     ecx, eax
.text:004013DE		       mov     eax, ecx
.text:004013E0		       mov     [ebp-4],	eax
.text:004013E3		       cmp     dword ptr [ebp-4], 0
.text:004013E7		       js      short loc_4013BA
.text:004013E9
.text:004013E9 loc_4013E9:			       ; CODE XREF: .text:004013CCj
.text:004013E9		       cmp     dword ptr [ebp-4], 0
.text:004013ED		       jnz     short loc_401408
.text:004013EF		       mov     eax, [ebp-8]
.text:004013F2		       mov     edx, [eax]
.text:004013F4		       mov     eax, [ebp+10h]
.text:004013F7		       mov     [eax], edx
.text:004013F9		       mov     eax, [ebp-8]
.text:004013FC		       mov     eax, [eax]
.text:004013FE		       mov     edx, [eax+4]
.text:00401401		       mov     eax, [ebp-8]
.text:00401404		       mov     [eax], edx
.text:00401406		       jmp     short loc_401411
.text:00401408 ; ---------------------------------------------------------------------------
.text:00401408
.text:00401408 loc_401408:			       ; CODE XREF: .text:004013EDj
.text:00401408		       mov     eax, [ebp+10h]
.text:0040140B		       mov     dword ptr [eax],	0
.text:00401411
.text:00401411 loc_401411:			       ; CODE XREF: .text:00401406j
.text:00401411		       mov     eax, [ebp+10h]
.text:00401414		       mov     eax, [eax]
.text:00401416		       test    eax, eax
.text:00401418		       setnz   al
.text:0040141B		       movzx   eax, al
.text:0040141E		       leave
.text:0040141F		       retn
.text:00401420 ; ---------------------------------------------------------------------------
.text:00401420		       push    ebp
.text:00401421		       mov     ebp, esp
.text:00401423		       sub     esp, 10h
.text:00401426		       mov     dword ptr [ebp-10h], 0
.text:0040142D		       mov     eax, [ebp+8]
.text:00401430		       mov     [ebp-4],	eax
.text:00401433		       jmp     short loc_401448
.text:00401435 ; ---------------------------------------------------------------------------
.text:00401435
.text:00401435 loc_401435:			       ; CODE XREF: .text:0040144Cj
.text:00401435		       mov     eax, [ebp-4]
.text:00401438		       mov     eax, [eax+4]
.text:0040143B		       mov     [ebp-8],	eax
.text:0040143E		       add     dword ptr [ebp-10h], 1
.text:00401442		       mov     eax, [ebp-8]
.text:00401445		       mov     [ebp-4],	eax
.text:00401448
.text:00401448 loc_401448:			       ; CODE XREF: .text:00401433j
.text:00401448		       cmp     dword ptr [ebp-4], 0
.text:0040144C		       jnz     short loc_401435
.text:0040144E		       mov     eax, [ebp-10h]
.text:00401451		       leave
.text:00401452		       retn
.text:00401453 ; ---------------------------------------------------------------------------
.text:00401453		       push    ebp
.text:00401454		       mov     ebp, esp
.text:00401456		       sub     esp, 30h
.text:00401459		       mov     eax, [ebp+8]
.text:0040145C		       mov     eax, [eax]
.text:0040145E		       mov     [ebp-24h], eax
.text:00401461		       mov     dword ptr [ebp-4], 1
.text:00401468		       mov     dword ptr [ebp-8], 1
.text:0040146F		       jmp     loc_4015D4
.text:00401474 ; ---------------------------------------------------------------------------
.text:00401474
.text:00401474 loc_401474:			       ; CODE XREF: .text:004015D8j
.text:00401474		       mov     eax, [ebp-24h]
.text:00401477		       mov     [ebp-18h], eax
.text:0040147A		       mov     dword ptr [ebp-24h], 0
.text:00401481		       lea     eax, [ebp-24h]
.text:00401484		       mov     [ebp-10h], eax
.text:00401487		       mov     dword ptr [ebp-4], 0
.text:0040148E		       jmp     loc_4015C2
.text:00401493 ; ---------------------------------------------------------------------------
.text:00401493
.text:00401493 loc_401493:			       ; CODE XREF: .text:004015C6j
.text:00401493		       mov     eax, [ebp-18h]
.text:00401496		       mov     [ebp-20h], eax
.text:00401499		       mov     dword ptr [ebp-0Ch], 1
.text:004014A0		       mov     eax, [ebp-20h]
.text:004014A3		       mov     [ebp-14h], eax
.text:004014A6		       jmp     short loc_4014B5
.text:004014A8 ; ---------------------------------------------------------------------------
.text:004014A8
.text:004014A8 loc_4014A8:			       ; CODE XREF: .text:004014C1j
.text:004014A8		       add     dword ptr [ebp-0Ch], 1
.text:004014AC		       mov     eax, [ebp-14h]
.text:004014AF		       mov     eax, [eax+4]
.text:004014B2		       mov     [ebp-14h], eax
.text:004014B5
.text:004014B5 loc_4014B5:			       ; CODE XREF: .text:004014A6j
.text:004014B5		       mov     eax, [ebp-0Ch]
.text:004014B8		       cmp     eax, [ebp-8]
.text:004014BB		       jge     short loc_4014C3
.text:004014BD		       cmp     dword ptr [ebp-14h], 0
.text:004014C1		       jnz     short loc_4014A8
.text:004014C3
.text:004014C3 loc_4014C3:			       ; CODE XREF: .text:004014BBj
.text:004014C3		       cmp     dword ptr [ebp-14h], 0
.text:004014C7		       jnz     short loc_4014D6
.text:004014C9		       mov     edx, [ebp-10h]
.text:004014CC		       mov     eax, [ebp-20h]
.text:004014CF		       mov     [edx], eax
.text:004014D1		       jmp     loc_4015CC
.text:004014D6 ; ---------------------------------------------------------------------------
.text:004014D6
.text:004014D6 loc_4014D6:			       ; CODE XREF: .text:004014C7j
.text:004014D6		       mov     eax, [ebp-14h]
.text:004014D9		       mov     eax, [eax+4]
.text:004014DC		       mov     [ebp-1Ch], eax
.text:004014DF		       mov     eax, [ebp-14h]
.text:004014E2		       mov     dword ptr [eax+4], 0
.text:004014E9		       mov     dword ptr [ebp-0Ch], 1
.text:004014F0		       mov     eax, [ebp-1Ch]
.text:004014F3		       mov     [ebp-14h], eax
.text:004014F6		       jmp     short loc_401505
.text:004014F8 ; ---------------------------------------------------------------------------
.text:004014F8
.text:004014F8 loc_4014F8:			       ; CODE XREF: .text:00401511j
.text:004014F8		       add     dword ptr [ebp-0Ch], 1
.text:004014FC		       mov     eax, [ebp-14h]
.text:004014FF		       mov     eax, [eax+4]
.text:00401502		       mov     [ebp-14h], eax
.text:00401505
.text:00401505 loc_401505:			       ; CODE XREF: .text:004014F6j
.text:00401505		       mov     eax, [ebp-0Ch]
.text:00401508		       cmp     eax, [ebp-8]
.text:0040150B		       jge     short loc_401513
.text:0040150D		       cmp     dword ptr [ebp-14h], 0
.text:00401511		       jnz     short loc_4014F8
.text:00401513
.text:00401513 loc_401513:			       ; CODE XREF: .text:0040150Bj
.text:00401513		       cmp     dword ptr [ebp-14h], 0
.text:00401517		       jnz     short loc_401522
.text:00401519		       mov     dword ptr [ebp-18h], 0
.text:00401520		       jmp     short loc_401581
.text:00401522 ; ---------------------------------------------------------------------------
.text:00401522
.text:00401522 loc_401522:			       ; CODE XREF: .text:00401517j
.text:00401522		       mov     eax, [ebp-14h]
.text:00401525		       mov     eax, [eax+4]
.text:00401528		       mov     [ebp-18h], eax
.text:0040152B		       mov     eax, [ebp-14h]
.text:0040152E		       mov     dword ptr [eax+4], 0
.text:00401535		       jmp     short loc_401581
.text:00401537 ; ---------------------------------------------------------------------------
.text:00401537
.text:00401537 loc_401537:			       ; CODE XREF: .text:0040158Bj
.text:00401537		       mov     eax, [ebp-20h]
.text:0040153A		       mov     edx, [eax]
.text:0040153C		       mov     eax, [ebp-1Ch]
.text:0040153F		       mov     eax, [eax]
.text:00401541		       mov     ecx, edx
.text:00401543		       sub     ecx, eax
.text:00401545		       mov     eax, ecx
.text:00401547		       test    eax, eax
.text:00401549		       jns     short loc_401567
.text:0040154B		       mov     edx, [ebp-10h]
.text:0040154E		       mov     eax, [ebp-20h]
.text:00401551		       mov     [edx], eax
.text:00401553		       mov     eax, [ebp-20h]
.text:00401556		       add     eax, 4
.text:00401559		       mov     [ebp-10h], eax
.text:0040155C		       mov     eax, [ebp-20h]
.text:0040155F		       mov     eax, [eax+4]
.text:00401562		       mov     [ebp-20h], eax
.text:00401565		       jmp     short loc_401581
.text:00401567 ; ---------------------------------------------------------------------------
.text:00401567
.text:00401567 loc_401567:			       ; CODE XREF: .text:00401549j
.text:00401567		       mov     edx, [ebp-10h]
.text:0040156A		       mov     eax, [ebp-1Ch]
.text:0040156D		       mov     [edx], eax
.text:0040156F		       mov     eax, [ebp-1Ch]
.text:00401572		       add     eax, 4
.text:00401575		       mov     [ebp-10h], eax
.text:00401578		       mov     eax, [ebp-1Ch]
.text:0040157B		       mov     eax, [eax+4]
.text:0040157E		       mov     [ebp-1Ch], eax
.text:00401581
.text:00401581 loc_401581:			       ; CODE XREF: .text:00401520j
.text:00401581					       ; .text:00401535j ...
.text:00401581		       cmp     dword ptr [ebp-20h], 0
.text:00401585		       jz      short loc_40158D
.text:00401587		       cmp     dword ptr [ebp-1Ch], 0
.text:0040158B		       jnz     short loc_401537
.text:0040158D
.text:0040158D loc_40158D:			       ; CODE XREF: .text:00401585j
.text:0040158D		       cmp     dword ptr [ebp-20h], 0
.text:00401591		       jz      short loc_40159D
.text:00401593		       mov     edx, [ebp-10h]
.text:00401596		       mov     eax, [ebp-20h]
.text:00401599		       mov     [edx], eax
.text:0040159B		       jmp     short loc_4015B2
.text:0040159D ; ---------------------------------------------------------------------------
.text:0040159D
.text:0040159D loc_40159D:			       ; CODE XREF: .text:00401591j
.text:0040159D		       mov     edx, [ebp-10h]
.text:004015A0		       mov     eax, [ebp-1Ch]
.text:004015A3		       mov     [edx], eax
.text:004015A5		       jmp     short loc_4015B2
.text:004015A7 ; ---------------------------------------------------------------------------
.text:004015A7
.text:004015A7 loc_4015A7:			       ; CODE XREF: .text:004015B9j
.text:004015A7		       mov     eax, [ebp-10h]
.text:004015AA		       mov     eax, [eax]
.text:004015AC		       add     eax, 4
.text:004015AF		       mov     [ebp-10h], eax
.text:004015B2
.text:004015B2 loc_4015B2:			       ; CODE XREF: .text:0040159Bj
.text:004015B2					       ; .text:004015A5j
.text:004015B2		       mov     eax, [ebp-10h]
.text:004015B5		       mov     eax, [eax]
.text:004015B7		       test    eax, eax
.text:004015B9		       jnz     short loc_4015A7
.text:004015BB		       mov     dword ptr [ebp-4], 1
.text:004015C2
.text:004015C2 loc_4015C2:			       ; CODE XREF: .text:0040148Ej
.text:004015C2		       cmp     dword ptr [ebp-18h], 0
.text:004015C6		       jnz     loc_401493
.text:004015CC
.text:004015CC loc_4015CC:			       ; CODE XREF: .text:004014D1j
.text:004015CC		       mov     eax, [ebp-8]
.text:004015CF		       add     eax, eax
.text:004015D1		       mov     [ebp-8],	eax
.text:004015D4
.text:004015D4 loc_4015D4:			       ; CODE XREF: .text:0040146Fj
.text:004015D4		       cmp     dword ptr [ebp-4], 0
.text:004015D8		       jnz     loc_401474
.text:004015DE		       mov     edx, [ebp-24h]
.text:004015E1		       mov     eax, [ebp+8]
.text:004015E4		       mov     [eax], edx
.text:004015E6		       leave
.text:004015E7		       retn
.text:004015E8
.text:004015E8 ; =============== S U B R O U T I N E =======================================
.text:004015E8
.text:004015E8 ; Attributes: bp-based frame
.text:004015E8
.text:004015E8 sub_4015E8      proc near	       ; CODE XREF: sub_401616+23p
.text:004015E8
.text:004015E8 var_8	       = dword ptr -8
.text:004015E8 arg_0	       = dword ptr  8
.text:004015E8 arg_4	       = dword ptr  0Ch
.text:004015E8 arg_8	       = dword ptr  10h
.text:004015E8 arg_C	       = dword ptr  14h
.text:004015E8
.text:004015E8		       push    ebp
.text:004015E9		       mov     ebp, esp
.text:004015EB		       sub     esp, 8
.text:004015EE		       mov     edx, [ebp+arg_0]
.text:004015F1		       mov     eax, [ebp+arg_8]
.text:004015F4		       mov     [edx+8],	eax
.text:004015F7		       mov     edx, [ebp+arg_0]
.text:004015FA		       mov     eax, [ebp+arg_C]
.text:004015FD		       mov     [edx+0Ch], eax
.text:00401600		       mov     edx, [ebp+arg_0]
.text:00401603		       mov     eax, [ebp+arg_4]
.text:00401606		       mov     [edx+4],	eax
.text:00401609		       mov     eax, [ebp+arg_0]
.text:0040160C		       mov     [esp+8+var_8], eax
.text:0040160F		       call    sub_40164A
.text:00401614		       leave
.text:00401615		       retn
.text:00401615 sub_4015E8      endp
.text:00401615
.text:00401616
.text:00401616 ; =============== S U B R O U T I N E =======================================
.text:00401616
.text:00401616 ; Attributes: bp-based frame
.text:00401616
.text:00401616 sub_401616      proc near	       ; CODE XREF: sub_4016DD+CAp
.text:00401616
.text:00401616 var_18	       = dword ptr -18h
.text:00401616 var_14	       = dword ptr -14h
.text:00401616 var_10	       = dword ptr -10h
.text:00401616 var_C	       = dword ptr -0Ch
.text:00401616 arg_0	       = dword ptr  8
.text:00401616 arg_4	       = dword ptr  0Ch
.text:00401616
.text:00401616		       push    ebp
.text:00401617		       mov     ebp, esp
.text:00401619		       sub     esp, 18h
.text:0040161C		       mov     [esp+18h+var_C],	0
.text:00401624		       mov     [esp+18h+var_10], 0
.text:0040162C		       mov     eax, [ebp+arg_4]
.text:0040162F		       mov     [esp+18h+var_14], eax
.text:00401633		       mov     eax, [ebp+arg_0]
.text:00401636		       mov     [esp+18h+var_18], eax
.text:00401639		       call    sub_4015E8
.text:0040163E		       leave
.text:0040163F		       retn
.text:0040163F sub_401616      endp
.text:0040163F
.text:00401640 ; ---------------------------------------------------------------------------
.text:00401640		       push    ebp
.text:00401641		       mov     ebp, esp
.text:00401643		       mov     eax, [ebp+8]
.text:00401646		       mov     eax, [eax]
.text:00401648		       pop     ebp
.text:00401649		       retn
.text:0040164A
.text:0040164A ; =============== S U B R O U T I N E =======================================
.text:0040164A
.text:0040164A ; Attributes: bp-based frame
.text:0040164A
.text:0040164A sub_40164A      proc near	       ; CODE XREF: sub_4015E8+27p
.text:0040164A					       ; sub_4016DD+E5p
.text:0040164A
.text:0040164A var_18	       = dword ptr -18h
.text:0040164A var_14	       = dword ptr -14h
.text:0040164A var_10	       = dword ptr -10h
.text:0040164A var_C	       = dword ptr -0Ch
.text:0040164A var_8	       = dword ptr -8
.text:0040164A var_4	       = dword ptr -4
.text:0040164A arg_0	       = dword ptr  8
.text:0040164A
.text:0040164A		       push    ebp
.text:0040164B		       mov     ebp, esp
.text:0040164D		       sub     esp, 18h
.text:00401650		       mov     eax, [ebp+arg_0]
.text:00401653		       mov     eax, [eax+4]
.text:00401656		       mov     [ebp+var_10], eax
.text:00401659		       mov     eax, [ebp+arg_0]
.text:0040165C		       mov     dword ptr [eax+4], 0
.text:00401663		       mov     eax, [ebp+arg_0]
.text:00401666		       mov     eax, [eax+8]
.text:00401669		       test    eax, eax
.text:0040166B		       jz      short loc_4016BE
.text:0040166D		       mov     eax, [ebp+arg_0]
.text:00401670		       mov     eax, [eax+0Ch]
.text:00401673		       mov     [ebp+var_C], eax
.text:00401676		       mov     eax, [ebp+arg_0]
.text:00401679		       mov     eax, [eax+8]
.text:0040167C		       mov     [ebp+var_8], eax
.text:0040167F		       jmp     short loc_40168A
.text:00401681 ; ---------------------------------------------------------------------------
.text:00401681
.text:00401681 loc_401681:			       ; CODE XREF: sub_40164A+5Fj
.text:00401681		       mov     eax, [ebp+var_10]
.text:00401684		       mov     eax, [eax+4]
.text:00401687		       mov     [ebp+var_10], eax
.text:0040168A
.text:0040168A loc_40168A:			       ; CODE XREF: sub_40164A+35j
.text:0040168A		       cmp     [ebp+var_10], 0
.text:0040168E		       jz      short loc_4016AB
.text:00401690		       mov     eax, [ebp+var_C]
.text:00401693		       mov     [esp+18h+var_14], eax
.text:00401697		       mov     eax, [ebp+var_10]
.text:0040169A		       mov     [esp+18h+var_18], eax
.text:0040169D		       mov     eax, [ebp+var_8]
.text:004016A0		       call    eax
.text:004016A2		       mov     [ebp+var_4], eax
.text:004016A5		       cmp     [ebp+var_4], 0
.text:004016A9		       js      short loc_401681
.text:004016AB
.text:004016AB loc_4016AB:			       ; CODE XREF: sub_40164A+44j
.text:004016AB		       cmp     [ebp+var_10], 0
.text:004016AF		       jz      short loc_4016BE
.text:004016B1		       cmp     [ebp+var_4], 0
.text:004016B5		       jle     short loc_4016BE
.text:004016B7		       mov     [ebp+var_10], 0
.text:004016BE
.text:004016BE loc_4016BE:			       ; CODE XREF: sub_40164A+21j
.text:004016BE					       ; sub_40164A+65j ...
.text:004016BE		       mov     edx, [ebp+arg_0]
.text:004016C1		       mov     eax, [ebp+var_10]
.text:004016C4		       mov     [edx], eax
.text:004016C6		       cmp     [ebp+var_10], 0
.text:004016CA		       jz      short loc_4016D8
.text:004016CC		       mov     eax, [ebp+var_10]
.text:004016CF		       mov     edx, [eax+4]
.text:004016D2		       mov     eax, [ebp+arg_0]
.text:004016D5		       mov     [eax+4],	edx
.text:004016D8
.text:004016D8 loc_4016D8:			       ; CODE XREF: sub_40164A+80j
.text:004016D8		       mov     eax, [ebp+var_10]
.text:004016DB		       leave
.text:004016DC		       retn
.text:004016DC sub_40164A      endp
.text:004016DC
.text:004016DD
.text:004016DD ; =============== S U B R O U T I N E =======================================
.text:004016DD
.text:004016DD
.text:004016DD sub_4016DD      proc near	       ; DATA XREF: start+27o
.text:004016DD
.text:004016DD var_3C	       = dword ptr -3Ch
.text:004016DD var_38	       = dword ptr -38h
.text:004016DD var_34	       = dword ptr -34h
.text:004016DD arg_0	       = byte ptr  4
.text:004016DD
.text:004016DD		       lea     ecx, [esp+arg_0]
.text:004016E1		       and     esp, 0FFFFFFF0h
.text:004016E4		       push    dword ptr [ecx-4]
.text:004016E7		       push    ebp
.text:004016E8		       mov     ebp, esp
.text:004016EA		       push    ecx
.text:004016EB		       sub     esp, 34h
.text:004016EE		       mov     [ebp-28h], ecx
.text:004016F1		       call    __main
.text:004016F6		       mov     dword ptr [ebp-14h], 0
.text:004016FD		       mov     dword ptr [ebp-0Ch], 1
.text:00401704		       jmp     short loc_401758
.text:00401706 ; ---------------------------------------------------------------------------
.text:00401706
.text:00401706 loc_401706:			       ; CODE XREF: sub_4016DD+83j
.text:00401706		       mov     eax, [ebp-0Ch]
.text:00401709		       shl     eax, 2
.text:0040170C		       mov     edx, [ebp-28h]
.text:0040170F		       add     eax, [edx+4]
.text:00401712		       mov     edx, [eax]
.text:00401714		       lea     eax, [ebp-10h]
.text:00401717		       mov     [esp+3Ch+var_34], eax
.text:0040171B		       mov     [esp+3Ch+var_38], offset	aD ; "%d"
.text:00401723		       mov     [esp+3Ch+var_3C], edx
.text:00401726		       call    sscanf
.text:0040172B		       mov     [esp+3Ch+var_3C], 8
.text:00401732		       call    malloc
.text:00401737		       mov     [ebp-8],	eax
.text:0040173A		       mov     edx, [ebp-10h]
.text:0040173D		       mov     eax, [ebp-8]
.text:00401740		       mov     [eax], edx
.text:00401742		       mov     eax, [ebp-8]
.text:00401745		       mov     [esp+3Ch+var_38], eax
.text:00401749		       lea     eax, [ebp-14h]
.text:0040174C		       mov     [esp+3Ch+var_3C], eax
.text:0040174F		       call    sub_4012E4
.text:00401754		       add     dword ptr [ebp-0Ch], 1
.text:00401758
.text:00401758 loc_401758:			       ; CODE XREF: sub_4016DD+27j
.text:00401758		       mov     eax, [ebp-0Ch]
.text:0040175B		       mov     edx, [ebp-28h]
.text:0040175E		       cmp     eax, [edx]
.text:00401760		       jl      short loc_401706
.text:00401762		       mov     eax, [ebp-14h]
.text:00401765		       mov     [ebp-8],	eax
.text:00401768		       jmp     short loc_401788
.text:0040176A ; ---------------------------------------------------------------------------
.text:0040176A
.text:0040176A loc_40176A:			       ; CODE XREF: sub_4016DD+AFj
.text:0040176A		       mov     eax, [ebp-8]
.text:0040176D		       mov     eax, [eax]
.text:0040176F		       mov     [esp+3Ch+var_38], eax
.text:00401773		       mov     [esp+3Ch+var_3C], offset	aD_0 ; "%d "
.text:0040177A		       call    printf
.text:0040177F		       mov     eax, [ebp-8]
.text:00401782		       mov     eax, [eax+4]
.text:00401785		       mov     [ebp-8],	eax
.text:00401788
.text:00401788 loc_401788:			       ; CODE XREF: sub_4016DD+8Bj
.text:00401788		       cmp     dword ptr [ebp-8], 0
.text:0040178C		       jnz     short loc_40176A
.text:0040178E		       mov     [esp+3Ch+var_3C], 0Ah
.text:00401795		       call    putchar
.text:0040179A		       mov     eax, [ebp-14h]
.text:0040179D		       mov     [esp+3Ch+var_38], eax
.text:004017A1		       lea     eax, [ebp-24h]
.text:004017A4		       mov     [esp+3Ch+var_3C], eax
.text:004017A7		       call    sub_401616
.text:004017AC		       mov     [ebp-8],	eax
.text:004017AF		       jmp     short loc_4017CA
.text:004017B1 ; ---------------------------------------------------------------------------
.text:004017B1
.text:004017B1 loc_4017B1:			       ; CODE XREF: sub_4016DD+F1j
.text:004017B1		       mov     eax, [ebp-8]
.text:004017B4		       mov     [esp+3Ch+var_3C], eax
.text:004017B7		       call    free
.text:004017BC		       lea     eax, [ebp-24h]
.text:004017BF		       mov     [esp+3Ch+var_3C], eax
.text:004017C2		       call    sub_40164A
.text:004017C7		       mov     [ebp-8],	eax
.text:004017CA
.text:004017CA loc_4017CA:			       ; CODE XREF: sub_4016DD+D2j
.text:004017CA		       cmp     dword ptr [ebp-8], 0
.text:004017CE		       jnz     short loc_4017B1
.text:004017D0		       mov     eax, 0
.text:004017D5		       add     esp, 34h
.text:004017D8		       pop     ecx
.text:004017D9		       pop     ebp
.text:004017DA		       lea     esp, [ecx-4]
.text:004017DD		       retn
.text:004017DD sub_4016DD      endp
.text:004017DD
.text:004017DD ; ---------------------------------------------------------------------------
.text:004017DE		       align 10h
.text:004017E0 ; [00000006 BYTES: COLLAPSED FUNCTION __deregister_frame_info. PRESS KEYPAD "+" TO EXPAND]
.text:004017E6		       align 4
.text:004017E8 ; [00000006 BYTES: COLLAPSED FUNCTION __register_frame_info. PRESS KEYPAD "+" TO	EXPAND]
.text:004017EE		       align 10h
.text:004017F0
.text:004017F0 ; =============== S U B R O U T I N E =======================================
.text:004017F0
.text:004017F0 ; Attributes: bp-based frame
.text:004017F0
.text:004017F0 sub_4017F0      proc near	       ; CODE XREF: start+2Ep
.text:004017F0
.text:004017F0 var_8	       = dword ptr -8
.text:004017F0 var_4	       = dword ptr -4
.text:004017F0 arg_0	       = dword ptr  8
.text:004017F0
.text:004017F0		       push    ebp
.text:004017F1		       mov     ebp, esp
.text:004017F3		       sub     esp, 8
.text:004017F6		       mov     eax, [ebp+arg_0]
.text:004017F9		       mov     [esp+8+var_4], 0
.text:00401801		       mov     [esp+8+var_8], eax
.text:00401804		       call    sub_4018A0
.text:00401809		       sub     esp, 8
.text:0040180C		       call    ds:_dll_crt0@0  ; dll_crt0()
.text:00401812		       nop
.text:00401813		       nop
.text:00401814		       nop
.text:00401815		       nop
.text:00401816		       nop
.text:00401817		       nop
.text:00401818		       nop
.text:00401819		       nop
.text:0040181A		       nop
.text:0040181B		       nop
.text:0040181C		       nop
.text:0040181D		       nop
.text:0040181E		       nop
.text:0040181F		       nop
.text:0040181F sub_4017F0      endp ; sp-analysis failed
.text:0040181F
.text:00401820
.text:00401820 ; =============== S U B R O U T I N E =======================================
.text:00401820
.text:00401820 ; Attributes: bp-based frame
.text:00401820
.text:00401820 sub_401820      proc near	       ; CODE XREF: start+4Ap
.text:00401820					       ; DATA XREF: sub_4018A0+72o ...
.text:00401820		       push    ebp
.text:00401821		       mov     ebp, esp
.text:00401823		       pop     ebp
.text:00401824		       retn
.text:00401824 sub_401820      endp
.text:00401824
.text:00401824 ; ---------------------------------------------------------------------------
.text:00401825		       align 10h
.text:00401830
.text:00401830 ; =============== S U B R O U T I N E =======================================
.text:00401830
.text:00401830 ; Attributes: bp-based frame
.text:00401830
.text:00401830 sub_401830      proc near	       ; CODE XREF: start+66p
.text:00401830					       ; DATA XREF: sub_4018A0+79o ...
.text:00401830		       push    ebp
.text:00401831		       mov     ebp, esp
.text:00401833		       pop     ebp
.text:00401834		       retn
.text:00401834 sub_401830      endp
.text:00401834
.text:00401834 ; ---------------------------------------------------------------------------
.text:00401835		       align 10h
.text:00401840
.text:00401840 ; =============== S U B R O U T I N E =======================================
.text:00401840
.text:00401840 ; Attributes: bp-based frame
.text:00401840
.text:00401840 sub_401840      proc near	       ; CODE XREF: start+82p
.text:00401840					       ; DATA XREF: sub_4018A0+80o ...
.text:00401840		       push    ebp
.text:00401841		       mov     ebp, esp
.text:00401843		       pop     ebp
.text:00401844		       retn
.text:00401844 sub_401840      endp
.text:00401844
.text:00401844 ; ---------------------------------------------------------------------------
.text:00401845		       align 10h
.text:00401850
.text:00401850 ; =============== S U B R O U T I N E =======================================
.text:00401850
.text:00401850 ; Attributes: bp-based frame
.text:00401850
.text:00401850 sub_401850      proc near	       ; CODE XREF: start+9Ep
.text:00401850					       ; DATA XREF: sub_4018A0+87o ...
.text:00401850		       push    ebp
.text:00401851		       mov     ebp, esp
.text:00401853		       pop     ebp
.text:00401854		       retn
.text:00401854 sub_401850      endp
.text:00401854
.text:00401854 ; ---------------------------------------------------------------------------
.text:00401855		       align 10h
.text:00401860 ; [00000006 BYTES: COLLAPSED FUNCTION __main. PRESS KEYPAD "+" TO EXPAND]
.text:00401866		       align 4
.text:00401868 ; [00000006 BYTES: COLLAPSED FUNCTION __assert_func. PRESS KEYPAD "+" TO	EXPAND]
.text:0040186E		       align 10h
.text:00401870 ; [00000006 BYTES: COLLAPSED FUNCTION sscanf. PRESS KEYPAD "+" TO EXPAND]
.text:00401876		       align 4
.text:00401878 ; [00000006 BYTES: COLLAPSED FUNCTION malloc. PRESS KEYPAD "+" TO EXPAND]
.text:0040187E		       align 10h
.text:00401880 ; [00000006 BYTES: COLLAPSED FUNCTION printf. PRESS KEYPAD "+" TO EXPAND]
.text:00401886		       align 4
.text:00401888 ; [00000006 BYTES: COLLAPSED FUNCTION free. PRESS KEYPAD	"+" TO EXPAND]
.text:0040188E		       align 10h
.text:00401890 ; [00000006 BYTES: COLLAPSED FUNCTION putchar. PRESS KEYPAD "+" TO EXPAND]
.text:00401896		       align 10h
.text:004018A0
.text:004018A0 ; =============== S U B R O U T I N E =======================================
.text:004018A0
.text:004018A0 ; Attributes: bp-based frame
.text:004018A0
.text:004018A0 sub_4018A0      proc near	       ; CODE XREF: sub_4017F0+14p
.text:004018A0					       ; sub_401D00+18p
.text:004018A0
.text:004018A0 var_18	       = dword ptr -18h
.text:004018A0 arg_0	       = dword ptr  8
.text:004018A0 arg_4	       = dword ptr  0Ch
.text:004018A0
.text:004018A0		       push    ebp
.text:004018A1		       mov     ebp, esp
.text:004018A3		       push    esi
.text:004018A4		       push    ebx
.text:004018A5		       sub     esp, 10h
.text:004018A8		       mov     ebx, [ebp+arg_4]
.text:004018AB		       mov     esi, [ebp+arg_0]
.text:004018AE		       mov     [esp+18h+var_18], 8
.text:004018B5		       call    cygwin_internal
.text:004018BA		       test    ebx, ebx
.text:004018BC		       mov     ecx, eax
.text:004018BE		       jz      loc_401A80
.text:004018C4		       mov     eax, ds:_impure_ptr
.text:004018C9		       test    ecx, ecx
.text:004018CB		       mov     dword ptr [ebx+4], 0A8h
.text:004018D2		       mov     dword ptr [ebx+8], 3EFh
.text:004018D9		       mov     dword ptr [ebx+0Ch], 7
.text:004018E0		       mov     [ebx+10h], eax
.text:004018E3		       mov     eax, [ebp+0]
.text:004018E6		       mov     dword ptr [ebx+80h], 0
.text:004018F0		       mov     dword ptr [ebx+84h], 0E6h
.text:004018FA		       mov     dword ptr [ebx+2Ch], offset dword_401DA0
.text:00401901		       mov     dword ptr [ebx+30h], offset dword_401DAC
.text:00401908		       mov     dword ptr [ebx+14h], offset dword_404020
.text:0040190F		       mov     [ebx+28h], esi
.text:00401912		       mov     dword ptr [ebx+48h], offset sub_401820
.text:00401919		       mov     dword ptr [ebx+4Ch], offset sub_401830
.text:00401920		       mov     dword ptr [ebx+50h], offset sub_401840
.text:00401927		       mov     dword ptr [ebx+54h], offset sub_401850
.text:0040192E		       mov     dword ptr [ebx+24h], offset dword_404024
.text:00401935		       mov     [ebx], eax
.text:00401937		       mov     dword ptr [ebx+18h], offset malloc
.text:0040193E		       mov     dword ptr [ebx+1Ch], offset free
.text:00401945		       mov     dword ptr [ebx+20h], offset loc_401CF0
.text:0040194C		       mov     dword ptr [ebx+44h], offset loc_401CF8
.text:00401953		       jz      loc_401A1A
.text:00401959
.text:00401959 loc_401959:			       ; CODE XREF: sub_4018A0+277j
.text:00401959		       mov     edx, [ecx+78h]
.text:0040195C		       test    edx, edx
.text:0040195E		       jz      loc_401A1A
.text:00401964		       mov     eax, ds:dword_404028
.text:00401969		       test    eax, eax
.text:0040196B		       jnz     loc_401A1A
.text:00401971		       mov     eax, dword_402020
.text:00401976		       test    eax, eax
.text:00401978		       jz      loc_401B90
.text:0040197E
.text:0040197E loc_40197E:			       ; CODE XREF: sub_4018A0+2F7j
.text:0040197E		       mov     eax, dword_402024
.text:00401983		       test    eax, eax
.text:00401985		       jz      loc_401B80
.text:0040198B
.text:0040198B loc_40198B:			       ; CODE XREF: sub_4018A0+2E8j
.text:0040198B		       mov     eax, dword_402028
.text:00401990		       test    eax, eax
.text:00401992		       jz      loc_401B70
.text:00401998
.text:00401998 loc_401998:			       ; CODE XREF: sub_4018A0+2D8j
.text:00401998		       mov     eax, dword_40202C
.text:0040199D		       test    eax, eax
.text:0040199F		       jz      loc_401B60
.text:004019A5
.text:004019A5 loc_4019A5:			       ; CODE XREF: sub_4018A0+2C8j
.text:004019A5		       mov     eax, dword_402030
.text:004019AA		       test    eax, eax
.text:004019AC		       jz      loc_401B50
.text:004019B2
.text:004019B2 loc_4019B2:			       ; CODE XREF: sub_4018A0+2B8j
.text:004019B2		       mov     esi, dword_402034
.text:004019B8		       test    esi, esi
.text:004019BA		       jz      loc_401B40
.text:004019C0
.text:004019C0 loc_4019C0:			       ; CODE XREF: sub_4018A0+2A8j
.text:004019C0		       mov     ecx, dword_402038
.text:004019C6		       test    ecx, ecx
.text:004019C8		       jz      loc_401B30
.text:004019CE
.text:004019CE loc_4019CE:			       ; CODE XREF: sub_4018A0+298j
.text:004019CE		       mov     eax, dword_40203C
.text:004019D3		       test    eax, eax
.text:004019D5		       jz      loc_401B22
.text:004019DB
.text:004019DB loc_4019DB:			       ; CODE XREF: sub_4018A0+28Aj
.text:004019DB		       mov     eax, dword_402020
.text:004019E0		       mov     [edx], eax
.text:004019E2		       mov     eax, dword_402024
.text:004019E7		       mov     [edx+4],	eax
.text:004019EA		       mov     eax, dword_402028
.text:004019EF		       mov     [edx+8],	eax
.text:004019F2		       mov     eax, dword_40202C
.text:004019F7		       mov     [edx+0Ch], eax
.text:004019FA		       mov     eax, dword_402030
.text:004019FF		       mov     [edx+10h], eax
.text:00401A02		       mov     eax, dword_402034
.text:00401A07		       mov     [edx+14h], eax
.text:00401A0A		       mov     eax, dword_402038
.text:00401A0F		       mov     [edx+18h], eax
.text:00401A12		       mov     eax, dword_40203C
.text:00401A17		       mov     [edx+1Ch], eax
.text:00401A1A
.text:00401A1A loc_401A1A:			       ; CODE XREF: sub_4018A0+B3j
.text:00401A1A					       ; sub_4018A0+BEj ...
.text:00401A1A		       mov     [esp+18h+var_18], 0
.text:00401A21		       call    GetModuleHandleA
.text:00401A26		       mov     dword ptr [ebx+34h], offset off_402000
.text:00401A2D		       mov     dword ptr [ebx+38h], offset dword_402130
.text:00401A34		       mov     dword ptr [ebx+3Ch], offset dword_404000
.text:00401A3B		       mov     dword ptr [ebx+40h], offset dword_404130
.text:00401A42		       mov     dword ptr [ebx+94h], offset dword_403000
.text:00401A4C		       mov     [ebx+7Ch], eax
.text:00401A4F		       sub     esp, 4
.text:00401A52		       mov     dword ptr [ebx+98h], offset dword_403000
.text:00401A5C		       mov     dword ptr [ebx+9Ch], 400000h
.text:00401A66		       call    sub_401CE0
.text:00401A6B		       lea     esp, [ebp-8]
.text:00401A6E		       mov     eax, 1
.text:00401A73		       pop     ebx
.text:00401A74		       pop     esi
.text:00401A75		       pop     ebp
.text:00401A76		       retn    8
.text:00401A76 ; ---------------------------------------------------------------------------
.text:00401A79		       align 10h
.text:00401A80
.text:00401A80 loc_401A80:			       ; CODE XREF: sub_4018A0+1Ej
.text:00401A80		       mov     dword ptr [eax+4], 0A8h
.text:00401A87		       mov     edx, ds:_impure_ptr
.text:00401A8D		       test    ecx, ecx
.text:00401A8F		       mov     dword ptr [eax+8], 3EFh
.text:00401A96		       mov     ebx, ecx
.text:00401A98		       mov     dword ptr [eax+0Ch], 7
.text:00401A9F		       mov     dword ptr [eax+80h], 0
.text:00401AA9		       mov     dword ptr [eax+84h], 0E6h
.text:00401AB3		       mov     dword ptr [eax+2Ch], offset dword_401DA0
.text:00401ABA		       mov     dword ptr [eax+30h], offset dword_401DAC
.text:00401AC1		       mov     dword ptr [eax+14h], offset dword_404020
.text:00401AC8		       mov     eax, [eax+0A4h]
.text:00401ACE		       mov     [ecx+28h], esi
.text:00401AD1		       mov     dword ptr [ecx+48h], offset sub_401820
.text:00401AD8		       mov     dword ptr [ecx+4Ch], offset sub_401830
.text:00401ADF		       mov     [edx], eax
.text:00401AE1		       mov     eax, [ebp+0]
.text:00401AE4		       mov     dword ptr [ecx+50h], offset sub_401840
.text:00401AEB		       mov     dword ptr [ecx+54h], offset sub_401850
.text:00401AF2		       mov     dword ptr [ecx+24h], offset dword_404024
.text:00401AF9		       mov     [ecx], eax
.text:00401AFB		       mov     dword ptr [ecx+18h], offset malloc
.text:00401B02		       mov     dword ptr [ecx+1Ch], offset free
.text:00401B09		       mov     dword ptr [ecx+20h], offset loc_401CF0
.text:00401B10		       mov     dword ptr [ecx+44h], offset loc_401CF8
.text:00401B17		       jnz     loc_401959
.text:00401B1D		       jmp     loc_401A1A
.text:00401B22 ; ---------------------------------------------------------------------------
.text:00401B22
.text:00401B22 loc_401B22:			       ; CODE XREF: sub_4018A0+135j
.text:00401B22		       mov     eax, [edx+1Ch]
.text:00401B25		       mov     dword_40203C, eax
.text:00401B2A		       jmp     loc_4019DB
.text:00401B2A ; ---------------------------------------------------------------------------
.text:00401B2F		       align 10h
.text:00401B30
.text:00401B30 loc_401B30:			       ; CODE XREF: sub_4018A0+128j
.text:00401B30		       mov     eax, [edx+18h]
.text:00401B33		       mov     dword_402038, eax
.text:00401B38		       jmp     loc_4019CE
.text:00401B38 ; ---------------------------------------------------------------------------
.text:00401B3D		       align 10h
.text:00401B40
.text:00401B40 loc_401B40:			       ; CODE XREF: sub_4018A0+11Aj
.text:00401B40		       mov     eax, [edx+14h]
.text:00401B43		       mov     dword_402034, eax
.text:00401B48		       jmp     loc_4019C0
.text:00401B48 ; ---------------------------------------------------------------------------
.text:00401B4D		       align 10h
.text:00401B50
.text:00401B50 loc_401B50:			       ; CODE XREF: sub_4018A0+10Cj
.text:00401B50		       mov     eax, [edx+10h]
.text:00401B53		       mov     dword_402030, eax
.text:00401B58		       jmp     loc_4019B2
.text:00401B58 ; ---------------------------------------------------------------------------
.text:00401B5D		       align 10h
.text:00401B60
.text:00401B60 loc_401B60:			       ; CODE XREF: sub_4018A0+FFj
.text:00401B60		       mov     eax, [edx+0Ch]
.text:00401B63		       mov     dword_40202C, eax
.text:00401B68		       jmp     loc_4019A5
.text:00401B68 ; ---------------------------------------------------------------------------
.text:00401B6D		       align 10h
.text:00401B70
.text:00401B70 loc_401B70:			       ; CODE XREF: sub_4018A0+F2j
.text:00401B70		       mov     eax, [edx+8]
.text:00401B73		       mov     dword_402028, eax
.text:00401B78		       jmp     loc_401998
.text:00401B78 ; ---------------------------------------------------------------------------
.text:00401B7D		       align 10h
.text:00401B80
.text:00401B80 loc_401B80:			       ; CODE XREF: sub_4018A0+E5j
.text:00401B80		       mov     eax, [edx+4]
.text:00401B83		       mov     dword_402024, eax
.text:00401B88		       jmp     loc_40198B
.text:00401B88 ; ---------------------------------------------------------------------------
.text:00401B8D		       align 10h
.text:00401B90
.text:00401B90 loc_401B90:			       ; CODE XREF: sub_4018A0+D8j
.text:00401B90		       mov     eax, [edx]
.text:00401B92		       mov     dword_402020, eax
.text:00401B97		       jmp     loc_40197E
.text:00401B97 sub_4018A0      endp
.text:00401B97
.text:00401B97 ; ---------------------------------------------------------------------------
.text:00401B9C		       align 10h
.text:00401BA0
.text:00401BA0 ; =============== S U B R O U T I N E =======================================
.text:00401BA0
.text:00401BA0 ; Attributes: bp-based frame
.text:00401BA0
.text:00401BA0 sub_401BA0      proc near	       ; DATA XREF: .text:00401C94o
.text:00401BA0
.text:00401BA0 var_18	       = dword ptr -18h
.text:00401BA0 var_14	       = dword ptr -14h
.text:00401BA0 var_10	       = dword ptr -10h
.text:00401BA0
.text:00401BA0		       push    ebp
.text:00401BA1		       mov     ebp, esp
.text:00401BA3		       sub     esp, 18h
.text:00401BA6		       mov     eax, ds:dword_404050
.text:00401BAB		       mov     [esp+18h+var_10], eax
.text:00401BAF		       mov     eax, ds:dword_404040
.text:00401BB4		       mov     [esp+18h+var_14], eax
.text:00401BB8		       mov     eax, ds:dword_404030
.text:00401BBD		       mov     [esp+18h+var_18], eax
.text:00401BC0		       call    sub_401D50
.text:00401BC5		       sub     esp, 0Ch
.text:00401BC8		       leave
.text:00401BC9		       retn
.text:00401BC9 sub_401BA0      endp
.text:00401BC9
.text:00401BC9 ; ---------------------------------------------------------------------------
.text:00401BCA		       align 10h
.text:00401BD0
.text:00401BD0 loc_401BD0:			       ; CODE XREF: .text:00401CC4j
.text:00401BD0		       push    ebp
.text:00401BD1		       mov     ebp, esp
.text:00401BD3		       push    ebx
.text:00401BD4		       sub     esp, 14h
.text:00401BD7		       mov     eax, [ebp+0Ch]
.text:00401BDA		       mov     ecx, [ebp+8]
.text:00401BDD		       mov     edx, [ebp+10h]
.text:00401BE0		       cmp     eax, 1
.text:00401BE3		       jz      loc_401C70
.text:00401BE9		       jb      short loc_401C03
.text:00401BEB		       cmp     eax, 2
.text:00401BEE		       jz      short loc_401C56
.text:00401BF0		       cmp     eax, 3
.text:00401BF3		       mov     ebx, 1
.text:00401BF8		       jz      short loc_401C40
.text:00401BFA
.text:00401BFA loc_401BFA:			       ; CODE XREF: .text:00401C1Ej
.text:00401BFA					       ; .text:00401C37j
.text:00401BFA		       mov     eax, ebx
.text:00401BFC		       mov     ebx, [ebp-4]
.text:00401BFF		       leave
.text:00401C00		       retn    0Ch
.text:00401C03 ; ---------------------------------------------------------------------------
.text:00401C03
.text:00401C03 loc_401C03:			       ; CODE XREF: .text:00401BE9j
.text:00401C03		       mov     [esp+8],	edx
.text:00401C07		       mov     dword ptr [esp+4], 0
.text:00401C0F		       mov     [esp], ecx
.text:00401C12		       call    sub_401D50
.text:00401C17		       sub     esp, 0Ch
.text:00401C1A		       test    eax, eax
.text:00401C1C		       mov     ebx, eax
.text:00401C1E		       jz      short loc_401BFA
.text:00401C20		       mov     eax, ds:dword_404060
.text:00401C25		       mov     [esp], eax
.text:00401C28		       call    cygwin_detach_dll
.text:00401C2D		       mov     ds:dword_404060,	0FFFFFFFFh
.text:00401C37		       jmp     short loc_401BFA
.text:00401C37 ; ---------------------------------------------------------------------------
.text:00401C39		       align 10h
.text:00401C40
.text:00401C40 loc_401C40:			       ; CODE XREF: .text:00401BF8j
.text:00401C40		       mov     [ebp+10h], edx
.text:00401C43		       mov     ebx, [ebp-4]
.text:00401C46		       mov     dword ptr [ebp+0Ch], 3
.text:00401C4D		       mov     [ebp+8],	ecx
.text:00401C50		       leave
.text:00401C51		       jmp     sub_401D50
.text:00401C56 ; ---------------------------------------------------------------------------
.text:00401C56
.text:00401C56 loc_401C56:			       ; CODE XREF: .text:00401BEEj
.text:00401C56		       mov     [ebp+10h], edx
.text:00401C59		       mov     ebx, [ebp-4]
.text:00401C5C		       mov     dword ptr [ebp+0Ch], 2
.text:00401C63		       mov     [ebp+8],	ecx
.text:00401C66		       leave
.text:00401C67		       jmp     sub_401D50
.text:00401C67 ; ---------------------------------------------------------------------------
.text:00401C6C		       align 10h
.text:00401C70
.text:00401C70 loc_401C70:			       ; CODE XREF: .text:00401BE3j
.text:00401C70		       xor     eax, eax
.text:00401C72		       test    edx, edx
.text:00401C74		       setz    al
.text:00401C77		       xor     ebx, ebx
.text:00401C79		       mov     ds:dword_404030,	ecx
.text:00401C7F		       mov     ds:dword_404040,	1
.text:00401C89		       mov     ds:dword_404050,	edx
.text:00401C8F		       mov     ds:dword_404028,	eax
.text:00401C94		       mov     dword ptr [esp+4], offset sub_401BA0
.text:00401C9C		       mov     [esp], ecx
.text:00401C9F		       call    sub_401D00
.text:00401CA4		       cmp     eax, 0FFFFFFFFh
.text:00401CA7		       setnz   bl
.text:00401CAA		       mov     ds:dword_404060,	eax
.text:00401CAF		       mov     eax, ebx
.text:00401CB1		       mov     ebx, [ebp-4]
.text:00401CB4		       leave
.text:00401CB5		       retn    0Ch
.text:00401CB5 ; ---------------------------------------------------------------------------
.text:00401CB8		       align 10h
.text:00401CC0		       push    ebp
.text:00401CC1		       mov     ebp, esp
.text:00401CC3		       leave
.text:00401CC4		       jmp     loc_401BD0
.text:00401CC4 ; ---------------------------------------------------------------------------
.text:00401CC9		       align 10h
.text:00401CD0 ; [00000006 BYTES: COLLAPSED FUNCTION cygwin_internal. PRESS KEYPAD "+" TO EXPAND]
.text:00401CD6		       align 10h
.text:00401CE0
.text:00401CE0 ; =============== S U B R O U T I N E =======================================
.text:00401CE0
.text:00401CE0 ; Attributes: bp-based frame
.text:00401CE0
.text:00401CE0 sub_401CE0      proc near	       ; CODE XREF: sub_4018A0+1C6p
.text:00401CE0		       push    ebp
.text:00401CE1		       mov     ebp, esp
.text:00401CE3		       pop     ebp
.text:00401CE4		       retn
.text:00401CE4 sub_401CE0      endp
.text:00401CE4
.text:00401CE4 ; ---------------------------------------------------------------------------
.text:00401CE5		       align 10h
.text:00401CF0
.text:00401CF0 loc_401CF0:			       ; DATA XREF: sub_4018A0+A5o
.text:00401CF0					       ; sub_4018A0+269o
.text:00401CF0		       jmp     ds:realloc
.text:00401CF0 ; ---------------------------------------------------------------------------
.text:00401CF6		       align 4
.text:00401CF8
.text:00401CF8 loc_401CF8:			       ; DATA XREF: sub_4018A0+ACo
.text:00401CF8					       ; sub_4018A0+270o
.text:00401CF8		       jmp     ds:calloc
.text:00401CF8 ; ---------------------------------------------------------------------------
.text:00401CFE		       align 10h
.text:00401D00
.text:00401D00 ; =============== S U B R O U T I N E =======================================
.text:00401D00
.text:00401D00 ; Attributes: bp-based frame
.text:00401D00
.text:00401D00 sub_401D00      proc near	       ; CODE XREF: .text:00401C9Fp
.text:00401D00
.text:00401D00 var_18	       = dword ptr -18h
.text:00401D00 var_14	       = dword ptr -14h
.text:00401D00 var_4	       = dword ptr -4
.text:00401D00 arg_0	       = dword ptr  8
.text:00401D00 arg_4	       = dword ptr  0Ch
.text:00401D00
.text:00401D00 ; FUNCTION CHUNK	AT .text:00401D60 SIZE 00000006	BYTES
.text:00401D00
.text:00401D00		       push    ebp
.text:00401D01		       mov     ebp, esp
.text:00401D03		       push    ebx
.text:00401D04		       sub     esp, 14h
.text:00401D07		       mov     ebx, [ebp+arg_0]
.text:00401D0A		       mov     [esp+18h+var_14], offset	dword_404070
.text:00401D12		       mov     eax, [ebp+arg_4]
.text:00401D15		       mov     [esp+18h+var_18], eax
.text:00401D18		       call    sub_4018A0
.text:00401D1D		       mov     [ebp+arg_0], ebx
.text:00401D20		       mov     ebx, [ebp+var_4]
.text:00401D23		       mov     [ebp+arg_4], offset dword_404070
.text:00401D2A		       sub     esp, 8
.text:00401D2D		       leave
.text:00401D2E		       jmp     loc_401D60
.text:00401D2E sub_401D00      endp
.text:00401D2E
.text:00401D2E ; ---------------------------------------------------------------------------
.text:00401D33		       align 10h
.text:00401D40 ; [00000006 BYTES: COLLAPSED FUNCTION cygwin_detach_dll.	PRESS KEYPAD "+" TO EXPAND]
.text:00401D46		       align 10h
.text:00401D50
.text:00401D50 ; =============== S U B R O U T I N E =======================================
.text:00401D50
.text:00401D50 ; Attributes: bp-based frame
.text:00401D50
.text:00401D50 sub_401D50      proc near	       ; CODE XREF: sub_401BA0+20p
.text:00401D50					       ; .text:00401C12p ...
.text:00401D50		       push    ebp
.text:00401D51		       mov     eax, 1
.text:00401D56		       mov     ebp, esp
.text:00401D58		       pop     ebp
.text:00401D59		       retn    0Ch
.text:00401D59 sub_401D50      endp
.text:00401D59
.text:00401D59 ; ---------------------------------------------------------------------------
.text:00401D5C		       align 10h
.text:00401D60 ; START OF FUNCTION CHUNK FOR sub_401D00
.text:00401D60
.text:00401D60 loc_401D60:			       ; CODE XREF: sub_401D00+2Ej
.text:00401D60		       jmp     ds:dll_dllcrt0
.text:00401D60 ; END OF	FUNCTION CHUNK FOR sub_401D00
.text:00401D60 ; ---------------------------------------------------------------------------
.text:00401D66		       align 4
.text:00401D68 ; [00000006 BYTES: COLLAPSED FUNCTION GetModuleHandleA. PRESS KEYPAD "+"	TO EXPAND]
.text:00401D6E		       align 10h
.text:00401D70 ; [00000006 BYTES: COLLAPSED FUNCTION GetProcAddress. PRESS KEYPAD "+" TO EXPAND]
.text:00401D76		       align 10h
.text:00401D80		       push    ebp
.text:00401D81		       mov     ebp, esp
.text:00401D83		       pop     ebp
.text:00401D84		       jmp     loc_4010B0
.text:00401D84 ; ---------------------------------------------------------------------------
.text:00401D89		       align 10h
.text:00401D90		       push    ebp
.text:00401D91		       mov     ebp, esp
.text:00401D93		       pop     ebp
.text:00401D94		       jmp     loc_401150
.text:00401D94 ; ---------------------------------------------------------------------------
.text:00401D99		       align 10h
.text:00401DA0 dword_401DA0    dd 0FFFFFFFFh, 401D80h, 0 ; DATA	XREF: sub_4018A0+5Ao
.text:00401DA0					       ; sub_4018A0+213o
.text:00401DAC dword_401DAC    dd 0FFFFFFFFh, 401D90h, 13h dup(0)
.text:00401DAC					       ; DATA XREF: sub_4018A0+61o
.text:00401DAC					       ; sub_4018A0+21Ao
.text:00401E00		       dd 80h dup(?)
.text:00401E00 _text	       ends
.text:00401E00
.data:00402000 ; Section 2. (virtual address 00002000)
.data:00402000 ; Virtual size		       : 00000130 (    304.)
.data:00402000 ; Section size in file	       : 00000200 (    512.)
.data:00402000 ; Offset	to raw data for	section: 00001200
.data:00402000 ; Flags C0600040: Data Readable Writable
.data:00402000 ; Alignment     : 32 bytes
.data:00402000 ; ===========================================================================
.data:00402000
.data:00402000 ; Segment type: Pure data
.data:00402000 ; Segment permissions: Read/Write
.data:00402000 ; Segment alignment '32byte' can not be represented in assembly
.data:00402000 _data	       segment para public 'DATA' use32
.data:00402000		       assume cs:_data
.data:00402000		       ;org 402000h
.data:00402000 off_402000      dd offset __register_frame_info
.data:00402000					       ; DATA XREF: .text:loc_401130r
.data:00402000					       ; sub_4018A0+186o
.data:00402004 off_402004      dd offset __deregister_frame_info
.data:00402004					       ; DATA XREF: .text:loc_401190r
.data:00402008 dword_402008    dd 0		       ; DATA XREF: .text:loc_401140r
.data:0040200C		       align 20h
.data:00402020 dword_402020    dd 0		       ; DATA XREF: sub_4018A0+D1r
.data:00402020					       ; sub_4018A0:loc_4019DBr ...
.data:00402024 dword_402024    dd 0		       ; DATA XREF: sub_4018A0:loc_40197Er
.data:00402024					       ; sub_4018A0+142r ...
.data:00402028 dword_402028    dd 0		       ; DATA XREF: sub_4018A0:loc_40198Br
.data:00402028					       ; sub_4018A0+14Ar ...
.data:0040202C dword_40202C    dd 0		       ; DATA XREF: sub_4018A0:loc_401998r
.data:0040202C					       ; sub_4018A0+152r ...
.data:00402030 dword_402030    dd 0		       ; DATA XREF: sub_4018A0:loc_4019A5r
.data:00402030					       ; sub_4018A0+15Ar ...
.data:00402034 dword_402034    dd 0		       ; DATA XREF: sub_4018A0:loc_4019B2r
.data:00402034					       ; sub_4018A0+162r ...
.data:00402038 dword_402038    dd 0		       ; DATA XREF: sub_4018A0:loc_4019C0r
.data:00402038					       ; sub_4018A0+16Ar ...
.data:0040203C dword_40203C    dd 0		       ; DATA XREF: sub_4018A0:loc_4019CEr
.data:0040203C					       ; sub_4018A0+172r ...
.data:00402040 aCyggcc_s1_dll  db 'cyggcc_s-1.dll',0   ; DATA XREF: .text:004010B6o
.data:00402040					       ; .text:00401156o
.data:0040204F a__register_fra db '__register_frame_info',0 ; DATA XREF: .text:004010C9o
.data:00402065 aCyggcj9_dll    db 'cyggcj-9.dll',0     ; DATA XREF: .text:004010FAo
.data:00402072 a_jv_registercl db '_Jv_RegisterClasses',0 ; DATA XREF: .text:0040110Do
.data:00402086 a__deregister_f db '__deregister_frame_info',0 ; DATA XREF: .text:00401169o
.data:0040209E		       align 10h
.data:004020A0 aSglib_ilisttyp db 'sglib_iListType_delete',0 ; DATA XREF: .text:0040137Ao
.data:004020B7		       align 4
.data:004020B8 a_p_NullElement db '*_p_!=NULL && "element is not member of the container, use DELETE'
.data:004020B8					       ; DATA XREF: .text:00401372o
.data:004020B8		       db '_IF_MEMBER instead"!=NULL',0
.data:00402113 aListinsertsort db 'listinsertsort1.c',0 ; DATA XREF: .text:0040138Ao
.data:00402125 aD	       db '%d',0               ; DATA XREF: sub_4016DD+3Eo
.data:00402128 aD_0	       db '%d ',0              ; DATA XREF: sub_4016DD+96o
.data:0040212C dword_40212C    dd 0		       ; DATA XREF: .text:loc_4010F1r
.data:0040212C					       ; .text:loc_401124o
.data:00402130 dword_402130    dd 34h dup(0)	       ; DATA XREF: sub_4018A0+18Do
.data:00402200		       align 1000h
.data:00402200 _data	       ends
.data:00402200
.eh_frame:00403000 ; Section 3.	(virtual address 00003000)
.eh_frame:00403000 ; Virtual size		   : 00000004 (	     4.)
.eh_frame:00403000 ; Section size in file	   : 00000200 (	   512.)
.eh_frame:00403000 ; Offset to raw data	for section: 00001400
.eh_frame:00403000 ; Flags C0300040: Data Readable Writable
.eh_frame:00403000 ; Alignment	   : 4 bytes
.eh_frame:00403000 ; ===========================================================================
.eh_frame:00403000
.eh_frame:00403000 ; Segment type: Pure	data
.eh_frame:00403000 ; Segment permissions: Read/Write
.eh_frame:00403000 _eh_frame	   segment dword public	'DATA' use32
.eh_frame:00403000		   assume cs:_eh_frame
.eh_frame:00403000		   ;org	403000h
.eh_frame:00403000 dword_403000	   dd 80h dup(0)	   ; DATA XREF:	.text:004010E8o
.eh_frame:00403000					   ; .text:loc_401180o	...
.eh_frame:00403200		   align 1000h
.eh_frame:00403200 _eh_frame	   ends
.eh_frame:00403200
.bss:00404000 ;	Section	4. (virtual address 00004000)
.bss:00404000 ;	Virtual	size		      :	00000130 (    304.)
.bss:00404000 ;	Section	size in	file	      :	00000000 (	0.)
.bss:00404000 ;	Offset to raw data for section:	00000000
.bss:00404000 ;	Flags C0400080:	Bss Readable Writable
.bss:00404000 ;	Alignment     :	8 bytes
.bss:00404000 ;	===========================================================================
.bss:00404000
.bss:00404000 ;	Segment	type: Uninitialized
.bss:00404000 ;	Segment	permissions: Read/Write
.bss:00404000 ;	Segment	alignment 'qword' can not be represented in assembly
.bss:00404000 _bss	      segment para public 'BSS' use32
.bss:00404000		      assume cs:_bss
.bss:00404000		      ;org 404000h
.bss:00404000		      assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00404000 dword_404000    dd 8 dup(?)	      ;	DATA XREF: .text:loc_4010E0o
.bss:00404000					      ;	sub_4018A0+194o
.bss:00404020 dword_404020    dd ?		      ;	DATA XREF: sub_4018A0+68o
.bss:00404020					      ;	sub_4018A0+221o
.bss:00404024 dword_404024    dd ?		      ;	DATA XREF: sub_4018A0+8Eo
.bss:00404024					      ;	sub_4018A0+252o
.bss:00404028 dword_404028    dd ?		      ;	DATA XREF: sub_4018A0+C4r
.bss:00404028					      ;	.text:00401C8Fw
.bss:0040402C		      align 10h
.bss:00404030 dword_404030    dd ?		      ;	DATA XREF: sub_401BA0+18r
.bss:00404030					      ;	.text:00401C79w
.bss:00404034		      align 10h
.bss:00404040 dword_404040    dd ?		      ;	DATA XREF: sub_401BA0+Fr
.bss:00404040					      ;	.text:00401C7Fw
.bss:00404044		      align 10h
.bss:00404050 dword_404050    dd ?		      ;	DATA XREF: sub_401BA0+6r
.bss:00404050					      ;	.text:00401C89w
.bss:00404054		      align 10h
.bss:00404060 dword_404060    dd ?		      ;	DATA XREF: .text:00401C20r
.bss:00404060					      ;	.text:00401C2Dw ...
.bss:00404064		      align 10h
.bss:00404070 dword_404070    dd 30h dup(?)	      ;	DATA XREF: sub_401D00+Ao
.bss:00404070					      ;	sub_401D00+23o
.bss:00404130 dword_404130    dd 3B4h dup(?)	      ;	DATA XREF: sub_4018A0+19Bo
.bss:00404130 _bss	      ends
.bss:00404130
.idata:00405000	; Section 5. (virtual address 00005000)
.idata:00405000	; Virtual size			: 0000028C (	652.)
.idata:00405000	; Section size in file		: 00000400 (   1024.)
.idata:00405000	; Offset to raw	data for section: 00001600
.idata:00405000	; Flags	C0300040: Data Readable	Writable
.idata:00405000	; Alignment	: 4 bytes
.idata:00405000	; ===========================================================================
.idata:00405000
.idata:00405000	; Segment type:	Externs
.idata:00405000	; _idata
.idata:00405000
.idata:00405001
.idata:004050A4	;
.idata:004050A4	; Imports from cygwin1.dll
.idata:004050A4	;
.idata:004050A4			extrn __imp___assert_func:dword	; DATA XREF: __assert_funcr
.idata:004050A8			extrn __imp___main:dword ; DATA	XREF: __mainr
.idata:004050AC	; __stdcall dll_crt0()
.idata:004050AC			extrn _dll_crt0@0:dword	; CODE XREF: sub_4017F0+1Cp
.idata:004050AC						; DATA XREF: sub_4017F0+1Cr
.idata:004050B0			extrn _impure_ptr:dword	; DATA XREF: sub_4018A0+24r
.idata:004050B0						; sub_4018A0+1E7r
.idata:004050B4	; void *__cdecl	calloc(size_t NumOfElements, size_t SizeOfElements)
.idata:004050B4			extrn calloc:dword	; DATA XREF: .text:loc_401CF8r
.idata:004050B8			extrn __imp_cygwin_detach_dll:dword
.idata:004050B8						; DATA XREF: cygwin_detach_dllr
.idata:004050BC			extrn __imp_cygwin_internal:dword
.idata:004050BC						; DATA XREF: cygwin_internalr
.idata:004050C0			extrn dll_dllcrt0:dword	; DATA XREF: sub_401D00:loc_401D60r
.idata:004050C4	; void __cdecl free(void *Memory)
.idata:004050C4			extrn __imp_free:dword	; DATA XREF: freer
.idata:004050C8	; void *__cdecl	malloc(size_t Size)
.idata:004050C8			extrn __imp_malloc:dword ; DATA	XREF: mallocr
.idata:004050CC	; int printf(const char	*Format, ...)
.idata:004050CC			extrn __imp_printf:dword ; DATA	XREF: printfr
.idata:004050D0	; int __cdecl putchar(int Ch)
.idata:004050D0			extrn __imp_putchar:dword ; DATA XREF: putcharr
.idata:004050D4	; void *__cdecl	realloc(void *Memory, size_t NewSize)
.idata:004050D4			extrn realloc:dword	; DATA XREF: .text:loc_401CF0r
.idata:004050D8	; int sscanf(const char	*Src, const char *Format, ...)
.idata:004050D8			extrn __imp_sscanf:dword ; DATA	XREF: sscanfr
.idata:004050DC
.idata:004050E0	;
.idata:004050E0	; Imports from cyggcc_s-1.dll
.idata:004050E0	;
.idata:004050E0			extrn __imp___deregister_frame_info:dword
.idata:004050E0						; DATA XREF: __deregister_frame_infor
.idata:004050E4			extrn __imp___register_frame_info:dword
.idata:004050E4						; DATA XREF: __register_frame_infor
.idata:004050E8
.idata:004050EC	;
.idata:004050EC	; Imports from KERNEL32.dll
.idata:004050EC	;
.idata:004050EC	; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
.idata:004050EC			extrn __imp_GetModuleHandleA:dword
.idata:004050EC						; DATA XREF: GetModuleHandleAr
.idata:004050F0	; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
.idata:004050F0			extrn __imp_GetProcAddress:dword
.idata:004050F0						; DATA XREF: GetProcAddressr
.idata:004050F4
.idata:004050F4
.idata:004050F4
.idata:004050F4			end start
