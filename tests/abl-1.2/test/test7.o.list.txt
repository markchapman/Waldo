.text:0000000000000000 ;
.text:0000000000000000 ; +-------------------------------------------------------------------------+
.text:0000000000000000 ; |   This file has been	generated by The Interactive Disassembler (IDA)	   |
.text:0000000000000000 ; |	  Copyright (c)	2009 by	Hex-Rays, <support@hex-rays.com>	   |
.text:0000000000000000 ; |			License	info: 48-313D-7374-F1			   |
.text:0000000000000000 ; |   Aditya Thakur, University of Wisconsin/Computer Sciences Department   |
.text:0000000000000000 ; +-------------------------------------------------------------------------+
.text:0000000000000000 ;
.text:0000000000000000 ; Input MD5   : 0A4CE932EC7757361CAD77F2D5C5C28C
.text:0000000000000000
.text:0000000000000000 ; File Name   : C:\aditya\work\waldo\tests\abl-1.2\test\test7.o
.text:0000000000000000 ; Format	     : ELF (Relocatable)
.text:0000000000000000 ;
.text:0000000000000000 ; Source	File : 'test7.c'
.text:0000000000000000
.text:0000000000000000		       .686p
.text:0000000000000000		       .mmx
.text:0000000000000000		       .model flat
.text:0000000000000000 .intel_syntax noprefix
.text:0000000000000000
.text:0000000000000000 ; ===========================================================================
.text:0000000000000000
.text:0000000000000000 ; Segment type: Pure code
.text:0000000000000000 ; Segment permissions: Read/Execute
.text:0000000000000000 _text	       segment para public 'CODE' use64
.text:0000000000000000		       assume cs:_text
.text:0000000000000000		       assume es:nothing, ss:nothing, ds:_text,	fs:nothing, gs:nothing
.text:0000000000000000
.text:0000000000000000 ; =============== S U B R O U T I N E =======================================
.text:0000000000000000
.text:0000000000000000
.text:0000000000000000 int_list_mapcar proc near	       ; CODE XREF: main+CBp
.text:0000000000000000					       ; main+F9p ...
.text:0000000000000000		       push    rbp
.text:0000000000000001		       mov     rbp, rsi
.text:0000000000000004		       push    rbx
.text:0000000000000005		       sub     rsp, 8
.text:0000000000000009		       mov     rbx, [rdi+8]
.text:000000000000000D		       test    rbx, rbx
.text:0000000000000010		       jz      short loc_20
.text:0000000000000012
.text:0000000000000012 loc_12:				       ; CODE XREF: int_list_mapcar+1Ej
.text:0000000000000012		       mov     rdi, rbx
.text:0000000000000015		       call    rbp
.text:0000000000000017		       mov     rbx, [rbx+8]
.text:000000000000001B		       test    rbx, rbx
.text:000000000000001E		       jnz     short loc_12
.text:0000000000000020
.text:0000000000000020 loc_20:				       ; CODE XREF: int_list_mapcar+10j
.text:0000000000000020		       add     rsp, 8
.text:0000000000000024		       pop     rbx
.text:0000000000000025		       pop     rbp
.text:0000000000000026		       retn
.text:0000000000000026 int_list_mapcar endp
.text:0000000000000026
.text:0000000000000026 ; ---------------------------------------------------------------------------
.text:0000000000000027 unk_27	       db  66h ; f	       ; DATA XREF: .eh_frame:0000000000000894o
.text:0000000000000027					       ; .eh_frame:00000000000008B4o
.text:0000000000000028		       db  0Fh
.text:0000000000000029		       db  1Fh
.text:000000000000002A		       db  84h ; „
.text:000000000000002B		       db    0
.text:000000000000002C		       db    0
.text:000000000000002D		       db    0
.text:000000000000002E		       db    0
.text:000000000000002F		       db    0
.text:0000000000000030
.text:0000000000000030 ; =============== S U B R O U T I N E =======================================
.text:0000000000000030
.text:0000000000000030
.text:0000000000000030 str_list_mapcar proc near	       ; CODE XREF: main+24Ap
.text:0000000000000030					       ; main+278p ...
.text:0000000000000030		       push    rbp
.text:0000000000000031		       mov     rbp, rsi
.text:0000000000000034		       push    rbx
.text:0000000000000035		       sub     rsp, 8
.text:0000000000000039
.text:0000000000000039 loc_39:				       ; DATA XREF: .eh_frame:00000000000009E4o
.text:0000000000000039		       mov     rbx, [rdi+8]
.text:000000000000003D		       test    rbx, rbx
.text:0000000000000040		       jz      short loc_50
.text:0000000000000042
.text:0000000000000042 loc_42:				       ; CODE XREF: str_list_mapcar+1Ej
.text:0000000000000042		       mov     rdi, rbx
.text:0000000000000045		       call    rbp
.text:0000000000000047		       mov     rbx, [rbx+8]
.text:000000000000004B		       test    rbx, rbx
.text:000000000000004E		       jnz     short loc_42
.text:0000000000000050
.text:0000000000000050 loc_50:				       ; CODE XREF: str_list_mapcar+10j
.text:0000000000000050		       add     rsp, 8
.text:0000000000000054		       pop     rbx
.text:0000000000000055		       pop     rbp
.text:0000000000000056		       retn
.text:0000000000000056 str_list_mapcar endp
.text:0000000000000056
.text:0000000000000056 ; ---------------------------------------------------------------------------
.text:0000000000000057		       align 20h
.text:0000000000000060
.text:0000000000000060 ; =============== S U B R O U T I N E =======================================
.text:0000000000000060
.text:0000000000000060
.text:0000000000000060 str_list_sort   proc near	       ; CODE XREF: main+26Bp
.text:0000000000000060					       ; main+299p
.text:0000000000000060					       ; DATA XREF: ...
.text:0000000000000060
.text:0000000000000060 var_60	       = qword ptr -60h
.text:0000000000000060 var_58	       = qword ptr -58h
.text:0000000000000060 var_50	       = qword ptr -50h
.text:0000000000000060 var_48	       = byte ptr -48h
.text:0000000000000060 var_40	       = qword ptr -40h
.text:0000000000000060
.text:0000000000000060		       push    r15
.text:0000000000000062		       mov     r8, rdi
.text:0000000000000065		       push    r14
.text:0000000000000067		       push    r13
.text:0000000000000069		       push    r12
.text:000000000000006B		       push    rbp
.text:000000000000006C		       push    rbx
.text:000000000000006D		       sub     rsp, 38h
.text:0000000000000071		       cmp     qword ptr [rdi],	1
.text:0000000000000075		       mov     [rsp+68h+var_58], rsi
.text:000000000000007A		       jbe     loc_1D3
.text:0000000000000080		       mov     rax, [rdi+8]
.text:0000000000000084		       cmp     qword ptr [rdi],	1
.text:0000000000000088		       mov     r15d, 1
.text:000000000000008E		       mov     [rsp+68h+var_40], rax
.text:0000000000000093		       lea     rax, [rsp+68h+var_48]
.text:0000000000000098
.text:0000000000000098 loc_98:				       ; DATA XREF: .eh_frame:00000000000009A4o
.text:0000000000000098		       mov     [rdi+8],	rax
.text:000000000000009C		       mov     r13, rax
.text:000000000000009F		       jbe     loc_1AB
.text:00000000000000A5
.text:00000000000000A5 loc_A5:				       ; CODE XREF: str_list_sort+128j
.text:00000000000000A5					       ; str_list_sort+13Dj
.text:00000000000000A5		       cmp     qword ptr [r13+8], 0
.text:00000000000000AA		       jz      loc_18E
.text:00000000000000B0		       test    r15, r15
.text:00000000000000B3		       jz      loc_215
.text:00000000000000B9		       mov     rbp, [r13+8]
.text:00000000000000BD		       xor     ebx, ebx
.text:00000000000000BF		       test    rbp, rbp
.text:00000000000000C2		       jnz     short loc_E0
.text:00000000000000C4		       jmp     loc_21F
.text:00000000000000C4 ; ---------------------------------------------------------------------------
.text:00000000000000C9		       align 10h
.text:00000000000000D0
.text:00000000000000D0 loc_D0:				       ; CODE XREF: str_list_sort+87j
.text:00000000000000D0					       ; DATA XREF: .eh_frame:0000000000000954o
.text:00000000000000D0		       mov     rax, [rbp+8]
.text:00000000000000D4		       test    rax, rax
.text:00000000000000D7		       jz      loc_1FB
.text:00000000000000DD		       mov     rbp, rax
.text:00000000000000E0
.text:00000000000000E0 loc_E0:				       ; CODE XREF: str_list_sort+62j
.text:00000000000000E0		       add     rbx, 1
.text:00000000000000E4		       cmp     rbx, r15
.text:00000000000000E7		       jnz     short loc_D0
.text:00000000000000E9
.text:00000000000000E9 loc_E9:				       ; CODE XREF: str_list_sort+1BAj
.text:00000000000000E9		       cmp     qword ptr [rbp+8], 0
.text:00000000000000EE		       mov     r12, r15
.text:00000000000000F1		       jz      loc_1FB
.text:00000000000000F7
.text:00000000000000F7 loc_F7:				       ; CODE XREF: str_list_sort+1A0j
.text:00000000000000F7					       ; str_list_sort+1B0j ...
.text:00000000000000F7		       test    rbx, rbx
.text:00000000000000FA		       setnz   al
.text:00000000000000FD		       test    r12, r12
.text:0000000000000100		       setnz   dl
.text:0000000000000103		       test    al, al
.text:0000000000000105		       jz      short loc_16D
.text:0000000000000107
.text:0000000000000107 loc_107:				       ; CODE XREF: str_list_sort+10Bj
.text:0000000000000107		       test    dl, dl
.text:0000000000000109		       jz      loc_1E2
.text:000000000000010F		       mov     rax, [r13+8]
.text:0000000000000113		       mov     r14, [rbp+8]
.text:0000000000000117		       mov     [rsp+68h+var_60], r8
.text:000000000000011C		       mov     [rsp+68h+var_50], rax
.text:0000000000000121		       mov     rsi, r14
.text:0000000000000124		       mov     rdi, rax
.text:0000000000000127		       call    [rsp+68h+var_58]
.text:000000000000012B		       test    eax, eax
.text:000000000000012D		       mov     r8, [rsp+68h+var_60]
.text:0000000000000132		       jz      loc_205
.text:0000000000000138		       mov     rax, [r14+8]
.text:000000000000013C		       mov     rdx, [rsp+68h+var_50]
.text:0000000000000141		       test    rax, rax
.text:0000000000000144		       mov     [r14+8],	rdx
.text:0000000000000148		       mov     [r13+8],	r14
.text:000000000000014C		       mov     [rbp+8],	rax
.text:0000000000000150		       jz      loc_1F8
.text:0000000000000156		       sub     r12, 1
.text:000000000000015A		       test    rbx, rbx
.text:000000000000015D		       mov     r13, r14
.text:0000000000000160		       setnz   al
.text:0000000000000163		       test    r12, r12
.text:0000000000000166		       setnz   dl
.text:0000000000000169		       test    al, al
.text:000000000000016B		       jnz     short loc_107
.text:000000000000016D
.text:000000000000016D loc_16D:				       ; CODE XREF: str_list_sort+A5j
.text:000000000000016D		       test    dl, dl
.text:000000000000016F		       jnz     short loc_178
.text:0000000000000171		       jmp     short loc_185
.text:0000000000000173 ; ---------------------------------------------------------------------------
.text:0000000000000173
.text:0000000000000173 loc_173:				       ; CODE XREF: str_list_sort+120j
.text:0000000000000173		       test    rbp, rbp
.text:0000000000000176		       jz      short loc_17C
.text:0000000000000178
.text:0000000000000178 loc_178:				       ; CODE XREF: str_list_sort+10Fj
.text:0000000000000178		       mov     rbp, [rbp+8]
.text:000000000000017C
.text:000000000000017C loc_17C:				       ; CODE XREF: str_list_sort+116j
.text:000000000000017C		       sub     r12, 1
.text:0000000000000180		       jnz     short loc_173
.text:0000000000000182		       mov     r13, rbp
.text:0000000000000185
.text:0000000000000185 loc_185:				       ; CODE XREF: str_list_sort+111j
.text:0000000000000185					       ; str_list_sort+18Aj ...
.text:0000000000000185		       test    r13, r13
.text:0000000000000188		       jnz     loc_A5
.text:000000000000018E
.text:000000000000018E loc_18E:				       ; CODE XREF: str_list_sort+4Aj
.text:000000000000018E		       add     r15, r15
.text:0000000000000191		       cmp     [r8], r15
.text:0000000000000194		       jbe     short loc_1AB
.text:0000000000000196
.text:0000000000000196 loc_196:				       ; CODE XREF: str_list_sort+149j
.text:0000000000000196		       mov     r13, [r8+8]
.text:000000000000019A		       test    r13, r13
.text:000000000000019D		       jnz     loc_A5
.text:00000000000001A3		       add     r15, r15
.text:00000000000001A6		       cmp     [r8], r15
.text:00000000000001A9		       ja      short loc_196
.text:00000000000001AB
.text:00000000000001AB loc_1AB:				       ; CODE XREF: str_list_sort+3Fj
.text:00000000000001AB					       ; str_list_sort+134j
.text:00000000000001AB		       mov     rdx, [rsp+68h+var_40]
.text:00000000000001B0		       xor     eax, eax
.text:00000000000001B2		       test    rdx, rdx
.text:00000000000001B5		       mov     [r8+8], rdx
.text:00000000000001B9		       jnz     short loc_1C3
.text:00000000000001BB		       jmp     short loc_1CF
.text:00000000000001BB ; ---------------------------------------------------------------------------
.text:00000000000001BD		       align 20h
.text:00000000000001C0
.text:00000000000001C0 loc_1C0:				       ; CODE XREF: str_list_sort+16Aj
.text:00000000000001C0		       mov     rdx, rax
.text:00000000000001C3
.text:00000000000001C3 loc_1C3:				       ; CODE XREF: str_list_sort+159j
.text:00000000000001C3		       mov     rax, [rdx+8]
.text:00000000000001C7		       test    rax, rax
.text:00000000000001CA		       jnz     short loc_1C0
.text:00000000000001CC
.text:00000000000001CC loc_1CC:				       ; DATA XREF: .eh_frame:00000000000008D4o
.text:00000000000001CC		       mov     rax, rdx
.text:00000000000001CF
.text:00000000000001CF loc_1CF:				       ; CODE XREF: str_list_sort+15Bj
.text:00000000000001CF		       mov     [r8+18h], rax
.text:00000000000001D3
.text:00000000000001D3 loc_1D3:				       ; CODE XREF: str_list_sort+1Aj
.text:00000000000001D3		       add     rsp, 38h
.text:00000000000001D7		       pop     rbx
.text:00000000000001D8		       pop     rbp
.text:00000000000001D9		       pop     r12
.text:00000000000001DB		       pop     r13
.text:00000000000001DD		       pop     r14
.text:00000000000001DF		       pop     r15
.text:00000000000001E1		       retn
.text:00000000000001E2 ; ---------------------------------------------------------------------------
.text:00000000000001E2
.text:00000000000001E2 loc_1E2:				       ; CODE XREF: str_list_sort+A9j
.text:00000000000001E2					       ; str_list_sort+194j
.text:00000000000001E2		       sub     rbx, 1
.text:00000000000001E6		       mov     r13, [r13+8]
.text:00000000000001EA		       jz      short loc_185
.text:00000000000001EC		       sub     rbx, 1
.text:00000000000001F0		       mov     r13, [r13+8]
.text:00000000000001F4		       jnz     short loc_1E2
.text:00000000000001F6		       jmp     short loc_185
.text:00000000000001F8 ; ---------------------------------------------------------------------------
.text:00000000000001F8
.text:00000000000001F8 loc_1F8:				       ; CODE XREF: str_list_sort+F0j
.text:00000000000001F8		       mov     r13, r14
.text:00000000000001FB
.text:00000000000001FB loc_1FB:				       ; CODE XREF: str_list_sort+77j
.text:00000000000001FB					       ; str_list_sort+91j
.text:00000000000001FB		       xor     r12d, r12d
.text:00000000000001FE		       db      66h
.text:00000000000001FE		       nop
.text:0000000000000200		       jmp     loc_F7
.text:0000000000000205 ; ---------------------------------------------------------------------------
.text:0000000000000205
.text:0000000000000205 loc_205:				       ; CODE XREF: str_list_sort+D2j
.text:0000000000000205		       mov     r13, [r13+8]
.text:0000000000000209		       sub     rbx, 1
.text:000000000000020D		       nop     dword ptr [rax]
.text:0000000000000210		       jmp     loc_F7
.text:0000000000000215 ; ---------------------------------------------------------------------------
.text:0000000000000215
.text:0000000000000215 loc_215:				       ; CODE XREF: str_list_sort+53j
.text:0000000000000215		       mov     rbp, r13
.text:0000000000000218		       xor     ebx, ebx
.text:000000000000021A		       jmp     loc_E9
.text:000000000000021F ; ---------------------------------------------------------------------------
.text:000000000000021F
.text:000000000000021F loc_21F:				       ; CODE XREF: str_list_sort+64j
.text:000000000000021F		       mov     rbp, r13
.text:0000000000000222		       xor     ebx, ebx
.text:0000000000000224		       xor     r12d, r12d
.text:0000000000000227		       jmp     loc_F7
.text:0000000000000227 str_list_sort   endp
.text:0000000000000227
.text:0000000000000227 ; ---------------------------------------------------------------------------
.text:000000000000022C		       align 10h
.text:0000000000000230
.text:0000000000000230 ; =============== S U B R O U T I N E =======================================
.text:0000000000000230
.text:0000000000000230
.text:0000000000000230		       public cfint_asc
.text:0000000000000230 cfint_asc       proc near	       ; DATA XREF: main+E4o
.text:0000000000000230					       ; .eh_frame:0000000000000908o
.text:0000000000000230		       mov     eax, [rdi]
.text:0000000000000232		       cmp     eax, [rsi]
.text:0000000000000234		       setnle  al
.text:0000000000000237		       movzx   eax, al
.text:000000000000023A		       retn
.text:000000000000023A cfint_asc       endp
.text:000000000000023A
.text:000000000000023A ; ---------------------------------------------------------------------------
.text:000000000000023B		       align 20h
.text:0000000000000240
.text:0000000000000240 ; =============== S U B R O U T I N E =======================================
.text:0000000000000240
.text:0000000000000240
.text:0000000000000240		       public cfint_des
.text:0000000000000240 cfint_des       proc near	       ; DATA XREF: main+108o
.text:0000000000000240					       ; .eh_frame:0000000000000920o
.text:0000000000000240		       mov     eax, [rdi]
.text:0000000000000242		       cmp     eax, [rsi]
.text:0000000000000244		       setl    al
.text:0000000000000247		       movzx   eax, al
.text:000000000000024A		       retn
.text:000000000000024A cfint_des       endp
.text:000000000000024A
.text:000000000000024A ; ---------------------------------------------------------------------------
.text:000000000000024B		       align 10h
.text:0000000000000250
.text:0000000000000250 ; =============== S U B R O U T I N E =======================================
.text:0000000000000250
.text:0000000000000250
.text:0000000000000250		       public printstr
.text:0000000000000250 printstr	       proc near	       ; DATA XREF: main+23Bo
.text:0000000000000250					       ; main+270o ...
.text:0000000000000250		       mov     rdi, [rdi]
.text:0000000000000253		       jmp     puts
.text:0000000000000253 printstr	       endp
.text:0000000000000253
.text:0000000000000253 ; ---------------------------------------------------------------------------
.text:0000000000000258		       align 20h
.text:0000000000000260
.text:0000000000000260 ; =============== S U B R O U T I N E =======================================
.text:0000000000000260
.text:0000000000000260
.text:0000000000000260 int_list_combsort proc near	       ; CODE XREF: main+ECp
.text:0000000000000260					       ; main+110p
.text:0000000000000260					       ; DATA XREF: ...
.text:0000000000000260
.text:0000000000000260 var_34	       = dword ptr -34h
.text:0000000000000260
.text:0000000000000260		       push    r15
.text:0000000000000262		       mov     r15, rdi
.text:0000000000000265		       push    r14
.text:0000000000000267		       mov     r14, rsi
.text:000000000000026A		       push    r13
.text:000000000000026C		       push    r12
.text:000000000000026E		       push    rbp
.text:000000000000026F		       push    rbx
.text:0000000000000270		       sub     rsp, 18h
.text:0000000000000274		       mov     rax, [rdi]
.text:0000000000000277		       cmp     rax, 1
.text:000000000000027B		       lea     r12d, [rax-1]
.text:000000000000027F		       jbe     loc_31A
.text:0000000000000285
.text:0000000000000285 loc_285:				       ; CODE XREF: int_list_combsort+ACj
.text:0000000000000285					       ; int_list_combsort+B4j
.text:0000000000000285		       cmp     r12d, 1
.text:0000000000000289		       mov     rbp, [r15+8]
.text:000000000000028D		       jle     short loc_2AB
.text:000000000000028F		       cvtsi2ss	xmm0, r12d
.text:0000000000000294		       divss   xmm0, cs:_LC0
.text:000000000000029C		       cvttss2si r12d, xmm0
.text:00000000000002A1		       lea     eax, [r12-9]
.text:00000000000002A6		       cmp     eax, 1
.text:00000000000002A9		       jbe     short loc_329
.text:00000000000002AB
.text:00000000000002AB loc_2AB:				       ; CODE XREF: int_list_combsort+2Dj
.text:00000000000002AB		       test    r12d, r12d
.text:00000000000002AE		       mov     rbx, rbp
.text:00000000000002B1		       jle     short loc_2C4
.text:00000000000002B3
.text:00000000000002B3 loc_2B3:				       ; CODE XREF: int_list_combsort+CFj
.text:00000000000002B3		       mov     rbx, rbp
.text:00000000000002B6		       xor     eax, eax
.text:00000000000002B8
.text:00000000000002B8 loc_2B8:				       ; CODE XREF: int_list_combsort+62j
.text:00000000000002B8		       add     eax, 1
.text:00000000000002BB		       mov     rbx, [rbx+8]
.text:00000000000002BF		       cmp     r12d, eax
.text:00000000000002C2		       jg      short loc_2B8
.text:00000000000002C4
.text:00000000000002C4 loc_2C4:				       ; CODE XREF: int_list_combsort+51j
.text:00000000000002C4		       xor     eax, eax
.text:00000000000002C6		       test    rbx, rbx
.text:00000000000002C9		       jz      short loc_308
.text:00000000000002CB		       xor     r13d, r13d
.text:00000000000002CE		       jmp     short loc_2DD
.text:00000000000002D0 ; ---------------------------------------------------------------------------
.text:00000000000002D0
.text:00000000000002D0 loc_2D0:				       ; CODE XREF: int_list_combsort+88j
.text:00000000000002D0					       ; int_list_combsort:loc_300j
.text:00000000000002D0		       mov     rbx, [rbx+8]
.text:00000000000002D4		       mov     rbp, [rbp+8]
.text:00000000000002D8		       test    rbx, rbx
.text:00000000000002DB		       jz      short loc_302
.text:00000000000002DD
.text:00000000000002DD loc_2DD:				       ; CODE XREF: int_list_combsort+6Ej
.text:00000000000002DD		       mov     rsi, rbx
.text:00000000000002E0		       mov     rdi, rbp
.text:00000000000002E3		       call    r14
.text:00000000000002E6		       test    eax, eax
.text:00000000000002E8		       jz      short loc_2D0
.text:00000000000002EA		       mov     eax, [rbp+0]
.text:00000000000002ED		       add     r13d, 1
.text:00000000000002F1		       mov     [rsp+48h+var_34], eax
.text:00000000000002F5		       mov     eax, [rbx]
.text:00000000000002F7		       mov     [rbp+0],	eax
.text:00000000000002FA		       mov     eax, [rsp+48h+var_34]
.text:00000000000002FE		       mov     [rbx], eax
.text:0000000000000300
.text:0000000000000300 loc_300:				       ; DATA XREF: .eh_frame:00000000000009C4o
.text:0000000000000300		       jmp     short loc_2D0
.text:0000000000000302 ; ---------------------------------------------------------------------------
.text:0000000000000302
.text:0000000000000302 loc_302:				       ; CODE XREF: int_list_combsort+7Bj
.text:0000000000000302		       test    r13d, r13d
.text:0000000000000305		       setnz   al
.text:0000000000000308
.text:0000000000000308 loc_308:				       ; CODE XREF: int_list_combsort+69j
.text:0000000000000308		       cmp     r12d, 1
.text:000000000000030C		       jnz     loc_285
.text:0000000000000312		       test    al, al
.text:0000000000000314		       jnz     loc_285
.text:000000000000031A
.text:000000000000031A loc_31A:				       ; CODE XREF: int_list_combsort+1Fj
.text:000000000000031A		       add     rsp, 18h
.text:000000000000031E		       pop     rbx
.text:000000000000031F		       pop     rbp
.text:0000000000000320		       pop     r12
.text:0000000000000322		       pop     r13
.text:0000000000000324		       pop     r14
.text:0000000000000326		       pop     r15
.text:0000000000000328		       retn
.text:0000000000000329 ; ---------------------------------------------------------------------------
.text:0000000000000329
.text:0000000000000329 loc_329:				       ; CODE XREF: int_list_combsort+49j
.text:0000000000000329		       mov     r12d, 0Bh
.text:000000000000032F		       jmp     short loc_2B3
.text:000000000000032F int_list_combsort endp
.text:000000000000032F
.text:000000000000032F ; ---------------------------------------------------------------------------
.text:0000000000000331		       align 20h
.text:0000000000000340
.text:0000000000000340 ; =============== S U B R O U T I N E =======================================
.text:0000000000000340
.text:0000000000000340
.text:0000000000000340		       public str_list_destroy
.text:0000000000000340 str_list_destroy	proc near	       ; DATA XREF: main+1ACo
.text:0000000000000340					       ; .eh_frame:0000000000000988o
.text:0000000000000340		       mov     rdi, [rdi]
.text:0000000000000343		       jmp     free
.text:0000000000000343 str_list_destroy	endp
.text:0000000000000343
.text:0000000000000343 ; ---------------------------------------------------------------------------
.text:0000000000000348		       align 10h
.text:0000000000000350
.text:0000000000000350 ; =============== S U B R O U T I N E =======================================
.text:0000000000000350
.text:0000000000000350
.text:0000000000000350 str_list_create_head proc near	       ; CODE XREF: main+1B5p
.text:0000000000000350					       ; main+1C2p ...
.text:0000000000000350
.text:0000000000000350 var_20	       = qword ptr -20h
.text:0000000000000350 var_18	       = qword ptr -18h
.text:0000000000000350 var_10	       = qword ptr -10h
.text:0000000000000350 var_8	       = qword ptr -8
.text:0000000000000350
.text:0000000000000350		       mov     [rsp+var_20], rbx
.text:0000000000000355		       mov     [rsp+var_18], rbp
.text:000000000000035A		       mov     rbx, rdi
.text:000000000000035D		       mov     [rsp+var_10], r12
.text:0000000000000362		       mov     [rsp+var_8], r13
.text:0000000000000367		       mov     edi, 10h	       ; size
.text:000000000000036C		       sub     rsp, 28h
.text:0000000000000370		       mov     r13, rsi
.text:0000000000000373		       mov     r12d, 5
.text:0000000000000379		       call    malloc
.text:000000000000037E		       test    rax, rax
.text:0000000000000381		       mov     rbp, rax
.text:0000000000000384		       jz      short loc_3B8
.text:0000000000000386		       mov     rax, [rbx+20h]
.text:000000000000038A		       test    rax, rax
.text:000000000000038D		       jz      short loc_39E
.text:000000000000038F		       mov     rsi, r13
.text:0000000000000392		       mov     rdi, rbp
.text:0000000000000395		       call    rax
.text:0000000000000397		       test    eax, eax
.text:0000000000000399		       mov     r12d, eax
.text:000000000000039C		       jnz     short loc_3E0
.text:000000000000039E
.text:000000000000039E loc_39E:				       ; CODE XREF: str_list_create_head+3Dj
.text:000000000000039E		       add     qword ptr [rbx],	1
.text:00000000000003A2		       xor     r12d, r12d
.text:00000000000003A5		       cmp     qword ptr [rbx+18h], 0
.text:00000000000003AA		       mov     rax, [rbx+8]
.text:00000000000003AE		       mov     [rbx+8],	rbp
.text:00000000000003B2		       mov     [rbp+8],	rax
.text:00000000000003B6		       jz      short loc_3D4
.text:00000000000003B8
.text:00000000000003B8 loc_3B8:				       ; CODE XREF: str_list_create_head+34j
.text:00000000000003B8					       ; str_list_create_head+88j ...
.text:00000000000003B8		       mov     eax, r12d
.text:00000000000003BB		       mov     rbx, [rsp+28h+var_20]
.text:00000000000003C0		       mov     rbp, [rsp+28h+var_18]
.text:00000000000003C5		       mov     r12, [rsp+28h+var_10]
.text:00000000000003CA		       mov     r13, [rsp+28h+var_8]
.text:00000000000003CF		       add     rsp, 28h
.text:00000000000003D3		       retn
.text:00000000000003D4 ; ---------------------------------------------------------------------------
.text:00000000000003D4
.text:00000000000003D4 loc_3D4:				       ; CODE XREF: str_list_create_head+66j
.text:00000000000003D4		       mov     [rbx+18h], rbp
.text:00000000000003D8		       jmp     short loc_3B8
.text:00000000000003D8 ; ---------------------------------------------------------------------------
.text:00000000000003DA		       align 20h
.text:00000000000003E0
.text:00000000000003E0 loc_3E0:				       ; CODE XREF: str_list_create_head+4Cj
.text:00000000000003E0		       mov     rdi, rbp	       ; ptr
.text:00000000000003E3		       call    free
.text:00000000000003E8		       jmp     short loc_3B8
.text:00000000000003E8 str_list_create_head endp
.text:00000000000003E8
.text:00000000000003E8 ; ---------------------------------------------------------------------------
.text:00000000000003EA		       align 10h
.text:00000000000003F0
.text:00000000000003F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000003F0
.text:00000000000003F0
.text:00000000000003F0		       public main
.text:00000000000003F0 main	       proc near	       ; DATA XREF: .eh_frame:00000000000009C0o
.text:00000000000003F0
.text:00000000000003F0 var_78	       = qword ptr -78h
.text:00000000000003F0 var_70	       = qword ptr -70h
.text:00000000000003F0 var_68	       = qword ptr -68h
.text:00000000000003F0 var_60	       = qword ptr -60h
.text:00000000000003F0 var_58	       = qword ptr -58h
.text:00000000000003F0 var_50	       = qword ptr -50h
.text:00000000000003F0 var_48	       = qword ptr -48h
.text:00000000000003F0 ptr	       = qword ptr -40h
.text:00000000000003F0 var_38	       = qword ptr -38h
.text:00000000000003F0 var_30	       = qword ptr -30h
.text:00000000000003F0 var_28	       = qword ptr -28h
.text:00000000000003F0 var_20	       = qword ptr -20h
.text:00000000000003F0 var_C	       = dword ptr -0Ch
.text:00000000000003F0
.text:00000000000003F0		       push    rbx
.text:00000000000003F1		       mov     edi, offset s   ; "\nPART1: integers\n"
.text:00000000000003F6		       xor     ebx, ebx
.text:00000000000003F8		       sub     rsp, 70h
.text:00000000000003FC		       call    puts
.text:0000000000000401		       mov     [rsp+78h+var_48], 0
.text:000000000000040A		       mov     [rsp+78h+ptr], 0
.text:0000000000000413		       mov     [rsp+78h+var_38], 0
.text:000000000000041C		       mov     [rsp+78h+var_30], 0
.text:0000000000000425		       mov     [rsp+78h+var_28], 0
.text:000000000000042E		       mov     [rsp+78h+var_20], 0
.text:0000000000000437		       jmp     short loc_448
.text:0000000000000437 ; ---------------------------------------------------------------------------
.text:0000000000000439		       align 20h
.text:0000000000000440
.text:0000000000000440 loc_440:				       ; CODE XREF: main+8Dj
.text:0000000000000440					       ; main+AFj
.text:0000000000000440		       add     ebx, 1
.text:0000000000000443		       cmp     ebx, 0Ch
.text:0000000000000446		       jz      short loc_4AE
.text:0000000000000448
.text:0000000000000448 loc_448:				       ; CODE XREF: main+47j
.text:0000000000000448					       ; main+BCj
.text:0000000000000448		       call    rand
.text:000000000000044D		       cvtsi2ss	xmm0, eax
.text:0000000000000451		       mov     edi, 10h	       ; size
.text:0000000000000456		       mulss   xmm0, cs:_LC2
.text:000000000000045E		       cvtss2sd	xmm0, xmm0
.text:0000000000000462		       mulsd   xmm0, cs:_LC3
.text:000000000000046A		       cvttsd2si eax, xmm0
.text:000000000000046E		       mov     [rsp+78h+var_C],	eax
.text:0000000000000472		       call    malloc
.text:0000000000000477		       test    rax, rax
.text:000000000000047A		       mov     rdx, rax
.text:000000000000047D		       jz      short loc_440
.text:000000000000047F		       mov     eax, [rsp+78h+var_C]
.text:0000000000000483		       mov     [rdx], eax
.text:0000000000000485		       mov     rax, [rsp+78h+ptr]
.text:000000000000048A		       add     [rsp+78h+var_48], 1
.text:0000000000000490		       mov     [rdx+8],	rax
.text:0000000000000494		       cmp     [rsp+78h+var_30], 0
.text:000000000000049A		       mov     [rsp+78h+ptr], rdx
.text:000000000000049F		       jnz     short loc_440
.text:00000000000004A1		       add     ebx, 1
.text:00000000000004A4		       mov     [rsp+78h+var_30], rdx
.text:00000000000004A9		       cmp     ebx, 0Ch
.text:00000000000004AC		       jnz     short loc_448
.text:00000000000004AE
.text:00000000000004AE loc_4AE:				       ; CODE XREF: main+56j
.text:00000000000004AE		       lea     rbx, [rsp+78h+var_48]
.text:00000000000004B3		       mov     esi, offset printint
.text:00000000000004B8		       mov     rdi, rbx
.text:00000000000004BB		       call    int_list_mapcar
.text:00000000000004C0		       mov     edi, 0Ah	       ; c
.text:00000000000004C5		       call    putchar
.text:00000000000004CA		       mov     edi, offset aSortedAscendin ; "Sorted ascending:"
.text:00000000000004CF		       call    puts
.text:00000000000004D4		       mov     esi, offset cfint_asc
.text:00000000000004D9		       mov     rdi, rbx
.text:00000000000004DC		       call    int_list_combsort
.text:00000000000004E1		       mov     esi, offset printint
.text:00000000000004E6		       mov     rdi, rbx
.text:00000000000004E9		       call    int_list_mapcar
.text:00000000000004EE		       mov     edi, offset aSortedDescendi ; "Sorted descending:"
.text:00000000000004F3		       call    puts
.text:00000000000004F8		       mov     esi, offset cfint_des
.text:00000000000004FD		       mov     rdi, rbx
.text:0000000000000500		       call    int_list_combsort
.text:0000000000000505		       mov     esi, offset printint
.text:000000000000050A		       mov     rdi, rbx
.text:000000000000050D		       call    int_list_mapcar
.text:0000000000000512
.text:0000000000000512 loc_512:				       ; CODE XREF: main+15Bj
.text:0000000000000512		       cmp     [rsp+78h+var_48], 0
.text:0000000000000518		       jz      short loc_55E
.text:000000000000051A
.text:000000000000051A loc_51A:				       ; CODE XREF: main+16Cj
.text:000000000000051A		       mov     rbx, [rsp+78h+ptr]
.text:000000000000051F		       sub     [rsp+78h+var_48], 1
.text:0000000000000525		       mov     rax, [rbx+8]
.text:0000000000000529		       mov     [rsp+78h+ptr], rax
.text:000000000000052E		       mov     rax, [rsp+78h+var_20]
.text:0000000000000533		       test    rax, rax
.text:0000000000000536		       jz      short loc_53D
.text:0000000000000538		       mov     rdi, rbx
.text:000000000000053B		       call    rax
.text:000000000000053D
.text:000000000000053D loc_53D:				       ; CODE XREF: main+146j
.text:000000000000053D		       mov     rdi, rbx	       ; ptr
.text:0000000000000540		       call    free
.text:0000000000000545		       cmp     [rsp+78h+ptr], 0
.text:000000000000054B		       jnz     short loc_512
.text:000000000000054D		       cmp     [rsp+78h+var_48], 0
.text:0000000000000553		       mov     [rsp+78h+var_30], 0
.text:000000000000055C		       jnz     short loc_51A
.text:000000000000055E
.text:000000000000055E loc_55E:				       ; CODE XREF: main+128j
.text:000000000000055E		       mov     edi, offset aPart2Strings ; "\nPART2: strings\n"
.text:0000000000000563		       call    puts
.text:0000000000000568		       mov     esi, offset aFirstString	; "First String"
.text:000000000000056D		       mov     rdi, rsp
.text:0000000000000570		       mov     [rsp+78h+var_78], 0
.text:0000000000000578		       mov     [rsp+78h+var_70], 0
.text:0000000000000581		       mov     [rsp+78h+var_68], 0
.text:000000000000058A		       mov     [rsp+78h+var_60], 0
.text:0000000000000593		       mov     [rsp+78h+var_58], offset	str_list_make
.text:000000000000059C		       mov     [rsp+78h+var_50], offset	str_list_destroy
.text:00000000000005A5		       call    str_list_create_head
.text:00000000000005AA		       mov     esi, offset aSecondString ; "Second String"
.text:00000000000005AF		       mov     rdi, rsp
.text:00000000000005B2		       call    str_list_create_head
.text:00000000000005B7		       mov     esi, offset aThirdString	; "Third String"
.text:00000000000005BC		       mov     rdi, rsp
.text:00000000000005BF		       call    str_list_create_head
.text:00000000000005C4		       mov     esi, offset aFourthString ; "Fourth String"
.text:00000000000005C9		       mov     rdi, rsp
.text:00000000000005CC		       call    str_list_create_head
.text:00000000000005D1		       mov     esi, offset aFifthString	; "Fifth String"
.text:00000000000005D6		       mov     rdi, rsp
.text:00000000000005D9		       call    str_list_create_head
.text:00000000000005DE		       mov     esi, offset aSixesString	; "Sixes String"
.text:00000000000005E3		       mov     rdi, rsp
.text:00000000000005E6		       call    str_list_create_head
.text:00000000000005EB		       mov     esi, offset aSeventhString ; "Seventh String"
.text:00000000000005F0		       mov     rdi, rsp
.text:00000000000005F3		       call    str_list_create_head
.text:00000000000005F8		       mov     rsi, [rsp+78h+var_70]
.text:00000000000005FD		       test    rsi, rsi
.text:0000000000000600		       mov     rax, rsi
.text:0000000000000603		       jz      short loc_623
.text:0000000000000605		       xor     ecx, ecx
.text:0000000000000607		       jmp     short loc_616
.text:0000000000000607 ; ---------------------------------------------------------------------------
.text:0000000000000609		       align 10h
.text:0000000000000610
.text:0000000000000610 loc_610:				       ; CODE XREF: main+231j
.text:0000000000000610		       mov     rcx, rax
.text:0000000000000613		       mov     rax, rdx
.text:0000000000000616
.text:0000000000000616 loc_616:				       ; CODE XREF: main+217j
.text:0000000000000616		       mov     rdx, [rax+8]
.text:000000000000061A		       mov     [rax+8],	rcx
.text:000000000000061E		       test    rdx, rdx
.text:0000000000000621		       jnz     short loc_610
.text:0000000000000623
.text:0000000000000623 loc_623:				       ; CODE XREF: main+213j
.text:0000000000000623		       mov     [rsp+78h+var_60], rsi
.text:0000000000000628		       mov     rdi, rsp
.text:000000000000062B		       mov     esi, offset printstr
.text:0000000000000630		       mov     [rsp+78h+var_70], rax
.text:0000000000000635		       mov     [rsp+78h+var_68], rax
.text:000000000000063A		       call    str_list_mapcar
.text:000000000000063F		       mov     edi, 0Ah	       ; c
.text:0000000000000644		       call    putchar
.text:0000000000000649		       mov     edi, offset aSortedByLength ; "Sorted by	length:"
.text:000000000000064E		       call    puts
.text:0000000000000653		       mov     esi, offset cfstr2
.text:0000000000000658		       mov     rdi, rsp
.text:000000000000065B		       call    str_list_sort
.text:0000000000000660		       mov     esi, offset printstr
.text:0000000000000665		       mov     rdi, rsp
.text:0000000000000668		       call    str_list_mapcar
.text:000000000000066D		       mov     edi, 0Ah	       ; c
.text:0000000000000672		       call    putchar
.text:0000000000000677		       mov     edi, offset aSorted ; "Sorted:"
.text:000000000000067C		       call    puts
.text:0000000000000681		       mov     esi, offset cfstr
.text:0000000000000686		       mov     rdi, rsp
.text:0000000000000689		       call    str_list_sort
.text:000000000000068E		       mov     esi, offset printstr
.text:0000000000000693		       mov     rdi, rsp
.text:0000000000000696		       call    str_list_mapcar
.text:000000000000069B		       nop     dword ptr [rax+rax+00h]
.text:00000000000006A0
.text:00000000000006A0 loc_6A0:				       ; CODE XREF: main+2E7j
.text:00000000000006A0		       cmp     [rsp+78h+var_78], 0
.text:00000000000006A5		       jz      short loc_6E9
.text:00000000000006A7
.text:00000000000006A7 loc_6A7:				       ; CODE XREF: main+2F7j
.text:00000000000006A7		       mov     rbx, [rsp+78h+var_70]
.text:00000000000006AC		       sub     [rsp+78h+var_78], 1
.text:00000000000006B1		       mov     rax, [rbx+8]
.text:00000000000006B5		       mov     [rsp+78h+var_70], rax
.text:00000000000006BA		       mov     rax, [rsp+78h+var_50]
.text:00000000000006BF		       test    rax, rax
.text:00000000000006C2		       jz      short loc_6C9
.text:00000000000006C4		       mov     rdi, rbx
.text:00000000000006C7		       call    rax
.text:00000000000006C9
.text:00000000000006C9 loc_6C9:				       ; CODE XREF: main+2D2j
.text:00000000000006C9		       mov     rdi, rbx	       ; ptr
.text:00000000000006CC		       call    free
.text:00000000000006D1		       cmp     [rsp+78h+var_70], 0
.text:00000000000006D7		       jnz     short loc_6A0
.text:00000000000006D9		       cmp     [rsp+78h+var_78], 0
.text:00000000000006DE		       mov     [rsp+78h+var_60], 0
.text:00000000000006E7		       jnz     short loc_6A7
.text:00000000000006E9
.text:00000000000006E9 loc_6E9:				       ; CODE XREF: main+2B5j
.text:00000000000006E9		       add     rsp, 70h
.text:00000000000006ED		       xor     eax, eax
.text:00000000000006EF		       pop     rbx
.text:00000000000006F0		       retn
.text:00000000000006F0 main	       endp
.text:00000000000006F0
.text:00000000000006F0 ; ---------------------------------------------------------------------------
.text:00000000000006F1		       align 20h
.text:0000000000000700
.text:0000000000000700 ; =============== S U B R O U T I N E =======================================
.text:0000000000000700
.text:0000000000000700
.text:0000000000000700		       public cfstr2
.text:0000000000000700 cfstr2	       proc near	       ; DATA XREF: main+263o
.text:0000000000000700					       ; .eh_frame:00000000000009E0o
.text:0000000000000700
.text:0000000000000700 var_10	       = qword ptr -10h
.text:0000000000000700 var_8	       = qword ptr -8
.text:0000000000000700
.text:0000000000000700		       mov     [rsp+var_10], rbx
.text:0000000000000705		       mov     [rsp+var_8], r12
.text:000000000000070A		       sub     rsp, 18h
.text:000000000000070E		       mov     rdi, [rdi]      ; s
.text:0000000000000711		       mov     rbx, rsi
.text:0000000000000714		       call    strlen
.text:0000000000000719		       mov     rdi, [rbx]      ; s
.text:000000000000071C		       mov     r12, rax
.text:000000000000071F		       call    strlen
.text:0000000000000724		       mov     rbx, [rsp+18h+var_10]
.text:0000000000000729		       cmp     r12, rax
.text:000000000000072C		       mov     r12, [rsp+18h+var_8]
.text:0000000000000731		       setnbe  al
.text:0000000000000734		       add     rsp, 18h
.text:0000000000000738		       movzx   eax, al
.text:000000000000073B		       retn
.text:000000000000073B cfstr2	       endp
.text:000000000000073B
.text:000000000000073B ; ---------------------------------------------------------------------------
.text:000000000000073C		       align 20h
.text:0000000000000740
.text:0000000000000740 ; =============== S U B R O U T I N E =======================================
.text:0000000000000740
.text:0000000000000740
.text:0000000000000740		       public cfstr
.text:0000000000000740 cfstr	       proc near	       ; DATA XREF: main+291o
.text:0000000000000740					       ; .eh_frame:00000000000009F8o
.text:0000000000000740		       sub     rsp, 8
.text:0000000000000744		       mov     rdi, [rdi]      ; s1
.text:0000000000000747		       mov     rsi, [rsi]      ; s2
.text:000000000000074A		       call    strcmp
.text:000000000000074F		       test    eax, eax
.text:0000000000000751		       setnle  al
.text:0000000000000754		       add     rsp, 8
.text:0000000000000758		       movzx   eax, al
.text:000000000000075B		       retn
.text:000000000000075B cfstr	       endp
.text:000000000000075B
.text:000000000000075B ; ---------------------------------------------------------------------------
.text:000000000000075C		       align 20h
.text:0000000000000760
.text:0000000000000760 ; =============== S U B R O U T I N E =======================================
.text:0000000000000760
.text:0000000000000760
.text:0000000000000760		       public str_list_make
.text:0000000000000760 str_list_make   proc near	       ; DATA XREF: main+1A3o
.text:0000000000000760					       ; .eh_frame:0000000000000A10o
.text:0000000000000760		       push    rbx
.text:0000000000000761		       mov     rbx, rdi
.text:0000000000000764		       mov     rdi, rsi
.text:0000000000000767		       call    __strdup
.text:000000000000076C		       mov     [rbx], rax
.text:000000000000076F		       cmp     rax, 1
.text:0000000000000773		       pop     rbx
.text:0000000000000774		       sbb     eax, eax
.text:0000000000000776		       and     eax, 5
.text:0000000000000779		       retn
.text:0000000000000779 str_list_make   endp
.text:0000000000000779
.text:0000000000000779 ; ---------------------------------------------------------------------------
.text:000000000000077A		       align 20h
.text:0000000000000780
.text:0000000000000780 ; =============== S U B R O U T I N E =======================================
.text:0000000000000780
.text:0000000000000780
.text:0000000000000780		       public printint
.text:0000000000000780 printint	       proc near	       ; DATA XREF: main+C3o
.text:0000000000000780					       ; main+F1o ...
.text:0000000000000780		       mov     esi, [rdi]
.text:0000000000000782		       xor     eax, eax
.text:0000000000000784		       mov     edi, offset aD  ; "%d\n"
.text:0000000000000789		       jmp     printf
.text:0000000000000789 printint	       endp
.text:0000000000000789
.text:0000000000000789 _text	       ends
.text:0000000000000789
.data:0000000000000790 ; ===========================================================================
.data:0000000000000790
.data:0000000000000790 ; Segment type: Zero-length
.data:0000000000000790 ; Segment permissions: Read/Write
.data:0000000000000790 _data	       segment dword public 'DATA' use64
.data:0000000000000790 _data	       ends
.data:0000000000000790
.bss:0000000000000794 ;	===========================================================================
.bss:0000000000000794
.bss:0000000000000794 ;	Segment	type: Zero-length
.bss:0000000000000794 ;	Segment	permissions: Read/Write
.bss:0000000000000794 _bss	      segment dword public 'BSS' use64
.bss:0000000000000794 _bss	      ends
.bss:0000000000000794
.rodata.cst4:0000000000000798 ;	===========================================================================
.rodata.cst4:0000000000000798
.rodata.cst4:0000000000000798 ;	Segment	type: Pure data
.rodata.cst4:0000000000000798 ;	Segment	permissions: Read
.rodata.cst4:0000000000000798 _rodata_cst4    segment dword public 'CONST' use64
.rodata.cst4:0000000000000798		      assume cs:_rodata_cst4
.rodata.cst4:0000000000000798		      ;org 798h
.rodata.cst4:0000000000000798 _LC0	      dd 3FA66666h	      ;	DATA XREF: int_list_combsort+34r
.rodata.cst4:000000000000079C _LC2	      dd 30000000h	      ;	DATA XREF: main+66r
.rodata.cst4:000000000000079C _rodata_cst4    ends
.rodata.cst4:000000000000079C
.rodata.str1.1:00000000000007A0	; ===========================================================================
.rodata.str1.1:00000000000007A0
.rodata.str1.1:00000000000007A0	; Segment type:	Pure data
.rodata.str1.1:00000000000007A0	; Segment permissions: Read
.rodata.str1.1:00000000000007A0	_rodata_str1_1	segment	byte public 'CONST' use64
.rodata.str1.1:00000000000007A0			assume cs:_rodata_str1_1
.rodata.str1.1:00000000000007A0			;org 7A0h
.rodata.str1.1:00000000000007A0	; char s[]
.rodata.str1.1:00000000000007A0	s		db 0Ah			; DATA XREF: main+1o
.rodata.str1.1:00000000000007A0			db 'PART1: integers',0Ah,0
.rodata.str1.1:00000000000007B2	; char aSortedAscendin[]
.rodata.str1.1:00000000000007B2	aSortedAscendin	db 'Sorted ascending:',0
.rodata.str1.1:00000000000007B2						; DATA XREF: main+DAo
.rodata.str1.1:00000000000007C4	; char aSortedDescendi[]
.rodata.str1.1:00000000000007C4	aSortedDescendi	db 'Sorted descending:',0
.rodata.str1.1:00000000000007C4						; DATA XREF: main+FEo
.rodata.str1.1:00000000000007D7	; char aPart2Strings[]
.rodata.str1.1:00000000000007D7	aPart2Strings	db 0Ah			; DATA XREF: main:loc_55Eo
.rodata.str1.1:00000000000007D7			db 'PART2: strings',0Ah,0
.rodata.str1.1:00000000000007E8	aFirstString	db 'First String',0     ; DATA XREF: main+178o
.rodata.str1.1:00000000000007F5	aSecondString	db 'Second String',0    ; DATA XREF: main+1BAo
.rodata.str1.1:0000000000000803	aThirdString	db 'Third String',0     ; DATA XREF: main+1C7o
.rodata.str1.1:0000000000000810	aFourthString	db 'Fourth String',0    ; DATA XREF: main+1D4o
.rodata.str1.1:000000000000081E	aFifthString	db 'Fifth String',0     ; DATA XREF: main+1E1o
.rodata.str1.1:000000000000082B	aSixesString	db 'Sixes String',0     ; DATA XREF: main+1EEo
.rodata.str1.1:0000000000000838	aSeventhString	db 'Seventh String',0   ; DATA XREF: main+1FBo
.rodata.str1.1:0000000000000847	; char aSortedByLength[]
.rodata.str1.1:0000000000000847	aSortedByLength	db 'Sorted by length:',0
.rodata.str1.1:0000000000000847						; DATA XREF: main+259o
.rodata.str1.1:0000000000000859	; char aSorted[]
.rodata.str1.1:0000000000000859	aSorted		db 'Sorted:',0          ; DATA XREF: main+287o
.rodata.str1.1:0000000000000861	aD		db '%d',0Ah,0           ; DATA XREF: printint+4o
.rodata.str1.1:0000000000000861	_rodata_str1_1	ends
.rodata.str1.1:0000000000000861
.rodata.cst8:0000000000000868 ;	===========================================================================
.rodata.cst8:0000000000000868
.rodata.cst8:0000000000000868 ;	Segment	type: Pure data
.rodata.cst8:0000000000000868 ;	Segment	permissions: Read
.rodata.cst8:0000000000000868 ;	Segment	alignment 'qword' can not be represented in assembly
.rodata.cst8:0000000000000868 _rodata_cst8    segment para public 'CONST' use64
.rodata.cst8:0000000000000868		      assume cs:_rodata_cst8
.rodata.cst8:0000000000000868		      ;org 868h
.rodata.cst8:0000000000000868 _LC3	      dq 4059000000000000h    ;	DATA XREF: main+72r
.rodata.cst8:0000000000000868 _rodata_cst8    ends
.rodata.cst8:0000000000000868
.eh_frame:0000000000000870 ; ===========================================================================
.eh_frame:0000000000000870
.eh_frame:0000000000000870 ; Segment type: Pure	data
.eh_frame:0000000000000870 ; Segment permissions: Read
.eh_frame:0000000000000870 ; Segment alignment 'qword' can not be represented in assembly
.eh_frame:0000000000000870 _eh_frame	   segment para	public 'CONST' use64
.eh_frame:0000000000000870		   assume cs:_eh_frame
.eh_frame:0000000000000870		   ;org	870h
.eh_frame:0000000000000870		   dq 14h, 110780100527A01h, 19008070C03h, 1C0000001Ch
.eh_frame:0000000000000890		   dd offset int_list_mapcar
.eh_frame:0000000000000894		   dd offset unk_27
.eh_frame:0000000000000898		   dq 0E440286100E4100h, 383200E4418h, 3C0000001Ch
.eh_frame:00000000000008B0		   dd offset str_list_mapcar
.eh_frame:00000000000008B4		   dd offset unk_27
.eh_frame:00000000000008B8		   dq 0E440286100E4100h, 383200E4418h, 5C00000034h
.eh_frame:00000000000008D0		   dd offset str_list_sort
.eh_frame:00000000000008D4		   dd offset loc_1CC
.eh_frame:00000000000008D8		   dq 42180E45100E4200h, 300E41280E42200Eh, 783700E44380E41h
.eh_frame:00000000000008D8		   dq 38E048D058C0686h,	28Fh, 9400000014h
.eh_frame:0000000000000908		   dd offset cfint_asc
.eh_frame:000000000000090C		   dd 0Bh
.eh_frame:0000000000000910		   dq 0
.eh_frame:0000000000000918		   dq 0AC00000014h
.eh_frame:0000000000000920		   dd offset cfint_des
.eh_frame:0000000000000924		   dd 0Bh
.eh_frame:0000000000000928		   align 10h
.eh_frame:0000000000000930		   dq 0C400000014h
.eh_frame:0000000000000938		   dd offset printstr
.eh_frame:000000000000093C		   dd 8
.eh_frame:0000000000000940		   dq 0
.eh_frame:0000000000000948		   dq 0DC00000034h
.eh_frame:0000000000000950		   dd offset int_list_combsort
.eh_frame:0000000000000954		   dd offset loc_D0+1
.eh_frame:0000000000000958		   dq 0E45028F100E4200h, 0E42200E45038E18h, 44380E41300E4128h
.eh_frame:0000000000000958		   dq 58C06860783500Eh,	48Dh, 11400000014h
.eh_frame:0000000000000988		   dd offset str_list_destroy
.eh_frame:000000000000098C		   dd 8
.eh_frame:0000000000000990		   dq 0
.eh_frame:0000000000000998		   dq 12C0000001Ch
.eh_frame:00000000000009A0		   dd offset str_list_create_head
.eh_frame:00000000000009A4		   dd offset loc_98+2
.eh_frame:00000000000009A8		   dq 0E56058304864A00h, 38C028D30h, 14C0000001Ch
.eh_frame:00000000000009C0		   dd offset main
.eh_frame:00000000000009C4		   dd offset loc_300+1
.eh_frame:00000000000009C8		   dq 0E4B0283100E4100h, 180h, 16C00000014h
.eh_frame:00000000000009E0		   dd offset cfstr2
.eh_frame:00000000000009E4		   dd offset loc_39+3
.eh_frame:00000000000009E8		   dq 383028C200E4E00h,	18400000014h
.eh_frame:00000000000009F8		   dd offset cfstr
.eh_frame:00000000000009FC		   dd 1Ch
.eh_frame:0000000000000A00		   dq 100E4400h, 19C00000014h
.eh_frame:0000000000000A10		   dd offset str_list_make
.eh_frame:0000000000000A14		   dd 1Ah
.eh_frame:0000000000000A18		   dq 283100E4100h, 1B400000014h
.eh_frame:0000000000000A28		   dd offset printint
.eh_frame:0000000000000A2C		   dd 0Eh
.eh_frame:0000000000000A30		   dq 0
.eh_frame:0000000000000A30 _eh_frame	   ends
.eh_frame:0000000000000A30
extern:0000000000000A38	; ===========================================================================
extern:0000000000000A38
extern:0000000000000A38	; Segment type:	Externs
extern:0000000000000A38	; extern
extern:0000000000000A38	; int puts(const char *s)
extern:0000000000000A38			extrn puts:near		; CODE XREF: printstr+3j
extern:0000000000000A38						; main+Cp ...
extern:0000000000000A3C	; void free(void *ptr)
extern:0000000000000A3C			extrn free:near		; CODE XREF: str_list_destroy+3j
extern:0000000000000A3C						; str_list_create_head+93p ...
extern:0000000000000A40	; void *malloc(size_t size)
extern:0000000000000A40			extrn malloc:near	; CODE XREF: str_list_create_head+29p
extern:0000000000000A40						; main+82p
extern:0000000000000A44	; int rand(void)
extern:0000000000000A44			extrn rand:near		; CODE XREF: main:loc_448p
extern:0000000000000A48	; int putchar(int c)
extern:0000000000000A48			extrn putchar:near	; CODE XREF: main+D5p
extern:0000000000000A48						; main+254p ...
extern:0000000000000A4C	; size_t strlen(const char *s)
extern:0000000000000A4C			extrn strlen:near	; CODE XREF: cfstr2+14p
extern:0000000000000A4C						; cfstr2+1Fp
extern:0000000000000A50	; int strcmp(const char	*s1, const char	*s2)
extern:0000000000000A50			extrn strcmp:near	; CODE XREF: cfstr+Ap
extern:0000000000000A54			extrn __strdup:near	; CODE XREF: str_list_make+7p
extern:0000000000000A58	; int printf(const char	*format, ...)
extern:0000000000000A58			extrn printf:near	; CODE XREF: printint+9j
extern:0000000000000A58
extern:0000000000000A58
extern:0000000000000A58			end
