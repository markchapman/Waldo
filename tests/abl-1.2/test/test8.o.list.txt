.text:0000000000000000 ;
.text:0000000000000000 ; +-------------------------------------------------------------------------+
.text:0000000000000000 ; |   This file has been	generated by The Interactive Disassembler (IDA)	   |
.text:0000000000000000 ; |	  Copyright (c)	2009 by	Hex-Rays, <support@hex-rays.com>	   |
.text:0000000000000000 ; |			License	info: 48-313D-7374-F1			   |
.text:0000000000000000 ; |   Aditya Thakur, University of Wisconsin/Computer Sciences Department   |
.text:0000000000000000 ; +-------------------------------------------------------------------------+
.text:0000000000000000 ;
.text:0000000000000000 ; Input MD5   : 83CED3021D472ABE338E89D930CE7906
.text:0000000000000000
.text:0000000000000000 ; File Name   : C:\aditya\work\waldo\tests\abl-1.2\test\test8.o
.text:0000000000000000 ; Format	     : ELF (Relocatable)
.text:0000000000000000 ;
.text:0000000000000000 ; Source	File : 'test8.c'
.text:0000000000000000
.text:0000000000000000		       .686p
.text:0000000000000000		       .mmx
.text:0000000000000000		       .model flat
.text:0000000000000000 .intel_syntax noprefix
.text:0000000000000000
.text:0000000000000000 ; ===========================================================================
.text:0000000000000000
.text:0000000000000000 ; Segment type: Pure code
.text:0000000000000000 ; Segment permissions: Read/Execute
.text:0000000000000000 _text	       segment para public 'CODE' use64
.text:0000000000000000		       assume cs:_text
.text:0000000000000000		       assume es:nothing, ss:nothing, ds:_text,	fs:nothing, gs:nothing
.text:0000000000000000
.text:0000000000000000 ; =============== S U B R O U T I N E =======================================
.text:0000000000000000
.text:0000000000000000
.text:0000000000000000		       public cfint_asc
.text:0000000000000000 cfint_asc       proc near	       ; CODE XREF: main+113p
.text:0000000000000000					       ; DATA XREF: .eh_frame:0000000000000210o
.text:0000000000000000		       mov     eax, [rdi]
.text:0000000000000002		       cmp     eax, [rsi]
.text:0000000000000004		       setnle  al
.text:0000000000000007		       movzx   eax, al
.text:000000000000000A		       retn
.text:000000000000000A cfint_asc       endp
.text:000000000000000A
.text:000000000000000A ; ---------------------------------------------------------------------------
.text:000000000000000B		       align 10h
.text:0000000000000010
.text:0000000000000010 ; =============== S U B R O U T I N E =======================================
.text:0000000000000010
.text:0000000000000010
.text:0000000000000010		       public cfint_des
.text:0000000000000010 cfint_des       proc near	       ; DATA XREF: .eh_frame:0000000000000228o
.text:0000000000000010		       mov     eax, [rdi]
.text:0000000000000012		       cmp     eax, [rsi]
.text:0000000000000014		       setl    al
.text:0000000000000017		       movzx   eax, al
.text:000000000000001A		       retn
.text:000000000000001A cfint_des       endp
.text:000000000000001A
.text:000000000000001A ; ---------------------------------------------------------------------------
.text:000000000000001B		       align 20h
.text:0000000000000020
.text:0000000000000020 ; =============== S U B R O U T I N E =======================================
.text:0000000000000020
.text:0000000000000020
.text:0000000000000020		       public main
.text:0000000000000020 main	       proc near	       ; DATA XREF: .eh_frame:0000000000000240o
.text:0000000000000020
.text:0000000000000020 var_34	       = dword ptr -34h
.text:0000000000000020
.text:0000000000000020		       push    r15
.text:0000000000000022		       push    r14
.text:0000000000000024		       xor     r14d, r14d
.text:0000000000000027		       push    r13
.text:0000000000000029		       xor     r13d, r13d
.text:000000000000002C		       push    r12
.text:000000000000002E		       push    rbp
.text:000000000000002F		       xor     ebp, ebp
.text:0000000000000031		       push    rbx
.text:0000000000000032		       xor     ebx, ebx
.text:0000000000000034		       sub     rsp, 18h
.text:0000000000000038		       jmp     short loc_4B
.text:0000000000000038 ; ---------------------------------------------------------------------------
.text:000000000000003A		       align 20h
.text:0000000000000040
.text:0000000000000040 loc_40:				       ; CODE XREF: main+60j
.text:0000000000000040					       ; main+76j
.text:0000000000000040		       add     ebx, 1
.text:0000000000000043		       cmp     ebx, 9C40h
.text:0000000000000049		       jz      short loc_A6
.text:000000000000004B
.text:000000000000004B loc_4B:				       ; CODE XREF: main+18j
.text:000000000000004B					       ; main+84j
.text:000000000000004B		       call    rand
.text:0000000000000050		       cvtsi2ss	xmm0, eax
.text:0000000000000054		       mov     edi, 10h	       ; size
.text:0000000000000059		       mulss   xmm0, cs:_LC0
.text:0000000000000061		       cvtss2sd	xmm0, xmm0
.text:0000000000000065		       mulsd   xmm0, cs:_LC1
.text:000000000000006D		       cvttsd2si eax, xmm0
.text:0000000000000071		       mov     [rsp+48h+var_34], eax
.text:0000000000000075		       call    malloc
.text:000000000000007A		       test    rax, rax
.text:000000000000007D		       mov     rdx, rax
.text:0000000000000080		       jz      short loc_40
.text:0000000000000082		       mov     eax, [rsp+48h+var_34]
.text:0000000000000086		       add     r14, 1
.text:000000000000008A		       test    rbp, rbp
.text:000000000000008D		       mov     [rdx+8],	r13
.text:0000000000000091		       mov     r13, rdx
.text:0000000000000094		       mov     [rdx], eax
.text:0000000000000096		       jnz     short loc_40
.text:0000000000000098		       add     ebx, 1
.text:000000000000009B		       mov     rbp, rdx
.text:000000000000009E		       cmp     ebx, 9C40h
.text:00000000000000A4		       jnz     short loc_4B
.text:00000000000000A6
.text:00000000000000A6 loc_A6:				       ; CODE XREF: main+29j
.text:00000000000000A6		       mov     edi, 0Ah	       ; c
.text:00000000000000AB		       lea     r12d, [r14-1]
.text:00000000000000AF		       call    putchar
.text:00000000000000B4		       mov     edi, offset s   ; "Sorted ascending:"
.text:00000000000000B9		       call    puts
.text:00000000000000BE		       cmp     r14, 1
.text:00000000000000C2		       jbe     loc_163
.text:00000000000000C8
.text:00000000000000C8 loc_C8:				       ; CODE XREF: main:loc_181j
.text:00000000000000C8					       ; main+16Bj
.text:00000000000000C8		       cmp     r12d, 1
.text:00000000000000CC		       jle     short loc_EE
.text:00000000000000CE		       cvtsi2ss	xmm0, r12d
.text:00000000000000D3		       divss   xmm0, cs:_LC3
.text:00000000000000DB		       cvttss2si r12d, xmm0
.text:00000000000000E0		       lea     eax, [r12-9]
.text:00000000000000E5		       cmp     eax, 1
.text:00000000000000E8		       jbe     loc_193
.text:00000000000000EE
.text:00000000000000EE loc_EE:				       ; CODE XREF: main+ACj
.text:00000000000000EE		       test    r12d, r12d
.text:00000000000000F1		       mov     rbx, r13
.text:00000000000000F4		       jle     short loc_10C
.text:00000000000000F6
.text:00000000000000F6 loc_F6:				       ; CODE XREF: main+180j
.text:00000000000000F6		       mov     rbx, r13
.text:00000000000000F9		       xor     eax, eax
.text:00000000000000FB		       nop     dword ptr [rax+rax+00h]
.text:0000000000000100
.text:0000000000000100 loc_100:				       ; CODE XREF: main+EAj
.text:0000000000000100		       add     eax, 1
.text:0000000000000103		       mov     rbx, [rbx+8]
.text:0000000000000107		       cmp     r12d, eax
.text:000000000000010A		       jg      short loc_100
.text:000000000000010C
.text:000000000000010C loc_10C:				       ; CODE XREF: main+D4j
.text:000000000000010C		       test    rbx, rbx
.text:000000000000010F		       jz      short loc_187
.text:0000000000000111		       mov     rbp, r13
.text:0000000000000114		       xor     r15d, r15d
.text:0000000000000117		       jmp     short loc_12D
.text:0000000000000117 ; ---------------------------------------------------------------------------
.text:0000000000000119		       align 20h
.text:0000000000000120
.text:0000000000000120 loc_120:				       ; CODE XREF: main+11Aj
.text:0000000000000120					       ; main+132j
.text:0000000000000120		       mov     rbx, [rbx+8]
.text:0000000000000124		       mov     rbp, [rbp+8]
.text:0000000000000128		       test    rbx, rbx
.text:000000000000012B		       jz      short loc_17E
.text:000000000000012D
.text:000000000000012D loc_12D:				       ; CODE XREF: main+F7j
.text:000000000000012D		       mov     rsi, rbx
.text:0000000000000130		       mov     rdi, rbp
.text:0000000000000133		       call    cfint_asc
.text:0000000000000138		       test    eax, eax
.text:000000000000013A		       jz      short loc_120
.text:000000000000013C		       mov     eax, [rbp+0]
.text:000000000000013F		       add     r15d, 1
.text:0000000000000143		       mov     [rsp+48h+var_34], eax
.text:0000000000000147		       mov     eax, [rbx]
.text:0000000000000149		       mov     [rbp+0],	eax
.text:000000000000014C		       mov     eax, [rsp+48h+var_34]
.text:0000000000000150		       mov     [rbx], eax
.text:0000000000000152		       jmp     short loc_120
.text:0000000000000154 ; ---------------------------------------------------------------------------
.text:0000000000000154
.text:0000000000000154 loc_154:				       ; CODE XREF: main+14Bj
.text:0000000000000154		       mov     rbx, [r13+8]
.text:0000000000000158		       mov     rdi, r13	       ; ptr
.text:000000000000015B		       call    free
.text:0000000000000160		       mov     r13, rbx
.text:0000000000000163
.text:0000000000000163 loc_163:				       ; CODE XREF: main+A2j
.text:0000000000000163					       ; main+171j
.text:0000000000000163		       sub     r14, 1
.text:0000000000000167		       cmp     r14, 0FFFFFFFFFFFFFFFFh
.text:000000000000016B		       jnz     short loc_154
.text:000000000000016D		       add     rsp, 18h
.text:0000000000000171		       xor     eax, eax
.text:0000000000000173		       pop     rbx
.text:0000000000000174		       pop     rbp
.text:0000000000000175		       pop     r12
.text:0000000000000177		       pop     r13
.text:0000000000000179		       pop     r14
.text:000000000000017B		       pop     r15
.text:000000000000017D		       retn
.text:000000000000017E ; ---------------------------------------------------------------------------
.text:000000000000017E
.text:000000000000017E loc_17E:				       ; CODE XREF: main+10Bj
.text:000000000000017E		       test    r15d, r15d
.text:0000000000000181
.text:0000000000000181 loc_181:				       ; DATA XREF: .eh_frame:0000000000000244o
.text:0000000000000181		       jnz     loc_C8
.text:0000000000000187
.text:0000000000000187 loc_187:				       ; CODE XREF: main+EFj
.text:0000000000000187		       cmp     r12d, 1
.text:000000000000018B		       jnz     loc_C8
.text:0000000000000191		       jmp     short loc_163
.text:0000000000000193 ; ---------------------------------------------------------------------------
.text:0000000000000193
.text:0000000000000193 loc_193:				       ; CODE XREF: main+C8j
.text:0000000000000193		       mov     r12d, 0Bh
.text:0000000000000199		       nop     dword ptr [rax+00000000h]
.text:00000000000001A0		       jmp     loc_F6
.text:00000000000001A0 main	       endp
.text:00000000000001A0
.text:00000000000001A0 ; ---------------------------------------------------------------------------
.text:00000000000001A5		       align 10h
.text:00000000000001B0
.text:00000000000001B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000001B0
.text:00000000000001B0
.text:00000000000001B0		       public printint
.text:00000000000001B0 printint	       proc near	       ; DATA XREF: .eh_frame:0000000000000278o
.text:00000000000001B0		       mov     esi, [rdi]
.text:00000000000001B2		       xor     eax, eax
.text:00000000000001B4		       mov     edi, offset aD  ; "%d\n"
.text:00000000000001B9		       jmp     printf
.text:00000000000001B9 printint	       endp
.text:00000000000001B9
.text:00000000000001B9 _text	       ends
.text:00000000000001B9
.data:00000000000001C0 ; ===========================================================================
.data:00000000000001C0
.data:00000000000001C0 ; Segment type: Zero-length
.data:00000000000001C0 ; Segment permissions: Read/Write
.data:00000000000001C0 _data	       segment dword public 'DATA' use64
.data:00000000000001C0 _data	       ends
.data:00000000000001C0
.bss:00000000000001C4 ;	===========================================================================
.bss:00000000000001C4
.bss:00000000000001C4 ;	Segment	type: Zero-length
.bss:00000000000001C4 ;	Segment	permissions: Read/Write
.bss:00000000000001C4 _bss	      segment dword public 'BSS' use64
.bss:00000000000001C4 _bss	      ends
.bss:00000000000001C4
.rodata.str1.1:00000000000001C5	; ===========================================================================
.rodata.str1.1:00000000000001C5
.rodata.str1.1:00000000000001C5	; Segment type:	Pure data
.rodata.str1.1:00000000000001C5	; Segment permissions: Read
.rodata.str1.1:00000000000001C5	_rodata_str1_1	segment	byte public 'CONST' use64
.rodata.str1.1:00000000000001C5			assume cs:_rodata_str1_1
.rodata.str1.1:00000000000001C5			;org 1C5h
.rodata.str1.1:00000000000001C5	; char s[]
.rodata.str1.1:00000000000001C5	s		db 'Sorted ascending:',0
.rodata.str1.1:00000000000001C5						; DATA XREF: main+94o
.rodata.str1.1:00000000000001D7	aD		db '%d',0Ah,0           ; DATA XREF: printint+4o
.rodata.str1.1:00000000000001D7	_rodata_str1_1	ends
.rodata.str1.1:00000000000001D7
.rodata.cst4:00000000000001DC ;	===========================================================================
.rodata.cst4:00000000000001DC
.rodata.cst4:00000000000001DC ;	Segment	type: Pure data
.rodata.cst4:00000000000001DC ;	Segment	permissions: Read
.rodata.cst4:00000000000001DC _rodata_cst4    segment dword public 'CONST' use64
.rodata.cst4:00000000000001DC		      assume cs:_rodata_cst4
.rodata.cst4:00000000000001DC		      ;org 1DCh
.rodata.cst4:00000000000001DC _LC0	      dd 30000000h	      ;	DATA XREF: main+39r
.rodata.cst4:00000000000001E0 _LC3	      dd 3FA66666h	      ;	DATA XREF: main+B3r
.rodata.cst4:00000000000001E0 _rodata_cst4    ends
.rodata.cst4:00000000000001E0
.rodata.cst8:00000000000001E8 ;	===========================================================================
.rodata.cst8:00000000000001E8
.rodata.cst8:00000000000001E8 ;	Segment	type: Pure data
.rodata.cst8:00000000000001E8 ;	Segment	permissions: Read
.rodata.cst8:00000000000001E8 ;	Segment	alignment 'qword' can not be represented in assembly
.rodata.cst8:00000000000001E8 _rodata_cst8    segment para public 'CONST' use64
.rodata.cst8:00000000000001E8		      assume cs:_rodata_cst8
.rodata.cst8:00000000000001E8		      ;org 1E8h
.rodata.cst8:00000000000001E8 _LC1	      dq 40C3880000000000h    ;	DATA XREF: main+45r
.rodata.cst8:00000000000001E8 _rodata_cst8    ends
.rodata.cst8:00000000000001E8
.eh_frame:00000000000001F0 ; ===========================================================================
.eh_frame:00000000000001F0
.eh_frame:00000000000001F0 ; Segment type: Pure	data
.eh_frame:00000000000001F0 ; Segment permissions: Read
.eh_frame:00000000000001F0 ; Segment alignment 'qword' can not be represented in assembly
.eh_frame:00000000000001F0 _eh_frame	   segment para	public 'CONST' use64
.eh_frame:00000000000001F0		   assume cs:_eh_frame
.eh_frame:00000000000001F0		   ;org	1F0h
.eh_frame:00000000000001F0		   dq 14h, 110780100527A01h, 19008070C03h, 1C00000014h
.eh_frame:0000000000000210		   dd offset cfint_asc
.eh_frame:0000000000000214		   dd 0Bh
.eh_frame:0000000000000218		   align 20h
.eh_frame:0000000000000220		   dq 3400000014h
.eh_frame:0000000000000228		   dd offset cfint_des
.eh_frame:000000000000022C		   dd 0Bh
.eh_frame:0000000000000230		   dq 0
.eh_frame:0000000000000238		   dq 4C00000034h
.eh_frame:0000000000000240		   dd offset main
.eh_frame:0000000000000244		   dd offset loc_181+4
.eh_frame:0000000000000248		   dq 8E180E42100E4200h, 48D200E45028F03h, 686300E41280E45h
.eh_frame:0000000000000248		   dq 460783380E43058Ch, 500Eh,	8400000014h
.eh_frame:0000000000000278		   dd offset printint
.eh_frame:000000000000027C		   dd 0Eh
.eh_frame:0000000000000280		   dq 0
.eh_frame:0000000000000280 _eh_frame	   ends
.eh_frame:0000000000000280
extern:0000000000000288	; ===========================================================================
extern:0000000000000288
extern:0000000000000288	; Segment type:	Externs
extern:0000000000000288	; extern
extern:0000000000000288	; int rand(void)
extern:0000000000000288			extrn rand:near		; CODE XREF: main:loc_4Bp
extern:000000000000028C	; void *malloc(size_t size)
extern:000000000000028C			extrn malloc:near	; CODE XREF: main+55p
extern:0000000000000290	; int putchar(int c)
extern:0000000000000290			extrn putchar:near	; CODE XREF: main+8Fp
extern:0000000000000294	; int puts(const char *s)
extern:0000000000000294			extrn puts:near		; CODE XREF: main+99p
extern:0000000000000298	; void free(void *ptr)
extern:0000000000000298			extrn free:near		; CODE XREF: main+13Bp
extern:000000000000029C	; int printf(const char	*format, ...)
extern:000000000000029C			extrn printf:near	; CODE XREF: printint+9j
extern:000000000000029C
extern:000000000000029C
extern:000000000000029C			end
