.text:0000000000000000 ;
.text:0000000000000000 ; +-------------------------------------------------------------------------+
.text:0000000000000000 ; |   This file has been	generated by The Interactive Disassembler (IDA)	   |
.text:0000000000000000 ; |	  Copyright (c)	2009 by	Hex-Rays, <support@hex-rays.com>	   |
.text:0000000000000000 ; |			License	info: 48-313D-7374-F1			   |
.text:0000000000000000 ; |   Aditya Thakur, University of Wisconsin/Computer Sciences Department   |
.text:0000000000000000 ; +-------------------------------------------------------------------------+
.text:0000000000000000 ;
.text:0000000000000000 ; Input MD5   : F20FF11510DCFF126D57101F11DE81DD
.text:0000000000000000
.text:0000000000000000 ; File Name   : C:\aditya\work\waldo\tests\abl-1.2\test\test3.o
.text:0000000000000000 ; Format	     : ELF (Relocatable)
.text:0000000000000000 ;
.text:0000000000000000 ; Source	File : 'test3.c'
.text:0000000000000000
.text:0000000000000000		       .686p
.text:0000000000000000		       .mmx
.text:0000000000000000		       .model flat
.text:0000000000000000 .intel_syntax noprefix
.text:0000000000000000
.text:0000000000000000 ; ===========================================================================
.text:0000000000000000
.text:0000000000000000 ; Segment type: Pure code
.text:0000000000000000 ; Segment permissions: Read/Execute
.text:0000000000000000 _text	       segment para public 'CODE' use64
.text:0000000000000000		       assume cs:_text
.text:0000000000000000		       assume es:nothing, ss:nothing, ds:_text,	fs:nothing, gs:nothing
.text:0000000000000000
.text:0000000000000000 ; =============== S U B R O U T I N E =======================================
.text:0000000000000000
.text:0000000000000000
.text:0000000000000000 str_list_get_head proc near	       ; CODE XREF: main+48p
.text:0000000000000000					       ; main+7Dp
.text:0000000000000000					       ; DATA XREF: ...
.text:0000000000000000		       mov     rax, [rdi+8]
.text:0000000000000004		       retn
.text:0000000000000004 str_list_get_head endp
.text:0000000000000004
.text:0000000000000004 ; ---------------------------------------------------------------------------
.text:0000000000000005		       align 10h
.text:0000000000000010
.text:0000000000000010 ; =============== S U B R O U T I N E =======================================
.text:0000000000000010
.text:0000000000000010
.text:0000000000000010 str_list_is_point_nil proc near	       ; CODE XREF: main+CBp
.text:0000000000000010					       ; main+FDp
.text:0000000000000010					       ; DATA XREF: ...
.text:0000000000000010		       xor     eax, eax
.text:0000000000000012		       cmp     qword ptr [rdi+10h], 0
.text:0000000000000017		       setz    al
.text:000000000000001A		       retn
.text:000000000000001A str_list_is_point_nil endp
.text:000000000000001A
.text:000000000000001A ; ---------------------------------------------------------------------------
.text:000000000000001B		       align 20h
.text:0000000000000020
.text:0000000000000020 ; =============== S U B R O U T I N E =======================================
.text:0000000000000020
.text:0000000000000020
.text:0000000000000020 str_list_get_point proc near	       ; CODE XREF: main+B3p
.text:0000000000000020					       ; main+E5p
.text:0000000000000020					       ; DATA XREF: ...
.text:0000000000000020		       mov     rax, [rdi+10h]
.text:0000000000000024		       retn
.text:0000000000000024 str_list_get_point endp
.text:0000000000000024
.text:0000000000000024 ; ---------------------------------------------------------------------------
.text:0000000000000025		       align 10h
.text:0000000000000030
.text:0000000000000030 ; =============== S U B R O U T I N E =======================================
.text:0000000000000030
.text:0000000000000030
.text:0000000000000030 str_list_move_point_head	proc near      ; CODE XREF: main+A8p
.text:0000000000000030					       ; main+D7p
.text:0000000000000030					       ; DATA XREF: ...
.text:0000000000000030		       mov     rax, [rdi+8]
.text:0000000000000034		       mov     [rdi+10h], rax
.text:0000000000000038		       retn
.text:0000000000000038 str_list_move_point_head	endp
.text:0000000000000038
.text:0000000000000038 ; ---------------------------------------------------------------------------
.text:0000000000000039		       align 20h
.text:0000000000000040
.text:0000000000000040 ; =============== S U B R O U T I N E =======================================
.text:0000000000000040
.text:0000000000000040
.text:0000000000000040 str_list_move_point_next	proc near      ; CODE XREF: main+C3p
.text:0000000000000040					       ; main+F5p
.text:0000000000000040					       ; DATA XREF: ...
.text:0000000000000040		       mov     rax, [rdi+10h]
.text:0000000000000044		       test    rax, rax
.text:0000000000000047		       jz      short locret_51
.text:0000000000000049		       mov     rax, [rax+8]
.text:000000000000004D		       mov     [rdi+10h], rax
.text:0000000000000051
.text:0000000000000051 locret_51:			       ; CODE XREF: str_list_move_point_next+7j
.text:0000000000000051		       rep retn
.text:0000000000000051 str_list_move_point_next	endp
.text:0000000000000051
.text:0000000000000051 ; ---------------------------------------------------------------------------
.text:0000000000000053		       align 20h
.text:0000000000000060
.text:0000000000000060 ; =============== S U B R O U T I N E =======================================
.text:0000000000000060
.text:0000000000000060
.text:0000000000000060 str_list_create_head proc near	       ; CODE XREF: main+40p
.text:0000000000000060					       ; main+75p
.text:0000000000000060					       ; DATA XREF: ...
.text:0000000000000060
.text:0000000000000060 var_20	       = qword ptr -20h
.text:0000000000000060 var_18	       = qword ptr -18h
.text:0000000000000060 var_10	       = qword ptr -10h
.text:0000000000000060 var_8	       = qword ptr -8
.text:0000000000000060
.text:0000000000000060		       mov     [rsp+var_20], rbx
.text:0000000000000065		       mov     [rsp+var_18], rbp
.text:000000000000006A		       mov     rbx, rdi
.text:000000000000006D		       mov     [rsp+var_10], r12
.text:0000000000000072		       mov     [rsp+var_8], r13
.text:0000000000000077		       mov     edi, 10h	       ; size
.text:000000000000007C		       sub     rsp, 28h
.text:0000000000000080		       mov     r13, rsi
.text:0000000000000083		       mov     r12d, 5
.text:0000000000000089		       call    malloc
.text:000000000000008E		       test    rax, rax
.text:0000000000000091		       mov     rbp, rax
.text:0000000000000094		       jz      short loc_C8
.text:0000000000000096		       mov     rax, [rbx+20h]
.text:000000000000009A
.text:000000000000009A loc_9A:				       ; DATA XREF: .eh_frame:000000000000037Co
.text:000000000000009A		       test    rax, rax
.text:000000000000009D		       jz      short loc_AE
.text:000000000000009F		       mov     rsi, r13
.text:00000000000000A2		       mov     rdi, rbp
.text:00000000000000A5		       call    rax
.text:00000000000000A7		       test    eax, eax
.text:00000000000000A9		       mov     r12d, eax
.text:00000000000000AC		       jnz     short loc_F0
.text:00000000000000AE
.text:00000000000000AE loc_AE:				       ; CODE XREF: str_list_create_head+3Dj
.text:00000000000000AE		       add     qword ptr [rbx],	1
.text:00000000000000B2		       xor     r12d, r12d
.text:00000000000000B5		       cmp     qword ptr [rbx+18h], 0
.text:00000000000000BA		       mov     rax, [rbx+8]
.text:00000000000000BE		       mov     [rbx+8],	rbp
.text:00000000000000C2		       mov     [rbp+8],	rax
.text:00000000000000C6		       jz      short loc_E4
.text:00000000000000C8
.text:00000000000000C8 loc_C8:				       ; CODE XREF: str_list_create_head+34j
.text:00000000000000C8					       ; str_list_create_head+88j ...
.text:00000000000000C8		       mov     eax, r12d
.text:00000000000000CB		       mov     rbx, [rsp+28h+var_20]
.text:00000000000000D0		       mov     rbp, [rsp+28h+var_18]
.text:00000000000000D5		       mov     r12, [rsp+28h+var_10]
.text:00000000000000DA		       mov     r13, [rsp+28h+var_8]
.text:00000000000000DF		       add     rsp, 28h
.text:00000000000000E3		       retn
.text:00000000000000E4 ; ---------------------------------------------------------------------------
.text:00000000000000E4
.text:00000000000000E4 loc_E4:				       ; CODE XREF: str_list_create_head+66j
.text:00000000000000E4		       mov     [rbx+18h], rbp
.text:00000000000000E8		       jmp     short loc_C8
.text:00000000000000E8 ; ---------------------------------------------------------------------------
.text:00000000000000EA		       align 10h
.text:00000000000000F0
.text:00000000000000F0 loc_F0:				       ; CODE XREF: str_list_create_head+4Cj
.text:00000000000000F0		       mov     rdi, rbp	       ; ptr
.text:00000000000000F3		       call    free
.text:00000000000000F8		       jmp     short loc_C8
.text:00000000000000F8 str_list_create_head endp
.text:00000000000000F8
.text:00000000000000F8 ; ---------------------------------------------------------------------------
.text:00000000000000FA		       align 20h
.text:0000000000000100
.text:0000000000000100 ; =============== S U B R O U T I N E =======================================
.text:0000000000000100
.text:0000000000000100
.text:0000000000000100		       public main
.text:0000000000000100 main	       proc near	       ; DATA XREF: .eh_frame:0000000000000398o
.text:0000000000000100
.text:0000000000000100 var_48	       = qword ptr -48h
.text:0000000000000100 ptr	       = qword ptr -40h
.text:0000000000000100 var_38	       = qword ptr -38h
.text:0000000000000100 var_30	       = qword ptr -30h
.text:0000000000000100 var_28	       = qword ptr -28h
.text:0000000000000100 var_20	       = qword ptr -20h
.text:0000000000000100
.text:0000000000000100		       push    rbp
.text:0000000000000101		       xor     esi, esi
.text:0000000000000103		       push    rbx
.text:0000000000000104		       sub     rsp, 38h
.text:0000000000000108		       mov     rdi, rsp
.text:000000000000010B		       mov     [rsp+48h+var_48], 0
.text:0000000000000113		       mov     [rsp+48h+ptr], 0
.text:000000000000011C		       mov     [rsp+48h+var_38], 0
.text:0000000000000125		       mov     [rsp+48h+var_30], 0
.text:000000000000012E		       mov     [rsp+48h+var_28], 0
.text:0000000000000137		       mov     [rsp+48h+var_20], 0
.text:0000000000000140		       call    str_list_create_head
.text:0000000000000145		       mov     rdi, rsp
.text:0000000000000148		       call    str_list_get_head
.text:000000000000014D		       cmp     cs:_LC0,	0
.text:0000000000000154		       mov     rbp, rax
.text:0000000000000157		       jnz     loc_28A
.text:000000000000015D		       mov     esi, 1	       ; size
.text:0000000000000162		       mov     edi, 1	       ; nmemb
.text:0000000000000167		       call    calloc
.text:000000000000016C
.text:000000000000016C loc_16C:				       ; CODE XREF: main+197j
.text:000000000000016C					       ; main+1B5j
.text:000000000000016C		       xor     esi, esi
.text:000000000000016E		       mov     [rbp+0],	rax
.text:0000000000000172		       mov     rdi, rsp
.text:0000000000000175		       call    str_list_create_head
.text:000000000000017A		       mov     rdi, rsp
.text:000000000000017D		       call    str_list_get_head
.text:0000000000000182		       cmp     cs:_LC1,	0
.text:0000000000000189		       mov     rbp, rax
.text:000000000000018C		       jnz     loc_258
.text:0000000000000192		       mov     esi, 1	       ; size
.text:0000000000000197		       mov     edi, 1	       ; nmemb
.text:000000000000019C		       call    calloc
.text:00000000000001A1
.text:00000000000001A1 loc_1A1:				       ; CODE XREF: main+165j
.text:00000000000001A1					       ; main+185j
.text:00000000000001A1		       mov     [rbp+0],	rax
.text:00000000000001A5		       mov     rdi, rsp
.text:00000000000001A8		       call    str_list_move_point_head
.text:00000000000001AD		       jmp     short loc_1C8
.text:00000000000001AD ; ---------------------------------------------------------------------------
.text:00000000000001AF		       align 10h
.text:00000000000001B0
.text:00000000000001B0 loc_1B0:				       ; CODE XREF: main+D2j
.text:00000000000001B0		       mov     rdi, rsp
.text:00000000000001B3		       call    str_list_get_point
.text:00000000000001B8
.text:00000000000001B8 loc_1B8:				       ; DATA XREF: .eh_frame:000000000000039Co
.text:00000000000001B8		       mov     rdi, [rax]      ; s
.text:00000000000001BB		       call    puts
.text:00000000000001C0		       mov     rdi, rsp
.text:00000000000001C3		       call    str_list_move_point_next
.text:00000000000001C8
.text:00000000000001C8 loc_1C8:				       ; CODE XREF: main+ADj
.text:00000000000001C8		       mov     rdi, rsp
.text:00000000000001CB		       call    str_list_is_point_nil
.text:00000000000001D0		       test    eax, eax
.text:00000000000001D2		       jz      short loc_1B0
.text:00000000000001D4		       mov     rdi, rsp
.text:00000000000001D7		       call    str_list_move_point_head
.text:00000000000001DC		       nop     dword ptr [rax+00h]
.text:00000000000001E0		       jmp     short loc_1FA
.text:00000000000001E2 ; ---------------------------------------------------------------------------
.text:00000000000001E2
.text:00000000000001E2 loc_1E2:				       ; CODE XREF: main+104j
.text:00000000000001E2		       mov     rdi, rsp
.text:00000000000001E5		       call    str_list_get_point
.text:00000000000001EA		       mov     rdi, [rax]      ; ptr
.text:00000000000001ED		       call    free
.text:00000000000001F2		       mov     rdi, rsp
.text:00000000000001F5		       call    str_list_move_point_next
.text:00000000000001FA
.text:00000000000001FA loc_1FA:				       ; CODE XREF: main+E0j
.text:00000000000001FA		       mov     rdi, rsp
.text:00000000000001FD		       call    str_list_is_point_nil
.text:0000000000000202		       test    eax, eax
.text:0000000000000204		       jz      short loc_1E2
.text:0000000000000206
.text:0000000000000206 loc_206:				       ; CODE XREF: main+13Dj
.text:0000000000000206		       cmp     [rsp+48h+var_48], 0
.text:000000000000020B		       jz      short loc_24F
.text:000000000000020D
.text:000000000000020D loc_20D:				       ; CODE XREF: main+14Dj
.text:000000000000020D		       mov     rbx, [rsp+48h+ptr]
.text:0000000000000212		       sub     [rsp+48h+var_48], 1
.text:0000000000000217		       mov     rax, [rbx+8]
.text:000000000000021B		       mov     [rsp+48h+ptr], rax
.text:0000000000000220		       mov     rax, [rsp+48h+var_20]
.text:0000000000000225		       test    rax, rax
.text:0000000000000228		       jz      short loc_22F
.text:000000000000022A		       mov     rdi, rbx
.text:000000000000022D		       call    rax
.text:000000000000022F
.text:000000000000022F loc_22F:				       ; CODE XREF: main+128j
.text:000000000000022F		       mov     rdi, rbx	       ; ptr
.text:0000000000000232		       call    free
.text:0000000000000237		       cmp     [rsp+48h+ptr], 0
.text:000000000000023D		       jnz     short loc_206
.text:000000000000023F		       cmp     [rsp+48h+var_48], 0
.text:0000000000000244		       mov     [rsp+48h+var_30], 0
.text:000000000000024D		       jnz     short loc_20D
.text:000000000000024F
.text:000000000000024F loc_24F:				       ; CODE XREF: main+10Bj
.text:000000000000024F		       add     rsp, 38h
.text:0000000000000253		       xor     eax, eax
.text:0000000000000255		       pop     rbx
.text:0000000000000256		       pop     rbp
.text:0000000000000257		       retn
.text:0000000000000258 ; ---------------------------------------------------------------------------
.text:0000000000000258
.text:0000000000000258 loc_258:				       ; CODE XREF: main+8Cj
.text:0000000000000258		       mov     edi, 0Eh	       ; size
.text:000000000000025D		       call    malloc
.text:0000000000000262		       test    rax, rax
.text:0000000000000265		       jz      loc_1A1
.text:000000000000026B		       mov     rdx, 5320646E6F636553h
.text:0000000000000275		       mov     dword ptr [rax+8], 6E697274h
.text:000000000000027C		       mov     word ptr	[rax+0Ch], 67h ; 'g'
.text:0000000000000282		       mov     [rax], rdx
.text:0000000000000285		       jmp     loc_1A1
.text:000000000000028A ; ---------------------------------------------------------------------------
.text:000000000000028A
.text:000000000000028A loc_28A:				       ; CODE XREF: main+57j
.text:000000000000028A		       mov     edi, 0Dh	       ; size
.text:000000000000028F		       call    malloc
.text:0000000000000294		       test    rax, rax
.text:0000000000000297		       jz      loc_16C
.text:000000000000029D		       mov     rcx, 7453207473726946h
.text:00000000000002A7		       mov     dword ptr [rax+8], 676E6972h
.text:00000000000002AE		       mov     byte ptr	[rax+0Ch], 0
.text:00000000000002B2		       mov     [rax], rcx
.text:00000000000002B5		       jmp     loc_16C
.text:00000000000002B5 main	       endp
.text:00000000000002B5
.text:00000000000002B5 _text	       ends
.text:00000000000002B5
.data:00000000000002BC ; ===========================================================================
.data:00000000000002BC
.data:00000000000002BC ; Segment type: Zero-length
.data:00000000000002BC ; Segment permissions: Read/Write
.data:00000000000002BC _data	       segment dword public 'DATA' use64
.data:00000000000002BC _data	       ends
.data:00000000000002BC
.bss:00000000000002C0 ;	===========================================================================
.bss:00000000000002C0
.bss:00000000000002C0 ;	Segment	type: Zero-length
.bss:00000000000002C0 ;	Segment	permissions: Read/Write
.bss:00000000000002C0 _bss	      segment dword public 'BSS' use64
.bss:00000000000002C0 _bss	      ends
.bss:00000000000002C0
.rodata.str1.1:00000000000002C1	; ===========================================================================
.rodata.str1.1:00000000000002C1
.rodata.str1.1:00000000000002C1	; Segment type:	Pure data
.rodata.str1.1:00000000000002C1	; Segment permissions: Read
.rodata.str1.1:00000000000002C1	_rodata_str1_1	segment	byte public 'CONST' use64
.rodata.str1.1:00000000000002C1			assume cs:_rodata_str1_1
.rodata.str1.1:00000000000002C1			;org 2C1h
.rodata.str1.1:00000000000002C1	_LC0		db 46h			; DATA XREF: main+4Dr
.rodata.str1.1:00000000000002C2	aIrstString	db 'irst String',0
.rodata.str1.1:00000000000002CE	_LC1		db 53h			; DATA XREF: main+82r
.rodata.str1.1:00000000000002CF	aEcondString	db 'econd String',0
.rodata.str1.1:00000000000002CF	_rodata_str1_1	ends
.rodata.str1.1:00000000000002CF
.eh_frame:00000000000002E0 ; ===========================================================================
.eh_frame:00000000000002E0
.eh_frame:00000000000002E0 ; Segment type: Pure	data
.eh_frame:00000000000002E0 ; Segment permissions: Read
.eh_frame:00000000000002E0 ; Segment alignment 'qword' can not be represented in assembly
.eh_frame:00000000000002E0 _eh_frame	   segment para	public 'CONST' use64
.eh_frame:00000000000002E0		   assume cs:_eh_frame
.eh_frame:00000000000002E0		   ;org	2E0h
.eh_frame:00000000000002E0		   dq 14h, 110780100527A01h, 19008070C03h, 1C00000014h
.eh_frame:0000000000000300		   dd offset str_list_get_head
.eh_frame:0000000000000304		   dd 5
.eh_frame:0000000000000308		   align 10h
.eh_frame:0000000000000310		   dq 3400000014h
.eh_frame:0000000000000318		   dd offset str_list_is_point_nil
.eh_frame:000000000000031C		   dd 0Bh
.eh_frame:0000000000000320		   dq 0
.eh_frame:0000000000000328		   dq 4C00000014h
.eh_frame:0000000000000330		   dd offset str_list_get_point
.eh_frame:0000000000000334		   dd 5
.eh_frame:0000000000000338		   align 20h
.eh_frame:0000000000000340		   dq 6400000014h
.eh_frame:0000000000000348		   dd offset str_list_move_point_head
.eh_frame:000000000000034C		   dd 9
.eh_frame:0000000000000350		   dq 0
.eh_frame:0000000000000358		   dq 7C00000014h
.eh_frame:0000000000000360		   dd offset str_list_move_point_next
.eh_frame:0000000000000364		   dd 13h
.eh_frame:0000000000000368		   align 10h
.eh_frame:0000000000000370		   dq 940000001Ch
.eh_frame:0000000000000378		   dd offset str_list_create_head
.eh_frame:000000000000037C		   dd offset loc_9A
.eh_frame:0000000000000380		   dq 0E56058304864A00h, 38C028D30h, 0B40000001Ch
.eh_frame:0000000000000398		   dd offset main
.eh_frame:000000000000039C		   dd offset loc_1B8+2
.eh_frame:00000000000003A0		   dq 44180E43100E4100h, 2860383500Eh
.eh_frame:00000000000003A0 _eh_frame	   ends
.eh_frame:00000000000003A0
extern:00000000000003B0	; ===========================================================================
extern:00000000000003B0
extern:00000000000003B0	; Segment type:	Externs
extern:00000000000003B0	; extern
extern:00000000000003B0	; void *malloc(size_t size)
extern:00000000000003B0			extrn malloc:near	; CODE XREF: str_list_create_head+29p
extern:00000000000003B0						; main+15Dp ...
extern:00000000000003B4	; void free(void *ptr)
extern:00000000000003B4			extrn free:near		; CODE XREF: str_list_create_head+93p
extern:00000000000003B4						; main+EDp ...
extern:00000000000003B8	; void *calloc(size_t nmemb, size_t size)
extern:00000000000003B8			extrn calloc:near	; CODE XREF: main+67p
extern:00000000000003B8						; main+9Cp
extern:00000000000003BC	; int puts(const char *s)
extern:00000000000003BC			extrn puts:near		; CODE XREF: main+BBp
extern:00000000000003BC
extern:00000000000003BC
extern:00000000000003BC			end
