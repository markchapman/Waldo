.text:0000000000000000 ;
.text:0000000000000000 ; +-------------------------------------------------------------------------+
.text:0000000000000000 ; |   This file has been	generated by The Interactive Disassembler (IDA)	   |
.text:0000000000000000 ; |	  Copyright (c)	2009 by	Hex-Rays, <support@hex-rays.com>	   |
.text:0000000000000000 ; |			License	info: 48-313D-7374-F1			   |
.text:0000000000000000 ; |   Aditya Thakur, University of Wisconsin/Computer Sciences Department   |
.text:0000000000000000 ; +-------------------------------------------------------------------------+
.text:0000000000000000 ;
.text:0000000000000000 ; Input MD5   : 0AB16FEB49D1CE908438658025AED52B
.text:0000000000000000
.text:0000000000000000 ; File Name   : C:\aditya\work\waldo\tests\abl-1.2\test\test4.o
.text:0000000000000000 ; Format	     : ELF (Relocatable)
.text:0000000000000000 ;
.text:0000000000000000 ; Source	File : 'test4.c'
.text:0000000000000000
.text:0000000000000000		       .686p
.text:0000000000000000		       .mmx
.text:0000000000000000		       .model flat
.text:0000000000000000 .intel_syntax noprefix
.text:0000000000000000
.text:0000000000000000 ; ===========================================================================
.text:0000000000000000
.text:0000000000000000 ; Segment type: Pure code
.text:0000000000000000 ; Segment permissions: Read/Execute
.text:0000000000000000 _text	       segment para public 'CODE' use64
.text:0000000000000000		       assume cs:_text
.text:0000000000000000		       assume es:nothing, ss:nothing, ds:_text,	fs:nothing, gs:nothing
.text:0000000000000000
.text:0000000000000000 ; =============== S U B R O U T I N E =======================================
.text:0000000000000000
.text:0000000000000000
.text:0000000000000000		       public str_list_destroy
.text:0000000000000000 str_list_destroy	proc near	       ; DATA XREF: main+39o
.text:0000000000000000					       ; .eh_frame:0000000000000248o
.text:0000000000000000		       mov     rdi, [rdi]
.text:0000000000000003		       jmp     free
.text:0000000000000003 str_list_destroy	endp
.text:0000000000000003
.text:0000000000000003 ; ---------------------------------------------------------------------------
.text:0000000000000008		       align 10h
.text:0000000000000010
.text:0000000000000010 ; =============== S U B R O U T I N E =======================================
.text:0000000000000010
.text:0000000000000010
.text:0000000000000010 str_list_create_tail proc near	       ; CODE XREF: main+42p
.text:0000000000000010					       ; main+4Fp
.text:0000000000000010					       ; DATA XREF: ...
.text:0000000000000010
.text:0000000000000010 var_18	       = qword ptr -18h
.text:0000000000000010 var_10	       = qword ptr -10h
.text:0000000000000010 var_8	       = qword ptr -8
.text:0000000000000010
.text:0000000000000010		       mov     [rsp+var_18], rbx
.text:0000000000000015		       mov     [rsp+var_8], r12
.text:000000000000001A		       mov     rbx, rdi
.text:000000000000001D		       mov     [rsp+var_10], rbp
.text:0000000000000022		       sub     rsp, 18h
.text:0000000000000026		       cmp     qword ptr [rdi+8], 0
.text:000000000000002B		       mov     r12, rsi
.text:000000000000002E		       jz      loc_B0
.text:0000000000000034		       mov     edi, 10h	       ; size
.text:0000000000000039		       call    malloc
.text:000000000000003E		       test    rax, rax
.text:0000000000000041		       mov     rbp, rax
.text:0000000000000044		       jz      loc_100
.text:000000000000004A		       mov     rax, [rbx+20h]
.text:000000000000004E		       test    rax, rax
.text:0000000000000051		       jz      short loc_62
.text:0000000000000053		       mov     rsi, r12
.text:0000000000000056		       mov     rdi, rbp
.text:0000000000000059		       call    rax
.text:000000000000005B		       test    eax, eax
.text:000000000000005D		       mov     r12d, eax
.text:0000000000000060		       jnz     short loc_A5
.text:0000000000000062
.text:0000000000000062 loc_62:				       ; CODE XREF: str_list_create_tail+41j
.text:0000000000000062		       mov     qword ptr [rbp+8], 0
.text:000000000000006A		       mov     rax, [rbx+18h]
.text:000000000000006E		       add     qword ptr [rbx],	1
.text:0000000000000072		       test    rbp, rbp
.text:0000000000000075		       mov     [rax+8],	rbp
.text:0000000000000079		       mov     [rbx+18h], rbp
.text:000000000000007D		       jz      short loc_98
.text:000000000000007F
.text:000000000000007F loc_7F:				       ; CODE XREF: str_list_create_tail+DFj
.text:000000000000007F		       xor     r12d, r12d
.text:0000000000000082
.text:0000000000000082 loc_82:				       ; CODE XREF: str_list_create_tail+93j
.text:0000000000000082					       ; str_list_create_tail+9Dj ...
.text:0000000000000082		       mov     eax, r12d
.text:0000000000000085		       mov     rbx, [rsp+18h+var_18]
.text:0000000000000089		       mov     rbp, [rsp+18h+var_10]
.text:000000000000008E		       mov     r12, [rsp+18h+var_8]
.text:0000000000000093		       add     rsp, 18h
.text:0000000000000097		       retn
.text:0000000000000098 ; ---------------------------------------------------------------------------
.text:0000000000000098
.text:0000000000000098 loc_98:				       ; CODE XREF: str_list_create_tail+6Dj
.text:0000000000000098		       xor     r12d, r12d
.text:000000000000009B		       mov     qword ptr [rbx+18h], 0
.text:00000000000000A3		       jmp     short loc_82
.text:00000000000000A5 ; ---------------------------------------------------------------------------
.text:00000000000000A5
.text:00000000000000A5 loc_A5:				       ; CODE XREF: str_list_create_tail+50j
.text:00000000000000A5					       ; str_list_create_tail+C8j
.text:00000000000000A5		       mov     rdi, rbp	       ; ptr
.text:00000000000000A8		       call    free
.text:00000000000000AD		       jmp     short loc_82
.text:00000000000000AD ; ---------------------------------------------------------------------------
.text:00000000000000AF		       align 10h
.text:00000000000000B0
.text:00000000000000B0 loc_B0:				       ; CODE XREF: str_list_create_tail+1Ej
.text:00000000000000B0		       mov     edi, 10h	       ; size
.text:00000000000000B5		       call    malloc
.text:00000000000000BA		       test    rax, rax
.text:00000000000000BD		       mov     rbp, rax
.text:00000000000000C0		       jz      short loc_100
.text:00000000000000C2
.text:00000000000000C2 loc_C2:				       ; DATA XREF: .eh_frame:0000000000000284o
.text:00000000000000C2		       mov     rax, [rbx+20h]
.text:00000000000000C6		       test    rax, rax
.text:00000000000000C9		       jz      short loc_DA
.text:00000000000000CB		       mov     rsi, r12
.text:00000000000000CE		       mov     rdi, rbp
.text:00000000000000D1		       call    rax
.text:00000000000000D3		       test    eax, eax
.text:00000000000000D5		       mov     r12d, eax
.text:00000000000000D8		       jnz     short loc_A5
.text:00000000000000DA
.text:00000000000000DA loc_DA:				       ; CODE XREF: str_list_create_tail+B9j
.text:00000000000000DA		       mov     rax, [rbx+8]
.text:00000000000000DE		       add     qword ptr [rbx],	1
.text:00000000000000E2		       mov     [rbp+8],	rax
.text:00000000000000E6		       cmp     qword ptr [rbx+18h], 0
.text:00000000000000EB		       mov     [rbx+8],	rbp
.text:00000000000000EF		       jnz     short loc_7F
.text:00000000000000F1		       xor     r12d, r12d
.text:00000000000000F4		       mov     [rbx+18h], rbp
.text:00000000000000F8		       jmp     short loc_82
.text:00000000000000F8 ; ---------------------------------------------------------------------------
.text:00000000000000FA		       db 66h
.text:00000000000000FB		       db  0Fh		       ; DATA XREF: .eh_frame:0000000000000264o
.text:00000000000000FC		       db  1Fh
.text:00000000000000FD		       db  44h ; D
.text:00000000000000FE		       db    0
.text:00000000000000FF		       db    0
.text:0000000000000100 ; ---------------------------------------------------------------------------
.text:0000000000000100
.text:0000000000000100 loc_100:				       ; CODE XREF: str_list_create_tail+34j
.text:0000000000000100					       ; str_list_create_tail+B0j
.text:0000000000000100		       mov     r12d, 5
.text:0000000000000106		       jmp     loc_82
.text:0000000000000106 str_list_create_tail endp
.text:0000000000000106
.text:0000000000000106 ; ---------------------------------------------------------------------------
.text:000000000000010B		       align 10h
.text:0000000000000110
.text:0000000000000110 ; =============== S U B R O U T I N E =======================================
.text:0000000000000110
.text:0000000000000110
.text:0000000000000110		       public main
.text:0000000000000110 main	       proc near	       ; DATA XREF: .eh_frame:0000000000000280o
.text:0000000000000110
.text:0000000000000110 var_38	       = qword ptr -38h
.text:0000000000000110 ptr	       = qword ptr -30h
.text:0000000000000110 var_28	       = qword ptr -28h
.text:0000000000000110 var_20	       = qword ptr -20h
.text:0000000000000110 var_18	       = qword ptr -18h
.text:0000000000000110 var_10	       = qword ptr -10h
.text:0000000000000110
.text:0000000000000110		       push    rbx
.text:0000000000000111		       mov     esi, offset aFirstString	; "First String"
.text:0000000000000116		       sub     rsp, 30h
.text:000000000000011A		       mov     rdi, rsp
.text:000000000000011D		       mov     [rsp+38h+var_38], 0
.text:0000000000000125		       mov     [rsp+38h+ptr], 0
.text:000000000000012E		       mov     [rsp+38h+var_28], 0
.text:0000000000000137		       mov     [rsp+38h+var_20], 0
.text:0000000000000140		       mov     [rsp+38h+var_18], offset	str_list_make
.text:0000000000000149		       mov     [rsp+38h+var_10], offset	str_list_destroy
.text:0000000000000152		       call    str_list_create_tail
.text:0000000000000157		       mov     esi, offset aSecondString ; "Second String"
.text:000000000000015C		       mov     rdi, rsp
.text:000000000000015F		       call    str_list_create_tail
.text:0000000000000164		       mov     rbx, [rsp+38h+ptr]
.text:0000000000000169		       test    rbx, rbx
.text:000000000000016C		       jz      short loc_181
.text:000000000000016E		       db      66h
.text:000000000000016E		       nop
.text:0000000000000170
.text:0000000000000170 loc_170:				       ; CODE XREF: main+6Fj
.text:0000000000000170		       mov     rdi, rbx
.text:0000000000000173		       call    printstr
.text:0000000000000178		       mov     rbx, [rbx+8]
.text:000000000000017C		       test    rbx, rbx
.text:000000000000017F		       jnz     short loc_170
.text:0000000000000181
.text:0000000000000181 loc_181:				       ; CODE XREF: main+5Cj
.text:0000000000000181					       ; main+A8j
.text:0000000000000181		       cmp     [rsp+38h+var_38], 0
.text:0000000000000186		       jz      short loc_1CA
.text:0000000000000188
.text:0000000000000188 loc_188:				       ; CODE XREF: main+B8j
.text:0000000000000188		       mov     rbx, [rsp+38h+ptr]
.text:000000000000018D		       sub     [rsp+38h+var_38], 1
.text:0000000000000192		       mov     rax, [rbx+8]
.text:0000000000000196		       mov     [rsp+38h+ptr], rax
.text:000000000000019B		       mov     rax, [rsp+38h+var_10]
.text:00000000000001A0		       test    rax, rax
.text:00000000000001A3		       jz      short loc_1AA
.text:00000000000001A5		       mov     rdi, rbx
.text:00000000000001A8		       call    rax
.text:00000000000001AA
.text:00000000000001AA loc_1AA:				       ; CODE XREF: main+93j
.text:00000000000001AA		       mov     rdi, rbx	       ; ptr
.text:00000000000001AD		       call    free
.text:00000000000001B2		       cmp     [rsp+38h+ptr], 0
.text:00000000000001B8		       jnz     short loc_181
.text:00000000000001BA		       cmp     [rsp+38h+var_38], 0
.text:00000000000001BF		       mov     [rsp+38h+var_20], 0
.text:00000000000001C8		       jnz     short loc_188
.text:00000000000001CA
.text:00000000000001CA loc_1CA:				       ; CODE XREF: main+76j
.text:00000000000001CA		       add     rsp, 30h
.text:00000000000001CE		       xor     eax, eax
.text:00000000000001D0		       pop     rbx
.text:00000000000001D1		       retn
.text:00000000000001D1 main	       endp
.text:00000000000001D1
.text:00000000000001D1 ; ---------------------------------------------------------------------------
.text:00000000000001D2		       align 20h
.text:00000000000001E0
.text:00000000000001E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000001E0
.text:00000000000001E0
.text:00000000000001E0		       public str_list_make
.text:00000000000001E0 str_list_make   proc near	       ; DATA XREF: main+30o
.text:00000000000001E0					       ; .eh_frame:00000000000002A0o
.text:00000000000001E0		       push    rbx
.text:00000000000001E1		       mov     rbx, rdi
.text:00000000000001E4		       mov     rdi, rsi
.text:00000000000001E7		       call    __strdup
.text:00000000000001EC		       mov     [rbx], rax
.text:00000000000001EF		       cmp     rax, 1
.text:00000000000001F3		       pop     rbx
.text:00000000000001F4		       sbb     eax, eax
.text:00000000000001F6		       and     eax, 5
.text:00000000000001F9		       retn
.text:00000000000001F9 str_list_make   endp
.text:00000000000001F9
.text:00000000000001F9 ; ---------------------------------------------------------------------------
.text:00000000000001FA		       align 20h
.text:0000000000000200
.text:0000000000000200 ; =============== S U B R O U T I N E =======================================
.text:0000000000000200
.text:0000000000000200
.text:0000000000000200		       public printstr
.text:0000000000000200 printstr	       proc near	       ; CODE XREF: main+63p
.text:0000000000000200					       ; DATA XREF: .eh_frame:00000000000002B8o
.text:0000000000000200		       mov     rdi, [rdi]
.text:0000000000000203		       jmp     puts
.text:0000000000000203 printstr	       endp
.text:0000000000000203
.text:0000000000000203 _text	       ends
.text:0000000000000203
.data:0000000000000208 ; ===========================================================================
.data:0000000000000208
.data:0000000000000208 ; Segment type: Zero-length
.data:0000000000000208 ; Segment permissions: Read/Write
.data:0000000000000208 _data	       segment dword public 'DATA' use64
.data:0000000000000208 _data	       ends
.data:0000000000000208
.bss:000000000000020C ;	===========================================================================
.bss:000000000000020C
.bss:000000000000020C ;	Segment	type: Zero-length
.bss:000000000000020C ;	Segment	permissions: Read/Write
.bss:000000000000020C _bss	      segment dword public 'BSS' use64
.bss:000000000000020C _bss	      ends
.bss:000000000000020C
.rodata.str1.1:000000000000020D	; ===========================================================================
.rodata.str1.1:000000000000020D
.rodata.str1.1:000000000000020D	; Segment type:	Pure data
.rodata.str1.1:000000000000020D	; Segment permissions: Read
.rodata.str1.1:000000000000020D	_rodata_str1_1	segment	byte public 'CONST' use64
.rodata.str1.1:000000000000020D			assume cs:_rodata_str1_1
.rodata.str1.1:000000000000020D			;org 20Dh
.rodata.str1.1:000000000000020D	aFirstString	db 'First String',0     ; DATA XREF: main+1o
.rodata.str1.1:000000000000021A	aSecondString	db 'Second String',0    ; DATA XREF: main+47o
.rodata.str1.1:000000000000021A	_rodata_str1_1	ends
.rodata.str1.1:000000000000021A
.eh_frame:0000000000000228 ; ===========================================================================
.eh_frame:0000000000000228
.eh_frame:0000000000000228 ; Segment type: Pure	data
.eh_frame:0000000000000228 ; Segment permissions: Read
.eh_frame:0000000000000228 ; Segment alignment 'qword' can not be represented in assembly
.eh_frame:0000000000000228 _eh_frame	   segment para	public 'CONST' use64
.eh_frame:0000000000000228		   assume cs:_eh_frame
.eh_frame:0000000000000228		   ;org	228h
.eh_frame:0000000000000228		   dq 14h, 110780100527A01h, 19008070C03h, 1C00000014h
.eh_frame:0000000000000248		   dd offset str_list_destroy
.eh_frame:000000000000024C		   dd 8
.eh_frame:0000000000000250		   dq 0
.eh_frame:0000000000000258		   dq 340000001Ch
.eh_frame:0000000000000260		   dd offset str_list_create_tail
.eh_frame:0000000000000264		   dd offset unk_FB
.eh_frame:0000000000000268		   dq 0E4C0483028C4A00h, 38620h, 540000001Ch
.eh_frame:0000000000000280		   dd offset main
.eh_frame:0000000000000284		   dd offset loc_C2
.eh_frame:0000000000000288		   dq 83400E49100E4100h, 2, 7400000014h
.eh_frame:00000000000002A0		   dd offset str_list_make
.eh_frame:00000000000002A4		   dd 1Ah
.eh_frame:00000000000002A8		   dq 283100E4100h, 8C00000014h
.eh_frame:00000000000002B8		   dd offset printstr
.eh_frame:00000000000002BC		   dd 8
.eh_frame:00000000000002C0		   dq 0
.eh_frame:00000000000002C0 _eh_frame	   ends
.eh_frame:00000000000002C0
extern:00000000000002C8	; ===========================================================================
extern:00000000000002C8
extern:00000000000002C8	; Segment type:	Externs
extern:00000000000002C8	; extern
extern:00000000000002C8	; void free(void *ptr)
extern:00000000000002C8			extrn free:near		; CODE XREF: str_list_destroy+3j
extern:00000000000002C8						; str_list_create_tail+98p ...
extern:00000000000002CC	; void *malloc(size_t size)
extern:00000000000002CC			extrn malloc:near	; CODE XREF: str_list_create_tail+29p
extern:00000000000002CC						; str_list_create_tail+A5p
extern:00000000000002D0			extrn __strdup:near	; CODE XREF: str_list_make+7p
extern:00000000000002D4	; int puts(const char *s)
extern:00000000000002D4			extrn puts:near		; CODE XREF: printstr+3j
extern:00000000000002D4
extern:00000000000002D4
extern:00000000000002D4			end
