.text:0000000000000000 ;
.text:0000000000000000 ; +-------------------------------------------------------------------------+
.text:0000000000000000 ; |   This file has been	generated by The Interactive Disassembler (IDA)	   |
.text:0000000000000000 ; |	  Copyright (c)	2009 by	Hex-Rays, <support@hex-rays.com>	   |
.text:0000000000000000 ; |			License	info: 48-313D-7374-F1			   |
.text:0000000000000000 ; |   Aditya Thakur, University of Wisconsin/Computer Sciences Department   |
.text:0000000000000000 ; +-------------------------------------------------------------------------+
.text:0000000000000000 ;
.text:0000000000000000 ; Input MD5   : 288F645968221C8471993353D67B8FC3
.text:0000000000000000
.text:0000000000000000 ; File Name   : C:\aditya\work\waldo\tests\abl-1.2\test\test5.o
.text:0000000000000000 ; Format	     : ELF (Relocatable)
.text:0000000000000000 ;
.text:0000000000000000 ; Source	File : 'test5.c'
.text:0000000000000000
.text:0000000000000000		       .686p
.text:0000000000000000		       .mmx
.text:0000000000000000		       .model flat
.text:0000000000000000 .intel_syntax noprefix
.text:0000000000000000
.text:0000000000000000 ; ===========================================================================
.text:0000000000000000
.text:0000000000000000 ; Segment type: Pure code
.text:0000000000000000 ; Segment permissions: Read/Execute
.text:0000000000000000 _text	       segment para public 'CODE' use64
.text:0000000000000000		       assume cs:_text
.text:0000000000000000		       assume es:nothing, ss:nothing, ds:_text,	fs:nothing, gs:nothing
.text:0000000000000000
.text:0000000000000000 ; =============== S U B R O U T I N E =======================================
.text:0000000000000000
.text:0000000000000000
.text:0000000000000000 int_list_init   proc near	       ; CODE XREF: main+15p
.text:0000000000000000					       ; main+1Dp
.text:0000000000000000					       ; DATA XREF: ...
.text:0000000000000000		       mov     qword ptr [rdi],	0
.text:0000000000000007		       mov     qword ptr [rdi+8], 0
.text:000000000000000F		       mov     qword ptr [rdi+10h], 0
.text:0000000000000017		       mov     qword ptr [rdi+18h], 0
.text:000000000000001F		       mov     qword ptr [rdi+20h], 0
.text:0000000000000027
.text:0000000000000027 loc_27:				       ; DATA XREF: .eh_frame:00000000000002ACo
.text:0000000000000027					       ; .eh_frame:00000000000002CCo
.text:0000000000000027		       mov     qword ptr [rdi+28h], 0
.text:000000000000002F		       retn
.text:000000000000002F int_list_init   endp
.text:000000000000002F
.text:0000000000000030
.text:0000000000000030 ; =============== S U B R O U T I N E =======================================
.text:0000000000000030
.text:0000000000000030
.text:0000000000000030 int_list_mapcar proc near	       ; CODE XREF: main+53p
.text:0000000000000030					       ; main+A2p
.text:0000000000000030					       ; DATA XREF: ...
.text:0000000000000030		       push    rbp
.text:0000000000000031		       mov     rbp, rsi
.text:0000000000000034		       push    rbx
.text:0000000000000035		       sub     rsp, 8
.text:0000000000000039		       mov     rbx, [rdi+8]
.text:000000000000003D		       test    rbx, rbx
.text:0000000000000040		       jz      short loc_50
.text:0000000000000042
.text:0000000000000042 loc_42:				       ; CODE XREF: int_list_mapcar+1Ej
.text:0000000000000042		       mov     rdi, rbx
.text:0000000000000045		       call    rbp
.text:0000000000000047		       mov     rbx, [rbx+8]
.text:000000000000004B		       test    rbx, rbx
.text:000000000000004E		       jnz     short loc_42
.text:0000000000000050
.text:0000000000000050 loc_50:				       ; CODE XREF: int_list_mapcar+10j
.text:0000000000000050		       add     rsp, 8
.text:0000000000000054		       pop     rbx
.text:0000000000000055		       pop     rbp
.text:0000000000000056		       retn
.text:0000000000000056 int_list_mapcar endp
.text:0000000000000056
.text:0000000000000056 ; ---------------------------------------------------------------------------
.text:0000000000000057 byte_57	       db 66h, 0Fh, 1Fh, 84h, 3	dup(0)
.text:0000000000000057					       ; DATA XREF: .eh_frame:0000000000000354o
.text:000000000000005E		       db    0		       ; DATA XREF: .eh_frame:000000000000031Co
.text:000000000000005F		       db    0
.text:0000000000000060
.text:0000000000000060 ; =============== S U B R O U T I N E =======================================
.text:0000000000000060
.text:0000000000000060
.text:0000000000000060 int_list_reduce proc near	       ; CODE XREF: main+6Bp
.text:0000000000000060					       ; main+95p
.text:0000000000000060					       ; DATA XREF: ...
.text:0000000000000060		       push    r12
.text:0000000000000062		       mov     r12, rsi
.text:0000000000000065		       push    rbp
.text:0000000000000066		       mov     rbp, rdx
.text:0000000000000069		       push    rbx
.text:000000000000006A		       mov     rbx, [rdi+8]
.text:000000000000006E		       test    rbx, rbx
.text:0000000000000071		       jz      short loc_84
.text:0000000000000073
.text:0000000000000073 loc_73:				       ; CODE XREF: int_list_reduce+22j
.text:0000000000000073		       mov     rsi, rbx
.text:0000000000000076		       mov     rdi, r12
.text:0000000000000079		       call    rbp
.text:000000000000007B		       mov     rbx, [rbx+8]
.text:000000000000007F		       test    rbx, rbx
.text:0000000000000082		       jnz     short loc_73
.text:0000000000000084
.text:0000000000000084 loc_84:				       ; CODE XREF: int_list_reduce+11j
.text:0000000000000084		       pop     rbx
.text:0000000000000085		       pop     rbp
.text:0000000000000086		       pop     r12
.text:0000000000000088		       retn
.text:0000000000000088 int_list_reduce endp
.text:0000000000000088
.text:0000000000000088 ; ---------------------------------------------------------------------------
.text:0000000000000089		       align 10h
.text:0000000000000090
.text:0000000000000090 ; =============== S U B R O U T I N E =======================================
.text:0000000000000090
.text:0000000000000090
.text:0000000000000090		       public sum
.text:0000000000000090 sum	       proc near	       ; DATA XREF: main+58o
.text:0000000000000090					       ; .eh_frame:00000000000002E8o
.text:0000000000000090		       mov     eax, [rsi]
.text:0000000000000092		       add     [rdi], eax
.text:0000000000000094		       retn
.text:0000000000000094 sum	       endp
.text:0000000000000094
.text:0000000000000094 ; ---------------------------------------------------------------------------
.text:0000000000000095		       align 20h
.text:00000000000000A0
.text:00000000000000A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000000A0
.text:00000000000000A0
.text:00000000000000A0		       public printint
.text:00000000000000A0 printint	       proc near	       ; DATA XREF: main+4Eo
.text:00000000000000A0					       ; main+9Ao ...
.text:00000000000000A0		       mov     esi, [rdi]
.text:00000000000000A2		       xor     eax, eax
.text:00000000000000A4		       mov     edi, offset byte_249
.text:00000000000000A9		       jmp     printf
.text:00000000000000A9 printint	       endp
.text:00000000000000A9
.text:00000000000000A9 ; ---------------------------------------------------------------------------
.text:00000000000000AE		       align 10h
.text:00000000000000B0
.text:00000000000000B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000000B0
.text:00000000000000B0
.text:00000000000000B0 int_list_add_head proc near	       ; CODE XREF: revcj
.text:00000000000000B0					       ; main+36p
.text:00000000000000B0					       ; DATA XREF: ...
.text:00000000000000B0
.text:00000000000000B0 var_10	       = qword ptr -10h
.text:00000000000000B0 var_8	       = qword ptr -8
.text:00000000000000B0
.text:00000000000000B0		       mov     [rsp+var_10], rbx
.text:00000000000000B5		       mov     [rsp+var_8], rbp
.text:00000000000000BA		       mov     rbx, rdi
.text:00000000000000BD		       sub     rsp, 18h
.text:00000000000000C1
.text:00000000000000C1 loc_C1:				       ; DATA XREF: .eh_frame:0000000000000374o
.text:00000000000000C1		       mov     edi, 10h	       ; size
.text:00000000000000C6		       mov     rbp, rsi
.text:00000000000000C9		       call    malloc
.text:00000000000000CE		       mov     rdx, rax
.text:00000000000000D1		       mov     eax, 5
.text:00000000000000D6		       test    rdx, rdx
.text:00000000000000D9		       jz      short loc_F9
.text:00000000000000DB		       mov     eax, [rbp+0]
.text:00000000000000DE		       add     qword ptr [rbx],	1
.text:00000000000000E2		       mov     [rdx], eax
.text:00000000000000E4		       mov     rax, [rbx+8]
.text:00000000000000E8		       mov     [rbx+8],	rdx
.text:00000000000000EC		       mov     [rdx+8],	rax
.text:00000000000000F0		       xor     eax, eax
.text:00000000000000F2		       cmp     qword ptr [rbx+18h], 0
.text:00000000000000F7		       jz      short loc_108
.text:00000000000000F9
.text:00000000000000F9 loc_F9:				       ; CODE XREF: int_list_add_head+29j
.text:00000000000000F9					       ; int_list_add_head+5Cj
.text:00000000000000F9		       mov     rbx, [rsp+18h+var_10]
.text:00000000000000FE		       mov     rbp, [rsp+18h+var_8]
.text:0000000000000103		       add     rsp, 18h
.text:0000000000000107		       retn
.text:0000000000000108 ; ---------------------------------------------------------------------------
.text:0000000000000108
.text:0000000000000108 loc_108:				       ; CODE XREF: int_list_add_head+47j
.text:0000000000000108		       mov     [rbx+18h], rdx
.text:000000000000010C		       jmp     short loc_F9
.text:000000000000010C int_list_add_head endp
.text:000000000000010C
.text:000000000000010C ; ---------------------------------------------------------------------------
.text:000000000000010E		       align 10h
.text:0000000000000110
.text:0000000000000110 ; =============== S U B R O U T I N E =======================================
.text:0000000000000110
.text:0000000000000110
.text:0000000000000110		       public revc
.text:0000000000000110 revc	       proc near	       ; DATA XREF: main+8Ao
.text:0000000000000110					       ; .eh_frame:0000000000000338o
.text:0000000000000110		       jmp     short int_list_add_head
.text:0000000000000110 revc	       endp
.text:0000000000000110
.text:0000000000000110 ; ---------------------------------------------------------------------------
.text:0000000000000112		       align 20h
.text:0000000000000120
.text:0000000000000120 ; =============== S U B R O U T I N E =======================================
.text:0000000000000120
.text:0000000000000120
.text:0000000000000120 int_list_clean  proc near	       ; CODE XREF: main+AAp
.text:0000000000000120					       ; main+B2p
.text:0000000000000120					       ; DATA XREF: ...
.text:0000000000000120		       push    rbp
.text:0000000000000121		       push    rbx
.text:0000000000000122		       mov     rbx, rdi
.text:0000000000000125		       sub     rsp, 8
.text:0000000000000129		       nop     dword ptr [rax+00000000h]
.text:0000000000000130
.text:0000000000000130 loc_130:				       ; CODE XREF: int_list_clean+41j
.text:0000000000000130		       cmp     qword ptr [rbx],	0
.text:0000000000000134		       jz      short loc_171
.text:0000000000000136
.text:0000000000000136 loc_136:				       ; CODE XREF: int_list_clean+4Fj
.text:0000000000000136		       mov     rbp, [rbx+8]
.text:000000000000013A		       sub     qword ptr [rbx],	1
.text:000000000000013E		       mov     rax, [rbp+8]
.text:0000000000000142		       mov     [rbx+8],	rax
.text:0000000000000146		       mov     rax, [rbx+28h]
.text:000000000000014A		       test    rax, rax
.text:000000000000014D		       jz      short loc_154
.text:000000000000014F		       mov     rdi, rbp
.text:0000000000000152		       call    rax
.text:0000000000000154
.text:0000000000000154 loc_154:				       ; CODE XREF: int_list_clean+2Dj
.text:0000000000000154		       mov     rdi, rbp	       ; ptr
.text:0000000000000157		       call    free
.text:000000000000015C		       cmp     qword ptr [rbx+8], 0
.text:0000000000000161		       jnz     short loc_130
.text:0000000000000163		       cmp     qword ptr [rbx],	0
.text:0000000000000167		       mov     qword ptr [rbx+18h], 0
.text:000000000000016F		       jnz     short loc_136
.text:0000000000000171
.text:0000000000000171 loc_171:				       ; CODE XREF: int_list_clean+14j
.text:0000000000000171		       add     rsp, 8
.text:0000000000000175		       pop     rbx
.text:0000000000000176		       pop     rbp
.text:0000000000000177		       retn
.text:0000000000000177 int_list_clean  endp
.text:0000000000000177
.text:0000000000000177 ; ---------------------------------------------------------------------------
.text:0000000000000178		       align 20h
.text:0000000000000180
.text:0000000000000180 ; =============== S U B R O U T I N E =======================================
.text:0000000000000180
.text:0000000000000180 ; Attributes: bp-based frame fpd=14h
.text:0000000000000180
.text:0000000000000180		       public main
.text:0000000000000180 main	       proc near	       ; DATA XREF: .eh_frame:0000000000000370o
.text:0000000000000180
.text:0000000000000180 var_50	       = byte ptr -50h
.text:0000000000000180 var_14	       = dword ptr -14h
.text:0000000000000180
.text:0000000000000180		       push    r12
.text:0000000000000182		       push    rbp
.text:0000000000000183		       push    rbx
.text:0000000000000184		       sub     rsp, 70h
.text:0000000000000188		       lea     rbx, [rsp+80h+var_50]
.text:000000000000018D		       lea     rbp, [rsp+6Ch]
.text:0000000000000192		       mov     rdi, rbx
.text:0000000000000195		       call    int_list_init
.text:000000000000019A		       mov     rdi, rsp
.text:000000000000019D		       call    int_list_init
.text:00000000000001A2		       mov     [rsp+80h+var_14], 1
.text:00000000000001AA		       nop     word ptr	[rax+rax+00h]
.text:00000000000001B0
.text:00000000000001B0 loc_1B0:				       ; CODE XREF: main+49j
.text:00000000000001B0		       mov     rsi, rbp
.text:00000000000001B3		       mov     rdi, rbx
.text:00000000000001B6		       call    int_list_add_head
.text:00000000000001BB		       mov     eax, [rsp+80h+var_14]
.text:00000000000001BF		       add     eax, 1
.text:00000000000001C2		       cmp     eax, 0Ah
.text:00000000000001C5		       mov     [rsp+80h+var_14], eax
.text:00000000000001C9		       jle     short loc_1B0
.text:00000000000001CB		       mov     rdi, rbx
.text:00000000000001CE		       mov     esi, offset printint
.text:00000000000001D3		       call    int_list_mapcar
.text:00000000000001D8		       mov     edx, offset sum
.text:00000000000001DD		       mov     rsi, rbp
.text:00000000000001E0		       mov     rdi, rbx
.text:00000000000001E3		       mov     [rsp+80h+var_14], 0
.text:00000000000001EB		       call    int_list_reduce
.text:00000000000001F0		       mov     esi, [rsp+80h+var_14]
.text:00000000000001F4		       mov     edi, offset format ; "Sum = %d\n"
.text:00000000000001F9		       xor     eax, eax
.text:00000000000001FB		       call    printf
.text:0000000000000200		       mov     edi, offset s   ; "Reverse by reduce:"
.text:0000000000000205		       call    puts
.text:000000000000020A		       mov     edx, offset revc
.text:000000000000020F		       mov     rsi, rsp
.text:0000000000000212		       mov     rdi, rbx
.text:0000000000000215		       call    int_list_reduce
.text:000000000000021A		       mov     esi, offset printint
.text:000000000000021F		       mov     rdi, rsp
.text:0000000000000222		       call    int_list_mapcar
.text:0000000000000227		       mov     rdi, rbx
.text:000000000000022A		       call    int_list_clean
.text:000000000000022F		       mov     rdi, rsp
.text:0000000000000232		       call    int_list_clean
.text:0000000000000237		       add     rsp, 70h
.text:000000000000023B		       xor     eax, eax
.text:000000000000023D		       pop     rbx
.text:000000000000023E		       pop     rbp
.text:000000000000023F		       pop     r12
.text:0000000000000241		       retn
.text:0000000000000241 main	       endp
.text:0000000000000241
.text:0000000000000241 _text	       ends
.text:0000000000000241
.data:0000000000000244 ; ===========================================================================
.data:0000000000000244
.data:0000000000000244 ; Segment type: Zero-length
.data:0000000000000244 ; Segment permissions: Read/Write
.data:0000000000000244 _data	       segment dword public 'DATA' use64
.data:0000000000000244 _data	       ends
.data:0000000000000244
.bss:0000000000000248 ;	===========================================================================
.bss:0000000000000248
.bss:0000000000000248 ;	Segment	type: Zero-length
.bss:0000000000000248 ;	Segment	permissions: Read/Write
.bss:0000000000000248 _bss	      segment dword public 'BSS' use64
.bss:0000000000000248 _bss	      ends
.bss:0000000000000248
.rodata.str1.1:0000000000000249	; ===========================================================================
.rodata.str1.1:0000000000000249
.rodata.str1.1:0000000000000249	; Segment type:	Pure data
.rodata.str1.1:0000000000000249	; Segment permissions: Read
.rodata.str1.1:0000000000000249	_rodata_str1_1	segment	byte public 'CONST' use64
.rodata.str1.1:0000000000000249			assume cs:_rodata_str1_1
.rodata.str1.1:0000000000000249			;org 249h
.rodata.str1.1:0000000000000249	byte_249	db 25h,	64h, 0Ah, 0	; DATA XREF: printint+4o
.rodata.str1.1:000000000000024D	; char format[]
.rodata.str1.1:000000000000024D	format		db 'Sum = %d',0Ah,0     ; DATA XREF: main+74o
.rodata.str1.1:0000000000000257	; char s[]
.rodata.str1.1:0000000000000257	s		db 'Reverse by reduce:',0
.rodata.str1.1:0000000000000257						; DATA XREF: main+80o
.rodata.str1.1:0000000000000257	_rodata_str1_1	ends
.rodata.str1.1:0000000000000257
.eh_frame:0000000000000270 ; ===========================================================================
.eh_frame:0000000000000270
.eh_frame:0000000000000270 ; Segment type: Pure	data
.eh_frame:0000000000000270 ; Segment permissions: Read
.eh_frame:0000000000000270 ; Segment alignment 'qword' can not be represented in assembly
.eh_frame:0000000000000270 _eh_frame	   segment para	public 'CONST' use64
.eh_frame:0000000000000270		   assume cs:_eh_frame
.eh_frame:0000000000000270		   ;org	270h
.eh_frame:0000000000000270		   dq 14h, 110780100527A01h, 19008070C03h, 1C00000014h
.eh_frame:0000000000000290		   dd offset int_list_init
.eh_frame:0000000000000294		   dd offset int_list_mapcar
.eh_frame:0000000000000298		   align 20h
.eh_frame:00000000000002A0		   dq 340000001Ch
.eh_frame:00000000000002A8		   dd offset int_list_mapcar
.eh_frame:00000000000002AC		   dd offset loc_27
.eh_frame:00000000000002B0		   dq 0E440286100E4100h, 383200E4418h, 540000001Ch
.eh_frame:00000000000002C8		   dd offset int_list_reduce
.eh_frame:00000000000002CC		   dd offset loc_27+2
.eh_frame:00000000000002D0		   dq 0E44028C100E4200h, 483200E44038618h, 7400000014h
.eh_frame:00000000000002E8		   dd offset sum
.eh_frame:00000000000002EC		   dd 5
.eh_frame:00000000000002F0		   dq 0
.eh_frame:00000000000002F8		   dq 8C00000014h
.eh_frame:0000000000000300		   dd offset printint
.eh_frame:0000000000000304		   dd 0Eh
.eh_frame:0000000000000308		   align 10h
.eh_frame:0000000000000310		   dq 0A40000001Ch
.eh_frame:0000000000000318		   dd offset int_list_add_head
.eh_frame:000000000000031C		   dd offset unk_5E
.eh_frame:0000000000000320		   dq 0E47038302864A00h, 20h, 0C400000014h
.eh_frame:0000000000000338		   dd offset revc
.eh_frame:000000000000033C		   dd 2
.eh_frame:0000000000000340		   dq 0
.eh_frame:0000000000000348		   dq 0DC0000001Ch
.eh_frame:0000000000000350		   dd offset int_list_clean
.eh_frame:0000000000000354		   dd offset byte_57+1
.eh_frame:0000000000000358		   dq 83180E41100E4100h, 200E47028603h,	0FC00000024h
.eh_frame:0000000000000370		   dd offset main
.eh_frame:0000000000000374		   dd offset loc_C1+1
.eh_frame:0000000000000378		   dq 41180E41100E4200h, 48301900E44200Eh, 28C0386h
.eh_frame:0000000000000378 _eh_frame	   ends
.eh_frame:0000000000000378
extern:0000000000000390	; ===========================================================================
extern:0000000000000390
extern:0000000000000390	; Segment type:	Externs
extern:0000000000000390	; extern
extern:0000000000000390	; int printf(const char	*format, ...)
extern:0000000000000390			extrn printf:near	; CODE XREF: printint+9j
extern:0000000000000390						; main+7Bp
extern:0000000000000394	; void *malloc(size_t size)
extern:0000000000000394			extrn malloc:near	; CODE XREF: int_list_add_head+19p
extern:0000000000000398	; void free(void *ptr)
extern:0000000000000398			extrn free:near		; CODE XREF: int_list_clean+37p
extern:000000000000039C	; int puts(const char *s)
extern:000000000000039C			extrn puts:near		; CODE XREF: main+85p
extern:000000000000039C
extern:000000000000039C
extern:000000000000039C			end
