.text:0000000000000000 ;
.text:0000000000000000 ; +-------------------------------------------------------------------------+
.text:0000000000000000 ; |   This file has been	generated by The Interactive Disassembler (IDA)	   |
.text:0000000000000000 ; |	  Copyright (c)	2009 by	Hex-Rays, <support@hex-rays.com>	   |
.text:0000000000000000 ; |			License	info: 48-313D-7374-F1			   |
.text:0000000000000000 ; |   Aditya Thakur, University of Wisconsin/Computer Sciences Department   |
.text:0000000000000000 ; +-------------------------------------------------------------------------+
.text:0000000000000000 ;
.text:0000000000000000 ; Input MD5   : 190DA38A05D4261C1A99715D070E831B
.text:0000000000000000
.text:0000000000000000 ; File Name   : C:\aditya\work\waldo\tests\abl-1.2\test\test2.o
.text:0000000000000000 ; Format	     : ELF (Relocatable)
.text:0000000000000000 ;
.text:0000000000000000 ; Source	File : 'test2.c'
.text:0000000000000000
.text:0000000000000000		       .686p
.text:0000000000000000		       .mmx
.text:0000000000000000		       .model flat
.text:0000000000000000 .intel_syntax noprefix
.text:0000000000000000
.text:0000000000000000 ; ===========================================================================
.text:0000000000000000
.text:0000000000000000 ; Segment type: Pure code
.text:0000000000000000 ; Segment permissions: Read/Execute
.text:0000000000000000 _text	       segment para public 'CODE' use64
.text:0000000000000000		       assume cs:_text
.text:0000000000000000		       assume es:nothing, ss:nothing, ds:_text,	fs:nothing, gs:nothing
.text:0000000000000000
.text:0000000000000000 ; =============== S U B R O U T I N E =======================================
.text:0000000000000000
.text:0000000000000000
.text:0000000000000000 int_list_mapcar proc near	       ; CODE XREF: main+BAp
.text:0000000000000000					       ; main+1C5p
.text:0000000000000000					       ; DATA XREF: ...
.text:0000000000000000		       push    rbp
.text:0000000000000001		       mov     rbp, rsi
.text:0000000000000004		       push    rbx
.text:0000000000000005		       sub     rsp, 8
.text:0000000000000009		       mov     rbx, [rdi+8]
.text:000000000000000D		       test    rbx, rbx
.text:0000000000000010		       jz      short loc_20
.text:0000000000000012
.text:0000000000000012 loc_12:				       ; CODE XREF: int_list_mapcar+1Ej
.text:0000000000000012		       mov     rdi, rbx
.text:0000000000000015		       call    rbp
.text:0000000000000017		       mov     rbx, [rbx+8]
.text:000000000000001B		       test    rbx, rbx
.text:000000000000001E		       jnz     short loc_12
.text:0000000000000020
.text:0000000000000020 loc_20:				       ; CODE XREF: int_list_mapcar+10j
.text:0000000000000020		       add     rsp, 8
.text:0000000000000024		       pop     rbx
.text:0000000000000025		       pop     rbp
.text:0000000000000026		       retn
.text:0000000000000026 int_list_mapcar endp
.text:0000000000000026
.text:0000000000000026 ; ---------------------------------------------------------------------------
.text:0000000000000027 unk_27	       db  66h ; f	       ; DATA XREF: .eh_frame:000000000000035Co
.text:0000000000000028		       db  0Fh
.text:0000000000000029		       db  1Fh
.text:000000000000002A		       db  84h ; „
.text:000000000000002B		       db    0
.text:000000000000002C		       db    0
.text:000000000000002D		       db    0
.text:000000000000002E		       db    0
.text:000000000000002F		       db    0
.text:0000000000000030
.text:0000000000000030 ; =============== S U B R O U T I N E =======================================
.text:0000000000000030
.text:0000000000000030
.text:0000000000000030		       public isodd
.text:0000000000000030 isodd	       proc near	       ; CODE XREF: main+118p
.text:0000000000000030					       ; main+170p
.text:0000000000000030					       ; DATA XREF: ...
.text:0000000000000030		       mov     eax, [rdi]
.text:0000000000000032		       mov     edx, eax
.text:0000000000000034		       shr     edx, 1Fh
.text:0000000000000037		       add     eax, edx
.text:0000000000000039		       and     eax, 1
.text:000000000000003C		       sub     eax, edx
.text:000000000000003E		       sub     eax, 1
.text:0000000000000041		       setz    al
.text:0000000000000044		       movzx   eax, al
.text:0000000000000047		       retn
.text:0000000000000047 isodd	       endp
.text:0000000000000047
.text:0000000000000047 ; ---------------------------------------------------------------------------
.text:0000000000000048		       align 10h
.text:0000000000000050
.text:0000000000000050 ; =============== S U B R O U T I N E =======================================
.text:0000000000000050
.text:0000000000000050
.text:0000000000000050		       public isdiv4
.text:0000000000000050 isdiv4	       proc near	       ; CODE XREF: main+E1p
.text:0000000000000050					       ; DATA XREF: .eh_frame:0000000000000390o
.text:0000000000000050		       xor     eax, eax
.text:0000000000000052		       test    byte ptr	[rdi], 3
.text:0000000000000055		       setz    al
.text:0000000000000058		       retn
.text:0000000000000058 isdiv4	       endp
.text:0000000000000058
.text:0000000000000058 ; ---------------------------------------------------------------------------
.text:0000000000000059		       db 0Fh, 1Fh, 80h, 0
.text:000000000000005D		       db    0		       ; DATA XREF: .eh_frame:00000000000003C4o
.text:000000000000005E		       db    0
.text:000000000000005F		       db    0
.text:0000000000000060
.text:0000000000000060 ; =============== S U B R O U T I N E =======================================
.text:0000000000000060
.text:0000000000000060
.text:0000000000000060		       public printint
.text:0000000000000060 printint	       proc near	       ; DATA XREF: main+B2o
.text:0000000000000060					       ; main:loc_283o	...
.text:0000000000000060		       mov     esi, [rdi]
.text:0000000000000062		       xor     eax, eax
.text:0000000000000064		       mov     edi, offset byte_2F1
.text:0000000000000069		       jmp     printf
.text:0000000000000069 printint	       endp
.text:0000000000000069
.text:0000000000000069 ; ---------------------------------------------------------------------------
.text:000000000000006E		       align 10h
.text:0000000000000070
.text:0000000000000070 ; =============== S U B R O U T I N E =======================================
.text:0000000000000070
.text:0000000000000070
.text:0000000000000070 int_list_del_head proc near	       ; CODE XREF: main+1D4p
.text:0000000000000070					       ; main+1F3p
.text:0000000000000070					       ; DATA XREF: ...
.text:0000000000000070
.text:0000000000000070 var_10	       = qword ptr -10h
.text:0000000000000070 var_8	       = qword ptr -8
.text:0000000000000070
.text:0000000000000070		       mov     [rsp+var_10], rbx
.text:0000000000000075		       mov     [rsp+var_8], rbp
.text:000000000000007A		       sub     rsp, 18h
.text:000000000000007E		       cmp     qword ptr [rdi],	0
.text:0000000000000082		       mov     rbx, rdi
.text:0000000000000085		       jz      short loc_B4
.text:0000000000000087		       mov     rbp, [rdi+8]
.text:000000000000008B		       sub     qword ptr [rdi],	1
.text:000000000000008F		       mov     rax, [rbp+8]
.text:0000000000000093		       mov     [rdi+8],	rax
.text:0000000000000097		       mov     rax, [rdi+28h]
.text:000000000000009B		       test    rax, rax
.text:000000000000009E		       jz      short loc_A5
.text:00000000000000A0		       mov     rdi, rbp
.text:00000000000000A3		       call    rax
.text:00000000000000A5
.text:00000000000000A5 loc_A5:				       ; CODE XREF: int_list_del_head+2Ej
.text:00000000000000A5		       mov     rdi, rbp	       ; ptr
.text:00000000000000A8		       call    free
.text:00000000000000AD		       cmp     qword ptr [rbx+8], 0
.text:00000000000000B2		       jz      short loc_C3
.text:00000000000000B4
.text:00000000000000B4 loc_B4:				       ; CODE XREF: int_list_del_head+15j
.text:00000000000000B4					       ; int_list_del_head+5Bj
.text:00000000000000B4		       mov     rbx, [rsp+18h+var_10]
.text:00000000000000B9		       mov     rbp, [rsp+18h+var_8]
.text:00000000000000BE		       add     rsp, 18h
.text:00000000000000C2		       retn
.text:00000000000000C3 ; ---------------------------------------------------------------------------
.text:00000000000000C3
.text:00000000000000C3 loc_C3:				       ; CODE XREF: int_list_del_head+42j
.text:00000000000000C3		       mov     qword ptr [rbx+18h], 0
.text:00000000000000CB		       jmp     short loc_B4
.text:00000000000000CB int_list_del_head endp
.text:00000000000000CB
.text:00000000000000CB ; ---------------------------------------------------------------------------
.text:00000000000000CD		       align 10h
.text:00000000000000D0
.text:00000000000000D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000000D0
.text:00000000000000D0
.text:00000000000000D0		       public main
.text:00000000000000D0 main	       proc near	       ; DATA XREF: .eh_frame:00000000000003D8o
.text:00000000000000D0
.text:00000000000000D0 var_68	       = qword ptr -68h
.text:00000000000000D0 var_60	       = qword ptr -60h
.text:00000000000000D0 var_58	       = qword ptr -58h
.text:00000000000000D0 var_50	       = qword ptr -50h
.text:00000000000000D0 var_48	       = qword ptr -48h
.text:00000000000000D0 var_40	       = qword ptr -40h
.text:00000000000000D0 var_2C	       = dword ptr -2Ch
.text:00000000000000D0
.text:00000000000000D0		       push    r13
.text:00000000000000D2		       push    r12
.text:00000000000000D4		       push    rbp
.text:00000000000000D5		       push    rbx
.text:00000000000000D6		       sub     rsp, 48h
.text:00000000000000DA		       mov     [rsp+68h+var_68], 0
.text:00000000000000E2		       mov     [rsp+68h+var_60], 0
.text:00000000000000EB		       mov     [rsp+68h+var_58], 0
.text:00000000000000F4		       mov     [rsp+68h+var_50], 0
.text:00000000000000FD		       mov     [rsp+68h+var_48], 0
.text:0000000000000106		       mov     [rsp+68h+var_40], 0
.text:000000000000010F		       mov     [rsp+68h+var_2C], 0
.text:0000000000000117		       jmp     short loc_130
.text:0000000000000117 ; ---------------------------------------------------------------------------
.text:0000000000000119		       align 20h
.text:0000000000000120
.text:0000000000000120 loc_120:				       ; CODE XREF: main+70j
.text:0000000000000120					       ; main+91j
.text:0000000000000120		       mov     eax, [rsp+68h+var_2C]
.text:0000000000000124		       add     eax, 1
.text:0000000000000127		       cmp     eax, 0Bh
.text:000000000000012A		       mov     [rsp+68h+var_2C], eax
.text:000000000000012E		       jg      short loc_178
.text:0000000000000130
.text:0000000000000130 loc_130:				       ; CODE XREF: main+47j
.text:0000000000000130					       ; main+A6j
.text:0000000000000130		       mov     edi, 10h	       ; size
.text:0000000000000135		       call    malloc
.text:000000000000013A		       test    rax, rax
.text:000000000000013D		       mov     rdx, rax
.text:0000000000000140		       jz      short loc_120
.text:0000000000000142		       mov     eax, [rsp+68h+var_2C]
.text:0000000000000146		       mov     [rdx], eax
.text:0000000000000148		       mov     rax, [rsp+68h+var_60]
.text:000000000000014D		       add     [rsp+68h+var_68], 1
.text:0000000000000152		       mov     [rdx+8],	rax
.text:0000000000000156		       cmp     [rsp+68h+var_50], 0
.text:000000000000015C		       mov     [rsp+68h+var_60], rdx
.text:0000000000000161		       jnz     short loc_120
.text:0000000000000163		       mov     eax, [rsp+68h+var_2C]
.text:0000000000000167		       mov     [rsp+68h+var_50], rdx
.text:000000000000016C		       add     eax, 1
.text:000000000000016F		       cmp     eax, 0Bh
.text:0000000000000172		       mov     [rsp+68h+var_2C], eax
.text:0000000000000176		       jle     short loc_130
.text:0000000000000178
.text:0000000000000178 loc_178:				       ; CODE XREF: main+5Ej
.text:0000000000000178		       mov     edi, offset s   ; "The list is:"
.text:000000000000017D		       call    puts
.text:0000000000000182		       mov     esi, offset printint
.text:0000000000000187		       mov     rdi, rsp
.text:000000000000018A		       call    int_list_mapcar
.text:000000000000018F		       mov     rbx, [rsp+68h+var_60]
.text:0000000000000194		       test    rbx, rbx
.text:0000000000000197		       jnz     short loc_1A9
.text:0000000000000199		       jmp     short loc_1C1
.text:0000000000000199 ; ---------------------------------------------------------------------------
.text:000000000000019B		       align 20h
.text:00000000000001A0
.text:00000000000001A0 loc_1A0:				       ; CODE XREF: main+E8j
.text:00000000000001A0		       mov     rbx, [rbx+8]
.text:00000000000001A4		       test    rbx, rbx
.text:00000000000001A7		       jz      short loc_1C1
.text:00000000000001A9
.text:00000000000001A9 loc_1A9:				       ; CODE XREF: main+C7j
.text:00000000000001A9		       xor     esi, esi
.text:00000000000001AB		       mov     rdi, rbx
.text:00000000000001AE		       mov     rbp, rbx
.text:00000000000001B1		       call    isdiv4
.text:00000000000001B6		       test    eax, eax
.text:00000000000001B8		       jz      short loc_1A0
.text:00000000000001BA		       mov     [rsp+68h+var_58], rbx
.text:00000000000001BF		       jmp     short loc_1C3
.text:00000000000001C1 ; ---------------------------------------------------------------------------
.text:00000000000001C1
.text:00000000000001C1 loc_1C1:				       ; CODE XREF: main+C9j
.text:00000000000001C1					       ; main+D7j
.text:00000000000001C1		       xor     ebp, ebp
.text:00000000000001C3
.text:00000000000001C3 loc_1C3:				       ; CODE XREF: main+EFj
.text:00000000000001C3		       mov     esi, [rbp+0]
.text:00000000000001C6		       xor     eax, eax
.text:00000000000001C8		       mov     edi, offset format ; "The first element that divides 4 is [%d"...
.text:00000000000001CD		       call    printf
.text:00000000000001D2		       mov     rbp, [rsp+68h+var_60]
.text:00000000000001D7		       test    rbp, rbp
.text:00000000000001DA		       mov     r12, rbp
.text:00000000000001DD		       jz      loc_2D9
.text:00000000000001E3
.text:00000000000001E3 loc_1E3:				       ; CODE XREF: main+12Cj
.text:00000000000001E3					       ; main+203j
.text:00000000000001E3		       xor     esi, esi
.text:00000000000001E5		       mov     rdi, rbp
.text:00000000000001E8		       call    isodd
.text:00000000000001ED		       test    eax, eax
.text:00000000000001EF		       jnz     loc_2C0
.text:00000000000001F5		       mov     rbx, [rbp+8]
.text:00000000000001F9		       cmp     rbp, rbx
.text:00000000000001FC		       jz      short loc_1E3
.text:00000000000001FE		       test    rbx, rbx
.text:0000000000000201		       jnz     short loc_23B
.text:0000000000000203		       jmp     short loc_25C
.text:0000000000000205 ; ---------------------------------------------------------------------------
.text:0000000000000205
.text:0000000000000205 loc_205:				       ; CODE XREF: main+177j
.text:0000000000000205		       mov     rbp, [rbx+8]
.text:0000000000000209		       sub     [rsp+68h+var_68], 1
.text:000000000000020E		       test    rbp, rbp
.text:0000000000000211		       mov     [r12+8],	rbp
.text:0000000000000216		       jz      loc_2E2
.text:000000000000021C
.text:000000000000021C loc_21C:				       ; CODE XREF: main+217j
.text:000000000000021C					       ; DATA XREF: .eh_frame:00000000000003DCo
.text:000000000000021C		       mov     rax, [rsp+68h+var_40]
.text:0000000000000221		       test    rax, rax
.text:0000000000000224		       jz      short loc_22B
.text:0000000000000226		       mov     rdi, rbx
.text:0000000000000229		       call    rax
.text:000000000000022B
.text:000000000000022B loc_22B:				       ; CODE XREF: main+154j
.text:000000000000022B		       mov     rdi, rbx	       ; ptr
.text:000000000000022E		       mov     rbx, rbp
.text:0000000000000231		       call    free
.text:0000000000000236		       test    rbx, rbx
.text:0000000000000239		       jz      short loc_257
.text:000000000000023B
.text:000000000000023B loc_23B:				       ; CODE XREF: main+131j
.text:000000000000023B					       ; main+185j
.text:000000000000023B		       xor     esi, esi
.text:000000000000023D		       mov     rdi, rbx
.text:0000000000000240		       call    isodd
.text:0000000000000245		       test    eax, eax
.text:0000000000000247		       jnz     short loc_205
.text:0000000000000249		       mov     rbx, [rbx+8]
.text:000000000000024D		       mov     r12, [r12+8]
.text:0000000000000252		       test    rbx, rbx
.text:0000000000000255		       jnz     short loc_23B
.text:0000000000000257
.text:0000000000000257 loc_257:				       ; CODE XREF: main+169j
.text:0000000000000257		       mov     rbp, [rsp+68h+var_60]
.text:000000000000025C
.text:000000000000025C loc_25C:				       ; CODE XREF: main+133j
.text:000000000000025C		       test    rbp, rbp
.text:000000000000025F		       mov     rax, rbp
.text:0000000000000262		       mov     [rsp+68h+var_50], rbp
.text:0000000000000267		       jz      short loc_283
.text:0000000000000269		       xor     ecx, ecx
.text:000000000000026B		       jmp     short loc_276
.text:000000000000026B ; ---------------------------------------------------------------------------
.text:000000000000026D		       align 10h
.text:0000000000000270
.text:0000000000000270 loc_270:				       ; CODE XREF: main+1B1j
.text:0000000000000270		       mov     rcx, rax
.text:0000000000000273		       mov     rax, rdx
.text:0000000000000276
.text:0000000000000276 loc_276:				       ; CODE XREF: main+19Bj
.text:0000000000000276		       mov     rdx, [rax+8]
.text:000000000000027A		       mov     [rax+8],	rcx
.text:000000000000027E		       test    rdx, rdx
.text:0000000000000281		       jnz     short loc_270
.text:0000000000000283
.text:0000000000000283 loc_283:				       ; CODE XREF: main+197j
.text:0000000000000283					       ; main+210j
.text:0000000000000283		       mov     esi, offset printint
.text:0000000000000288		       mov     rdi, rsp
.text:000000000000028B		       mov     [rsp+68h+var_60], rax
.text:0000000000000290		       mov     [rsp+68h+var_58], rax
.text:0000000000000295		       call    int_list_mapcar
.text:000000000000029A		       cmp     [rsp+68h+var_68], 0
.text:000000000000029F		       jz      short loc_2B2
.text:00000000000002A1
.text:00000000000002A1 loc_2A1:				       ; CODE XREF: main+1E0j
.text:00000000000002A1		       mov     rdi, rsp
.text:00000000000002A4		       call    int_list_del_head
.text:00000000000002A9		       cmp     [rsp+68h+var_68], 0
.text:00000000000002AE		       db      66h
.text:00000000000002AE		       nop
.text:00000000000002B0		       jnz     short loc_2A1
.text:00000000000002B2
.text:00000000000002B2 loc_2B2:				       ; CODE XREF: main+1CFj
.text:00000000000002B2		       add     rsp, 48h
.text:00000000000002B6		       xor     eax, eax
.text:00000000000002B8		       pop     rbx
.text:00000000000002B9		       pop     rbp
.text:00000000000002BA		       pop     r12
.text:00000000000002BC		       pop     r13
.text:00000000000002BE		       retn
.text:00000000000002BE ; ---------------------------------------------------------------------------
.text:00000000000002BF		       align 20h
.text:00000000000002C0
.text:00000000000002C0 loc_2C0:				       ; CODE XREF: main+11Fj
.text:00000000000002C0		       mov     rdi, rsp
.text:00000000000002C3		       call    int_list_del_head
.text:00000000000002C8		       mov     rbp, [rsp+68h+var_60]
.text:00000000000002CD		       test    rbp, rbp
.text:00000000000002D0		       mov     r12, rbp
.text:00000000000002D3		       jnz     loc_1E3
.text:00000000000002D9
.text:00000000000002D9 loc_2D9:				       ; CODE XREF: main+10Dj
.text:00000000000002D9		       xor     eax, eax
.text:00000000000002DB		       mov     [rsp+68h+var_50], rbp
.text:00000000000002E0		       jmp     short loc_283
.text:00000000000002E2 ; ---------------------------------------------------------------------------
.text:00000000000002E2
.text:00000000000002E2 loc_2E2:				       ; CODE XREF: main+146j
.text:00000000000002E2		       mov     [rsp+68h+var_50], r12
.text:00000000000002E7		       jmp     loc_21C
.text:00000000000002E7 main	       endp
.text:00000000000002E7
.text:00000000000002E7 _text	       ends
.text:00000000000002E7
.data:00000000000002EC ; ===========================================================================
.data:00000000000002EC
.data:00000000000002EC ; Segment type: Zero-length
.data:00000000000002EC ; Segment permissions: Read/Write
.data:00000000000002EC _data	       segment dword public 'DATA' use64
.data:00000000000002EC _data	       ends
.data:00000000000002EC
.bss:00000000000002F0 ;	===========================================================================
.bss:00000000000002F0
.bss:00000000000002F0 ;	Segment	type: Zero-length
.bss:00000000000002F0 ;	Segment	permissions: Read/Write
.bss:00000000000002F0 _bss	      segment dword public 'BSS' use64
.bss:00000000000002F0 _bss	      ends
.bss:00000000000002F0
.rodata.str1.1:00000000000002F1	; ===========================================================================
.rodata.str1.1:00000000000002F1
.rodata.str1.1:00000000000002F1	; Segment type:	Pure data
.rodata.str1.1:00000000000002F1	; Segment permissions: Read
.rodata.str1.1:00000000000002F1	_rodata_str1_1	segment	byte public 'CONST' use64
.rodata.str1.1:00000000000002F1			assume cs:_rodata_str1_1
.rodata.str1.1:00000000000002F1			;org 2F1h
.rodata.str1.1:00000000000002F1	byte_2F1	db 25h,	64h, 0Ah, 0	; DATA XREF: printint+4o
.rodata.str1.1:00000000000002F5	; char s[]
.rodata.str1.1:00000000000002F5	s		db 'The list is:',0     ; DATA XREF: main:loc_178o
.rodata.str1.1:00000000000002F5	_rodata_str1_1	ends
.rodata.str1.1:00000000000002F5
.rodata.str1.8:0000000000000308	; ===========================================================================
.rodata.str1.8:0000000000000308
.rodata.str1.8:0000000000000308	; Segment type:	Pure data
.rodata.str1.8:0000000000000308	; Segment permissions: Read
.rodata.str1.8:0000000000000308	; Segment alignment 'qword' can not be represented in assembly
.rodata.str1.8:0000000000000308	_rodata_str1_8	segment	para public 'CONST' use64
.rodata.str1.8:0000000000000308			assume cs:_rodata_str1_8
.rodata.str1.8:0000000000000308			;org 308h
.rodata.str1.8:0000000000000308	; char format[]
.rodata.str1.8:0000000000000308	format		db 'The first element that divides 4 is [%d]',0Ah,0
.rodata.str1.8:0000000000000308						; DATA XREF: main+F8o
.rodata.str1.8:0000000000000308	_rodata_str1_8	ends
.rodata.str1.8:0000000000000308
.eh_frame:0000000000000338 ; ===========================================================================
.eh_frame:0000000000000338
.eh_frame:0000000000000338 ; Segment type: Pure	data
.eh_frame:0000000000000338 ; Segment permissions: Read
.eh_frame:0000000000000338 ; Segment alignment 'qword' can not be represented in assembly
.eh_frame:0000000000000338 _eh_frame	   segment para	public 'CONST' use64
.eh_frame:0000000000000338		   assume cs:_eh_frame
.eh_frame:0000000000000338		   ;org	338h
.eh_frame:0000000000000338		   dq 14h, 110780100527A01h, 19008070C03h, 1C0000001Ch
.eh_frame:0000000000000358		   dd offset int_list_mapcar
.eh_frame:000000000000035C		   dd offset unk_27
.eh_frame:0000000000000360		   dq 0E440286100E4100h, 383200E4418h, 3C00000014h
.eh_frame:0000000000000378		   dd offset isodd
.eh_frame:000000000000037C		   dd 18h
.eh_frame:0000000000000380		   dq 0
.eh_frame:0000000000000388		   dq 5400000014h
.eh_frame:0000000000000390		   dd offset isdiv4
.eh_frame:0000000000000394		   dd 9
.eh_frame:0000000000000398		   align 20h
.eh_frame:00000000000003A0		   dq 6C00000014h
.eh_frame:00000000000003A8		   dd offset printint
.eh_frame:00000000000003AC		   dd 0Eh
.eh_frame:00000000000003B0		   dq 0
.eh_frame:00000000000003B8		   dq 8400000014h
.eh_frame:00000000000003C0		   dd offset int_list_del_head
.eh_frame:00000000000003C4		   dd offset unk_5D
.eh_frame:00000000000003C8		   dq 3830286200E4E00h,	9C00000024h
.eh_frame:00000000000003D8		   dd offset main
.eh_frame:00000000000003DC		   dd offset loc_21C
.eh_frame:00000000000003E0		   dq 41180E42100E4200h, 700E44280E41200Eh, 28D038C04860583h
.eh_frame:00000000000003E0 _eh_frame	   ends
.eh_frame:00000000000003E0
extern:00000000000003F8	; ===========================================================================
extern:00000000000003F8
extern:00000000000003F8	; Segment type:	Externs
extern:00000000000003F8	; extern
extern:00000000000003F8	; int printf(const char	*format, ...)
extern:00000000000003F8			extrn printf:near	; CODE XREF: printint+9j
extern:00000000000003F8						; main+FDp
extern:00000000000003FC	; void free(void *ptr)
extern:00000000000003FC			extrn free:near		; CODE XREF: int_list_del_head+38p
extern:00000000000003FC						; main+161p
extern:0000000000000400	; void *malloc(size_t size)
extern:0000000000000400			extrn malloc:near	; CODE XREF: main+65p
extern:0000000000000404	; int puts(const char *s)
extern:0000000000000404			extrn puts:near		; CODE XREF: main+ADp
extern:0000000000000404
extern:0000000000000404
extern:0000000000000404			end
