.text:0000000000000000 ;
.text:0000000000000000 ; +-------------------------------------------------------------------------+
.text:0000000000000000 ; |   This file has been	generated by The Interactive Disassembler (IDA)	   |
.text:0000000000000000 ; |	  Copyright (c)	2009 by	Hex-Rays, <support@hex-rays.com>	   |
.text:0000000000000000 ; |			License	info: 48-313D-7374-F1			   |
.text:0000000000000000 ; |   Aditya Thakur, University of Wisconsin/Computer Sciences Department   |
.text:0000000000000000 ; +-------------------------------------------------------------------------+
.text:0000000000000000 ;
.text:0000000000000000 ; Input MD5   : 253B2A7B9926177B922037625CADF492
.text:0000000000000000
.text:0000000000000000 ; File Name   : C:\aditya\work\waldo\tests\abl-1.2\test\test10.o
.text:0000000000000000 ; Format	     : ELF (Relocatable)
.text:0000000000000000 ;
.text:0000000000000000 ; Source	File : 'test10.c'
.text:0000000000000000
.text:0000000000000000		       .686p
.text:0000000000000000		       .mmx
.text:0000000000000000		       .model flat
.text:0000000000000000 .intel_syntax noprefix
.text:0000000000000000
.text:0000000000000000 ; ===========================================================================
.text:0000000000000000
.text:0000000000000000 ; Segment type: Pure code
.text:0000000000000000 ; Segment permissions: Read/Execute
.text:0000000000000000 _text	       segment para public 'CODE' use64
.text:0000000000000000		       assume cs:_text
.text:0000000000000000		       assume es:nothing, ss:nothing, ds:_text,	fs:nothing, gs:nothing
.text:0000000000000000
.text:0000000000000000 ; =============== S U B R O U T I N E =======================================
.text:0000000000000000
.text:0000000000000000
.text:0000000000000000 str_list_init   proc near	       ; CODE XREF: main+25p
.text:0000000000000000					       ; main+45p ...
.text:0000000000000000		       mov     qword ptr [rdi],	0
.text:0000000000000007		       mov     qword ptr [rdi+8], 0
.text:000000000000000F		       mov     qword ptr [rdi+10h], 0
.text:0000000000000017		       mov     qword ptr [rdi+18h], 0
.text:000000000000001F		       mov     qword ptr [rdi+20h], 0
.text:0000000000000027
.text:0000000000000027 loc_27:				       ; DATA XREF: .eh_frame:0000000000000884o
.text:0000000000000027		       mov     qword ptr [rdi+28h], 0
.text:000000000000002F		       retn
.text:000000000000002F str_list_init   endp
.text:000000000000002F
.text:0000000000000030
.text:0000000000000030 ; =============== S U B R O U T I N E =======================================
.text:0000000000000030
.text:0000000000000030
.text:0000000000000030 str_list_mapcar proc near	       ; CODE XREF: main+BFp
.text:0000000000000030					       ; main+135p ...
.text:0000000000000030		       push    rbp
.text:0000000000000031		       mov     rbp, rsi
.text:0000000000000034		       push    rbx
.text:0000000000000035		       sub     rsp, 8
.text:0000000000000039		       mov     rbx, [rdi+8]
.text:000000000000003D		       test    rbx, rbx
.text:0000000000000040		       jz      short loc_50
.text:0000000000000042
.text:0000000000000042 loc_42:				       ; CODE XREF: str_list_mapcar+1Ej
.text:0000000000000042		       mov     rdi, rbx
.text:0000000000000045		       call    rbp
.text:0000000000000047		       mov     rbx, [rbx+8]
.text:000000000000004B		       test    rbx, rbx
.text:000000000000004E		       jnz     short loc_42
.text:0000000000000050
.text:0000000000000050 loc_50:				       ; CODE XREF: str_list_mapcar+10j
.text:0000000000000050					       ; DATA XREF: .eh_frame:000000000000097Co
.text:0000000000000050		       add     rsp, 8
.text:0000000000000054		       pop     rbx
.text:0000000000000055		       pop     rbp
.text:0000000000000056		       retn
.text:0000000000000056 str_list_mapcar endp
.text:0000000000000056
.text:0000000000000056 ; ---------------------------------------------------------------------------
.text:0000000000000057		       db 66h
.text:0000000000000058		       db  0Fh		       ; DATA XREF: .eh_frame:000000000000090Co
.text:0000000000000059		       db  1Fh
.text:000000000000005A		       db  84h ; „
.text:000000000000005B		       db    0
.text:000000000000005C		       db    0
.text:000000000000005D		       db    0
.text:000000000000005E		       db    0
.text:000000000000005F		       db    0
.text:0000000000000060
.text:0000000000000060 ; =============== S U B R O U T I N E =======================================
.text:0000000000000060
.text:0000000000000060
.text:0000000000000060		       public printstr
.text:0000000000000060 printstr	       proc near	       ; DATA XREF: main+B7o
.text:0000000000000060					       ; main+12Do ...
.text:0000000000000060		       mov     rdi, [rdi]
.text:0000000000000063		       jmp     puts
.text:0000000000000063 printstr	       endp
.text:0000000000000063
.text:0000000000000063 ; ---------------------------------------------------------------------------
.text:0000000000000068		       align 10h
.text:0000000000000070
.text:0000000000000070 ; =============== S U B R O U T I N E =======================================
.text:0000000000000070
.text:0000000000000070
.text:0000000000000070 str_list_reproduce proc near	       ; CODE XREF: main+E2p
.text:0000000000000070					       ; main+F4p
.text:0000000000000070					       ; DATA XREF: ...
.text:0000000000000070		       push    r15
.text:0000000000000072		       mov     eax, 7
.text:0000000000000077		       mov     r15, rsi
.text:000000000000007A		       push    r14
.text:000000000000007C		       mov     r14, rdx
.text:000000000000007F		       push    r13
.text:0000000000000081		       push    r12
.text:0000000000000083		       mov     r12, rdi
.text:0000000000000086		       push    rbp
.text:0000000000000087		       push    rbx
.text:0000000000000088		       sub     rsp, 8
.text:000000000000008C		       cmp     rdi, rsi
.text:000000000000008F		       jz      loc_17D
.text:0000000000000095		       test    ecx, ecx
.text:0000000000000097		       jnz     loc_18C
.text:000000000000009D		       mov     rbp, [rsi+8]
.text:00000000000000A1
.text:00000000000000A1 loc_A1:				       ; CODE XREF: str_list_reproduce+120j
.text:00000000000000A1		       test    rbp, rbp
.text:00000000000000A4		       jz      loc_14D
.text:00000000000000AA		       mov     edi, 10h	       ; size
.text:00000000000000AF		       call    malloc
.text:00000000000000B4		       test    r14, r14
.text:00000000000000B7		       mov     rbx, rax
.text:00000000000000BA		       mov     r13, rax
.text:00000000000000BD		       mov     [r12+8],	rax
.text:00000000000000C2		       jz      loc_195
.text:00000000000000C8		       mov     rsi, rbp
.text:00000000000000CB		       mov     rdi, rax
.text:00000000000000CE		       call    r14
.text:00000000000000D1		       test    eax, eax
.text:00000000000000D3		       jnz     loc_17D
.text:00000000000000D9
.text:00000000000000D9 loc_D9:				       ; CODE XREF: str_list_reproduce+12Cj
.text:00000000000000D9		       cmp     qword ptr [rbp+8], 0
.text:00000000000000DE		       mov     qword ptr [r12],	1
.text:00000000000000E6		       jnz     short loc_111
.text:00000000000000E8		       jmp     short loc_13E
.text:00000000000000E8 ; ---------------------------------------------------------------------------
.text:00000000000000EA		       align 10h
.text:00000000000000F0
.text:00000000000000F0 loc_F0:				       ; CODE XREF: str_list_reproduce+B9j
.text:00000000000000F0		       mov     rsi, rbp
.text:00000000000000F3		       mov     rdi, rax
.text:00000000000000F6		       call    r14
.text:00000000000000F9		       test    eax, eax
.text:00000000000000FB
.text:00000000000000FB loc_FB:				       ; DATA XREF: .eh_frame:000000000000092Co
.text:00000000000000FB		       nop     dword ptr [rax+rax+00h]
.text:0000000000000100		       jnz     short loc_17D
.text:0000000000000102		       add     qword ptr [r12],	1
.text:0000000000000107		       cmp     qword ptr [rbp+8], 0
.text:000000000000010C		       jz      short loc_13E
.text:000000000000010E
.text:000000000000010E loc_10E:				       ; CODE XREF: str_list_reproduce+CCj
.text:000000000000010E		       mov     r13, rbx
.text:0000000000000111
.text:0000000000000111 loc_111:				       ; CODE XREF: str_list_reproduce+76j
.text:0000000000000111		       mov     edi, 10h	       ; size
.text:0000000000000116		       call    malloc
.text:000000000000011B		       test    r14, r14
.text:000000000000011E		       mov     [r13+8],	rax
.text:0000000000000122		       mov     rbx, rax
.text:0000000000000125		       mov     rbp, [rbp+8]
.text:0000000000000129		       jnz     short loc_F0
.text:000000000000012B		       add     qword ptr [r12],	1
.text:0000000000000130
.text:0000000000000130 loc_130:				       ; DATA XREF: .eh_frame:00000000000008BCo
.text:0000000000000130		       cmp     qword ptr [rbp+8], 0
.text:0000000000000135		       mov     rax, [rbp+0]
.text:0000000000000139		       mov     [rbx], rax
.text:000000000000013C		       jnz     short loc_10E
.text:000000000000013E
.text:000000000000013E loc_13E:				       ; CODE XREF: str_list_reproduce+78j
.text:000000000000013E					       ; str_list_reproduce+9Cj
.text:000000000000013E		       mov     qword ptr [rbx+8], 0
.text:0000000000000146		       mov     [r12+18h], rbx
.text:000000000000014B		       jmp     short loc_15F
.text:000000000000014D ; ---------------------------------------------------------------------------
.text:000000000000014D
.text:000000000000014D loc_14D:				       ; CODE XREF: str_list_reproduce+34j
.text:000000000000014D		       mov     qword ptr [r12+8], 0
.text:0000000000000156		       mov     qword ptr [r12+18h], 0
.text:000000000000015F
.text:000000000000015F loc_15F:				       ; CODE XREF: str_list_reproduce+DBj
.text:000000000000015F		       mov     rax, [r12+8]
.text:0000000000000164		       mov     [r12+10h], rax
.text:0000000000000169		       mov     rax, [r15+20h]
.text:000000000000016D		       mov     [r12+20h], rax
.text:0000000000000172		       mov     rax, [r15+28h]
.text:0000000000000176		       mov     [r12+28h], rax
.text:000000000000017B		       xor     eax, eax
.text:000000000000017D
.text:000000000000017D loc_17D:				       ; CODE XREF: str_list_reproduce+1Fj
.text:000000000000017D					       ; str_list_reproduce+63j ...
.text:000000000000017D		       add     rsp, 8
.text:0000000000000181		       pop     rbx
.text:0000000000000182		       pop     rbp
.text:0000000000000183		       pop     r12
.text:0000000000000185		       pop     r13
.text:0000000000000187		       pop     r14
.text:0000000000000189		       pop     r15
.text:000000000000018B		       retn
.text:000000000000018C ; ---------------------------------------------------------------------------
.text:000000000000018C
.text:000000000000018C loc_18C:				       ; CODE XREF: str_list_reproduce+27j
.text:000000000000018C		       mov     rbp, [rsi+10h]
.text:0000000000000190		       jmp     loc_A1
.text:0000000000000195 ; ---------------------------------------------------------------------------
.text:0000000000000195
.text:0000000000000195 loc_195:				       ; CODE XREF: str_list_reproduce+52j
.text:0000000000000195		       mov     rax, [rbp+0]
.text:0000000000000199		       mov     [rbx], rax
.text:000000000000019C		       jmp     loc_D9
.text:000000000000019C str_list_reproduce endp
.text:000000000000019C
.text:000000000000019C ; ---------------------------------------------------------------------------
.text:00000000000001A1		       align 10h
.text:00000000000001B0
.text:00000000000001B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000001B0
.text:00000000000001B0
.text:00000000000001B0		       public str_list_destroy
.text:00000000000001B0 str_list_destroy	proc near	       ; DATA XREF: main+39o
.text:00000000000001B0					       ; .eh_frame:00000000000008F0o ...
.text:00000000000001B0		       mov     rdi, [rdi]
.text:00000000000001B3		       jmp     free
.text:00000000000001B3 str_list_destroy	endp
.text:00000000000001B3
.text:00000000000001B3 ; ---------------------------------------------------------------------------
.text:00000000000001B8		       align 20h
.text:00000000000001C0
.text:00000000000001C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000001C0
.text:00000000000001C0
.text:00000000000001C0 str_list_clean  proc near	       ; CODE XREF: main+193p
.text:00000000000001C0					       ; main+19Bp
.text:00000000000001C0					       ; DATA XREF: ...
.text:00000000000001C0		       push    rbp
.text:00000000000001C1		       push    rbx
.text:00000000000001C2		       mov     rbx, rdi
.text:00000000000001C5		       sub     rsp, 8
.text:00000000000001C9		       nop     dword ptr [rax+00000000h]
.text:00000000000001D0
.text:00000000000001D0 loc_1D0:				       ; CODE XREF: str_list_clean+41j
.text:00000000000001D0		       cmp     qword ptr [rbx],	0
.text:00000000000001D4		       jz      short loc_211
.text:00000000000001D6
.text:00000000000001D6 loc_1D6:				       ; CODE XREF: str_list_clean+4Fj
.text:00000000000001D6		       mov     rbp, [rbx+8]
.text:00000000000001DA		       sub     qword ptr [rbx],	1
.text:00000000000001DE		       mov     rax, [rbp+8]
.text:00000000000001E2		       mov     [rbx+8],	rax
.text:00000000000001E6		       mov     rax, [rbx+28h]
.text:00000000000001EA		       test    rax, rax
.text:00000000000001ED		       jz      short loc_1F4
.text:00000000000001EF		       mov     rdi, rbp
.text:00000000000001F2		       call    rax
.text:00000000000001F4
.text:00000000000001F4 loc_1F4:				       ; CODE XREF: str_list_clean+2Dj
.text:00000000000001F4		       mov     rdi, rbp	       ; ptr
.text:00000000000001F7		       call    free
.text:00000000000001FC		       cmp     qword ptr [rbx+8], 0
.text:0000000000000201		       jnz     short loc_1D0
.text:0000000000000203		       cmp     qword ptr [rbx],	0
.text:0000000000000207		       mov     qword ptr [rbx+18h], 0
.text:000000000000020F		       jnz     short loc_1D6
.text:0000000000000211
.text:0000000000000211 loc_211:				       ; CODE XREF: str_list_clean+14j
.text:0000000000000211		       add     rsp, 8
.text:0000000000000215		       pop     rbx
.text:0000000000000216		       pop     rbp
.text:0000000000000217		       retn
.text:0000000000000217 str_list_clean  endp
.text:0000000000000217
.text:0000000000000217 ; ---------------------------------------------------------------------------
.text:0000000000000218		       align 20h
.text:0000000000000220
.text:0000000000000220 ; =============== S U B R O U T I N E =======================================
.text:0000000000000220
.text:0000000000000220
.text:0000000000000220 str_list_create_tail proc near	       ; CODE XREF: main+5Ap
.text:0000000000000220					       ; main+67p ...
.text:0000000000000220
.text:0000000000000220 var_18	       = qword ptr -18h
.text:0000000000000220 var_10	       = qword ptr -10h
.text:0000000000000220 var_8	       = qword ptr -8
.text:0000000000000220
.text:0000000000000220		       mov     [rsp+var_18], rbx
.text:0000000000000225		       mov     [rsp+var_8], r12
.text:000000000000022A		       mov     rbx, rdi
.text:000000000000022D		       mov     [rsp+var_10], rbp
.text:0000000000000232		       sub     rsp, 18h
.text:0000000000000236		       cmp     qword ptr [rdi+8], 0
.text:000000000000023B		       mov     r12, rsi
.text:000000000000023E		       jz      loc_2C0
.text:0000000000000244		       mov     edi, 10h	       ; size
.text:0000000000000249		       call    malloc
.text:000000000000024E		       test    rax, rax
.text:0000000000000251		       mov     rbp, rax
.text:0000000000000254		       jz      loc_310
.text:000000000000025A		       mov     rax, [rbx+20h]
.text:000000000000025E		       test    rax, rax
.text:0000000000000261		       jz      short loc_272
.text:0000000000000263		       mov     rsi, r12
.text:0000000000000266		       mov     rdi, rbp
.text:0000000000000269		       call    rax
.text:000000000000026B		       test    eax, eax
.text:000000000000026D		       mov     r12d, eax
.text:0000000000000270		       jnz     short loc_2B5
.text:0000000000000272
.text:0000000000000272 loc_272:				       ; CODE XREF: str_list_create_tail+41j
.text:0000000000000272		       mov     qword ptr [rbp+8], 0
.text:000000000000027A		       mov     rax, [rbx+18h]
.text:000000000000027E		       add     qword ptr [rbx],	1
.text:0000000000000282		       test    rbp, rbp
.text:0000000000000285		       mov     [rax+8],	rbp
.text:0000000000000289		       mov     [rbx+18h], rbp
.text:000000000000028D		       jz      short loc_2A8
.text:000000000000028F
.text:000000000000028F loc_28F:				       ; CODE XREF: str_list_create_tail+DFj
.text:000000000000028F		       xor     r12d, r12d
.text:0000000000000292
.text:0000000000000292 loc_292:				       ; CODE XREF: str_list_create_tail+93j
.text:0000000000000292					       ; str_list_create_tail+9Dj ...
.text:0000000000000292		       mov     eax, r12d
.text:0000000000000295		       mov     rbx, [rsp+18h+var_18]
.text:0000000000000299		       mov     rbp, [rsp+18h+var_10]
.text:000000000000029E		       mov     r12, [rsp+18h+var_8]
.text:00000000000002A3		       add     rsp, 18h
.text:00000000000002A7		       retn
.text:00000000000002A8 ; ---------------------------------------------------------------------------
.text:00000000000002A8
.text:00000000000002A8 loc_2A8:				       ; CODE XREF: str_list_create_tail+6Dj
.text:00000000000002A8		       xor     r12d, r12d
.text:00000000000002AB		       mov     qword ptr [rbx+18h], 0
.text:00000000000002B3		       jmp     short loc_292
.text:00000000000002B5 ; ---------------------------------------------------------------------------
.text:00000000000002B5
.text:00000000000002B5 loc_2B5:				       ; CODE XREF: str_list_create_tail+50j
.text:00000000000002B5					       ; str_list_create_tail+C8j
.text:00000000000002B5		       mov     rdi, rbp	       ; ptr
.text:00000000000002B8		       call    free
.text:00000000000002BD		       jmp     short loc_292
.text:00000000000002BD ; ---------------------------------------------------------------------------
.text:00000000000002BF		       align 20h
.text:00000000000002C0
.text:00000000000002C0 loc_2C0:				       ; CODE XREF: str_list_create_tail+1Ej
.text:00000000000002C0		       mov     edi, 10h	       ; size
.text:00000000000002C5		       call    malloc
.text:00000000000002CA		       test    rax, rax
.text:00000000000002CD		       mov     rbp, rax
.text:00000000000002D0		       jz      short loc_310
.text:00000000000002D2		       mov     rax, [rbx+20h]
.text:00000000000002D6		       test    rax, rax
.text:00000000000002D9		       jz      short loc_2EA
.text:00000000000002DB		       mov     rsi, r12
.text:00000000000002DE		       mov     rdi, rbp
.text:00000000000002E1		       call    rax
.text:00000000000002E3		       test    eax, eax
.text:00000000000002E5		       mov     r12d, eax
.text:00000000000002E8		       jnz     short loc_2B5
.text:00000000000002EA
.text:00000000000002EA loc_2EA:				       ; CODE XREF: str_list_create_tail+B9j
.text:00000000000002EA		       mov     rax, [rbx+8]
.text:00000000000002EE		       add     qword ptr [rbx],	1
.text:00000000000002F2		       mov     [rbp+8],	rax
.text:00000000000002F6		       cmp     qword ptr [rbx+18h], 0
.text:00000000000002FB		       mov     [rbx+8],	rbp
.text:00000000000002FF		       jnz     short loc_28F
.text:0000000000000301		       xor     r12d, r12d
.text:0000000000000304		       mov     [rbx+18h], rbp
.text:0000000000000308		       jmp     short loc_292
.text:0000000000000308 ; ---------------------------------------------------------------------------
.text:000000000000030A		       align 10h
.text:0000000000000310
.text:0000000000000310 loc_310:				       ; CODE XREF: str_list_create_tail+34j
.text:0000000000000310					       ; str_list_create_tail+B0j
.text:0000000000000310		       mov     r12d, 5
.text:0000000000000316		       jmp     loc_292
.text:0000000000000316 str_list_create_tail endp
.text:0000000000000316
.text:0000000000000316 ; ---------------------------------------------------------------------------
.text:000000000000031B		       align 20h
.text:0000000000000320
.text:0000000000000320 ; =============== S U B R O U T I N E =======================================
.text:0000000000000320
.text:0000000000000320
.text:0000000000000320		       public main
.text:0000000000000320 main	       proc near	       ; DATA XREF: .eh_frame:0000000000000948o
.text:0000000000000320
.text:0000000000000320 var_88	       = byte ptr -88h
.text:0000000000000320 var_80	       = qword ptr -80h
.text:0000000000000320 var_58	       = byte ptr -58h
.text:0000000000000320 var_38	       = qword ptr -38h
.text:0000000000000320 var_30	       = qword ptr -30h
.text:0000000000000320
.text:0000000000000320		       push    r14
.text:0000000000000322		       mov     edi, offset s   ; "\nStrings\n"
.text:0000000000000327		       push    r13
.text:0000000000000329		       push    r12
.text:000000000000032B		       push    rbx
.text:000000000000032C		       sub     rsp, 98h
.text:0000000000000333		       lea     r12, [rsp+0B8h+var_58]
.text:0000000000000338		       lea     r13, [rsp+0B8h+var_88]
.text:000000000000033D		       call    puts
.text:0000000000000342		       mov     rdi, r12
.text:0000000000000345		       call    str_list_init
.text:000000000000034A		       mov     rdi, r13
.text:000000000000034D		       mov     [rsp+0B8h+var_38], offset str_list_make
.text:0000000000000359		       mov     [rsp+0B8h+var_30], offset str_list_destroy
.text:0000000000000365		       call    str_list_init
.text:000000000000036A		       mov     rdi, rsp
.text:000000000000036D		       call    str_list_init
.text:0000000000000372		       mov     rdi, r12
.text:0000000000000375		       mov     esi, offset aFirstString	; "First String"
.text:000000000000037A		       call    str_list_create_tail
.text:000000000000037F		       mov     rdi, r12
.text:0000000000000382		       mov     esi, offset aSecondString ; "Second String"
.text:0000000000000387		       call    str_list_create_tail
.text:000000000000038C		       mov     rdi, r12
.text:000000000000038F		       mov     esi, offset aThirdString	; "Third String"
.text:0000000000000394		       call    str_list_create_tail
.text:0000000000000399		       mov     rdi, r12
.text:000000000000039C		       mov     esi, offset aFourthString ; "Fourth String"
.text:00000000000003A1		       call    str_list_create_tail
.text:00000000000003A6		       mov     rdi, r12
.text:00000000000003A9		       mov     esi, offset aFifthString	; "Fifth String"
.text:00000000000003AE		       call    str_list_create_tail
.text:00000000000003B3		       mov     rdi, r12
.text:00000000000003B6		       mov     esi, offset aSixesString	; "Sixes String"
.text:00000000000003BB		       call    str_list_create_tail
.text:00000000000003C0		       mov     esi, offset aSeventhString ; "Seventh String"
.text:00000000000003C5		       mov     rdi, r12
.text:00000000000003C8		       call    str_list_create_tail
.text:00000000000003CD		       mov     edi, offset aOriginalList ; "Original list:"
.text:00000000000003D2		       call    puts
.text:00000000000003D7		       mov     esi, offset printstr
.text:00000000000003DC		       mov     rdi, r12
.text:00000000000003DF		       call    str_list_mapcar
.text:00000000000003E4		       mov     edi, 0Ah	       ; c
.text:00000000000003E9		       call    putchar
.text:00000000000003EE		       mov     edi, offset aWeNowMakeARepr ; "We now make a reproduction and a duplic"...
.text:00000000000003F3		       call    puts
.text:00000000000003F8		       xor     ecx, ecx
.text:00000000000003FA		       xor     edx, edx
.text:00000000000003FC		       mov     rsi, r12
.text:00000000000003FF		       mov     rdi, r13
.text:0000000000000402		       call    str_list_reproduce
.text:0000000000000407		       xor     ecx, ecx
.text:0000000000000409		       mov     rsi, r12
.text:000000000000040C		       mov     edx, offset str_rf
.text:0000000000000411		       mov     rdi, rsp
.text:0000000000000414		       call    str_list_reproduce
.text:0000000000000419		       mov     edi, offset aWeChangeTheHea ; "We change	the head of the	duplicate\n"
.text:000000000000041E		       call    puts
.text:0000000000000423		       mov     rax, [rsp+0B8h+var_80]
.text:0000000000000428		       mov     rbx, [rax]
.text:000000000000042B		       mov     rdi, rbx	       ; s
.text:000000000000042E		       call    strlen
.text:0000000000000433		       mov     esi, offset src ; "CHANGED STRING"
.text:0000000000000438		       mov     rdx, rax	       ; n
.text:000000000000043B		       mov     rdi, rbx	       ; dest
.text:000000000000043E		       call    strncpy
.text:0000000000000443		       mov     edi, offset aDuplicate ;	"Duplicate:"
.text:0000000000000448		       call    puts
.text:000000000000044D		       mov     esi, offset printstr
.text:0000000000000452		       mov     rdi, r13
.text:0000000000000455		       call    str_list_mapcar
.text:000000000000045A		       mov     edi, 0Ah	       ; c
.text:000000000000045F		       call    putchar
.text:0000000000000464		       mov     edi, offset aOriginal ; "Original:"
.text:0000000000000469		       call    puts
.text:000000000000046E		       mov     esi, offset printstr
.text:0000000000000473		       mov     rdi, r12
.text:0000000000000476		       call    str_list_mapcar
.text:000000000000047B		       mov     edi, 0Ah	       ; c
.text:0000000000000480		       call    putchar
.text:0000000000000485		       mov     edi, offset aRealReproducti ; "Real reproduction:"
.text:000000000000048A		       call    puts
.text:000000000000048F		       mov     esi, offset printstr
.text:0000000000000494		       mov     rdi, rsp
.text:0000000000000497		       call    str_list_mapcar
.text:000000000000049C		       mov     edi, 0Ah	       ; c
.text:00000000000004A1		       call    putchar
.text:00000000000004A6		       mov     edi, offset aYouMaySeeThatC ; "You may see that changes in the duplica"...
.text:00000000000004AB		       call    puts
.text:00000000000004B0		       mov     rdi, r12
.text:00000000000004B3		       call    str_list_clean
.text:00000000000004B8		       mov     rdi, rsp
.text:00000000000004BB		       call    str_list_clean
.text:00000000000004C0		       add     rsp, 98h
.text:00000000000004C7		       xor     eax, eax
.text:00000000000004C9		       pop     rbx
.text:00000000000004CA		       pop     r12
.text:00000000000004CC		       pop     r13
.text:00000000000004CE		       pop     r14
.text:00000000000004D0		       retn
.text:00000000000004D0 main	       endp
.text:00000000000004D0
.text:00000000000004D0 ; ---------------------------------------------------------------------------
.text:00000000000004D1		       align 20h
.text:00000000000004E0
.text:00000000000004E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000004E0
.text:00000000000004E0
.text:00000000000004E0		       public str_rf
.text:00000000000004E0 str_rf	       proc near	       ; DATA XREF: main+ECo
.text:00000000000004E0					       ; .eh_frame:0000000000000978o
.text:00000000000004E0
.text:00000000000004E0 var_10	       = qword ptr -10h
.text:00000000000004E0 var_8	       = qword ptr -8
.text:00000000000004E0
.text:00000000000004E0		       mov     [rsp+var_10], rbx
.text:00000000000004E5		       mov     [rsp+var_8], rbp
.text:00000000000004EA		       mov     rbx, rdi
.text:00000000000004ED		       sub     rsp, 18h
.text:00000000000004F1		       mov     rdi, [rsi]      ; s
.text:00000000000004F4		       mov     rbp, rsi
.text:00000000000004F7		       call    strlen
.text:00000000000004FC		       lea     rdi, [rax+1]    ; size
.text:0000000000000500		       call    malloc
.text:0000000000000505		       test    rax, rax
.text:0000000000000508		       mov     [rbx], rax
.text:000000000000050B		       mov     edx, 5
.text:0000000000000510		       jz      short loc_520
.text:0000000000000512		       mov     rsi, [rbp+0]    ; src
.text:0000000000000516		       mov     rdi, rax	       ; dest
.text:0000000000000519		       call    strcpy
.text:000000000000051E		       xor     edx, edx
.text:0000000000000520
.text:0000000000000520 loc_520:				       ; CODE XREF: str_rf+30j
.text:0000000000000520		       mov     rbx, [rsp+18h+var_10]
.text:0000000000000525		       mov     rbp, [rsp+18h+var_8]
.text:000000000000052A		       mov     eax, edx
.text:000000000000052C		       add     rsp, 18h
.text:0000000000000530		       retn
.text:0000000000000530 str_rf	       endp
.text:0000000000000530
.text:0000000000000530 ; ---------------------------------------------------------------------------
.text:0000000000000531		       align 20h
.text:0000000000000540
.text:0000000000000540 ; =============== S U B R O U T I N E =======================================
.text:0000000000000540
.text:0000000000000540
.text:0000000000000540		       public str_list_make
.text:0000000000000540 str_list_make   proc near	       ; DATA XREF: main+2Do
.text:0000000000000540					       ; .eh_frame:0000000000000998o
.text:0000000000000540		       push    rbx
.text:0000000000000541		       mov     rbx, rdi
.text:0000000000000544		       mov     rdi, rsi
.text:0000000000000547		       call    __strdup
.text:000000000000054C		       mov     [rbx], rax
.text:000000000000054F		       cmp     rax, 1
.text:0000000000000553		       pop     rbx
.text:0000000000000554		       sbb     eax, eax
.text:0000000000000556		       and     eax, 5
.text:0000000000000559		       retn
.text:0000000000000559 str_list_make   endp
.text:0000000000000559
.text:0000000000000559 _text	       ends
.text:0000000000000559
.data:000000000000055C ; ===========================================================================
.data:000000000000055C
.data:000000000000055C ; Segment type: Zero-length
.data:000000000000055C ; Segment permissions: Read/Write
.data:000000000000055C _data	       segment dword public 'DATA' use64
.data:000000000000055C _data	       ends
.data:000000000000055C
.bss:0000000000000560 ;	===========================================================================
.bss:0000000000000560
.bss:0000000000000560 ;	Segment	type: Zero-length
.bss:0000000000000560 ;	Segment	permissions: Read/Write
.bss:0000000000000560 _bss	      segment dword public 'BSS' use64
.bss:0000000000000560 _bss	      ends
.bss:0000000000000560
.rodata.str1.1:0000000000000561	; ===========================================================================
.rodata.str1.1:0000000000000561
.rodata.str1.1:0000000000000561	; Segment type:	Pure data
.rodata.str1.1:0000000000000561	; Segment permissions: Read
.rodata.str1.1:0000000000000561	_rodata_str1_1	segment	byte public 'CONST' use64
.rodata.str1.1:0000000000000561			assume cs:_rodata_str1_1
.rodata.str1.1:0000000000000561			;org 561h
.rodata.str1.1:0000000000000561	; char s[]
.rodata.str1.1:0000000000000561	s		db 0Ah			; DATA XREF: main+2o
.rodata.str1.1:0000000000000561			db 'Strings',0Ah,0
.rodata.str1.1:000000000000056B	aFirstString	db 'First String',0     ; DATA XREF: main+55o
.rodata.str1.1:0000000000000578	aSecondString	db 'Second String',0    ; DATA XREF: main+62o
.rodata.str1.1:0000000000000586	aThirdString	db 'Third String',0     ; DATA XREF: main+6Fo
.rodata.str1.1:0000000000000593	aFourthString	db 'Fourth String',0    ; DATA XREF: main+7Co
.rodata.str1.1:00000000000005A1	aFifthString	db 'Fifth String',0     ; DATA XREF: main+89o
.rodata.str1.1:00000000000005AE	aSixesString	db 'Sixes String',0     ; DATA XREF: main+96o
.rodata.str1.1:00000000000005BB	aSeventhString	db 'Seventh String',0   ; DATA XREF: main+A0o
.rodata.str1.1:00000000000005CA	; char aOriginalList[]
.rodata.str1.1:00000000000005CA	aOriginalList	db 'Original list:',0   ; DATA XREF: main+ADo
.rodata.str1.1:00000000000005D9	; char src[]
.rodata.str1.1:00000000000005D9	src		db 'CHANGED STRING',0   ; DATA XREF: main+113o
.rodata.str1.1:00000000000005E8	; char aDuplicate[]
.rodata.str1.1:00000000000005E8	aDuplicate	db 'Duplicate:',0       ; DATA XREF: main+123o
.rodata.str1.1:00000000000005F3	; char aOriginal[]
.rodata.str1.1:00000000000005F3	aOriginal	db 'Original:',0        ; DATA XREF: main+144o
.rodata.str1.1:00000000000005FD	; char aRealReproducti[]
.rodata.str1.1:00000000000005FD	aRealReproducti	db 'Real reproduction:',0
.rodata.str1.1:00000000000005FD						; DATA XREF: main+165o
.rodata.str1.1:00000000000005FD	_rodata_str1_1	ends
.rodata.str1.1:00000000000005FD
.rodata.str1.8:0000000000000610	; ===========================================================================
.rodata.str1.8:0000000000000610
.rodata.str1.8:0000000000000610	; Segment type:	Pure data
.rodata.str1.8:0000000000000610	; Segment permissions: Read
.rodata.str1.8:0000000000000610	; Segment alignment 'qword' can not be represented in assembly
.rodata.str1.8:0000000000000610	_rodata_str1_8	segment	para public 'CONST' use64
.rodata.str1.8:0000000000000610			assume cs:_rodata_str1_8
.rodata.str1.8:0000000000000610			;org 610h
.rodata.str1.8:0000000000000610	; char aWeNowMakeARepr[]
.rodata.str1.8:0000000000000610	aWeNowMakeARepr	db 'We now make a reproduction and a duplicate (rf==NULL) of the orig'
.rodata.str1.8:0000000000000610						; DATA XREF: main+CEo
.rodata.str1.8:0000000000000610			db 'inal list',0
.rodata.str1.8:000000000000065B			align 20h
.rodata.str1.8:0000000000000660	; char aWeChangeTheHea[]
.rodata.str1.8:0000000000000660	aWeChangeTheHea	db 'We change the head of the duplicate',0Ah,0
.rodata.str1.8:0000000000000660						; DATA XREF: main+F9o
.rodata.str1.8:0000000000000685			align 8
.rodata.str1.8:0000000000000688	; char aYouMaySeeThatC[]
.rodata.str1.8:0000000000000688	aYouMaySeeThatC	db 'You may see that changes in the duplicate will lead to changes in'
.rodata.str1.8:0000000000000688						; DATA XREF: main+186o
.rodata.str1.8:0000000000000688			db 0Ah
.rodata.str1.8:0000000000000688			db 'the original as well. While the reproduction copy stays independe'
.rodata.str1.8:0000000000000688			db 'nt.',0Ah
.rodata.str1.8:0000000000000688			db 'It is UNSAFE to use rf==NULL when you HAVE POINTERS in the list',0Ah
.rodata.str1.8:0000000000000688			db 'elements content. While reproduction will work fine. Moreover, yo'
.rodata.str1.8:0000000000000688			db 'u',0Ah
.rodata.str1.8:0000000000000688			db 'will get an error when you will try to free memory from duplicate'
.rodata.str1.8:0000000000000688			db 0Ah
.rodata.str1.8:0000000000000688			db 'due to double call of free on the same pointer.',0Ah
.rodata.str1.8:0000000000000688			db 0Ah
.rodata.str1.8:0000000000000688			db '== USE REPRODUCE ANYTYME YOU HAVE POINTERS IN THE CONTENT! ==',0Ah,0
.rodata.str1.8:0000000000000688	_rodata_str1_8	ends
.rodata.str1.8:0000000000000688
.eh_frame:0000000000000848 ; ===========================================================================
.eh_frame:0000000000000848
.eh_frame:0000000000000848 ; Segment type: Pure	data
.eh_frame:0000000000000848 ; Segment permissions: Read
.eh_frame:0000000000000848 ; Segment alignment 'qword' can not be represented in assembly
.eh_frame:0000000000000848 _eh_frame	   segment para	public 'CONST' use64
.eh_frame:0000000000000848		   assume cs:_eh_frame
.eh_frame:0000000000000848		   ;org	848h
.eh_frame:0000000000000848		   dq 14h, 110780100527A01h, 19008070C03h, 1C00000014h
.eh_frame:0000000000000868		   dd offset str_list_init
.eh_frame:000000000000086C		   dd offset str_list_mapcar
.eh_frame:0000000000000870		   dq 0
.eh_frame:0000000000000878		   dq 340000001Ch
.eh_frame:0000000000000880		   dd offset str_list_mapcar
.eh_frame:0000000000000884		   dd offset loc_27
.eh_frame:0000000000000888		   dq 0E440286100E4100h, 383200E4418h, 5400000014h
.eh_frame:00000000000008A0		   dd offset printstr
.eh_frame:00000000000008A4		   dd 8
.eh_frame:00000000000008A8		   align 10h
.eh_frame:00000000000008B0		   dq 6C00000034h
.eh_frame:00000000000008B8		   dd offset str_list_reproduce
.eh_frame:00000000000008BC		   dd offset loc_130+1
.eh_frame:00000000000008C0		   dq 0E4A028F100E4200h, 0E42200E45038E18h, 300E44048D058C28h
.eh_frame:00000000000008C0		   dq 783400E44380E41h,	686h, 0A400000014h
.eh_frame:00000000000008F0		   dd offset str_list_destroy
.eh_frame:00000000000008F4		   dd 8
.eh_frame:00000000000008F8		   align 20h
.eh_frame:0000000000000900		   dq 0BC0000001Ch
.eh_frame:0000000000000908		   dd offset str_list_clean
.eh_frame:000000000000090C		   dd offset unk_58
.eh_frame:0000000000000910		   dq 83180E41100E4100h, 200E47028603h,	0DC0000001Ch
.eh_frame:0000000000000928		   dd offset str_list_create_tail
.eh_frame:000000000000092C		   dd offset loc_FB
.eh_frame:0000000000000930		   dq 0E4C0483028C4A00h, 38620h, 0FC0000002Ch
.eh_frame:0000000000000948		   dd offset main
.eh_frame:000000000000094C		   dd offset str_list_destroy+1
.eh_frame:0000000000000950		   dq 42180E47100E4200h, 0C00E47280E41200Eh, 8E038D048C058301h
.eh_frame:0000000000000950		   dq 2, 12C0000001Ch
.eh_frame:0000000000000978		   dd offset str_rf
.eh_frame:000000000000097C		   dd offset loc_50+1
.eh_frame:0000000000000980		   dq 0E47038302864A00h, 20h, 14C00000014h
.eh_frame:0000000000000998		   dd offset str_list_make
.eh_frame:000000000000099C		   dd 1Ah
.eh_frame:00000000000009A0		   dq 283100E4100h
.eh_frame:00000000000009A0 _eh_frame	   ends
.eh_frame:00000000000009A0
extern:00000000000009A8	; ===========================================================================
extern:00000000000009A8
extern:00000000000009A8	; Segment type:	Externs
extern:00000000000009A8	; extern
extern:00000000000009A8	; int puts(const char *s)
extern:00000000000009A8			extrn puts:near		; CODE XREF: printstr+3j
extern:00000000000009A8						; main+1Dp ...
extern:00000000000009AC	; void *malloc(size_t size)
extern:00000000000009AC			extrn malloc:near	; CODE XREF: str_list_reproduce+3Fp
extern:00000000000009AC						; str_list_reproduce+A6p ...
extern:00000000000009B0	; void free(void *ptr)
extern:00000000000009B0			extrn free:near		; CODE XREF: str_list_destroy+3j
extern:00000000000009B0						; str_list_clean+37p ...
extern:00000000000009B4	; int putchar(int c)
extern:00000000000009B4			extrn putchar:near	; CODE XREF: main+C9p
extern:00000000000009B4						; main+13Fp ...
extern:00000000000009B8	; size_t strlen(const char *s)
extern:00000000000009B8			extrn strlen:near	; CODE XREF: main+10Ep
extern:00000000000009B8						; str_rf+17p
extern:00000000000009BC	; char *strncpy(char *dest, const char *src, size_t n)
extern:00000000000009BC			extrn strncpy:near	; CODE XREF: main+11Ep
extern:00000000000009C0	; char *strcpy(char *dest, const char *src)
extern:00000000000009C0			extrn strcpy:near	; CODE XREF: str_rf+39p
extern:00000000000009C4			extrn __strdup:near	; CODE XREF: str_list_make+7p
extern:00000000000009C4
extern:00000000000009C4
extern:00000000000009C4			end
