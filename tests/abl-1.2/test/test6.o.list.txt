.text:0000000000000000 ;
.text:0000000000000000 ; +-------------------------------------------------------------------------+
.text:0000000000000000 ; |   This file has been	generated by The Interactive Disassembler (IDA)	   |
.text:0000000000000000 ; |	  Copyright (c)	2009 by	Hex-Rays, <support@hex-rays.com>	   |
.text:0000000000000000 ; |			License	info: 48-313D-7374-F1			   |
.text:0000000000000000 ; |   Aditya Thakur, University of Wisconsin/Computer Sciences Department   |
.text:0000000000000000 ; +-------------------------------------------------------------------------+
.text:0000000000000000 ;
.text:0000000000000000 ; Input MD5   : BEFFD258221D120AFAA730BC9184C1CE
.text:0000000000000000
.text:0000000000000000 ; File Name   : C:\aditya\work\waldo\tests\abl-1.2\test\test6.o
.text:0000000000000000 ; Format	     : ELF (Relocatable)
.text:0000000000000000 ;
.text:0000000000000000 ; Source	File : 'test6.c'
.text:0000000000000000
.text:0000000000000000		       .686p
.text:0000000000000000		       .mmx
.text:0000000000000000		       .model flat
.text:0000000000000000 .intel_syntax noprefix
.text:0000000000000000
.text:0000000000000000 ; ===========================================================================
.text:0000000000000000
.text:0000000000000000 ; Segment type: Pure code
.text:0000000000000000 ; Segment permissions: Read/Execute
.text:0000000000000000 _text	       segment para public 'CODE' use64
.text:0000000000000000		       assume cs:_text
.text:0000000000000000		       assume es:nothing, ss:nothing, ds:_text,	fs:nothing, gs:nothing
.text:0000000000000000
.text:0000000000000000 ; =============== S U B R O U T I N E =======================================
.text:0000000000000000
.text:0000000000000000
.text:0000000000000000		       public main
.text:0000000000000000 main	       proc near	       ; DATA XREF: .eh_frame:0000000000000130o
.text:0000000000000000
.text:0000000000000000 var_1C	       = dword ptr -1Ch
.text:0000000000000000
.text:0000000000000000		       push    r12
.text:0000000000000002		       xor     r12d, r12d
.text:0000000000000005		       push    rbp
.text:0000000000000006		       xor     ebp, ebp
.text:0000000000000008		       push    rbx
.text:0000000000000009		       xor     ebx, ebx
.text:000000000000000B		       sub     rsp, 10h
.text:000000000000000F		       mov     [rsp+28h+var_1C], 0
.text:0000000000000017		       jmp     short loc_5B
.text:0000000000000017 ; ---------------------------------------------------------------------------
.text:0000000000000019		       align 20h
.text:0000000000000020
.text:0000000000000020 loc_20:				       ; CODE XREF: main+5Ej
.text:0000000000000020		       mov     edi, 10h	       ; size
.text:0000000000000025		       call    malloc
.text:000000000000002A		       test    rax, rax
.text:000000000000002D		       mov     rdx, rax
.text:0000000000000030		       jz      short loc_4B
.text:0000000000000032		       mov     eax, [rsp+28h+var_1C]
.text:0000000000000036		       mov     qword ptr [rdx+8], 0
.text:000000000000003E		       add     r12, 1
.text:0000000000000042		       mov     [rbx+8],	rdx
.text:0000000000000046		       mov     rbx, rdx
.text:0000000000000049		       mov     [rdx], eax
.text:000000000000004B
.text:000000000000004B loc_4B:				       ; CODE XREF: main+30j
.text:000000000000004B					       ; main+6Dj ...
.text:000000000000004B		       mov     eax, [rsp+28h+var_1C]
.text:000000000000004F		       add     eax, 1
.text:0000000000000052		       cmp     eax, 0Ah
.text:0000000000000055		       mov     [rsp+28h+var_1C], eax
.text:0000000000000059		       jg      short loc_9D
.text:000000000000005B
.text:000000000000005B loc_5B:				       ; CODE XREF: main+17j
.text:000000000000005B					       ; main+9Bj
.text:000000000000005B		       test    rbp, rbp
.text:000000000000005E		       jnz     short loc_20
.text:0000000000000060		       mov     edi, 10h	       ; size
.text:0000000000000065		       call    malloc
.text:000000000000006A		       test    rax, rax
.text:000000000000006D		       jz      short loc_4B
.text:000000000000006F		       mov     rbp, rax
.text:0000000000000072		       mov     eax, [rsp+28h+var_1C]
.text:0000000000000076		       add     r12, 1
.text:000000000000007A		       test    rbx, rbx
.text:000000000000007D		       mov     qword ptr [rbp+8], 0
.text:0000000000000085		       mov     [rbp+0],	eax
.text:0000000000000088		       jnz     short loc_4B
.text:000000000000008A		       mov     eax, [rsp+28h+var_1C]
.text:000000000000008E		       mov     rbx, rbp
.text:0000000000000091		       add     eax, 1
.text:0000000000000094		       cmp     eax, 0Ah
.text:0000000000000097		       mov     [rsp+28h+var_1C], eax
.text:000000000000009B		       jle     short loc_5B
.text:000000000000009D
.text:000000000000009D loc_9D:				       ; CODE XREF: main+59j
.text:000000000000009D		       test    rbp, rbp
.text:00000000000000A0		       jz      short loc_CF
.text:00000000000000A2		       mov     rbx, rbp
.text:00000000000000A5
.text:00000000000000A5 loc_A5:				       ; CODE XREF: main+B4j
.text:00000000000000A5		       mov     rdi, rbx
.text:00000000000000A8		       call    printint
.text:00000000000000AD		       mov     rbx, [rbx+8]
.text:00000000000000B1		       test    rbx, rbx
.text:00000000000000B4		       jnz     short loc_A5
.text:00000000000000B6		       sub     r12, 1
.text:00000000000000BA		       cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:00000000000000BE		       jz      short loc_D9
.text:00000000000000C0
.text:00000000000000C0 loc_C0:				       ; CODE XREF: main+D7j
.text:00000000000000C0		       mov     rbx, [rbp+8]
.text:00000000000000C4		       mov     rdi, rbp	       ; ptr
.text:00000000000000C7		       call    free
.text:00000000000000CC		       mov     rbp, rbx
.text:00000000000000CF
.text:00000000000000CF loc_CF:				       ; CODE XREF: main+A0j
.text:00000000000000CF		       sub     r12, 1
.text:00000000000000D3		       cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:00000000000000D7		       jnz     short loc_C0
.text:00000000000000D9
.text:00000000000000D9 loc_D9:				       ; CODE XREF: main+BEj
.text:00000000000000D9		       add     rsp, 10h
.text:00000000000000DD		       xor     eax, eax
.text:00000000000000DF		       pop     rbx
.text:00000000000000E0		       pop     rbp
.text:00000000000000E1		       pop     r12
.text:00000000000000E3		       retn
.text:00000000000000E3 main	       endp
.text:00000000000000E3
.text:00000000000000E3 ; ---------------------------------------------------------------------------
.text:00000000000000E4 unk_E4	       db  66h ; f	       ; DATA XREF: .eh_frame:0000000000000134o
.text:00000000000000E5		       db  0Fh
.text:00000000000000E6		       db  1Fh
.text:00000000000000E7		       db  44h ; D
.text:00000000000000E8		       db    0
.text:00000000000000E9		       db    0
.text:00000000000000EA		       db  66h ; f
.text:00000000000000EB		       db  0Fh
.text:00000000000000EC		       db  1Fh
.text:00000000000000ED		       db  44h ; D
.text:00000000000000EE		       db    0
.text:00000000000000EF		       db    0
.text:00000000000000F0
.text:00000000000000F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000000F0
.text:00000000000000F0
.text:00000000000000F0		       public printint
.text:00000000000000F0 printint	       proc near	       ; CODE XREF: main+A8p
.text:00000000000000F0					       ; DATA XREF: .eh_frame:0000000000000158o
.text:00000000000000F0		       mov     esi, [rdi]
.text:00000000000000F2		       xor     eax, eax
.text:00000000000000F4		       mov     edi, offset byte_105
.text:00000000000000F9		       jmp     printf
.text:00000000000000F9 printint	       endp
.text:00000000000000F9
.text:00000000000000F9 _text	       ends
.text:00000000000000F9
.data:0000000000000100 ; ===========================================================================
.data:0000000000000100
.data:0000000000000100 ; Segment type: Zero-length
.data:0000000000000100 ; Segment permissions: Read/Write
.data:0000000000000100 _data	       segment dword public 'DATA' use64
.data:0000000000000100 _data	       ends
.data:0000000000000100
.bss:0000000000000104 ;	===========================================================================
.bss:0000000000000104
.bss:0000000000000104 ;	Segment	type: Zero-length
.bss:0000000000000104 ;	Segment	permissions: Read/Write
.bss:0000000000000104 _bss	      segment dword public 'BSS' use64
.bss:0000000000000104 _bss	      ends
.bss:0000000000000104
.rodata.str1.1:0000000000000105	; ===========================================================================
.rodata.str1.1:0000000000000105
.rodata.str1.1:0000000000000105	; Segment type:	Pure data
.rodata.str1.1:0000000000000105	; Segment permissions: Read
.rodata.str1.1:0000000000000105	_rodata_str1_1	segment	byte public 'CONST' use64
.rodata.str1.1:0000000000000105			assume cs:_rodata_str1_1
.rodata.str1.1:0000000000000105			;org 105h
.rodata.str1.1:0000000000000105	byte_105	db 25h,	64h, 0Ah	; DATA XREF: printint+4o
.rodata.str1.1:0000000000000108			db 0
.rodata.str1.1:0000000000000108	_rodata_str1_1	ends
.rodata.str1.1:0000000000000108
.eh_frame:0000000000000110 ; ===========================================================================
.eh_frame:0000000000000110
.eh_frame:0000000000000110 ; Segment type: Pure	data
.eh_frame:0000000000000110 ; Segment permissions: Read
.eh_frame:0000000000000110 ; Segment alignment 'qword' can not be represented in assembly
.eh_frame:0000000000000110 _eh_frame	   segment para	public 'CONST' use64
.eh_frame:0000000000000110		   assume cs:_eh_frame
.eh_frame:0000000000000110		   ;org	110h
.eh_frame:0000000000000110		   dq 14h, 110780100527A01h, 19008070C03h, 1C00000024h
.eh_frame:0000000000000130		   dd offset main
.eh_frame:0000000000000134		   dd offset unk_E4
.eh_frame:0000000000000138		   dq 0E44028C100E4200h, 483200E43038618h, 300E46h, 4400000014h
.eh_frame:0000000000000158		   dd offset printint
.eh_frame:000000000000015C		   dd 0Eh
.eh_frame:0000000000000160		   dq 0
.eh_frame:0000000000000160 _eh_frame	   ends
.eh_frame:0000000000000160
extern:0000000000000168	; ===========================================================================
extern:0000000000000168
extern:0000000000000168	; Segment type:	Externs
extern:0000000000000168	; extern
extern:0000000000000168	; void *malloc(size_t size)
extern:0000000000000168			extrn malloc:near	; CODE XREF: main+25p
extern:0000000000000168						; main+65p
extern:000000000000016C	; void free(void *ptr)
extern:000000000000016C			extrn free:near		; CODE XREF: main+C7p
extern:0000000000000170	; int printf(const char	*format, ...)
extern:0000000000000170			extrn printf:near	; CODE XREF: printint+9j
extern:0000000000000170
extern:0000000000000170
extern:0000000000000170			end
