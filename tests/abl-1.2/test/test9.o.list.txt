.text:0000000000000000 ;
.text:0000000000000000 ; +-------------------------------------------------------------------------+
.text:0000000000000000 ; |   This file has been	generated by The Interactive Disassembler (IDA)	   |
.text:0000000000000000 ; |	  Copyright (c)	2009 by	Hex-Rays, <support@hex-rays.com>	   |
.text:0000000000000000 ; |			License	info: 48-313D-7374-F1			   |
.text:0000000000000000 ; |   Aditya Thakur, University of Wisconsin/Computer Sciences Department   |
.text:0000000000000000 ; +-------------------------------------------------------------------------+
.text:0000000000000000 ;
.text:0000000000000000 ; Input MD5   : 35F3B074EFA5495ABE72B1952BF9CA9D
.text:0000000000000000
.text:0000000000000000 ; File Name   : C:\aditya\work\waldo\tests\abl-1.2\test\test9.o
.text:0000000000000000 ; Format	     : ELF (Relocatable)
.text:0000000000000000 ;
.text:0000000000000000 ; Source	File : 'test9.c'
.text:0000000000000000
.text:0000000000000000		       .686p
.text:0000000000000000		       .mmx
.text:0000000000000000		       .model flat
.text:0000000000000000 .intel_syntax noprefix
.text:0000000000000000
.text:0000000000000000 ; ===========================================================================
.text:0000000000000000
.text:0000000000000000 ; Segment type: Pure code
.text:0000000000000000 ; Segment permissions: Read/Execute
.text:0000000000000000 _text	       segment para public 'CODE' use64
.text:0000000000000000		       assume cs:_text
.text:0000000000000000		       assume es:nothing, ss:nothing, ds:_text,	fs:nothing, gs:nothing
.text:0000000000000000
.text:0000000000000000 ; =============== S U B R O U T I N E =======================================
.text:0000000000000000
.text:0000000000000000
.text:0000000000000000 int_list_init   proc near	       ; CODE XREF: main+12p
.text:0000000000000000					       ; main+1Ap
.text:0000000000000000					       ; DATA XREF: ...
.text:0000000000000000		       mov     qword ptr [rdi],	0
.text:0000000000000007		       mov     qword ptr [rdi+8], 0
.text:000000000000000F		       mov     qword ptr [rdi+10h], 0
.text:0000000000000017		       mov     qword ptr [rdi+18h], 0
.text:000000000000001F		       mov     qword ptr [rdi+20h], 0
.text:0000000000000027
.text:0000000000000027 loc_27:				       ; DATA XREF: .eh_frame:00000000000004C4o
.text:0000000000000027		       mov     qword ptr [rdi+28h], 0
.text:000000000000002F		       retn
.text:000000000000002F int_list_init   endp
.text:000000000000002F
.text:0000000000000030
.text:0000000000000030 ; =============== S U B R O U T I N E =======================================
.text:0000000000000030
.text:0000000000000030
.text:0000000000000030 int_list_length proc near	       ; CODE XREF: main+9Fp
.text:0000000000000030					       ; main+E6p ...
.text:0000000000000030		       mov     rax, [rdi]
.text:0000000000000033		       retn
.text:0000000000000033 int_list_length endp
.text:0000000000000033
.text:0000000000000033 ; ---------------------------------------------------------------------------
.text:0000000000000034		       align 20h
.text:0000000000000040
.text:0000000000000040 ; =============== S U B R O U T I N E =======================================
.text:0000000000000040
.text:0000000000000040
.text:0000000000000040 int_list_move_point_next	proc near      ; CODE XREF: main+111p
.text:0000000000000040					       ; main+119p
.text:0000000000000040					       ; DATA XREF: ...
.text:0000000000000040		       mov     rax, [rdi+10h]
.text:0000000000000044		       test    rax, rax
.text:0000000000000047		       jz      short locret_51
.text:0000000000000049		       mov     rax, [rax+8]
.text:000000000000004D		       mov     [rdi+10h], rax
.text:0000000000000051
.text:0000000000000051 locret_51:			       ; CODE XREF: int_list_move_point_next+7j
.text:0000000000000051		       rep retn
.text:0000000000000051 int_list_move_point_next	endp
.text:0000000000000051
.text:0000000000000051 ; ---------------------------------------------------------------------------
.text:0000000000000053		       db 66h, 0Fh, 1Fh, 44h, 0
.text:0000000000000058		       db    0		       ; DATA XREF: .eh_frame:0000000000000564o
.text:0000000000000059		       db  0Fh
.text:000000000000005A		       db  1Fh
.text:000000000000005B		       db  80h ; €
.text:000000000000005C		       db    0
.text:000000000000005D		       db    0
.text:000000000000005E		       db    0
.text:000000000000005F		       db    0
.text:0000000000000060
.text:0000000000000060 ; =============== S U B R O U T I N E =======================================
.text:0000000000000060
.text:0000000000000060
.text:0000000000000060 int_list_mapcar proc near	       ; CODE XREF: main+97p
.text:0000000000000060					       ; main+DEp ...
.text:0000000000000060		       push    rbp
.text:0000000000000061		       mov     rbp, rsi
.text:0000000000000064		       push    rbx
.text:0000000000000065		       sub     rsp, 8
.text:0000000000000069		       mov     rbx, [rdi+8]
.text:000000000000006D		       test    rbx, rbx
.text:0000000000000070		       jz      short loc_80
.text:0000000000000072
.text:0000000000000072 loc_72:				       ; CODE XREF: int_list_mapcar+1Ej
.text:0000000000000072		       mov     rdi, rbx
.text:0000000000000075		       call    rbp
.text:0000000000000077		       mov     rbx, [rbx+8]
.text:000000000000007B		       test    rbx, rbx
.text:000000000000007E		       jnz     short loc_72
.text:0000000000000080
.text:0000000000000080 loc_80:				       ; CODE XREF: int_list_mapcar+10j
.text:0000000000000080		       add     rsp, 8
.text:0000000000000084		       pop     rbx
.text:0000000000000085		       pop     rbp
.text:0000000000000086		       retn
.text:0000000000000086 int_list_mapcar endp
.text:0000000000000086
.text:0000000000000086 ; ---------------------------------------------------------------------------
.text:0000000000000087		       align 10h
.text:0000000000000090
.text:0000000000000090 ; =============== S U B R O U T I N E =======================================
.text:0000000000000090
.text:0000000000000090
.text:0000000000000090		       public cfint_asc
.text:0000000000000090 cfint_asc       proc near	       ; DATA XREF: .eh_frame:00000000000004E0o
.text:0000000000000090		       mov     eax, [rdi]
.text:0000000000000092		       cmp     eax, [rsi]
.text:0000000000000094		       setnle  al
.text:0000000000000097		       movzx   eax, al
.text:000000000000009A		       retn
.text:000000000000009A cfint_asc       endp
.text:000000000000009A
.text:000000000000009A ; ---------------------------------------------------------------------------
.text:000000000000009B		       align 20h
.text:00000000000000A0
.text:00000000000000A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000000A0
.text:00000000000000A0
.text:00000000000000A0		       public cfint_des
.text:00000000000000A0 cfint_des       proc near	       ; DATA XREF: .eh_frame:00000000000004F8o
.text:00000000000000A0		       mov     eax, [rdi]
.text:00000000000000A2		       cmp     eax, [rsi]
.text:00000000000000A4		       setl    al
.text:00000000000000A7		       movzx   eax, al
.text:00000000000000AA		       retn
.text:00000000000000AA cfint_des       endp
.text:00000000000000AA
.text:00000000000000AA ; ---------------------------------------------------------------------------
.text:00000000000000AB		       align 10h
.text:00000000000000B0
.text:00000000000000B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000000B0
.text:00000000000000B0
.text:00000000000000B0		       public printint
.text:00000000000000B0 printint	       proc near	       ; DATA XREF: main+8Fo
.text:00000000000000B0					       ; main+D6o ...
.text:00000000000000B0		       mov     esi, [rdi]
.text:00000000000000B2		       xor     eax, eax
.text:00000000000000B4		       mov     edi, offset byte_3E5
.text:00000000000000B9		       jmp     printf
.text:00000000000000B9 printint	       endp
.text:00000000000000B9
.text:00000000000000B9 ; ---------------------------------------------------------------------------
.text:00000000000000BE		       align 20h
.text:00000000000000C0
.text:00000000000000C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000000C0
.text:00000000000000C0
.text:00000000000000C0 int_list_reproduce proc near	       ; CODE XREF: main+C7p
.text:00000000000000C0					       ; main+12Bp
.text:00000000000000C0					       ; DATA XREF: ...
.text:00000000000000C0		       push    r15
.text:00000000000000C2		       mov     eax, 7
.text:00000000000000C7		       mov     r15, rsi
.text:00000000000000CA		       push    r14
.text:00000000000000CC		       mov     r14, rdx
.text:00000000000000CF		       push    r13
.text:00000000000000D1		       push    r12
.text:00000000000000D3		       mov     r12, rdi
.text:00000000000000D6		       push    rbp
.text:00000000000000D7		       push    rbx
.text:00000000000000D8		       sub     rsp, 8
.text:00000000000000DC		       cmp     rdi, rsi
.text:00000000000000DF		       jz      loc_1CB
.text:00000000000000E5		       test    ecx, ecx
.text:00000000000000E7		       jnz     loc_1DA
.text:00000000000000ED		       mov     rbp, [rsi+8]
.text:00000000000000F1
.text:00000000000000F1 loc_F1:				       ; CODE XREF: int_list_reproduce+11Ej
.text:00000000000000F1		       test    rbp, rbp
.text:00000000000000F4		       jz      loc_19B
.text:00000000000000FA		       mov     edi, 10h	       ; size
.text:00000000000000FF		       call    malloc
.text:0000000000000104		       test    r14, r14
.text:0000000000000107		       mov     rbx, rax
.text:000000000000010A		       mov     r13, rax
.text:000000000000010D		       mov     [r12+8],	rax
.text:0000000000000112		       jz      loc_1E3
.text:0000000000000118		       mov     rsi, rbp
.text:000000000000011B		       mov     rdi, rax
.text:000000000000011E		       call    r14
.text:0000000000000121		       test    eax, eax
.text:0000000000000123		       jnz     loc_1CB
.text:0000000000000129
.text:0000000000000129 loc_129:				       ; CODE XREF: int_list_reproduce+128j
.text:0000000000000129					       ; DATA XREF: .eh_frame:000000000000052Co
.text:0000000000000129		       cmp     qword ptr [rbp+8], 0
.text:000000000000012E		       mov     qword ptr [r12],	1
.text:0000000000000136		       jnz     short loc_161
.text:0000000000000138		       jmp     short loc_18C
.text:0000000000000138 ; ---------------------------------------------------------------------------
.text:000000000000013A		       align 20h
.text:0000000000000140
.text:0000000000000140 loc_140:				       ; CODE XREF: int_list_reproduce+B9j
.text:0000000000000140		       mov     rsi, rbp
.text:0000000000000143		       mov     rdi, rax
.text:0000000000000146		       call    r14
.text:0000000000000149		       test    eax, eax
.text:000000000000014B		       nop     dword ptr [rax+rax+00h]
.text:0000000000000150		       jnz     short loc_1CB
.text:0000000000000152		       add     qword ptr [r12],	1
.text:0000000000000157		       cmp     qword ptr [rbp+8], 0
.text:000000000000015C		       jz      short loc_18C
.text:000000000000015E
.text:000000000000015E loc_15E:				       ; CODE XREF: int_list_reproduce+CAj
.text:000000000000015E		       mov     r13, rbx
.text:0000000000000161
.text:0000000000000161 loc_161:				       ; CODE XREF: int_list_reproduce+76j
.text:0000000000000161		       mov     edi, 10h	       ; size
.text:0000000000000166		       call    malloc
.text:000000000000016B		       test    r14, r14
.text:000000000000016E		       mov     [r13+8],	rax
.text:0000000000000172		       mov     rbx, rax
.text:0000000000000175		       mov     rbp, [rbp+8]
.text:0000000000000179		       jnz     short loc_140
.text:000000000000017B		       add     qword ptr [r12],	1
.text:0000000000000180		       cmp     qword ptr [rbp+8], 0
.text:0000000000000185		       mov     eax, [rbp+0]
.text:0000000000000188		       mov     [rbx], eax
.text:000000000000018A		       jnz     short loc_15E
.text:000000000000018C
.text:000000000000018C loc_18C:				       ; CODE XREF: int_list_reproduce+78j
.text:000000000000018C					       ; int_list_reproduce+9Cj
.text:000000000000018C					       ; DATA XREF: ...
.text:000000000000018C		       mov     qword ptr [rbx+8], 0
.text:0000000000000194		       mov     [r12+18h], rbx
.text:0000000000000199		       jmp     short loc_1AD
.text:000000000000019B ; ---------------------------------------------------------------------------
.text:000000000000019B
.text:000000000000019B loc_19B:				       ; CODE XREF: int_list_reproduce+34j
.text:000000000000019B		       mov     qword ptr [r12+8], 0
.text:00000000000001A4		       mov     qword ptr [r12+18h], 0
.text:00000000000001AD
.text:00000000000001AD loc_1AD:				       ; CODE XREF: int_list_reproduce+D9j
.text:00000000000001AD		       mov     rax, [r12+8]
.text:00000000000001B2		       mov     [r12+10h], rax
.text:00000000000001B7		       mov     rax, [r15+20h]
.text:00000000000001BB		       mov     [r12+20h], rax
.text:00000000000001C0		       mov     rax, [r15+28h]
.text:00000000000001C4		       mov     [r12+28h], rax
.text:00000000000001C9		       xor     eax, eax
.text:00000000000001CB
.text:00000000000001CB loc_1CB:				       ; CODE XREF: int_list_reproduce+1Fj
.text:00000000000001CB					       ; int_list_reproduce+63j ...
.text:00000000000001CB		       add     rsp, 8
.text:00000000000001CF		       pop     rbx
.text:00000000000001D0		       pop     rbp
.text:00000000000001D1		       pop     r12
.text:00000000000001D3		       pop     r13
.text:00000000000001D5		       pop     r14
.text:00000000000001D7		       pop     r15
.text:00000000000001D9		       retn
.text:00000000000001DA ; ---------------------------------------------------------------------------
.text:00000000000001DA
.text:00000000000001DA loc_1DA:				       ; CODE XREF: int_list_reproduce+27j
.text:00000000000001DA		       mov     rbp, [rsi+10h]
.text:00000000000001DE		       jmp     loc_F1
.text:00000000000001E3 ; ---------------------------------------------------------------------------
.text:00000000000001E3
.text:00000000000001E3 loc_1E3:				       ; CODE XREF: int_list_reproduce+52j
.text:00000000000001E3		       mov     eax, [rbp+0]
.text:00000000000001E6		       mov     [rbx], eax
.text:00000000000001E8		       jmp     loc_129
.text:00000000000001E8 int_list_reproduce endp
.text:00000000000001E8
.text:00000000000001E8 ; ---------------------------------------------------------------------------
.text:00000000000001ED		       align 10h
.text:00000000000001F0
.text:00000000000001F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000001F0
.text:00000000000001F0
.text:00000000000001F0 int_list_clean  proc near	       ; CODE XREF: main+16Bp
.text:00000000000001F0					       ; main+173p
.text:00000000000001F0					       ; DATA XREF: ...
.text:00000000000001F0		       push    rbp
.text:00000000000001F1		       push    rbx
.text:00000000000001F2		       mov     rbx, rdi
.text:00000000000001F5		       sub     rsp, 8
.text:00000000000001F9		       nop     dword ptr [rax+00000000h]
.text:0000000000000200
.text:0000000000000200 loc_200:				       ; CODE XREF: int_list_clean+41j
.text:0000000000000200		       cmp     qword ptr [rbx],	0
.text:0000000000000204		       jz      short loc_241
.text:0000000000000206
.text:0000000000000206 loc_206:				       ; CODE XREF: int_list_clean+4Fj
.text:0000000000000206		       mov     rbp, [rbx+8]
.text:000000000000020A		       sub     qword ptr [rbx],	1
.text:000000000000020E		       mov     rax, [rbp+8]
.text:0000000000000212		       mov     [rbx+8],	rax
.text:0000000000000216		       mov     rax, [rbx+28h]
.text:000000000000021A		       test    rax, rax
.text:000000000000021D		       jz      short loc_224
.text:000000000000021F		       mov     rdi, rbp
.text:0000000000000222		       call    rax
.text:0000000000000224
.text:0000000000000224 loc_224:				       ; CODE XREF: int_list_clean+2Dj
.text:0000000000000224		       mov     rdi, rbp	       ; ptr
.text:0000000000000227		       call    free
.text:000000000000022C		       cmp     qword ptr [rbx+8], 0
.text:0000000000000231		       jnz     short loc_200
.text:0000000000000233		       cmp     qword ptr [rbx],	0
.text:0000000000000237		       mov     qword ptr [rbx+18h], 0
.text:000000000000023F		       jnz     short loc_206
.text:0000000000000241
.text:0000000000000241 loc_241:				       ; CODE XREF: int_list_clean+14j
.text:0000000000000241		       add     rsp, 8
.text:0000000000000245		       pop     rbx
.text:0000000000000246		       pop     rbp
.text:0000000000000247		       retn
.text:0000000000000247 int_list_clean  endp
.text:0000000000000247
.text:0000000000000247 ; ---------------------------------------------------------------------------
.text:0000000000000248		       align 10h
.text:0000000000000250
.text:0000000000000250 ; =============== S U B R O U T I N E =======================================
.text:0000000000000250
.text:0000000000000250
.text:0000000000000250		       public main
.text:0000000000000250 main	       proc near	       ; DATA XREF: .eh_frame:0000000000000580o
.text:0000000000000250
.text:0000000000000250 var_58	       = qword ptr -58h
.text:0000000000000250 var_50	       = qword ptr -50h
.text:0000000000000250 var_48	       = qword ptr -48h
.text:0000000000000250 var_40	       = qword ptr -40h
.text:0000000000000250 var_1C	       = dword ptr -1Ch
.text:0000000000000250
.text:0000000000000250		       push    r12
.text:0000000000000252		       push    rbp
.text:0000000000000253		       push    rbx
.text:0000000000000254		       xor     ebx, ebx
.text:0000000000000256		       sub     rsp, 70h
.text:000000000000025A		       lea     r12, [rsp+88h+var_58]
.text:000000000000025F		       mov     rdi, r12
.text:0000000000000262		       call    int_list_init
.text:0000000000000267		       mov     rdi, rsp
.text:000000000000026A		       call    int_list_init
.text:000000000000026F		       nop
.text:0000000000000270
.text:0000000000000270 loc_270:				       ; CODE XREF: main+83j
.text:0000000000000270		       call    rand
.text:0000000000000275		       cvtsi2ss	xmm0, eax
.text:0000000000000279		       mov     edi, 10h	       ; size
.text:000000000000027E		       mulss   xmm0, cs:_LC1
.text:0000000000000286		       cvtss2sd	xmm0, xmm0
.text:000000000000028A		       mulsd   xmm0, cs:_LC2
.text:0000000000000292		       cvttsd2si eax, xmm0
.text:0000000000000296		       mov     [rsp+88h+var_1C], eax
.text:000000000000029A		       call    malloc
.text:000000000000029F		       test    rax, rax
.text:00000000000002A2		       mov     rdx, rax
.text:00000000000002A5		       jz      short loc_2CD
.text:00000000000002A7		       mov     eax, [rsp+88h+var_1C]
.text:00000000000002AB		       mov     [rdx], eax
.text:00000000000002AD		       mov     rax, [rsp+88h+var_50]
.text:00000000000002B2		       add     [rsp+88h+var_58], 1
.text:00000000000002B8		       mov     [rdx+8],	rax
.text:00000000000002BC		       cmp     [rsp+88h+var_40], 0
.text:00000000000002C2		       mov     [rsp+88h+var_50], rdx
.text:00000000000002C7		       jz      loc_3D3
.text:00000000000002CD
.text:00000000000002CD loc_2CD:				       ; CODE XREF: main+55j
.text:00000000000002CD					       ; main+188j
.text:00000000000002CD		       add     ebx, 1
.text:00000000000002D0		       cmp     ebx, 7
.text:00000000000002D3		       jnz     short loc_270
.text:00000000000002D5		       mov     edi, offset s   ; "Initial list:"
.text:00000000000002DA		       call    puts
.text:00000000000002DF		       mov     esi, offset printint
.text:00000000000002E4		       mov     rdi, r12
.text:00000000000002E7		       call    int_list_mapcar
.text:00000000000002EC		       mov     rdi, r12
.text:00000000000002EF		       call    int_list_length
.text:00000000000002F4		       mov     edi, offset format ; "length = %ld\n"
.text:00000000000002F9		       mov     rsi, rax
.text:00000000000002FC		       xor     eax, eax
.text:00000000000002FE		       call    printf
.text:0000000000000303		       mov     edi, 0Ah	       ; c
.text:0000000000000308		       call    putchar
.text:000000000000030D		       xor     ecx, ecx
.text:000000000000030F		       xor     edx, edx
.text:0000000000000311		       mov     rsi, r12
.text:0000000000000314		       mov     rdi, rsp
.text:0000000000000317		       call    int_list_reproduce
.text:000000000000031C		       mov     edi, offset aADuplicateList ; "A	duplicate list:"
.text:0000000000000321		       call    puts
.text:0000000000000326		       mov     esi, offset printint
.text:000000000000032B		       mov     rdi, rsp
.text:000000000000032E		       call    int_list_mapcar
.text:0000000000000333		       mov     rdi, rsp
.text:0000000000000336		       call    int_list_length
.text:000000000000033B		       mov     edi, offset format ; "length = %ld\n"
.text:0000000000000340		       mov     rsi, rax
.text:0000000000000343		       xor     eax, eax
.text:0000000000000345		       call    printf
.text:000000000000034A		       mov     edi, 0Ah	       ; c
.text:000000000000034F		       call    putchar
.text:0000000000000354		       mov     rax, [rsp+88h+var_50]
.text:0000000000000359		       mov     rdi, r12
.text:000000000000035C		       mov     [rsp+88h+var_48], rax
.text:0000000000000361		       call    int_list_move_point_next
.text:0000000000000366		       mov     rdi, r12
.text:0000000000000369		       call    int_list_move_point_next
.text:000000000000036E		       mov     ecx, 1
.text:0000000000000373		       xor     edx, edx
.text:0000000000000375		       mov     rsi, r12
.text:0000000000000378		       mov     rdi, rsp
.text:000000000000037B		       call    int_list_reproduce
.text:0000000000000380		       mov     edi, offset aAnotherDuplica ; "Another duplicate	list made from the 2n"...
.text:0000000000000385		       call    puts
.text:000000000000038A		       mov     esi, offset printint
.text:000000000000038F		       mov     rdi, rsp
.text:0000000000000392		       call    int_list_mapcar
.text:0000000000000397		       mov     rdi, rsp
.text:000000000000039A		       call    int_list_length
.text:000000000000039F		       mov     edi, offset format ; "length = %ld\n"
.text:00000000000003A4		       mov     rsi, rax
.text:00000000000003A7		       xor     eax, eax
.text:00000000000003A9		       call    printf
.text:00000000000003AE		       mov     edi, 0Ah	       ; c
.text:00000000000003B3		       call    putchar
.text:00000000000003B8		       mov     rdi, r12
.text:00000000000003BB		       call    int_list_clean
.text:00000000000003C0		       mov     rdi, rsp
.text:00000000000003C3		       call    int_list_clean
.text:00000000000003C8		       add     rsp, 70h
.text:00000000000003CC		       xor     eax, eax
.text:00000000000003CE		       pop     rbx
.text:00000000000003CF		       pop     rbp
.text:00000000000003D0		       pop     r12
.text:00000000000003D2		       retn
.text:00000000000003D3 ; ---------------------------------------------------------------------------
.text:00000000000003D3
.text:00000000000003D3 loc_3D3:				       ; CODE XREF: main+77j
.text:00000000000003D3		       mov     [rsp+88h+var_40], rdx
.text:00000000000003D8		       jmp     loc_2CD
.text:00000000000003D8 main	       endp
.text:00000000000003D8
.text:00000000000003D8 _text	       ends
.text:00000000000003D8
.data:00000000000003E0 ; ===========================================================================
.data:00000000000003E0
.data:00000000000003E0 ; Segment type: Zero-length
.data:00000000000003E0 ; Segment permissions: Read/Write
.data:00000000000003E0 _data	       segment dword public 'DATA' use64
.data:00000000000003E0 _data	       ends
.data:00000000000003E0
.bss:00000000000003E4 ;	===========================================================================
.bss:00000000000003E4
.bss:00000000000003E4 ;	Segment	type: Zero-length
.bss:00000000000003E4 ;	Segment	permissions: Read/Write
.bss:00000000000003E4 _bss	      segment dword public 'BSS' use64
.bss:00000000000003E4 _bss	      ends
.bss:00000000000003E4
.rodata.str1.1:00000000000003E5	; ===========================================================================
.rodata.str1.1:00000000000003E5
.rodata.str1.1:00000000000003E5	; Segment type:	Pure data
.rodata.str1.1:00000000000003E5	; Segment permissions: Read
.rodata.str1.1:00000000000003E5	_rodata_str1_1	segment	byte public 'CONST' use64
.rodata.str1.1:00000000000003E5			assume cs:_rodata_str1_1
.rodata.str1.1:00000000000003E5			;org 3E5h
.rodata.str1.1:00000000000003E5	byte_3E5	db 25h,	64h, 0Ah	; DATA XREF: printint+4o
.rodata.str1.1:00000000000003E8			db 0
.rodata.str1.1:00000000000003E9	; char s[]
.rodata.str1.1:00000000000003E9	s		db 'Initial list:',0    ; DATA XREF: main+85o
.rodata.str1.1:00000000000003F7	; char format[]
.rodata.str1.1:00000000000003F7	format		db 'length = %ld',0Ah,0 ; DATA XREF: main+A4o
.rodata.str1.1:00000000000003F7						; main+EBo ...
.rodata.str1.1:0000000000000405	; char aADuplicateList[]
.rodata.str1.1:0000000000000405	aADuplicateList	db 'A duplicate list:',0
.rodata.str1.1:0000000000000405						; DATA XREF: main+CCo
.rodata.str1.1:0000000000000405	_rodata_str1_1	ends
.rodata.str1.1:0000000000000405
.rodata.str1.8:0000000000000418	; ===========================================================================
.rodata.str1.8:0000000000000418
.rodata.str1.8:0000000000000418	; Segment type:	Pure data
.rodata.str1.8:0000000000000418	; Segment permissions: Read
.rodata.str1.8:0000000000000418	; Segment alignment 'qword' can not be represented in assembly
.rodata.str1.8:0000000000000418	_rodata_str1_8	segment	para public 'CONST' use64
.rodata.str1.8:0000000000000418			assume cs:_rodata_str1_8
.rodata.str1.8:0000000000000418			;org 418h
.rodata.str1.8:0000000000000418	; char aAnotherDuplica[]
.rodata.str1.8:0000000000000418	aAnotherDuplica	db 'Another duplicate list made from the 2nd element:',0
.rodata.str1.8:0000000000000418						; DATA XREF: main+130o
.rodata.str1.8:0000000000000418	_rodata_str1_8	ends
.rodata.str1.8:0000000000000418
.rodata.cst4:000000000000044C ;	===========================================================================
.rodata.cst4:000000000000044C
.rodata.cst4:000000000000044C ;	Segment	type: Pure data
.rodata.cst4:000000000000044C ;	Segment	permissions: Read
.rodata.cst4:000000000000044C _rodata_cst4    segment dword public 'CONST' use64
.rodata.cst4:000000000000044C		      assume cs:_rodata_cst4
.rodata.cst4:000000000000044C		      ;org 44Ch
.rodata.cst4:000000000000044C _LC1	      dd 30000000h	      ;	DATA XREF: main+2Er
.rodata.cst4:000000000000044C _rodata_cst4    ends
.rodata.cst4:000000000000044C
.rodata.cst8:0000000000000450 ;	===========================================================================
.rodata.cst8:0000000000000450
.rodata.cst8:0000000000000450 ;	Segment	type: Pure data
.rodata.cst8:0000000000000450 ;	Segment	permissions: Read
.rodata.cst8:0000000000000450 ;	Segment	alignment 'qword' can not be represented in assembly
.rodata.cst8:0000000000000450 _rodata_cst8    segment para public 'CONST' use64
.rodata.cst8:0000000000000450		      assume cs:_rodata_cst8
.rodata.cst8:0000000000000450		      ;org 450h
.rodata.cst8:0000000000000450 _LC2	      dq 4024000000000000h    ;	DATA XREF: main+3Ar
.rodata.cst8:0000000000000450 _rodata_cst8    ends
.rodata.cst8:0000000000000450
.eh_frame:0000000000000458 ; ===========================================================================
.eh_frame:0000000000000458
.eh_frame:0000000000000458 ; Segment type: Pure	data
.eh_frame:0000000000000458 ; Segment permissions: Read
.eh_frame:0000000000000458 ; Segment alignment 'qword' can not be represented in assembly
.eh_frame:0000000000000458 _eh_frame	   segment para	public 'CONST' use64
.eh_frame:0000000000000458		   assume cs:_eh_frame
.eh_frame:0000000000000458		   ;org	458h
.eh_frame:0000000000000458		   dq 14h, 110780100527A01h, 19008070C03h, 1C00000014h
.eh_frame:0000000000000478		   dd offset int_list_init
.eh_frame:000000000000047C		   dd offset int_list_length
.eh_frame:0000000000000480		   dq 0
.eh_frame:0000000000000488		   dq 3400000014h
.eh_frame:0000000000000490		   dd offset int_list_length
.eh_frame:0000000000000494		   dd 4
.eh_frame:0000000000000498		   align 20h
.eh_frame:00000000000004A0		   dq 4C00000014h
.eh_frame:00000000000004A8		   dd offset int_list_move_point_next
.eh_frame:00000000000004AC		   dd 13h
.eh_frame:00000000000004B0		   dq 0
.eh_frame:00000000000004B8		   dq 640000001Ch
.eh_frame:00000000000004C0		   dd offset int_list_mapcar
.eh_frame:00000000000004C4		   dd offset loc_27
.eh_frame:00000000000004C8		   dq 0E440286100E4100h, 383200E4418h, 8400000014h
.eh_frame:00000000000004E0		   dd offset cfint_asc
.eh_frame:00000000000004E4		   dd 0Bh
.eh_frame:00000000000004E8		   align 10h
.eh_frame:00000000000004F0		   dq 9C00000014h
.eh_frame:00000000000004F8		   dd offset cfint_des
.eh_frame:00000000000004FC		   dd 0Bh
.eh_frame:0000000000000500		   dq 0
.eh_frame:0000000000000508		   dq 0B400000014h
.eh_frame:0000000000000510		   dd offset printint
.eh_frame:0000000000000514		   dd 0Eh
.eh_frame:0000000000000518		   align 20h
.eh_frame:0000000000000520		   dq 0CC00000034h
.eh_frame:0000000000000528		   dd offset int_list_reproduce
.eh_frame:000000000000052C		   dd offset loc_129+4
.eh_frame:0000000000000530		   dq 0E4A028F100E4200h, 0E42200E45038E18h, 300E44048D058C28h
.eh_frame:0000000000000530		   dq 783400E44380E41h,	686h, 1040000001Ch
.eh_frame:0000000000000560		   dd offset int_list_clean
.eh_frame:0000000000000564		   dd offset unk_58
.eh_frame:0000000000000568		   dq 83180E41100E4100h, 200E47028603h,	12400000024h
.eh_frame:0000000000000580		   dd offset main
.eh_frame:0000000000000584		   dd offset loc_18C+1
.eh_frame:0000000000000588		   dq 41180E41100E4200h, 28C03860483200Eh, 1900E46h
.eh_frame:0000000000000588 _eh_frame	   ends
.eh_frame:0000000000000588
extern:00000000000005A0	; ===========================================================================
extern:00000000000005A0
extern:00000000000005A0	; Segment type:	Externs
extern:00000000000005A0	; extern
extern:00000000000005A0	; int printf(const char	*format, ...)
extern:00000000000005A0			extrn printf:near	; CODE XREF: printint+9j
extern:00000000000005A0						; main+AEp ...
extern:00000000000005A4	; void *malloc(size_t size)
extern:00000000000005A4			extrn malloc:near	; CODE XREF: int_list_reproduce+3Fp
extern:00000000000005A4						; int_list_reproduce+A6p ...
extern:00000000000005A8	; void free(void *ptr)
extern:00000000000005A8			extrn free:near		; CODE XREF: int_list_clean+37p
extern:00000000000005AC	; int rand(void)
extern:00000000000005AC			extrn rand:near		; CODE XREF: main:loc_270p
extern:00000000000005B0	; int puts(const char *s)
extern:00000000000005B0			extrn puts:near		; CODE XREF: main+8Ap
extern:00000000000005B0						; main+D1p ...
extern:00000000000005B4	; int putchar(int c)
extern:00000000000005B4			extrn putchar:near	; CODE XREF: main+B8p
extern:00000000000005B4						; main+FFp ...
extern:00000000000005B4
extern:00000000000005B4
extern:00000000000005B4			end
