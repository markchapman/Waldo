.data:00000000 ;
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ; |   This file has been	generated by The Interactive Disassembler (IDA)	   |
.data:00000000 ; |	  Copyright (c)	2009 by	Hex-Rays, <support@hex-rays.com>	   |
.data:00000000 ; |			License	info: 48-313D-7374-F1			   |
.data:00000000 ; |   Aditya Thakur, University of Wisconsin/Computer Sciences Department   |
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ;
.data:00000000 ; Input MD5   : 5E7723E98657DE1D8E78146184A33DF6
.data:00000000
.data:00000000 ; File Name   : C:\aditya\work\waldo\tests\bst-insert.obj
.data:00000000 ; Format	     : COFF (X386MAGIC)
.data:00000000 ; includelib "LIBCMT"
.data:00000000 ; includelib "OLDNAMES""
.data:00000000
.data:00000000		       .686p
.data:00000000		       .mmx
.data:00000000		       .model flat
.data:00000000 .intel_syntax noprefix
.data:00000000
.data:00000000 ; ===========================================================================
.data:00000000
.data:00000000 ; Segment type: Pure data
.data:00000000 ; Segment permissions: Read/Write
.data:00000000 _data	       segment dword public 'DATA' use32
.data:00000000		       assume cs:_data
.data:00000000 ; char $SG3536[]
.data:00000000 $SG3536	       db 'Out of space!!!',0  ; DATA XREF: _Insert+1Co
.data:00000010 ; char $SG3537[]
.data:00000010 $SG3537	       db '%s',0Ah,0           ; DATA XREF: _Insert+21o
.data:00000010 _data	       ends
.data:00000010
.text:00000014 ; ===========================================================================
.text:00000014
.text:00000014 ; Segment type: Pure code
.text:00000014 ; Segment permissions: Read/Execute
.text:00000014 _text	       segment para public 'CODE' use32
.text:00000014		       assume cs:_text
.text:00000014		       ;org 14h
.text:00000014		       assume es:nothing, ss:nothing, ds:_data,	fs:nothing, gs:nothing
.text:00000014
.text:00000014 ; =============== S U B R O U T I N E =======================================
.text:00000014
.text:00000014 ; Attributes: bp-based frame
.text:00000014
.text:00000014		       public _Insert
.text:00000014 _Insert	       proc near	       ; CODE XREF: _Insert+73p
.text:00000014					       ; _Insert+98p
.text:00000014
.text:00000014 arg_0	       = dword ptr  8
.text:00000014 arg_4	       = dword ptr  0Ch
.text:00000014
.text:00000014		       push    ebp
.text:00000015		       mov     ebp, esp
.text:00000017		       cmp     [ebp+arg_4], 0
.text:0000001B		       jnz     short loc_72
.text:0000001D		       push    0Ch	       ; size_t
.text:0000001F		       call    _malloc
.text:00000024		       add     esp, 4
.text:00000027		       mov     [ebp+arg_4], eax
.text:0000002A		       cmp     [ebp+arg_4], 0
.text:0000002E		       jnz     short loc_54
.text:00000030		       push    offset $SG3536  ; "Out of space!!!"
.text:00000035		       push    offset $SG3537  ; "%s\n"
.text:0000003A		       call    ___iob_func
.text:0000003F		       add     eax, 40h	; '@'
.text:00000042		       push    eax	       ; FILE *
.text:00000043		       call    _fprintf
.text:00000048		       add     esp, 0Ch
.text:0000004B		       push    1	       ; int
.text:0000004D		       call    _exit
.text:00000052 ; ---------------------------------------------------------------------------
.text:00000052		       jmp     short loc_70
.text:00000054 ; ---------------------------------------------------------------------------
.text:00000054
.text:00000054 loc_54:				       ; CODE XREF: _Insert+1Aj
.text:00000054		       mov     eax, [ebp+arg_4]
.text:00000057		       mov     ecx, [ebp+arg_0]
.text:0000005A		       mov     [eax], ecx
.text:0000005C		       mov     edx, [ebp+arg_4]
.text:0000005F		       mov     dword ptr [edx+8], 0
.text:00000066		       mov     eax, [ebp+arg_4]
.text:00000069		       mov     dword ptr [eax+4], 0
.text:00000070
.text:00000070 loc_70:				       ; CODE XREF: _Insert+3Ej
.text:00000070		       jmp     short loc_BA
.text:00000072 ; ---------------------------------------------------------------------------
.text:00000072
.text:00000072 loc_72:				       ; CODE XREF: _Insert+7j
.text:00000072		       mov     ecx, [ebp+arg_4]
.text:00000075		       mov     edx, [ebp+arg_0]
.text:00000078		       cmp     edx, [ecx]
.text:0000007A		       jge     short loc_97
.text:0000007C		       mov     eax, [ebp+arg_4]
.text:0000007F		       mov     ecx, [eax+4]
.text:00000082		       push    ecx
.text:00000083		       mov     edx, [ebp+arg_0]
.text:00000086		       push    edx
.text:00000087		       call    _Insert
.text:0000008C		       add     esp, 8
.text:0000008F		       mov     ecx, [ebp+arg_4]
.text:00000092		       mov     [ecx+4],	eax
.text:00000095		       jmp     short loc_BA
.text:00000097 ; ---------------------------------------------------------------------------
.text:00000097
.text:00000097 loc_97:				       ; CODE XREF: _Insert+66j
.text:00000097		       mov     edx, [ebp+arg_4]
.text:0000009A		       mov     eax, [ebp+arg_0]
.text:0000009D		       cmp     eax, [edx]
.text:0000009F		       jle     short loc_BA
.text:000000A1		       mov     ecx, [ebp+arg_4]
.text:000000A4		       mov     edx, [ecx+8]
.text:000000A7		       push    edx
.text:000000A8		       mov     eax, [ebp+arg_0]
.text:000000AB		       push    eax
.text:000000AC		       call    _Insert
.text:000000B1		       add     esp, 8
.text:000000B4		       mov     ecx, [ebp+arg_4]
.text:000000B7		       mov     [ecx+8],	eax
.text:000000BA
.text:000000BA loc_BA:				       ; CODE XREF: _Insert:loc_70j
.text:000000BA					       ; _Insert+81j ...
.text:000000BA		       mov     eax, [ebp+arg_4]
.text:000000BD		       pop     ebp
.text:000000BE		       retn
.text:000000BE _Insert	       endp
.text:000000BE
.text:000000BE _text	       ends
.text:000000BE
UNDEF:000000C0 ; ===========================================================================
UNDEF:000000C0
UNDEF:000000C0 ; Segment type: Externs
UNDEF:000000C0 ; UNDEF
UNDEF:000000C0 ; void __cdecl exit(int)
UNDEF:000000C0		       extrn _exit:near	       ; CODE XREF: _Insert+39p
UNDEF:000000C4 ; int fprintf(FILE *, const char	*, ...)
UNDEF:000000C4		       extrn _fprintf:near     ; CODE XREF: _Insert+2Fp
UNDEF:000000C8		       extrn ___iob_func:near  ; CODE XREF: _Insert+26p
UNDEF:000000CC ; void *__cdecl malloc(size_t)
UNDEF:000000CC		       extrn _malloc:near      ; CODE XREF: _Insert+Bp
UNDEF:000000CC
UNDEF:000000CC
UNDEF:000000CC		       end
