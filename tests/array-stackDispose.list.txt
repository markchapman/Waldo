.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been	generated by The Interactive Disassembler (IDA)	   |
.text:00000000 ; |	  Copyright (c)	2009 by	Hex-Rays, <support@hex-rays.com>	   |
.text:00000000 ; |			License	info: 48-313D-7374-F1			   |
.text:00000000 ; |   Aditya Thakur, University of Wisconsin/Computer Sciences Department   |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 8DAF3CFA48423970ECF73BF5973DFDAC
.text:00000000
.text:00000000 ; File Name   : C:\aditya\work\waldo\tests\array-stackDispose.obj
.text:00000000 ; Format	     : COFF (X386MAGIC)
.text:00000000 ; includelib "LIBCMT"
.text:00000000 ; includelib "OLDNAMES""
.text:00000000
.text:00000000		       .686p
.text:00000000		       .mmx
.text:00000000		       .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text	       segment para public 'CODE' use32
.text:00000000		       assume cs:_text
.text:00000000		       assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; int __cdecl DisposeStack(void *Memory)
.text:00000000		       public _DisposeStack
.text:00000000 _DisposeStack   proc near
.text:00000000
.text:00000000 Memory	       = dword ptr  8
.text:00000000
.text:00000000		       push    ebp
.text:00000001		       mov     ebp, esp
.text:00000003		       cmp     [ebp+Memory], 0
.text:00000007		       jz      short loc_24
.text:00000009		       mov     eax, [ebp+Memory]
.text:0000000C		       mov     ecx, [eax+8]
.text:0000000F		       push    ecx	       ; Memory
.text:00000010		       call    _free
.text:00000015		       add     esp, 4
.text:00000018		       mov     edx, [ebp+Memory]
.text:0000001B		       push    edx	       ; Memory
.text:0000001C		       call    _free
.text:00000021		       add     esp, 4
.text:00000024
.text:00000024 loc_24:				       ; CODE XREF: _DisposeStack+7j
.text:00000024		       pop     ebp
.text:00000025		       retn
.text:00000025 _DisposeStack   endp
.text:00000025
.text:00000025 _text	       ends
.text:00000025
UNDEF:00000030 ; ===========================================================================
UNDEF:00000030
UNDEF:00000030 ; Segment type: Externs
UNDEF:00000030 ; UNDEF
UNDEF:00000030 ; void __cdecl free(void	*Memory)
UNDEF:00000030		       extrn _free:near	       ; CODE XREF: _DisposeStack+10p
UNDEF:00000030					       ; _DisposeStack+1Cp
UNDEF:00000030
UNDEF:00000030
UNDEF:00000030		       end
